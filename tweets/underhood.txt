ага, слышал про эстонские попытки если уж в эстонии не доверяют, че уж у нас то ожидать =). ничоси не знал, учтем на самом деле у нас есть типа чекап системы, когда юзер открывает приложение мы в нем проверяем весь процесс голосования на фейковых данных, чтобы если что сразу предупредить юзера что у него здесь чото не работает, и лучше взять другое устройство. извини, надо было сразу тебя спросить. никаких, все верно. да, как то так ну, чтож, наблюдатели и явка, только так. если что -- все обсуждения проходят в открытую, не в кабинетах приглашаются эксперты, спикеры за этим можно наблюдать в прямых трансляциях цика. москва ведь тоже не сразу строилась мы не остановились на системе как конечной, постоянно работаем над этим есть в бэклоге несколько важных и нужных фичей работаем над открытостью и доверием с доверием сложно, я чессговоря даже не мог представить каково с этой стороны. для того чтобы реализовать всю эту историю нужен нехилый сговор между циком, епгу, минцифры и бог знает каких еще структур намного проще вбрасывать на участках =). ну окей учетка должна быть подтвержденная, у нее должны быть паспортные данные, соответствующие человеку, который подал заявление на участие в дэг, ему дадут соответствующие его реальному участку бюллетени. но в одном я с вами согласен мне пока тоже не совсем ясно зачем нужна прозрачная рабочая система =) тем не менее, в наши урны учителя не вбрасывают, и у меня есть надежда что люди, которым лень ходить на участок начнуют провлять свою позицию хотя бы браузером. текущая система выживает прежде всего за счет пропаганды, которая гонит электорат на выборы, а остальным говорит: не надо ходить, за вас уже все решили у нас с вами немного другое окружение, и кажется что поддержки текущей власти нет, но, к сожалению это не так. а как фиктивная учетка есиа даст вам активное избирательное право?. я думаю что эта ситуация будет меняться, и блокчейн по заверешнию голосования будет выкладываться полностью но опять есть опасность того что найдет умник который я голосовал туда, а посчиталось в другую сторону. опять тонкий лед публичный это как? все видят лог? мы выкладывали лог в паблик в том году пока понятно что никому не понятно что с этим делать. в этом случае да, пиши пропало, ты не сможешь опустить свой бюллетень в урну. в нашем случае голоса пишутся в блокчейн и считаются математикой и опять таки - наблюдатели которые просмотрят исходники, и убедятся в том что в протокол вписываются корректные данные от результата расшифровки. способы борьбы с фальсификацией всем понятны: наблюдатели, и ваши ноги, которыми вы несете свою жопу на участок в день голосования. когда учителя вбрасывают бюллетени это продиктовано 1) их позицией; 2) позицией губернаторов, которые спускают вниз свой kpi по доверию власти. аккаунт конечно не про политику, но раз уж заговорили о выборах. понимаю скептизим, но у меня есть другая теория. цель - не лишать человека активного избирательного права пока у него отвалились интернеты безопасность - мы зашифровываем пакет, без аутентификации расшифровывать его в рабочий ключ очень дорого, и дольше чем проходит само голосование. таким образом, если ты получил ключ, и потом у тебя отвалился энторнет, ты сможешь снова зайти, с этим же ключом перейти в анонимную зону и проголосовать. пароль от этого зашифрованного пакета сохраняется на бэке, и выдается только после аутентификации это нужно чтобы отсечь возможность продать голос. ладно, ладно специально для таких как ты когда мы формируем ключ и подписываем его на бэке мы сохраняем подпись в локалсторадже браузера причем в зашифрованном виде и с ключом стора election_id:esia_id. с другой - очень страшно если в паблике появятся истории из разряда я голосую второй раз, а чувак просто плагином подменил есиа токен и вуаля сложно. вообще вся история прозрачности и закрытости системы голосования сложная, очень политизирована с одной стороны - не жалко, пжалста, берите, читайте, считайте. что есть прозрачность? как уже говорил - процесс подсчета голосов - математика складываем зашифрованные голоса, расшифровываем уже результат прозрачность подсчета это фактически лог самого блокчейна, который, насколько я знаю, тоже выкидывается в наблюдателей, но могу ошибаться. да, про опенсорс осенью мы выкладывали в открытый доступ исходники, для наблюдателей и других желающих я хотел сюда закинуть ссылки, но уже, к сожалению потерли если очень интересно - можете следить за событиями, код обязательно будет выложен. нет, если ушел запрос а респонз не дошел - пиши пропало это все очень тонкий лед, приходится обвешиваться различными инструкциями, типа убедитесь что у вас все ок. в смарт-контракте бч мы берем всю нашу пачку голосов складываем их, и расшифровываем уже непосредственно результат, еще раз, так сказать обеспечим анонимность голоса. гомоморфное шифрование - это такая штука, когда мы проводим манипуляции с зашифрованными данными, не видя их истинного значения:. при завершении голосования, мы загрузим приватный ключик в бч, начнет расшифровка голосов при этом мы не расшифровываем каждый голос по отдельности, мы снова применяем гомоморфное шифрование. транзакция отправляется в блокчейн, и там потихоньку майнится чтобы избежать повторного голосования с одним и тем же ключом на бэке есть распределенные локи, перед бч стоит кафка. а так же проверим что приложенная подпись была выдана именно на этот ключ так мы убеждаемся в том что каких-то левых неавторизованных транзакций к нам не залетит. закидываем транзакцию на бэк там мы провалидируем что к нам еще не поступило транзакций с таким же публичным ключом, чтобы не было повторных голосований. на выходе у нас транзакция с публичным ключом, зашифрованным голосом, подписью и пруфами они нам нужны чтобы убедиться что по дороге никто не изменил данные в транзакции. в транзакцию так же добавляется публичный ключик слепая подпись, выданная нам на портале парой пользовательских ключей эта транзакция подписывается. эта моделька шифруется публичным ключом голосования (подробнее об этом позже) и укладывается в транзакцию для блокчейна фактически это просто объект. в анонимной зоне выбирая кандидата юзер формирует модель голоса она выглядит просто: [0, 0, 1, 0, 0] где длинна массива - количество кандидатов, и единичка - наш голос. перед переходом мы можем включить впн, прокси, и тому подобное чтобы максимально анонимизироваться, а то придет ваш начальник и скажет что вы не туда куда следует голосуете. после этой операции у нас на руках ключевая пара, с подписью ее публичного ключа теперь мы можем перейти в анонимную зону анонимная зона в нашем случае это другой сервер, между порталом и анонимной зоной нет сетевой связности и там другой домен. когда бэкенд выдает нам слепую подпись на ключик он еще раз проверяет наше активное избирательное право (естественно). на вики приведен хороший пример: типа когда я ставлю печать на конверте, и чернила промакивают сам документ, при это документ я не вижу. публичный ключик мы должны подписать на бэке, причем в слепую здесь нам как раз помогает гомоморфное шифрование, конкретно - слепая подпись. и вот тут начинается самая магия для начала мы сгенерируем личную ключевую пару для пользователя на каждый бюллетень -- публичный и приватный ключики. когда пользователь ознакомится со списком доступных бюллетеней, и примет решение голосовать мы должны обеспечить аутентификацию сейчас доступны два варианта: это смс код, и аутентификация в системе ебс это биометрия, когда на камеру говоришь циферки, и сверяется твой слепок. в день голосования, юзер зайдет собственно на портал, который мы для него сваяли мы его авторизуем через есиа, вытащим оттуда его персуху и покажем ему список голосований, на которые у него есть активное избирательное право пока все просто. итак, более менее определились с понятиями едем дальше избиратель загнал свое заявление на епгу, и он попал в список избирателей дэга этот сформированный, подписанный, список к нам и придет и из него мы сформируем собственно голосование. таким образом с точки зрения системы мы перестаем доверять серверу, и основным доверительным устройством становится браузер если вы не понимаете о чем я - подумайте, мы каждый запрос от браузера перепроверяете на бэке, потому что мало ли какое он говно туда занесет. основной задачей дэг является обеспечение тайны голосования, и неизменность результатов количество остроумных шутеек про update where name = edro сегодня увеличится вдвое =). вчера звучал вопрос: как дэг взаимодействует с оффлайн выборами отвечаю: никак для того чтобы проголосовать на дэге избиратель заранее подает заявление через епгу, и его вычеркивают из амбарной книги на его участке -- эту кампанию он будет голосовать в энторнетах. сразу оговорюсь, на всякий случай сегодня в рф есть несколько систем дэга, от разных организаций подход сам по себе новый, неизведанный, все действуют с осторожностью много решений принимается не столько с технической, сколько с политической точки зрения. мимо твитнул, прочтите, запутался в аккаунтах.  : ходите вообще на выборы? и если нет то почему?. доброе утро, бедолаги! готовьте свои помидоры и тухлые яйца сегодня рассказываю как работает дистанционное электронное голосование. был как то проект у меня где манагер заставлял овераймить по х1 тарифу, наобещав пачку фич заказчику, и за это получал нехилые премии. изи. договорились, завтра расскажу про дэг, как он работает, где там гомоморфное шифрование и блокчейн. поворот. я ангулярщик, я в формах кое-что понимаю. ок конечно, я же не осуждаю, сам бы рад. топчик формошлёп за 200к, работа мечты. с другой стороны - можно сказать что это как бы вахтовый метод месяц как не в себя работаешь, полгода отдыхаешь. тут репостов просят, походу все эти разговоры о том что джавистам/котлинистам этот наш жс раз плюнуть - как лев толстой чтож, не бросим бедолаг, накинем репостов с барского плеча джаваскриптизеров. далее конечно разработчикам дают выдохнуть месяц-другой пока вдруг не окажется: надо срочно пересобрать наше изделие!!. закрытие: аналитики готовят все документы для закрытия. релиз: за неделю разжиревшие разработчики, которые полгода сидели глядя на пустую жиру, должны собрать яйца в кулак и родить то о чем аналитики им объяснят на пальцах, так то постановки напилить они не успели тут где еще есть тестирование, с такой же горящей жёпой. поготовка завершена: аналитики примерно поняли че все таки надо сделать, начали описывать документацию, составлять требования для разработчиков. до сих пор подготовительный: аналитиков еще не укомплектовали, но полтора землекопа уже есть они, бедные, ошарашенные, начинают переваривать тз, выцыганивать уточнения требований с заказчика. все еще подготовительный: когда примерно поняли ресурсозатраты -- надо набирать людей на этом этапе они набираются как бы на баланс пока просто с круглыми глазами смотрят на пустую жиру (хе хе, они еще не знают что пустой она будет до самого конца). подготовительный: здесь надо понять что вообще делать, прикинуть команду, опеределиться с лидами, архитекторами, командами. волнообразная нагрузка в максимально утрированном смысле этапы примерно следующие:. все ниче вроде как даже злополучное тз приносят но есть одна неприятность. я поработал на двух (нуу, можно сказать что больших) проектах связанных с госухой. но ребята, в твите назад, взяли несколько на 7к, 10кк, 2кк несколько маленьких и даже сдали их, и даже получили деньги. понятно что вам не дадут проект за 300кк, но мелкие в целом можно попробовать забрать лично с товарищем забрали маленький проект на тест за 300к да, к сожалению он был не наш еще до закупки, так бывает. в целом, да, вынужден согласиться, но тут наш брат имеет возможность заработать знаю лично ребят, которые попробовали зайти в закупки на разработку по, и у них даже получилось, без связей, откатов и прочих радостей коррупции. есть миф что все гостендеры в ит куплены, проданы, и туда вообще не зайти. вот только в нашей стране, к сожалению, настолько много завязано на госухе, что пройти мимо не получится самые хитрожопые на этом зарабатывают. а пока мы считаем сколько получают джуны, поразговариваем про госуху в энторнетах после недавних событий начали появлятся возгласы, такого рода: все, не работаю больше с госструктурами! пишите в вакансиях что вы не работаете, а то не пойду к вам!. расходимся посоны, мы тут на фронте босота ваще. меня тут наругали что я не указал валюту, а если это рубли то фу-фу-фу для всех у кого не получилось соотнести цифры к рублям, и пересчитать на удобную вам валюту, привожу калькуляцию в долларах сшп:- 400-700- 701-1000- 1001-1600. не думаю что спокойно. это какие?. да ладно, разница потихоньку размывается с приходом удаленки. тут говорят джуны мало получают давайте опросик проведем какая зарплата у вас, если вы джун а если не джун - знаете ли вы зарплату какого то джуна?. из личных наблюдений. мне почему то кажется что справедливую разницу должен вывести бизнес, который высчитает пользу/час. где там раздают джунов за полтос? там есть еще?. еще вчера кстати хотел поднять тему зп, но вылетело из головы никого не смущает что разница между ставками джуна-мидла-сеньора такая маленькая? сеньору походу проще работать в пол силы на трех ставках джуна, чем за одного себя бизнесу ок, да?. цените и любите аналитиков не жлобьтесь они наша поддержка и опора =*. да, видели, крутая штука дело за малым - найти аналитиков в достаточном количестве с достаточной экспертизой =).  : когда подписался на.  : обожаю этот видос прям вот люблю запах свежего scruma по утрам. как говорил один из моих бывших директоров нормально делай - нормально будет, хотя точно так же тз заносил на пальцах, говорил - говно, переделывай, а потом удивлялся на техдолг. кстати, стоит добавить когда вы делаете без тз, на пальцах - намного легче объяснить заказчику техдолг, в отличии от историй когда он принес вам свое тз фактически его тз мало чем отличается от на пальцах, но в его голове техдолг и тз несовместимы. все хуйня - переделывай. возвращаясь к тому что все равно придется переделывать я топлю за то чтобы максимально быстро набросать как поняли, потыкаться самим, скорректировать и нести дальше а там уже накопить нормально техдолга, и переделывать со спокойной совестью. согласен поэтому и ценность разработчиков которые могут разобраться в бизнес-задачах самостоятельно - на вес золота вот только почему то при найме об этом никто не думает =/. сделать сразу лучше =). мысль отличная но не всегда можно поймать за жопу заказчика не всегда он вообще есть, и находится на расстоянии вытянутой руки я например иногда сажусь и самостоятельно прокликиваю интерфейсы на предмет дичи. на самом деле по-другому то и не получится покажите мне у кого продукт не хуяк-хуяк и в продакшен чтобы выйти в продакшен без хуяк-хуяк не обойтись, на этом строится принцип созидания да взять хотя бы утконоса (с). нет, это не наша =р. жёпа кстати не отвалилась, я на ней сижу. открою немного бизнес-завесу мы написали первую версию портала дистанционного голосования вообще без единой постановки все на пальцах шифрование, поведение, подтверждение, и тд но завелись, взлетели, тем не менее очень много приходилось додумывать самостоятельно. и естественно приходится переделывать те кто работает в продуктовой разработке наверняка понимают о чем я один и тот же интерфейс можно пересобирать по 3-5 раз, пока не станет не то чтобы идеально, но чтобы этим можно было пользоваться без специального образования. сегодня мы согласовали тз, согласовали дизайн уже завтра мы сделали по, но как оказалось неверно его поняли мы собрали интерфейс, но, как оказалось пользоваться им неудобно. я стараюсь всегда донести следущую мысль: все равно придется переделывать. происходит какая то идеализация собственной поделки, комплекс бога, чтоли. мы все прекрасно знаем что код, который ты пишешь сегодня - завтра превращается в говно, за которое стыдно но входящие данные типа тз и дизайна хочется статичные чтобы потом не надо было переделывать. остановимся немного на дизайне вот вроде как на фронте хочется чтобы дизайнер нарисовал красивый дизайн, заказчик его согласовал, и мы сделали его один раз и навсегда. поэтому разработка всегда должна быть готова чтобы разрабатывать продукт по тз на пальцах у лидов должна быть глубокая погруженность в бизнес-процессы, более того, всегда надо думать наперед. не говоря уже о том что: а) очень мало кто из компаний может себе позволить таких специалистов; б) сейчас наблюдается серьезных дефицит этих ребят;. вот только мало кто понимает что как правильно написать тз -- тоже хз для того чтобы написать идеальное тз, даже для небольшого проекта, нужна нехилая и сплоченная команда опытных бизнес- и системных аналитиков, и даже это не будет гарантией. что с одной стороны, в общем-то, не мудрено правильно ведь говорится: без тз - результат хз. почему спрашиваю иногда сталкиваюсь с ситуацией когда разработчики просят четкое и согласованное тз. пока я просыпаюсь -- поразговариваем о тз и постановках как у вас с этим дела на проектах? тз полное и подробное? аналитики хорошо поработали? лид грамотно декомпозировал?. мало того что некогда, так и жизненных ресурсов жрет - мама не горюй начинаю понимать что такое выгорание. уф, всем очередное доброе! я ведь обманул вас вчера на счет зоны и обнов ангуляра, впрочем, мы уже должны были привыкнуть что нас постоянно на*бывают чессговоря не представляю как ребята ведут коллективные аккаунты совмещая с рабочими буднями. да, в среднем ниже, по всем уровням. помогаем ретвитами!. а иногда место само тебя находит =). мне кстати все еще непонятно почему вроде как ангуляр же у нас за кровывай ентерпрайз. да ладно, прям уж сказочные?. вот и такой есть опыт, не все так плохо. надежность -- это когда вы договорились на поработать на выходных, и он не в воскресенье вечером сел, а днем в субботу, что у вас еще осталось время для маневра. надежность -- это когда вы можете на него положиться самостоятельный он или нет даже если нет - надежный, это когда вы знаете что человек обратится к вам за помощью когда у него затык. надежность -- это когда вы всей командой в жопе, и он не сваливает, а помогает разгребать. надежность -- это когда вы даете задачу разработчику, прикидываете что он ее сделает за день и он сделает. ответы конечно интересные но никто не назвал надежность. вот щас обидно было. потому что быть ангуляр разработчиком почетно!. какая то автократия подъехала. а какое для вас самое главное качество разработчика? вот прям самое-самое. ещё главное чтобы по результатам тестового давали обратную связь, а то есть некоторые который отвечают после него «вы нам не подходите, больше ничего сказать не можем» да ? что-то хуже такого мне сложно придумать. взрослый джун =). уболтал, чертяка языкастый, попробую. смысл в том чтобы сделать из собеседования диалог, разговор коллег за банкой пива, а не блиц-сессию вопрос-ответ этому никакие консультанты не натаскают, да и я кстати не слышал? правда есть такие?. да, но компенсируется тем что боли меньше приходишь, а тут уже родной ангулярчик, разбираться не надо =) бесшовненько практическ. вот интересно кстати кто-нибудь хоть раз сталкивался с тем что ловил человека на фейковом опыте? все мы, конечно, приукрашиваем резюме, но чтобы откровенно вписывать фейк?. да и любой код можно подтянуть под уровень команды это только вопрос времени. когда ты проводишь код-ревью в команде - вы уже друг к другу попривыкли, линтеры описали, договорились об именовании переменных, подходах и прочем а когда ты попросишь провести ревью человека с улицы - ты будешь смотреть на это через призму своего опыта. идея интересная, но не кажется жизнеспособной. существуют и особо дерзкие работодатели которые тестовое дают еще даже до собеса с ичаром такое простительно только если у вас большая крутая компания в которой все хотят работать, и у вас огромный поток входящих резюме в этом случае тестовое - заградительный барьер. ну и не стоит забывать: пока вы пичкаете кандидатов тестовыми -- другие наниматели их уже нанимают. тестовое задание как по мне - это лишь способ сбить ценник кандидата он как бы приносит такой, а мы его уууу, какой говнокод, 400к многовато, держи 370 ток. тестовых заданий я не даю принципиально сам не делаю, и другим не советую в редких случаях оно конечно может показать примерный уровень кандидата, но это неточно мы как бы заставляем чувака забесплатно поработать, если платим - то это все равно не те деньги чтобы браться. там обычные задачи на js, их полно в этих ваших энторнетах. когда примерно понятен уровень кандидата можно покодить в онлайне, но надо убедиться в том что вы успели выстроить доверительные отношения разработчики зажаты, и если гнать их в стрессе еще и кодить на виду - все, пиши пропало. лихо переиначил =) я не говорю сложно, я говорю спрос ниже может быть сложнее, но все же не сложно ангуляр все еще тот же фронтенд, все еще программирование, все еще ит тут редко когда сложно менять работу. причем опыт у двух кандидатов может быть настолько разношерстный что уверенный мидл может никогда не сталкиваться с написанием структурных директив, а джун только этим и занимался и ничего другого не умеет. тут спрашивали какие вопросы задавать джуну в общем-то теже самые что и мидлу, и точно такие же как сеньору разница будет лишь в том что сеоньор с двух ног залетит в ответ, мидл помнется а джун будет эээ-меее но тоже может ответить. я хитрожопый, и уже готовые вопросы беру отсюда: этом мы не идем тупо по списку, это скорее шпаргалка какие-то штуки можно пропускать, например data-binding, когда понятно что кандидат опытный поставьте звездочек и дополните ответы. само интеревью проходит в расслабленном диалоге не понимаю историй со стресс-тестами и дрочевом вопросы, на которые кандидат не может ответить или отвечает неправильно, всегда сопровождаются объяснениями и ответами. далее 15-20 минут идем по опыту кандидата время зависит в общемто от опыта когда его всего пара лет редко бывает что обсудить кстати сколько там надо лет опыта чтобы считаться сеньром? как раз 2-3? а потом в лиды? ну-ну. можно отсыпать пару шутеечек, посмеяться например был кандидат у которого в резюме было указано отчество, что большая редкость, и когда уже обратил внимание на возраст - понял почему посмеялись. начинаю я всегда с погружения кандидата в дружескую обстановку сразу переходим на ты, интересуюсь как-там-чо в его мухосранске (я уже лет 10 работаю на удаленке, соответственно у меня только удаленщики, да и сам из мухосранска, интересно как в других). мое интервью занимает где то час, +- 15 минут. ну это потому что ты сеньор, они всегда по верху рынка идут. это фронтенд!. и низкая текучка ангулярщики не часто меняют работу, опять таки потому что спрос ниже =) если вдруг ангулярщик перейдет на тот же реакт - все, в строю бегунков прибыло а в остальном - по 2-3 года ангулярщик не дергается если кормить его булкой с маслом. из плюсов выбора ангуляра: разработчики чуть-чуть дешевле, потому что спрос ниже, как мы выяснили только 12% читателей пишут на ангуляре, спрос соответствующий. как и с другими разработчиками -- с сеньорами сложно они на расхват, не ищут работу дифицит, ничего нового. для интервью нужны силы, и кому-то отдавать себя больше а кому меньше - такое себе. по поводу присутствия на рынке я сам конечно не отсматриваю резюме, мне ведь на мягких лапах их ичары приносят так вот, когда есть потребность, и нужны, скажем 1-2 мидла, у меня неделя-две забивается собесами больше одно собеса в день я не провожу принципиально, потому что. как бы удивительно это не звучало, но найм ангулярщика не отличается от найма любого другого разработчика. уже все начали ангуляр изучать? или ещё нет? давайте-давайте, у нас круто. ну а ребята меня дополнят. доброе утро! выспались? кофе попили? у всех есть кофе-машина дома? сегодня со срача начинать не будем, расскажу че по кадрам, как собеседую, че спрашиваю как обычно не претендую на экспертность, а просто делюсь опытом во второй половине расскажу про зону, и обновления ангуляра. не «если», а «когда»! аккаунт коллективный, да и я не могу сказать что знаю все-все максимально глубоко мы тут чтобы шерить знания. я об этом упомянул, но хотел подробнее раскрыть в другом треде не буду мешать если хочется, ретвитну. нет нет, ты молодец! безусловно у тебя глубокий опыт и есть чем поделиться, не могу этому мешать, только наоборот. ну если прям больно, можно ведь и const promisify = (stream) = streampipe(first()topromise(). обработается. ну если поток должен завершиться, но не завершается это ведь проблема не ангуляра, а автора?. да, повышает, но с каждой новой строчкой человеку rxjs все больше нравится (слышал от нескольких). а может быть это плюс? не даёт говнокодить во вьюхе?. ну все потому что rxjs это поток, а не вызов =). для тех кто любит async/await придумали topromise(). тредик с минусами подъехал. про ангуляр завтра будем продолжать или устали и в другой раз?. в споре родилась истина! ангуляр топ, просадки производительности нет во всем виноваты кривые руки (удивительно). вообще наш спор зашел в тупик! я тут для того чтобы заманивать людей на ангуляр, а не вот это вот все. благодарчик, посмотрим. ну так это же понятная статистическая выборка, почему нет? точно такой же статистической выборкой меряется износ обуви, пробег авто без поломок мы же тут вроде как тоже сайты делаем, или все таки фреймворки в вакууме? =). прекрасный пример! спасибо! я же говорю о синтетических тестах, мы все прекрасно понимаем что в ангуляре больше кода, больше вычислений, zonejs это все вместе даст просадку, невидимому глазу но вот хороший, опять таки, пример усаженного ангуляра. пока я выдыхаю, накиньте мне лайков на саркастичный тредик на самом деле вкрутился в исключительно ради этого репоста. он еще не закончился надо выдохнут и еще вбросить про ангулярчик, а то на неделе есть и другие темы. ох, ребята, тяжелый понедельник отлично поорали утром кто чем занимается после работы? кодите пет проджекты? а потом ноете про выгорание?. согласен, да много хаков приходится потреблять из блогов: onpush, trackby, pure pipe, async. несмотря на то что ангуляр для программистов - порог входа достаточно низкий angular/cli вам самостоятельно развернет проект, засервит его, и вуаля, вы ангулярщик: кроме component() и ngoninit() вместе с input() вам ничего не надо. напомню что мы говорим о 2+ ангуляре, 1х - другой фреймворк да вас кинули, мне вас жаль, но все продукты умирают, не попишешь. обратная совместимость: со второй по 11 версию ангуляр обновляется практически без боли плюс к этому команда ангуляра нам стабильно выкатывает релизы, так что даже не успеваешь обновляться. так же из плюсов - поддерживаемость как уже не раз было сказано: какой бы индус не пришел на ваш проект -- он в первый же день садится и делает задачу вы после индуса тоже не испытаете каких либо проблем (ну разве что if (true) {}). есть все, умеет все с - самодостаточность. хотите мокать сервисы в компонентах при юнит-тестировании? пжалста вам di, пользуйтесь наздоровье нужна своя обработка ошибок? пжалста, вот интерфейс, имплементируй. с библиотеками разве что есть косяк один, признаю - не шарятся стили ну, не все коту масленица. httpclient - пжалста, интерцепторы - держите хотите лейзи-модули? пжалста, красиво без костылей нужно собирать библиотечки? вот вам инструмент. в ангуляре есть вообще все что можно придумать искаропки это значит что вам не надо перепахивать гитхаб в поиске правильного пакета как правило в проекты ангуляра мало какие библиотеки добавляются сверху. погнали в плюсы ангуляра!. принято, взял на заметку. angular, как и другие инструменты от google сделан программистами для программистов отсюда приезжают крутые штуки: dependency injection, change detection но с наскока вчерашнему верстальщику эти штуки не так просто вбить себе в башку выглядит красиво, но непонятно. ну и производительность ангуляра безусловно будет ниже конкурентов речь конечно идет не о гигантской разнице типа todo app на ангуляре лагает, но тем не менее, просадка есть. нельзя решить эту проблему код-ревью, линтерами, и прочими инструментами тут уже человеческий фактор и подход к архитектуре приложения когда сам фреймворк сложный - ты вроде уже не стараешься писать просто - типа и так сойдет. ангуляр обычно берут для кровавого ентерпрайза а там большие проекты, большие команды, сжатые сра(а - зачеркнуто)оки, из-за всей этой неразберихи качество кода конечно понижается. как его большой плюс, в то же время минус - это мощный фреймворк в неумелых руках инструмент превращается в оружие для стрельбы себе в ногу. скорость сборки важна когда у вас достаточно большая команда, и вы льетесь на стенд по несколько раз в день тестировщик может ждать вашу задачу из очереди сборки часами в этом случае важна каждая минута. билдится он соответственно тоже долго, даже на пустом приложении можно было бы сказать типа ой да че, билдится 20 минут и ладно я видел проекты которые билдились и по 40 минут. начнем со размера бандла ангуляр жирный, даже с учетом всех treeshaking, оптимизаций и тд да, у вас в приложении и картинки есть, и в целом и общем размер бандла как такового размывается но пока клиент грузит всю вашу балалайку - он наблюдает белый экран неприятненько. начнем с минусов ангуляра, раз уж вам так хочется заставили все таки. а ведь действительно. да, обязательно, этих случаев у нас есть. итак, сообщество в лице сформировало запрос:- плюсы/минусы ангуляра с высоты опыта- экосистема ангуляра- роадмап, версионность, поддержка- плюсы старта проекта на ангуляре- отдельная тема - поиск и найм ангулярщиков- кого читатьщас все будем разбирать. да так и есть вобщемта. запрос получен, сделаем. это состояние не приложения, а конкретной страницы/формы/таблицы не путай. все есть, все на месте, слепые подписи, гомоморфное шифрование у нас все по-взрослому. пингуй, ретвитну. к сожалению, да. ну конечно не фреймворк, да и требований к нему в общем-то нет мы ж тут просто, тряпки жгем, смеемся. не не, туда мы не пойдем, спасибо. ну естественно!. обязательно расскажу об этом!. а чем занимается департамент цифровизации избирательных процессов и улучшит ли это как-то прозрачность выборов?. ждемс. первый эко-френдли фреймворк супер! спасибо!. в ангуляре тоже так можно =р. ну ладно, ладно, не надо 1x и 2+ это вообще разные фреймворки. признаю однажды мы переписали приложение с ангуляра на ангуляр это была моя самая большая ошибка больше я так делать конечно не буду. попалась! я когда первый раз увидел синтаксис vue мой первый вопрос был: пажжите angularjs же вроде умер, зачем вы это сделали?. в реакте нет логики в атрибутах? ну ничегосебе! а подсветка щас ок, автокомплит, всякое такое webstorm с ангуляром на ты. бум!. =*. согласен, есть такая проблема ее тоже попробуем отдельно поднять. приложения или микрофронтенды? и сборки прям независимые?. как дела в (впишите ваш фреймворк) с микрофронтендами?как у всех - никак кто нибудь видел вживую эту штуку? расскажите, интересно. вот да, есть проблема у ангуляра - размер бандла но, опять таки: с современными скоростями энторнетов, мощностями клиентских устройств - точно не пофигу ли? когда мы заливаем в проект половину гитхаба - всех это устраивает, а как ангуляр - у него большой бандл!!. во-во. не очень понятно зачем они нужны? не тащить либы в клиент? ну так можно сделать bff который будет выполнять те же задачи. эти ограничения приносят стандартизацию и поддерживаемость bus factor стремительно уменьшается. вообще вроде как принято считать строчками кода, или экранами, но мы так делать конечно не будем я бы так сказал: если в течении полугода 5+ разработчиков пилят приложение как не в себя - оно скорее всего большое. можно обойтись без него. спасибо. у нас кстати искаропки и без костылей есть еще ssr, prerender чо там у вас? как дела с этим?. продолжаем оказывается реактисты не хотят в ангуляр потому что не знают что он мощный искаропки. для этого придумали iframe а если не канает - возьми svelte, он легковесный, как раз проканает под задачу. пжалста, первая ссылка в гугле либо через лэйзи модуль и роутер-аутлет, либо так же динамически через impo + componentfactoryresolver вон посоны уже подсказывают. тоже можно, ща найду. не тривиально, ладно но это фрейморк же, понятно что синтаксис библиотеки будет проще. плюсую видел доклад по реакту, чувак рассказывал как правильно и хорошо когда я задавал свой вопрос, поблагодарил: «спасибо за краткий экскурс как сделать из реакта ангуляр» а вот монорепы отдельный вопрос, тоже поднимем. обожаю вас! в комменты набежали ангулярщики защищать честь фреймворка люблю до слез так победим!. там больше проблем чем кажется на первый взгляд взяли легаси, напилили еще легаси, ушли =р. изян ваще:. там вроде можно гибко зайти, что-то заменить, а что-то добавить. а мы вот у нас используем angular в основном один и проектов (маленький лэндинг) будет на svelte, а еще один небольшой проект на react не потому что вкусовщина, а потому что фреймворк это инструмент. тут недавно проводил опрос: брать ли свелт в работу. твои слова да богу в уши right tool for right job. ну говнокодеров же никто не отменял я как то пришел на проект, спросил почему ангуляр?, на что мне ответили на нем сложнее говнокодить как же он ошибался. ну да, да, подловил сервис это все таки стейт но он изолированный, делает только то для чего создан давай так: когда приложение строится вокруг стейта - это плохо, когда стейт помогает приложению работать - хорошо сквозной стейтменеджмент который я-про-всех-все-знаю - первое. а по ангулярщикам есть и плюсы: когда на проект приходит новый разработчик - он уже в первый же день садится и делает задачу, не тратит неделю на то чтобы разобраться а че тут ваще такое? да и в целом разработчиков то хватает, не ощущаю жесткого дефицита. кастомная сборка - пжалста: angular-builders/custom-webpack:browser, собирай как хочешь стейтменеджмент уже затащили во всех его проявлениях. по рукам, взял на заметку. решается одним сервисом. эта задача решается локалстораджем. ну уж нет фронтенд это всегда вкусовщина и доказательства собственной правоты. отличный заход а какой гибкости мы говорим? считается что ангуляр сложный и неповоротливый, но это не совсем так мы в борьбе фреймворков забываем что все они - javascript, браузер что умеет ваш фреймворк, и не умеет ангуляр? закидывайте, будем опровергать. ну все так, это у тебя изолированный стейт какого-то компонентика, в данном случае -- формы для этого не нужно тараканить в проект сквозную штуковину со стейтом к состоянию приложения твоя форма не имеет отношения. окей что мы делаем сложное когда нам нехватает урла в качестве стейта? я привел пример: шахматная доска у нее есть состояние и оно меняется закидывайте ваши примеры, в которых, как вам кажется, вам нужен стейт-менеджмент. я пришел стажером в контору, где использовали ангуляр сначала первый, потом 2+ нравится, что синтаксис близкий к нативному есть определенные стандарты, которым все +- следуют и из коробки всякие ништяки типа форм и httpclient ну и rxjs обожаю. так, здесь я токсичный! давай завязывай!. неправильно формулируешь вопрос твое приложение по дефолту - маленькое а вот большим оно становится когда его с полгода 5 человек пишут. а какой смысл использовать (подставь свой фронтенд фреймворк) просто как шаблонизатор?вообще jsx (который реакт, (который библиотека, (который все фреймворком называют) создавался исключительно для этого все остальное - побочный эффект. пажжи фронтедщики же не настоящие программисты откуда у нас все это?. не помню кто говорил, и не помню точно, найдите автора сами: стейт-менеджмент делает маленькое приложение сложным, а большое - простым так вот, скорее всего ваше приложение - маленькое, а если оно все таки большое - разбивайте его. остальные: mobx - не берите, он неочевидный ngrx - не берите, он сложный, запутаетесь ngxs - можно брать, приятный, уточен под ангуляр akita - супер, ничего лишнего, дает вам только то что нужно. совсем недавно добавили в проект akita, но не потому что стейт-менеджмент, а скорее потому что акита дает удобные сервисы, без лишнего бойлерплейта. из личных примеров: там мы сделали играбельную доску с ngxs (привет серега, помаши ручкой). оооочень редко когда действительно бывает нужна либо по стейт-менеджменту. признаю, мне приходилось пощупать в ангуляре кучу этого барахла mobx, ngrx, ngxs, akita это все очень страшные вещи и если вы тащите их в ваше приложение - скорее всего вы что-то делаете не так. все остальное - от лукавого. стейт приложения придумали еще до всего этого это url приложение отрисовывает ваши замечательные компонентики в зависимости от адреса, который прописан в браузерной строке. я вообще не очень понимаю зачем в целом нужен стейт в приложении возможно я тупой это ведь все растет из ваших реакт-редаксов? куча болерплейта, иммутабельность веб-приложению не нужны эти штуки же, если там нет undo-redo. итак, стейт-менеджмент, и соотственно стейт-менеджмент в ангуляре. вот так вот вот ангуляр и разбился. оооо отличный вопрос! я ярый противник стейт менеджмента! давайте поразговариваем про это чудо природы =). а зачем их перепиливать? чем не угодили?. не сомневаюсь в том что вы итак все знаете у нас же хорошая документация, куча гайдов, мощный фреймворк, все искаропки, и в целом ангуляр самодостаточный но все таки?. пока люди, которые не смогли (или не захотели) освоить декораторы, dependency injection, singleton и прочие штуки для программистов думают что ответить -- хочу спросить что было бы интересно узнать самим ангулярщикам?. во во, из-за вашего реакта надо уже акк переименовывать в reactunderhood ужасно, будем исправлять. собсна не дождался пришлось самому впрочем - как и всегда. в смысле ангулярщики миф. воу воу. спорим я дольше ждал?. коллеги пишут что ангулярщиков дай бог 20% судя по опросу - еще меньше надо бы увеличивать расскажите, почему вы не пишете на ангуляре?. вообще я хотел было подготовится к этой неделе, но на работе как то сильно загрузился что просрал все полимеры: так что буду импровизировать давайте сделаем как бы белый танец: вы мне будете рассказывать че-нибудь интересное. нуууу я бы angularjs все таки к прочему относил плюс он же плюс минус мертвый и если уж ангулярщики миф, то там то уж и подавно. сколько нас вообще? ретвитим опросик, надо понять что мы не миф. ан нет, мы есть, мы живы, нас человек 10-15 наверно, но мы есть!. количество декораторов увеличилось вдвое. чувствую себя будто в телевизоре, так что прежде всего хочу передать привет всем своим друзьям, бывшим, текущим, ну и будущим коллегам, а так же 3 кто пишет на ангуляре возможно эта неделя будет немного токсичной, но придется потерпеть моя неделя - мои правила!. всем привет! на этой неделе я буду вас реактологов уговаривать переходить на ангулярчик! поговорим с вами о госухе, постановках, тз и задачах с вами я - николай пасынков, властелин фронтенда в департаменте цифровизации избирательных процессов ртлабс йуху!. рвёт башню на тему фракталов и потоков энергии пытаюсь собрать эти мысли в своём js-фреймворке грубо говоря, получается стейт-менеджер на генераторах с кучей плюшек типа инкрементального рендера jsx, контекста в потоках, системы событий и прочего. вот большая коллекция интересных выступлений с гитхаба. интересен посмотреть на самую первую презентацию реакта, которая была в сильно более «почему» а не «как» обратите внимания что большинство зашаренных видео - достаточно абстрактные «почему» почему?. господа, время отходить ко сну а это значит что моя смена закончиласьвсем спасибо за эту неделю, надеюсь я смог вас хоть немного развлечь)если вам понравились темы, всегда буду рад поболтать на основном аккаунте — , подписывайтесь, пишите, задавайте вопросы. лесли лампорт про спецификации: джо армстронг про реактивные системы: курс по верификации моделей: про событийно-ориентированные системы:. удивлён почему никто ещё не скинул этот доклад)simple made easy by ещё один человек глубокой мысли с очень и очень интересным докладом если вы по каким-то причинам его не смотрели, то смотрите. так, что-то все лайки ставят, а ссылок не кидают)вот замечательный доклад от алана кея кто бы что не говорил, но он гений мысли, нам всем есть чему поучиться у таких людей. вот это видео смотреть всем - nolen рассказывает о сложности сегодняшних систем и о том, как применить подходы из out of the tar pit чтобы эти сложности победить. доклад о clojurescript и функциональном реактивном программировании, после которого у меня произошли изменения в мозге, которые сделали меня лучше: авторство  там и по автор прошелся. вот это полуторачасовое видео в своё время очень сильное повлияло на мой интерес к языкам программирования и компиляторам автор очень живо, доступно и завораживающее рассказывает:. к своему стыду не видел этот доклад, надо глянуть). хотел тоже скинуть этот доклад, мне он очень нравится) правда как раз сегодня прочитал статью в которой автор разматывает все аргументы джонатана и с нем тяжело не согласится! - ознакомьтесь, рекомендую. поделитесь своими любимыми докладами/видео/научными работами? темы могут быть любые, я начну!hammock-driven development - из моих любимых докладов в нём он объясняет как использовать свой ум чтобы создать по-настоящему гениальный софт. спасибо, погрузился в комментарии, интересно было почитать правда понял что ms особо не хочет ничего менять в плане расширяемости языка похоже весь ts это его turing-complete система типов. да, тут соглашусь чтобы делать macro-expansion нужен компилятор, тогда с js все более или менее понятно но что же typescript? там то уж можно было сделать. выглядит интересно!. примерно про то, но оно не встроено в язык. определение кастомных операторов бы особо не понадобилось, тк эти вопросы тоже можно решить макросами не пришлось бы писать целый ворох тулинга, который перегоняет jsjs кто-нибудь в курсе почему такого нет? смотрю вот в ts открытый пропозал про макросы аж с 2015 весит. мне кажется чего не хватает js/ts так это макросов если бы разработчики этих языков хоть чуть-чуть подзадумались над расширяемостью языка, то очень много вещей можно было бы сделать проще и элегантней например чтобы завести классы в js, не пришлось бы выпускать новый стандарт. sql база в compile time и json парсер исключительно на типах: все благодаря фиче в 41 - template literal types из своего - типизация для postgraphile. невероятно! а что у typescript с паттерн-матчингом и кастомными операторами??. вот очень странная ошибка которую без кастинга решить не удалось. ну а под этот твит давайте крутые штуки тайп-системы typescript где-то в интернетах видел, что калькуляторы на типах пишут или валидирует длину массива в compile time очень интересно узнать про это подробнее). всем доброго воскресенья!сегодня я не буду супер активным ведущим, но всё равно пообщаюсь с вами на разные темы) у кого есть опыт: поделитесь квирками или проблемами typescript? о чем нужно помнить в проде, какие палки в колёса он вам вставлял?. простите, я видимо неверно передал свои мысли в первом твите понятное дело что js есть compilation target для многих языков я лишь хотел сказать что он не очень хорошо подходит для этой задачи, как и любой высокоуровневый языкно на безрыбье и рак — рыба. они не компилируют c# в wasm ваш код всё также компилится в байт-код clr, а net vm скомпилирована в wasm и загружается в браузер и исполняет ваш код код внутри vm внутри vm внутри браузера. c# выглядит сейчас наиболее активным в этой сфере, возможно потому что это форсит майкрософт они хорошо вкладываются в wasm правда их подход очень интересный. в моем информационном пузыре сейчас самые популярные языки для wasm это си, rust, go, c#/f# также, очень интересные компиляторы есть для haskell и erlang/elixir, там они вообще пишут имплементацию beam для wasm. я надеюсь, что в скором будущем я смогу написать любое приложение на любом языке и сделать так, чтобы оно запускалось в браузере а ещё надеюсь что станет возможным межбраузерное взаимодействие без использования серверов тогда мы увидим новый веб это точно. а это сразу убивает все преимущества webassembly в скорости проблема в том, что в васм пока нет сборщика мусора что не позволяет свободно использовать объекты из js мира но как только сделают gc, то возможности wasm сильно расширятся. конечно же wasm ещё далёк от всех возможностей, которые доступны в js сейчас эффективно на нем можно только циферки считать или рендерить что-то на канвас как только нужно работать с dom или пользовать какое-то web api, то тут надо идти через мост wasm js. а в чем я спорю с реальностью? есть задача писать на котлине для веба, они ее выполняют у них просто нет выбора поверьте, если был бы выбор между js и каким-то байт-кодом с доступом ко всем браузерным апи, то никто бы не компилировал в жс). тут меня поправили, но пока что почти всегда вы тащите вместе с собой stdlib того языка, который компилируете в js же, понятное дело, стандартные методы доступны всегда но это скорее за уши притянутый аргумент :d. скорее потому что он не был создан для этого высокоуровневый, динамически-типизированный язык со сборкой мусора вряд ли будет также эффективен как низкоуровневый байт-код. wasm пропускает стадию парсинга и летит сразу в вм если честно? я не знаю насколько это быстрее тк кажется что всё преимущество съедается размерами васм бинарников пока что они всегда больше чем соответствующий js код поправьте плиз если я ошибся. помимо скорости исполнения и безопасности нам обещают что wasm будет быстрее загружаться ведь это бинарный формат и его не нужно парсить (как js) перед исполнением а ведь парсинг (и компиляция) это самая долгая часть staup time жса. продолжим wasm это формат байт-кода, поэтому вы почти никогда не пишите его вручную, а компилируете в него другие языки хорошее решение, ведь js не дизайнился как compilation target, хотя сейчас очень много чего компилируется в жс, а он нифига не compilation target. это катушка с нитками, символ «треда» показывает что этот твит — часть треда и у него есть предшествующие твиты или продолжение или всё сразу). - сделал карту с отметками о стадионах с л/а дорожкой и краткой информацией о них делаю сервис для автоматической приоритезации и выбора регрессионных тестов- паблик про openbsd. следует также отметить что wasm не призван заменить js (как бы нам того не хотелось) как видно из истории браузеров, js и способы исполнения нативного кода в браузере появились одновременно у них разные предназначения. повторим ещё разок: webassembly это язык (точнее формат байт-кода) и виртуальная машина для его исполнения задача у webassembly одна — безопасное исполнение быстрого нативного кода в браузере. это всё просуществовало до 2017 года, пока миру не был представлен webassembly — язык программирования и новая виртуальная машина встроенная в браузер. примерно в это же время mozilla создаёт ответ google — asmjs это подмножество js, которое браузеры могли компилировать в нативный код и использовать разные оптимизации в то же время код на asmjs был валидным javascript и мог исполняться в любом браузере. это позволяло исполнять любой вредоносный код на вашей машине не хорошо чтобы решить эту проблему, в 2011 году компания google выпускает native client (nacl) - технологию, которая позволяет запускать нативный код в безопасной песочнице браузера. дальше была интересная технология activex, которая как и npapi, позволяла исполнять любой нативный код в браузере но у обеих технологий была одна огромная проблема — безопасность плагины запускались с теми же приведениями что и родительский процесс (браузер). после загрузки, браузер отдавал все данные в плагин, а уже плагин занимался обработкой этих данных и их отображением важно то что вам не нужно было запускать отдельное приложение, все плагины работали внутри браузера эту технологию можно считать прадедом webassembly. мы опустим java applets и поговорим о npapi — netscape plug-in api это было апи, которое позволяло писать плагины для браузера например, можно было написать плагин для поддержки audio/mp3 и когда браузер встречал этот формат, он загружал ваш плагин. это случилось всего через 5 лет после выпуска вообще первого браузера в 1990 году вернёмся к netscape navigator 20 и отметим, что на ряду с javascript, в браузере появились две другие технологии, позволяли исполнять код, а не просто рисовать html. для полноты картины перенесёмся в 1995 год это был знаковый момент в истории веба — компания netscape выпускает новую версию своего браузера netscape navigator 20 это был первый браузер, который поддерживал javascript, java applets и npapi. для начала дисклеймер: я не эксперт в данной технологии, но кое-что успел изучить, слежу за новостями и нет-нет да запускаю компиляторы, которые умеют в webassembly разберёмся же, что это за зверь и какое будущее он нам сулит. ха-ха, была такая низкая активность на программерские темы, я подумал всем всё надоело но господин прав — обещал, значит надо сделать поговорим немного о webassembly, моих надеждах на эту технологию и что там вообще сейчас. я просто собрал все ютуб каналы конференций в одном месте:. сегодня хотелось бы вам рассказать о визионерах программирования и технологий, об их открытиях, взглядах и вкладе в computer science. сделал приложение для генераций текста поздравлений, тк это одна из самых больших болей в моей жизни). давненько была идея сделать портал с докладами it конференций, однажды вылилась в это. очень приятно вчера было читать про все ваши проекты) видя сколько софта создаётся для себя, для души, приятно осознавать что ещё не вся разработка погрязла во всяких kpi, метриках и free-2-play играх не хотелось бы чтобы бизнес задушил всё творчество нашей профессии. всем доброе утро!суббота, прекрасный день)не знаю как у вас, а у меня неделя вышла просто crazy на работе не успел покрыть все темы что хотел, но мы наверстаем за выходные если конечно вы читаете твиттер на выходных. делал приложение для трекинга расходов на обслуживание велосипеда, с конструированием 3d модели, визуальной заменой деталей и пр но оочень муторно одному. сделал для себя бота в телеге, чтоб быть в курсе когда играет любимая команда) плюс результаты интересующих чемпионатов. мы пишем в опен сорсе тул, который за секунды (ну, почти) поднимает аналитический api поверх любой базы данных сразу можно писать запросы, считать метрики, рисовать графики:. данных без промежуточного копирования и мутаций строк в таблицах базы данных поддерживает native tools для импорта дампа родился как пет-проджект, в итоге применяем на проектах в. на работе весь контент на бб кодах, на фронте реактнакатал парсер с ast и плагин системой на rn тоже используют. сервис для концентрации внимания когда пишешь код, фоновые звуки + помодоро таймер делаю для себя, но уже есть постоянные пользователи. столько сайр-проектов, круть!)кажется многие работают над своими проектамиа что у нас на сегодняшний день со всякими тулзами, которые помогают писать код? знаете какие-нибудь crud-генераторы и подобное?какие бы тулзы хотели видеть в будущем?. пишу сервис для простого складского учёта и реализации товара чтобы малый бизнес (например торговцы на рынках), могли вести учёт своего товара такая 1ска на минималках пишу на vue + express + mysql если взлетит, сделаю приложения на flutter. сделал чтобы вести бюджет это бесплатный аналог ynab на данных из дзенманиизначально делал просто под себя + хотел во фронте прокачаться и почти нигде про него не рассказывал сейчас там уже около 200 человек ведут свои бюджеты. сделал удобный архив ретро-телезаписей: как сделал, точнее перенес умирающий сайт с юкоза. делаю сервис для визуального тестирования (скриншот тестинг) делаю для себя, использую с все опенсорс и селфхостед - пробуйте, подключайтесь! react + nest (js/ts). написала выковыриватель body из curl, чтобы дебажить запросы на работе, ооочень часто пользуюсь. делаю бесплатный трекер для тяжелоатлетов - не чтоб заработать, а просто чтоб не скучно было, для себя. собирал несколько лет разговорчики с яндекскарт пока их не запретили. веду канал о том, как проходить собеседования и что делать потом написал бота с интерактивными рассылками, например по алгоритмам и структурам данных веду еженедельный дайджест и подкаст с выжимками новостей фронтенда. консольный спейс файтер на си цель - изучение языка си). делаю тулзу для формализации и верификации требований/спецификаций по сути похоже на tla+ или alloy, но чтобы не надо было вникать в теорию множеств, дискретную математику и линейную темпоральную логику пока проект на стадии а что если, так что даже показывать нечего. ха-ха, вот это интересно). на удивление, есть люди, которым боты оказались полезны настолько, что они готовы поддерживать на patreon человека и 5 евро в месяц через платформу и еще один просто кидает на счет 1000 рублей в месяц, не много, но очень приятно. я занимаюсь телеграм ботами1 записывают туториалы на youtube: сделал несколько бесплатных: - поиск денера вокруг (актуально в берлине) - поиск виртyальных культурных событий (онлайн трансляций). когда-то делал windows universal app приложение для поиска авиабилетов на партнерке от и даже чуток денег приносило (вот сейчас хочу починить и c#, а то с год-два сломалось). вообще никаких целей не преследую, просто иногда добавляю новые фичи о которых узнаю ). пробую делать платный js фреймворк после долгих часов почти бесплатной работы на open source, хочется уже и денег заработать. делала как pet project, школу для обучения вебу в люксембургене хватает знаний в раскрутке). пассивный доход, все такое. где-то была статья, что в итоге единственная правильная регулярка на емэйл это проверка на наличие @. тут же про js есть небольшой экстеншен для браузеров - управление прослушиванием подкастов на сайте pocket casts. было лень каждый раз гуглить регулярки, решил ещё в 2018 году сделать сборник регулярных выражений - (react 163, redux, react router, recompose). у меня их так много, что я запилил целый портал с ними: на $mol все open source все free to useтам и заметки, и личные финансы, и тулы для бенчмаркинга, и песочницы, электронные таблицы, и презентации, и базы данных, и игры и много чего ещё. сначала была тулза, которую писал по ночам, приходя с работы потом уволился и занялся проектом как основным :). до этого запустил небольшой проект с задачами для фронтенд разработчиков, который приносил небольшой пассивный доход, но в итоге решил продать, чтобы заняться новым проектом:. в текущий момент делаю библиотеку как шанс реализовать идеи, которые по разным причинам не получается опробовать на работе, ну и может что-нибудь заработать, но это второстепенное:. собираю места для еды на карте. чтобы портфолио пустым не было. 2008-2016. о чем он, самый первый?). уведомлялка о начале комендантского часа на react-native и typescript в основном из-за того, что приложение сейчас нужно мне самому + как рекап js стека под телефоны. давайте тред про пет-проджекты!делитесь кто что делает, какие технологии, какую цель преследуете?) для себя или чтоб подзаработать?) кто уже построил пассивных доход на своих проектах?. конечно, это нужно не всем не всем нужны большие деньги, не все хотят работать больше чем нужно и это нормально но те из вас кто хочет, не ждите что они сваляться вам на голову как только вы прошли курс по реакту) и если не знаете английского, то тоже особо не ждите). то же самое применимо к зарплате в it хочешь 500к? будь готов потратить несколько лет на получение опыта и экспертизы тебе придётся интересоваться всем что происходит можешь сидеть с 9до5, а после забывать про разработку, но тогда 500к не жди. труд не такой, что сутками пахать на износ на заводе — так много не заработаешь труд состоит в том, что ты должен потратить годы, чтобы создать капитал и эти годы ты должен быть сконцентрирован, не бросать то что начал, не верить в «схемы». всем доброй пятницы! вчера вечером мы поговорили про деньги и где их можно заработать, подробности вот в треде ну и самая главная мысль: легких денег не бывает нет ни одной волшебной схемы, которая сделает тебя богатым путь к бабкам всегда труд. о, найс! ещё один неплохой вариант - запилить опен-сорс проект и сделать так, что большие компании от него зависели тогда они будут платить тебе деньги чтобы проект не загнулся) неплохо, только немного похоже на работу за зп. думаю они не приносят деньги своим создателям. ну и ещё один вариант это классический офф-лайн бизнес вы можете отложить пару раз с вашей зарплаты в 400к и открыть кафе/автомойку/парихмахерскую правда не могу ничего тут конкретного сказать, есть кто успешно сделал такое? может какие-то цифры?. при должном усердии такой проект может дать неплохой постоянный доход если получилось и остались силы, то можно повторить если вы потеряете работу, то всё равно вам на хлеб с маслом будет копейка получаемые деньги инвестируете обратно в проект или в акции/недвиж/etc. у такого подхода много плюсов: вам не нужно вынашивать идею и проверять гипотезы; вам не нужно гадать будут ли люди платить за это; вам не нужно придумывать функционал скопируйте существующий продукт, но сделайте его чуть лучше и вы найдёте своих платящих пользователей). сделайте копию существующего бизнеса исправив 1 или несколько его недостатков ваша копия может либо исправить косяк, либо прайс сделать ниже на 10x, либо адаптировать проект под новый рынок (напр для своей страны) или всё сразу profit. найдите негативные отзывы на этот продукт, определите слабые места, особенно чем недовольны пользователи и создайте копию да-да, без всяких там инноваций, идеи на миллион, следующего фейсбука и прочего булщита которым кормят все эти стартап-школы. найдите какой-нибудь успешный существующий продукт поскольку нас интересуют небольшие saas, то можно смотреть на indiehackers или producthunt если у вас есть ресурсы на что-то по-больше, то можно посмотреть на недавно проинвестированные компании на techcrunch. для этого выбирайте технологии которые вы знаете лучше всего или на которые проще всего нанять дизайнера дальше, по поводу идеи: если у вас ещё нет какой-то проверенной идеи в которую вы верите и хотите строить, то вот вам почти 100% вариант. для начала вы должны чётко понять, что этот сайд-проект не для развлечения не стоит брать экспериментальные технологии или пытаться создать свой гугл с блэкджэком и проституткамивы хотите получить прибыль желательно на постоянной основе. если работа в стартапе не ваш вариант или вы не можете найти будущего единорога, то есть вариант запустить свой стартап ну то есть сайт-проект)это не просто и не каждому подходит но есть пара вариантов. если он не выстреливает и загибается, то ваши опционы конечно превращаются в фантики тем не менее, очень многие стали миллионерами таким способом много-много миллионеров калифорнии это бывшие инженеры fb/google/apple, которые пришли на заре компаний. вот один из способов вы устраиваетесь разработчиком в стартап на раннем этапе развития и работаете там 3-4 года за это время вам насыпают опционов, довольно много и хороших если стартап выстреливает/выходит на биржу/его покупают — вы получаете нехилую сумму. к инвестициям вернёмся чуть позже, пока продолжим значит мы оптимизировали зарплату, инвестируем свои накопления, что дальше? какие способы построить капитал для программиста. инвестиции - не про заработок денег или увеличение дохода инвестиции это когда у вас уже есть деньги и вы хотите их сохранить и преумножить они работают только когда вы идете от x до y но когда вы молоды, то вы идете от 0 до x, для этого инвестиции плохо подходят. как только устаканили зп надо подзадуматься о двух вещах: инвестиции и привлечение доходов, которые не зависят от вашего времени сразу закрою тему инвестиций: я не эксперт совсем тут, их вы без труда найдете в интернете но кое-что понял. опыт senior developer может получать $60-$80к в год работая на удаленке на штатскую компанию. не знаю это сарказм или нет, но отвечу серьезно)я всегда вот что думаю: вот получаю я 300к/наносек но что будет если завтра я ослепну (вполне реальный страх для программиста)? на что буду жить я и моя семья? и сразу понимаю что не могу полагаться на текущую зп. устраиваемся на удаленку в зарубежную компанию и живем в провинции в рф цена часа большая, расходы низкие думаю из такого расклада можно выжать около 500к р/мес +/-неплохо, но это максимум плюс всегда есть большой риск потерять работу временно или навсегда. итого, зарплату мы можем заскейлить до m*n и иногда она может быть помножена на 0 из-за непредвиденных обстоятельств максимизировать профит можно подняв стоимость часа до максимума и снизив расходы до минимума для нашей профессии это делается так. мы можем работать n часов в сутки и получать m шекелей за час m зависит от того сколько стоят ваши навыки на рынке в вашей местности также зарплата может резко сократиться до 0 если вы заболеете, получите неисправимую травму или больше будете не нужны на рынке. первое и самое очевидное — зарплатавы меняете своё время и навыки на деньги все это делают, большинство только этим и живёт у зарплаты есть такие свойства: она ограничена кол-вом часов в сутках, вашими умениями и часто геопозицией. фуф, ну и денёк сегодня выдалсякак и обещал, давайте поговорим немного про бабки все их любят, всем они нужны для того, чтобы влачить своё существование но где их взять, как сохранить и преумножить? пока я пишу тред кидайте свои варианты. господа и дамы, кто считает также? мне видится это логичным развитием событий, но думаю похоронить такое количество кода не удасться ещё лет 100. а разработчики, в большинстве, как писали говнище за оверпрайс, так и будут его писать. одно будет идти за другим, тяжело сказать в какой промежуток времени кажется local-first придётся ждать намного дольше. предсказание шестоелюди слишком полагаются на online софт: фигма, гугл доки итд когда-нибудь им надоест что их жизнь зависит от работы этих сервисов и они начнут создавать local-first software. предсказание пятоетут к бабке не ходи, arm процессоры скоро вытеснят intel с серверов это приведёт к оптимизации работы дата-центров, к удешевлению облаков и возможно ещё к чему-нибудь. предсказание четвёртоеесли в ближайшее время (10-20 лет) создадут квантовые процессоры для масс-маркета, то почти весь софт придётся выкинуть и написать заново все алгоритмы шифрования просто перестанут иметь смысл. предсказание третьеcloud-ide типа станут ещё более распространены сейчас там уже можно создать и задеплоить небольшое веб-приложение, в будущем возможности и adoption будут только увеличиваться. предсказание второепервое предсказание приведёт к тому, что инструменты и компьютеры станут настолько сложными, что мало кто будет понимать как они работают единицы сохранять знание, а может и вообще никто тогда сложная техника станет техно-культом/религией. предсказание первое разработка будет становится проще и проще, особенно для непрограммистов no-code тулзы станут настолько мощными, что можно будет создать почти любой софт без написания кодакомпиляторы тоже станут умнее любой говнокод будут превращать в нормальный. всем доброе утро ☕️чем ближе к пятнице, тем расслабленнее разговоры) сегодня побуду бабкой-предсказательницей и буду предсказывать куда будет двигаться разработка в ближайшем будущем а также хочу поговорить про денежки: зарплаты, сайд-проекты и инвестиции. абсолютно верно!)всегда будут нечистые функции но если уменьшить количество и исключить их влияние на чистые функции, то тогда вам будет легче работать с вашим кодом и потенциально у вас будет меньше багов потому что вы будете аккуратнее дизайнить его. при таком раскладе вы точно можете быть уверены, что какой-нибудь postgres или email api никак не влияют на логику вашего приложения. чистые же функции генерят правильные запросы для базы, генерят письма и пользовательский интерфейс, запросы в сетьони производят вычисления, а грязные функции берут результаты этих вычислений и отправляют их во внешний мир. ответ в том, что чистые функции идут в паре с грязными функциями и вместе они создают нашу программу грязные функции находятся по краям системы и пишут в базу, отправляют письма, рисуют на экране пользователя, ходят в сеть. исходя из вышеописанных свойств становится ясно, что с чистыми функциями работать проще, они меньше подвержены багам и проще поддаются тестированию но если чистые функции не могут ничего делать во внешнем мире, то как их вообще использовать???. 5 чистая функция проще для понимания человекомв программировании самая простая полезная единица это функция проще функции только чистая функция при ее чтении вы не переключаете контекст, не держите в голове глобальные переменные, следовательно вам легче с ней работать. 4 чистые функции легче рефакторитьпоскольку ваша функция не зависит от и не меняет внешний мир, вы можете переписывать внутренности как угодно и когда угодно не боясь что что-то сломается ничего не сломается если вы не поменяете ее сигнатуру). 3 результат работы чистой функции можно мемоизироватьэто значит, что вы можете запомнить результат функции для определенных аргументов и когда она вызовется с этими же аргументами, вы можете не считать всё заново, а достать сохранённый результат из словаря. 2 referential transparencyэто значит что вы можете заменить вызов этой функции значением которое она возвращает например, ваш компилятор может произвести оптимизацию и посчитать функцию во время компиляции, удалить её и на ее место просто поставить результат. 1 облегчённая тестируемостьтак как они не меняют внешний мир и не зависят от окружения, их очень легко тестировать просто передайте нужные аргументы и проверяйте что вернулось вам не нужны моки, не нужно эмулировать окружение. выполнив оба этих требования вы получаете чистую функцию нарушив хотя бы одно из них, функция теряет некоторые/все свойства, которые делают ее удобной в использовании что за свойства?. итак, чистые функции чистой называется такая функция, которая: 1 всегда возвращает один и тот же результат при одних и тех же аргументах;2 не оказывает никакого влияния на внешний мир - никакого io, работы с глобальными переменными, бд итд. а так же мы (squire) сейчас в поиске нескольких фулстек-инженеров (javascript) удаленка, зарплата в долларах, куча интереснейших задач если интересно - пишите , расскажу подробности). и вы легко можете использовать это для своего преимущества главное дать им знать о себе заполните linkedin и заполните профиль на также смотрите вакансии на stack overflow. и ебучих размеров дыра посередине: очень мало мидлов, которые просто могут работать и деливерить фичи американцы любят заполнять эту пустоту разработчиками из снг и восточный европы они не требуют много денег но при этом исправно работают и деливерят. за рубежом (я знаю про сша, возможно в европе тоже) есть следующий тренд: очень много выпускников из универов которые могут пойти стажёрами и очень много сеньоров, которые хотят быть сто и не хотят кодить. первое что вам нужно сделать - заполнить профиль на linkedin в большинстве случаев вы начнёте получать предложения о работе при наличии релевантного опыта часто эти предложения включают в себя работу на зарубежную компанию или релокацию.  ну и не могу не порекомендовать.  к примеру по рынку ес они на меня вышли в линкеде - это в итоге была моя первая работа в берлинеадекватные рекруты, которые шарят но их предложения часто средненькие. отличный вопрос! и у меня есть ответ: постоянно получаю вакансии в зарубежные компании, устроился в американскую компанию через один интересный сайт и не я один :)вот небольшой список ресурсов где можно найти вакансию за рубежом. мне кажется что нужно сделать усилие над собой чтобы хотя бы вас худо-бедно могли понимать и потом сразу в языковую среду американцы очень толерантны кстати к проблемам с языком :). господа, пожалуйста не воспринимайте всерьёз то что написано в этом треде нормальная инфа про чистые функции скоро подъедет, сегодня очень загруженный день на работе, но вы держитесь если кому есть что сказать - велком в реплаи. не знаю как насчёт европы, но в штат ситуация не однозначная средняя зарплата $40k-$50k в год разраб может спокойно получить в 2, а то и в 3 раза больше. полностью чистой может быть только функция, программа всё равно должна взаимодействовать с миром во втором варианте мы вынесли нашу логику в чистую функцию чтобы с нашей логикой (то что важно) было работать проще функция decidepage - чистая :). квартира в мск есть, а за бугром нужно будет снимать сложно соотнести зп там, сопоставимую с текущем уровнем жизни не хочется терять окружение здесь в целом по итогам переезд кажется осмысленным только на 250к в год+ в фб/гугл. функциональный подход добавляет немного формализма: он говорит какие части стоит отделить друг от друга (чистые логику от грязных действий). так разве не в этом суть любой архитектуры? разбить программу на такие части, которые легко тестировать, понимать и изменять. мнения по-тихоньку делятся, так что сделаем небольшой перерыв, а потом вернёмся к фп и потом к теории и разработке япесть ли у тут кто-нибудь, кто хочет релоцироваться, но не может по каким-то причинам? что вас останавливает?. ну а синтаксис - дело привычки) лиспы являются неотъемлемой частью истории computer science, знать что-то о них как минимум интересно и полезно, если вас когда-нибудь занесёт, например, в разработку яп. крайне рекомендую! даже если вы не будете никогда писать на clojure(script), знание этого языка даст вам много приёмов для повседневной работы, какой бы вы язык не использовали). слава богу я этого не делаю тк пишу в основном либо на статически-типизированном языке, либо на языке, которые всегда возвращает последний expression (без early return). несомненно информационные пузыри играют роль но также вы можете обратить внимание что clojure сообщество намного более активно: я, например, участвую в обоих комьюнити и разница заметна: по кол-ву участников, сообщений и вообще обсуждений плюс по кложе куча конференций :). о чем сейчас все думают? неужели о политике?. это же был пример чтобы показать разницу). хорошая задумка, могло бы получится неплохо с ресурсами фб, но сейчас я ничего не слышу про язык а так да, типы, паттерн матчинг, быстрая компиляция, ocaml, всё круто) но, как сказал, не уверен будет ли он развиваться. если для вас чистые функции это преждевременный рефакторинг, то мне жаль. утречка всем!признавайтесь, начало недели было душноватым или норм? может вам надоела эта вся техническая хрень и хочет поговорить про что-то типа зарплат или релокации?если да, то пишите в реплаи). не, это не то) в кложе у вас есть репл - живой процесс, в который вы загружаете весь свой код представьте дебаггер, который не блочит выполнение кода вот вы можете делать всё что угодно внутри работающего приложения без его перезапуска. завтра ещё рассмотрим мою любимую clean architecture и как ее можно улучшить с помощью функциональных подходов). во-вторых, написать тест для нашего варианта 2 намного проще не нужно ничего мокать, подставлять и проверять изменился ли dom достаточно вызвать функцию с нужными параметрами и смотреть что она вернёт. такое понимание позволяет легче обнаружить ошибку и исправить её мы можем безбоязненно внести изменения в функцию и быть уверены что не сломали другую функцию ведь мы не трогаем код за ее пределами, не пишем в shared переменные trivial!. в чем профит? во-первых, мы отделили зёрна от плёвел и нам легче понимать код мы смотрим внутрь decidepage() и ясно понимаем что она делает нам не нужно загружать мозг тем, какое сейчас значение вон той глобальной переменной или доступна ли сеть. может показаться, что варианты идентичны или даже что первый вариант проще для понимания на самом же деле, кусочки кода фундаментально различаются в примере 1 мы всё делаем в одном месте, а в 2 - отделили принятие решения от его исполнения. рассмотрим на примере: нам нужно загрузить какие-то данные с сервера и на основе этих данных отобразить что-то на экране вот два способа это сделать. использование фп на полную также подразумевает что ты дизайнишь свой код должным образом например, ты начинаешь делить код на effectfull и effect-free/pure ты отделяешь принятия решений от исполнения этих решений. поговорим об отличительных чертах фп и что вообще фп даёт нам начну с того, что функциональное программирование это не просто map/reduce просто писать чистые функции недостаточно точнее этого достаточно, но так просто ты не сделаешь всё чистым. мне очень понравилась мысль о том, что парадигма программирования как понятие устарелоесли смотреть под этим углом, то фп/ооп это набор практик, которые можно использовать для написания своего кода а можно и не использовать. удивительно насколько адекватные ответы собрались под этим твитом! когда я говорил о фп в меня чуть с говном не сожрали. хм, если честно я особо не воевал есть темплейты, в которых 99% параметров стоят как надо npm зависимости ставятся легко, прод билд обычно собирается 1 командой без плясок с бубнами. сейчас в языках смешались разные парадигмы и стили программирования слышал даже мнение о том, что понятие парадигма программирования давно устарело. как может выглядеть этот баланс?. пока народ офигивает от синтаксиса лиспа, предлагаю плавно перейти к разговорам о фп пока я буду на рабочих созвонах, расскажите что для вас есть функциональное программирование, практикуете ли на работе? что думаете, станет ли эта парадигма доминирующей?. ахахаха, к такой реакции всегда прикрепляю вот эту картинку :d. и это не ваш обычный hot-reload clojurescript не перезагружает всё приложение, ваш стейт никуда не пропадает). а самое главная фишка в том, что clojurescript полностью меняет dev cycle вы можете компилировать ваши функции отдельно от всего кода, в любой момент посмотреть/поменять значение любой переменной, вызвать любую функцию прямо из редактора и увидеть результат в браузере. он оптимизирует, делает tree-shaking и ещё много всяких приколюх ну и конечно тебе не надо ставить тысячу инструментов для сборки своего проекта всякие бандлеры, минифаеры и прочая ересь просто не нужны, всё внутри. он использует динамическую типизацию (как и жс), только не слабую, а сильную обращение к js коду идет без каких-либо обёрток код получается раза в 3 короче и выразительнее выходной js правда великоват, но это решается с помощью google closure compiler. этот язык лаконичен, минималистичен, а главное, очень хорошо продуман потратил очень много времени на дизайн этого языка, отполировал со всех сторон.  : я привык за пару недель на самом деле, после реакта и редакса привыкаешь воссоздавать структуры без мутаций и все — ни каких сложностей для освоения не остается скобочки паринфер помогает расставлять рефакторить с ним очень удобно!. вот как выглядит его синтаксис если кто никогда не видел. ну и я хотел был рассказать вам про язык, который считаю лучшим из compile-to-jsвстречайте, clojurescript да-да, вам не по казалось, я считаю этот инопланетный язык с кучей скобочек best-fit в экосистему js. всё, конечно, может измениться с появлением common runtime в браузере может webassembly и поможет, но пока слишком рано об этом говорить, слишком тяжелый доступ к браузерным апишкам у него. reasonml - принести фп и хиндли - милнер в мир фронтенд-разработки у всех разная степень успеха, и как бы мне не хотелось писать на своем любимом языке для веб, кажется исход их всегда будет одинаков забвение после следующего релиза ecma. вот языки, которые специально таргетятся в js, это другое дело их обычно создают чтобы решить какую-то проблему, которая есть в js coffeescript был призван исправить синтаксис js, typescript - убогую типизацию. крайне сомневаюсь в эффективности такого подхода ведь знание языка это совсем малая доля: тебе ещё нужно знать всякие web api, dom, css и кучу другой фигни помимо языка ну может ты скалу в жс перегонять, а что толку, если знаний фронта у тебя всё равно нет. как я упоминал выше, условно все эти языки мы можем поделить на 2 группы: существующие и новые существующие это те языки, которые существуют вне экосистемы js, но компилируются в js чтобы было чтобы существующие разрабы могли войти в браузер и что-то состряпать. вы назвали много языков программирования, которые компилируются в js хоть js и не compilation target, люди всё равно продолжают создавать новые языки чтобы заменить js думаю это не потому что js плохой, а потому что у него статут-кво в веб-разработке. нифига себе, уже 6 лет этому аккаунт :) поздравляю вас всех ребята). неплохие языки, со своими плюсами и минусами думаю адопт не такой большой потому что фронтенд-коммьюнити ещё не готово к такой системе типов и синтаксису а elm ещё и форсит форматирование своё специфичное. чувак gradle только и делает что занимается сборкой проекта а javac только компилирует больше ничего никакой сборки, только компиляция. ну и конечно делает ещё много чего: может создавать исполняемые архивы, добавлять туда ресурсы, подписывать итд. вы пишите баш скрипт в который прячите вызов компилятора но теперь вы удалили 2 файла, вам нужно переписывать скрипт а потом добавили 1 опять править скрипт gradle сканирует директорию с исходниками и вызывает компилятор со всеми файлами, которые там найдёт. понять зачем нужен gradle очень просто если у вас есть 10 java-файлов, то вам нужно их все передавать компилятору: javac  если у вас 100 таких файлов, то начинаются проблемы. именно это я имел ввиду, когда сказал что ни компилятор ни линковщих не занимается сбором ваших исходных текстовых файлов вместе вы делаете это либо вручную, либо с помощью билд системы надеюсь теперь у всех есть хотя бы поверхностное понимание и нет путаницы в терминах. системы сборки автоматизируют шаги, которые иначе пришлось выполнять бы вручную и, как побочный эффект, они умеют собрать все ваши файлы с исходниками в одну кучу и скормить их в нужном порядке компилятору сам компилятор этого не умеет. тут-то вам на помощь и приходят системы сборки типа gradle/make/gulpвы им говорите где лежат ваши исходники и они по-очереди вызывают компилятор со списком всех файлов и нужных флагов, ассемблер, линковщих и всё остальное. дальше вы запускаете ассемблер, в который передаете столько же флагов и output компилятора, через запятую и потом запускаете линковщих со всеми obj-файлами он уже всё собирает воединокороче ни в java ни в си вы не можете сказать compile src/*, хренушки. сначала запускаете компилятор, передаете туда 100500 флагов и список всех ваших исходников в нужном порядке через запятую линковщик не занимается собиранием всех ваших исходников в одно место чтобы компилятор их скомпилил, как выразился этот господин . а вот где это абсолютно опциональные тулзы но без них вам будет очень больно проблема заключается в том, что все вышеописанные этапы нужно запускать отдельно. этим всем занимается линковщик он берет все ваши obj-файлы, статические библиотеки, ставит их в нужном порядке, связывает и генерирует исполняемый файл вуаля! можно запускать свой говнософт это всё круто, скажете вы, но где тут make/gradle/gulp?. этап 3 линковкау нас есть инструкции для компухтера в виде obj-файла, но мы всё ещё не можем их исполнить во-первых, наш код может ссылаться на другие obj-файлы и сторонние библиотеки во-вторых, для того, чтобы запустить нашу прогу, нам нужен исполняемый файл. этап 2 сборка (assembly)процессор не может выполнить код на asm, поэтому нам нужно запустить assembler и перегнать наш asm в конкретные инструкции для выполнения процессором на выходе мы получаем obj-файл . этап 1 компиляцияэтап компиляции сам состоит из нескольких этапов, задача которых перегнать ваш код на си в код на asm они включают в себя лексический, синтаксический, семантический анализы, генерацию кода и оптимизацию кода на выходе у нас код на asm . итак, в самом простейшем случае процесс компиляции ваших каракулей в исполняемый файл происходит в 3 стадии: - компиляция- сборка (assembly)- линковкав си есть ещё препроцессинг, но мы его трогать не будем, он сейчас не так важен . вчера в теме про transpilers возникло недопонимание в терминах, а потом вскрылось непонимание процесса в общем дабы вас больше не вводили в заблуждение, вот небольшой тред про процесс сборки и компиляторы разберем на си, потом замапим на js. я пингану). на сегодня план примерно такой: закончим разговор про compile-to-js (вчера ничего толком не рассказал), сделаю небольшой тред про компиляторы чтобы ни у кого больше вопросов не осталось и дальше чуть посрёмся про фп и вообще языки. мы с семьёй уже поставили первую дозу, скоро вторая знакомые со штатов рассказывают интересную вещь: у них прививка доступна не всем, а только пожилым молодым пока нельзя поставить. всем доброе утро! ✌️надеюсь все хорошо выспались) как у вас дела с ковид, много кто переболел? много кто поставил/будет ставить прививку?. я не люблю поправлять, но почему у всех такая каша в голове? линкер не занимается сборкой исходников он собирает/линкует несколько модулей, которые сгенерировал компилятор, в одинлюбая билд-система это «тупо таск раннер», но в этом и есть ее суть. но с другой стороны, изменения синтаксиса ocaml в сторонунепонятно чего постоянные переделки этого самого синтаксиса от версии к версии а теперь ещё и тихо как-то стало, новостей от фб не очень много его там не закапывают часом?. с одной стороны, задумка супер-интересная: строгий, функциональный язык, с выводом типов и чертовски быстрым компилятором еще и с большой компанией за плечами, ну чем не сказка. что у нас дальше опустим всякую банальщину типа scalajs и kotlinjsочень интересный экземпляр , вызывает у меня много-много противоречивых чувств. только что проверил, coffescript мертвее мертвого впрочем, не удивительно js быстро развивается, добавляя свой собственный синтаксический сахар. насколько мне известно, первым среди популярных был красивый язык, писал даже на нем немного (случайно) кто-нибудь сейчас на нем пишет или он уже все?. это более строгий сабсет ts компилируемый в wasm но так же может быть странслирован и в javascript через tsc насчет того, какие js quirks он фиксит довольно многие если не почти все ну например:. господин, реквестирую гостевой тред про assemblyscript: что такое, как развивается, что интересного из языковых фич). у ts вроде синтаксис 1 в 1?. иногда есть и другая причина: кто-то считаешь js не очень удачным и они пытаются улучшить его, создавая новый язык, который компилируется в js by design сегодня мы рассмотрим языки из обеих групп. у меня есть свой любимый, но об этом потом) откуда такое разнообразие? думаю и ответ на этот вопрос очень прост: не всех тех, кто хочет писать для веб, устраивает js и они пытаются использовать свой любимый яп. штош, похоже побеждают compile-to-js languages, поговорим о них) какие ваши любимые?). не каждый язык должен работать в режиме baby sitter. транслятор это обобщенное название для всех преобразований из исходного представление в конечное компилятор - это hi level low levelтранспилятор - это hi level hi level (но другой)бинарный транслятор - low level (asm) low level (asm). траспилятор же делает примерно то же самое, только на выходе у него код на высокоуровневом языкеа слово составлено таким образом: source-to-source translator translating compiler transpiler. компилятор (внутри которого есть парсер, несколько анализаторов, оптимизатор и генератор кода) берет ваш код (ничего не зная о файлах), парсит, анализирует, оптимизирует и производит низкоуровневый код например javac берет java и производит java bytecode. вынужден оспорить) компилятор не собирает исходники воедино хотя бы потому что он не знает об исходниках компилятор работает с текстом программы, сборкой воедино обычно занимается билд-система (gradle/maven/make). так-с, ну-ка проголосуйте за вечерний топик. что интересно, транспайлеры можно применять чтобы рефакторить свой говнокод, использовать новые фичи языка или апгрейдить версию (python2 python3). то есть компилятор обычно производит код более низкого уровня (javabytcode, casm), а transpiler - того же (javajs, tsjs). transpiler или source-to-source compiler это такая программа, который код на одном языке переводит в код на другом основное отличие от классического компилятора заключается в том, что оба языка одного уровня абстракции. но несогласные не сдавались когда не получилось подвинуть js, они сделали финт ушами свои любимые языки они стали транспилировать (ближайший аналог к русскому компилировать) в js итак, что же такое ваш этот transpiler?. пытались, но не получилось причин было много, но думаю основная - лишние телодвижения установки плагин на много-мегабайт, перезагрузит страницу, встреть баги, опять перезагрузис какой скоростью расширялся js, с такой же скоростью умирали плагины типа silverlight. так, safari только что самолично перезагрузил страницу и удалил черновик твита, который я писал кажется js чувствует что я не очень хорошо о нём отзываюсь. мы до этого ещё дойдем ). мне кажется, что браузер уже вышел за пределы html это уже не просто просмотрщик страниц но система распространения софта не далёк тот день когда будет взаимодействие не только браузер-сервер, но и браузер-браузер без turing-complete яп веб бы далеко не уехал имхо. я тоже бы предпочел чтобы вместо интерпретатора js в браузеры встроили lisp-машину, но всё-таки почему?. это всё конечно круто, но главенствующая позиция js в вебе устраивала не всех потеснить чемпиона пытались разными способами: java applets, silverlight, flash (светлая тебе память) ставь лукас если помнишь java и c# в браузере. golang абсолютно не экспрессивен, он как си хочешь описать более или менее сложную конструкцию - пиши процедурную лапшу в stdlib нет абсолютно никакой работы с коллекциями ну и синтаксис конечно не очень приятный, как будто из прошлого столетия. согласен, golang та ещё поделка. всё вышесказанное понятно, но почему же он так популярен?тут всё просто: дизайн языка не влияет на его популярность влияет рантайм разрабам нужен был самый короткий путь их кончиков пальцев в браузер, они его получили :). привидение типов это лишь один пример из многих странностей js, не буду духариться насчет остальных, уверен вы уже много об этом слышали)как мне кажется, ему просто не уделили достаточно времени в начале, а теперь он тянет груз прошлых ошибок . например, почему в js решили всё приводить к строке?да скорее всего потому что так было тупо проще зачем париться о привидении типов, если всё можно в строку!. чем проще ты хочешь сделать язык, тем дольше ты должен думать над его реализацией убирая сложность из user land ты прячешь её под капот а это не так просто. вот тут мы и подходим к посредственной реализации не знаю насколько правдивы рассказы про дизайн языка за 7 дней, но то, что над дизайном подумали мало это видно. итак, благородная цель — есть примерное представление о будущем языке — есть но было ещё кое-чтонадвигающейся релиз netscape (второй звоночек) он должен содержать в себе интерпретатор какого-либо яп для написания скриптов для веба. ту же самую цель преследовал sql - быть доступным широкому кругу людей сказано - сделано осталось лишь решить каким должен быть язык для браузера примерно сразу становится понятно что это должен быть динамический интерпретируемый яп. начнём с идеи идея была благородная — встроить язык программирования в браузер, который в то время мог отображать только статические документы причём этот язык должен быть прост в освоении для веб-мастеров и не самых одаренных программистов (первый звоночек). полностью согласен со всем что вы ответили под этим твитом думаю дуализм складывается из двух (хех) важных факторов: отличная идея для языка но посредственная реализация сейчас поясню. пойдём от частного к общему и, прежде чем обсуждать разные яп, поговорим про камень преткновения современности - javascript его обожают и ненавидят критикуют дизайн, но используют в каждом утюге ваши версии, какова причина такого дуализма мнений?. ахах, можно и в обратном. в марте 2018 на меня выходит нью-йорский стартап squire technologies и предлагает пилить приложухи для барбершопов вот уже три года я с этими замечательными ребятами, позади $100m инвестиций, а впереди путь к единорогу :). в середине 2017 я немного устал красить кнопки и мне предложили поработать project manager в той же компании, пообещав деняк и власти работа была интересная, но денег что-то не было поэтому я решил опять красить кнопки, но уже в другой компании. поэтому я продолжал пилить мобильные приложения (добавив к андроиду ещё и ios) и параллельно изучать кучу разных яп и функциональное программирование думаю в то время у меня было больше 10 разных компиляторов установлено. в 2015 я устроился андроид-стажёром в небольшой аутсорсинг в краснодаре было непростое время, но я быстро учился и впитывал всё, что мне давала компания и окружение) уже в 2016 я заинтересовался языками программирования как сферой разработки. тред-знакомство! я представлюсь вам, а вы можете рассказать о себе в комментах, буду рад со всеми познакомиться итак, сейчас я работаю в классной компании squire (не square) как engineering manager но начал я свою недолгую карьеру в 2015 году. вот список некоторых тем, которые я постараюсь осветить на этой неделе:- будущее веба, разработки и яп- webassembly, webbundles и другие новые технологии- end-user programming- функциональное программирование, теория яп- compile-to-js languages. всем привет! эту неделю вам вещать буду я - тимофей плотников, engineering manager особого порядка по дням придерживаться не буду, но у меня есть список интереснейших тем которые мы будем обсуждать). неделя пролетела, надеюсь хотя б пара тредов была для вас полезной, а кое-где и смешной так вышло что именно в эту неделю у меня обнаружилось типичное проф заболевание айпишников , но ниче справимся пишите мне в , я не прощаюсь, часть тредов продолжу как обещала. было и до кучмы. может быть вообще мне сказали что уже про js все уже обсудили если есть что обсудить, давайте на стол, будем. ох прям за живое. метод отрывного бесконечного блокнота? одобряю!. да, знакома я и с этими исследованиями однако критика такого подхода меня убедила, что перехват менее вероятен, чем вскрытие хорошего пароля в безопасности это неплохой тактический ход: ставь на то, что менее вероятно. так тоже можно, почему нет знаешь, у меня даже такие размышления были завести отару овечек и альпак, делать вкусный сыр, собирать шерсть круто было бы сразу пейзажи красивые вспоминаются. не переживай, это все проходили. рада что ты нашел достаточный уровень упоротости для себя, это здорово!. тоже не плохо, рада что ты смог остановится на приемлемом уровне упоротости. почему бы и нет :). конкретней вопрос, плз, а то не понятно, какую из уязвимостей ты имеешь в виду. это я уже не говорю про специальные теоретически возможные закладки бэкдоров на уровне программирования процессоров (ни доказать ни опровергнуть которые нет никакой возможности). звуковых колебаний окон (это помимо прямой видимости, если необходимо), электросетей, электромагнитного поля компьютера, звуки издаваемые процессором (во время шифрования или генерации случайных паролей). те говорите, если упарываться то по полной? ну оооок а что если ваш компьютер хотят взломать не по сети? звуки нажатия на клавиши (и не только) доступны микрофону телефона, когда вы пользуетесь приложениями с соответствующим доступом снять сигнал также можно с. да, пока что не рассматриваем ;). я боюсь отвечать. до самого сердца. старенькое, но тож сгодится в другом комменте добавила ссылок. есть малеха, это я еще контрольный в голову не делала да и зачем? люблю вас всех! вы такие классные! с вами одно удовольствие вести дискуссии!. относится конкретно к киипасс, но надо иметь в виду). keepass сам писал?. ты проиграл, если передаешь любые креды/пароли через любые мессенджеры а если через почту, то ты проиграл 2 раза. вот это интересно, я бы послушала аргументы :). ты проиграл, если логинишься где-либо через общедоступные (кстати, необязательно) wifi сетки. ты проиграл, если не используешь 2х факторную аутентификацию. ты проиграл, если не лочишь свой комп, когда отходишь позвонить. ты проиграл, если используешь менеджер паролей. ты проиграл, если не меняешь ключи/пароли каждые 2-3 месяца. ты проиграл, если твой пароль короче хотя бы 20 символов. ты проиграл, если не используешь пароль на ssh ключ. итак, ты проиграл, если не пользуешься инкогнито модом браузера. итак, ты проиграл, если у тебя установлены плагины на браузер. предлагаю посоревноваться: кто более упорот по безопасности?. всем здравия! признавайтесь, кто уже заработал себе на протрузии и грыжу?. как раз та же история, надо же!. так говорите, будто это плохо. чтоб не потерялись :). ирония еще и в том, что я ведь училась по специальности защита информации с ограниченным доступом и автоматизация ее обработки ну казалось бы кто как не я должна была понимать это?. второй фейл был как раз с кредами меня он не особо чему-то научил и я закоммитила их еще раз уже в другом, более оплачиваемом проекте после серьезного втыка, я не повторяла своей ошибки. мой первый фейл был полной потерей бд прода, бэкапов не было мне наверное повезло, тк зп было маленькое и я не сильно себя истязала но с тех пор я всегда слежу за бэкапами и других за это пинаю один из самых полезных фейлов был. то значит вас ждет что-то совершенно феерическое. к примеру, рано или поздно вы все таки закоммитите креды в репу, расшарите инфу с доступами там, где не надо было, завалите прод, удалите коммерческие данные из бд без бэкапа, не рассчитаете нагрузку на сервера и тд кароч вариантов - полно если фейлов у вас еще не было. но это все равно не уберегает от, они происходят, потому что жизнь - это боль каждый специалист проходит через ряд фейлов, таким образом он закаляется. для устранения собственного недостатка в знаниях (учитывая js fatigue), я налаживаю общение с коллегами, чтобы мы могли поддерживать и валидировать те или иные решения друг друга и заметьте: не для себя лично, а для того чтобы общий проект не пострадал. далее, моя задача определить те области, в которых это наиболее вероятно может произойти те скорее всего это произойдет на пограничных областях, в которых я уже «плаваю». мой рецепт я начну с того, что я себя подготовила заранее: непогрешимых людей нет я человек значит я рано или поздно сфейлю. без проблем. вопрос шикарен и многогранен, я как раз планирую об этом рассказать. давай, поможем, чем сможем. вечер в хату! сегодня меня постила странная, но не заразная болезнь, поэтому пишу вам прямо из кровати и предлагаю обсудить такую тему: как пережить свой фейл? у меня есть пара рецептов, но и вы своих накидывайте, не стесняйтесь. напишу вам с другого аккаунта , когда этот перейдет к новому владельцу. насколько я знаю, существуют также типа конкурсов чтоли, по выполнению различных задач в вебшторме, где учитывается, в том числе, количество хоткеев за которые ты сможешь решить задачу может есть у кого ссыль на такое?. благодарю! это сказывается отсутствие общения с нормальными людьми простите!. потому что массивы обходить можно научить, а вот думать научить - очень трудно. дальше продолжаем историю моих фейлов? мне еще есть чем похвастать :). мнение 5: изменение требований происходит постоянно, невозможно угодить заказчику, по тыщу раз переделываем, а он все недоволен, еще и грозится ничего не платить за переделки. мнение 4: изменение требований происходит крайне редко, тк это разработчик плохо понял бизнес-задачу и выполнил ее на уровне на тобі собака, та не гавкай. мнение 3: есть бизнес-задача, которая точно должна быть решена в срок, но разработчик ее не понимает, независимо от длительности и количества объяснений у заказчика нет другого мотивирующего механизма, кроме денег поэтому он отказывается оплачивать время разработчика. мнение 2: я не вполне компетентен, чтобы даже предположить как мои желания могут воплотиться в жизнь мне нужен достаточно компетентный специалист который расскажет как можно решить мою задачу, а я, основываясь на предложенных вариантах, хочу иметь возможность выбирать. мнение 1: решать таски безопаснее для психики понимать бизнес-задачу - это тратить усилия впустую, тк все равно много раз поменяются требования а так у меня будет прикрыт зад, тк делаю строго по тому, что написано в таске ко мне не подкопаешься. прошу прощения за долгий перерыв, не так просто совмещать твиттер аккаунт в рабочим графиком, но я стараюсь давайте я новую тему задам и пойду отвечать по всем комментам: что влияет на архитектуру приложения?. простите, подбор слов - не мой конек. я даже не надеялась что кто-то это напишет! но я так тебя понимаю!. вы же плагином шарите? верно? а то може я тож чего не знаю :). есть прикольный плагин key promoter x, если вы не знаете какими клавишами можно было бы сделать рутинные задачи, то он вам будет подсказывать где можно было бы ускорится. в webstorm есть такая штука, как перформанс гайд здесь вы можете увидеть насколько эффективно вы пользуетесь им (наверняка в vscode тоже есть, кто знает - пишите, чтобы людям найти было проще) как видно у меня перформанс где-то на дне. крутая штука, одно надо учитывать: компания на которую вы работаете, должна знать что вы пользуетесь ею тк это сторонний плагин, которому вы предоставляете доступ не только к коду, но и к потенциально приватной/коммерческой информации. ухты, не видела такого. боже, какие вы котики!!. не совсем туда ответила, но бог уже с ним, пусть тут лежит. плюс не надо допиливать самой пример: надо завести карма тесты с ангуляром, хочу запускать их как в вебшторме, чтобы было дерево тестов и возможность запускать по одному в вебшторме из коробки, а в vscode этот плагин вообще не завелся. я бы не сказала что фичи, но прям отсутствие болезненных багов в вебшторме для меня основное преимущество (если говорить в дополнение к ответам выше). под вебшторм и под vscode - есть. мне так жаль может мы можем зайти проголосовать за таску? вдруг возьмут в работу?. благодарю! вот этого не знала!. конструктивно и по делу. а плагины? дно?. да и почему в ущерб продуктивности? мне очень понравилась фича в одном из eap, когда появилось наглядное покрытие кода тестами ну и помогала его улучшать чем же плоха волонтерская работа по улучшению того инструмента которым пользуешься?. вы как-то превратно понимаете мои слова за свой вебшторм я плачу сама из своего собственного кармана я лишь хочу смотивировать начинающих разработчиков изучить очень удобный инструмент не вижу здесь никаких проблем а вы?. пошли дальше, в достаточно продвинутых ide есть такие штуки как configuration , в vscode тоже есть, в других не знаю, подсказывайте. а значит сейчас eap недоступен и появится где-то через месяц после релиза (ну +/-). почему 60 долларов в год? это же лицензированная версия столько стоит а eap - это программа раннего доступа, вы получаете возможность работать в новой версии вебшторма не оплачивая его только в том, что релиз, если я не ошибаюсь будет в марте. начнем с того, что можно пользоваться, помимо триальной версии, бесплатной версией вебшторма (хоть и не без проблем и примерно раз в год, немного заранее до релиза и немного позже после релиза он не доступен) - eap webstorm узнавая о новинках след релиза - первым. у меня так было с поиском, меня через некоторое время убедили давать шанс вебшторму примерно раз в год спустя 3 года меня уже все устраивало может и у вас так будет?. я пользуюсь webstorm и знаю что его не любят начинающие разработчики за то что он платный много лет назад я пробовала перейти с netbeans на phpstorm и долго на него плевалась, тк механизм поиска для меня был просто неприемлем много воды утекло с тех пор, многое поменялось. сегодня давайте поговорим про: самые полезные лайфхаки ide (и не только) хочу поделиться тем, чем сама пользуюсь и чем хочу научиться пользоваться круто будет, если в этом трэде вы утрете мне нос и ваши лайфхаки будут полезнее моих. совсем забыла за своих домашних у меня еще питомцы есть. может так и есть, а тебе просто стирают память чтобы своих не выдала?. ну а название? название энва? :). а можно и не волонтерить :) достаточно просто сказать: хочешь такое общество? как ты его видишь? что мы уже сейчас можем начать делать, чтобы оно наступило как можно скорее?. присоединяйтесь :) это же так круто!. один же энв :), тестовый. конференцию с такой поддержкой не могут себе позволить оон и давос, а это, мне кажется, о чем-то говорит. так и был создан проект #созидательноеобщество , просто собралось очень много волонтеров и решили действовать да просто посмотрите последнюю конференцию, которая прошла 20122020 созидательное общество вместе мы можем миллионы подключений по всему миру, на 30+ языков онлайн. возможно такие есть, но нам пока что не попадалось если уже 20 миллионов таких то может все такие? надо же узнать, может мы все хотим одного и того же, и если да, то ведь можно и построить то, чего все хотят просто надо узнать и подсуммировать общее, что объединяет всех. и почему бы нам этого всего не получить? что мешает? волонтерское движение собирает уже 9 лет интервью по всему миру (больше 20 миллионов проведено), мы пока что не встретили ни одного человека, который бы не хотел жить в мире, не хотел бы безопасной жизни для своих детей. хочется нормальной жизни, не оглядываться по сторонам, в поисках опасностей, в том числе в поезде, когда спишь хочется создавать что-то полезное для людей, чтобы это реально работало и помогало так почему этого всего мы не имеем?. это не говоря уже про более глобальные вещи, вроде войн, моров, землятресений и извержений вулканов нам пока что повезло, что ничего критически важного не происходит, но никто не дает гарантии что так будет всегда. или например сейчас делают рейды по домам престарелых находят неисправности, закрывают дома а куда престарелым людям деваться? на улицу вместо того чтобы исправить помещения или найти новые, и дать людям достойную жизнь разве это человечно?. она мне ответила: ну что вы, сейчас совсем не те времена, вы же сами все видите, за ребенком нужно постоянно присматривать, а то мало ли что да и далеко ходить не надо, вспомнить недавние аварии разве человек, который ценит жизнь каждого человека, сядет пьяным за руль?. я могу озвучить то, что конкретно я хочу чтобы было: чтобы ребенок мой безопасно мог выходить гулять не только на придомовую территорию, но и в магазин за покупками однажды я спросила своего психолога: могу ли я отпускать свою 7ми летнюю дочь гулять на улицу саму?. это я как раз поняла, а вот продолжение? почему захотелось добавить еще дополнительный энв? я вот такие штуки очень люблю разбирать, я в конце напишу какой вариант оставил мне падаван, если раньше этот вариант кто-то не озвучит. благодарю!. ну а че! для своих же детей и родных, разве не стоит?. определенно, ей не хватает меня рядом где могу, перекрываю качеством проводимого вместе времени когда другой бы родитель взял ремень и отлупил - мы разговариваем не скажу что вообще не бывает проблем, но их точно меньше, тк нет ни времени ни сил на злость. вопрос, кстати, прямо в цель дочь, конечно, знает о существовании, но бесконечно мало хотя, мне кажется, что в том числе благодаря такой активности я не реализовала (во всяком случае в большом количестве кейсов), тот базовый беклог, который достался от родителей к счастью!. на вкус и цвет мне кажется делают же волонтеры в свободное от основной работы время ну и это коллективная работа более 100 дизайнеров они так видят, почему бы и нет оно понимаешь, не так-то просто договориться с кем-то, у кого другие взгляды на мир, но пробовать - стоит!. интересно :), а почему test-1_?. да любой, какой первый в голову лезет. задача продолжи последовательность:необходимо создать отдельный энвайрмент для тестов в файлике с энвайрментами уже существуют есть такие имена:prod-1prod-2prod-3dev-1dev-2как бы ты назвал(а) энвайрмент?. помню как просто запомнила что обьект передается по ссылке, а простые типы данных - копии. чтоб ты понимал я понятия не имела ни о лексическом энвайрменте, ни о замыканиях (хотя где-то уже подозревала это) про структуры данных и паттерны услышала уже, когда пол года проработала на проекте сейчас только понимаю как мне крупно повезло с коллегами. только сейчас понимаю боль ильи, когда вспоминаю как я писала на extjs версии 4 чтоли мне кажется он в это время жалел что позвал меня, кстати, очень удивляла архитектура фреймворка фраза на то время: «но это же не логично!» вообще есть люди которые педалили под него?. уже не существует, поэтому думаю можно сказать: navitron. несмотря на то, что писал попередник, хочу внести в этот тред больше холивара, если позволите очень нравится мне одна задачка (она не на программирование, а на думание). можно и так, кому как комфортнее, есть люди, которым больше нравится разбираться самим, или смотреть видосики. само собой, могу отдельно прочитать лекцию по мясу , если кому интересно. теперь можно есть :) готовится он очень быстро, запахи - офигенные, если с мясом повезло, то врядли с этим что-то можно сравнить (сливочного масла не жалей, оно идет соусом) еще раз продублирую финальную фотку (кстати не обработана, именно так он и выглядит). переворачиваешь, теперь делаешь температуру на 4 (ближе к слабому огню, чем к сильному), под мясо кидаешь кусок масла ~50грамм, чеснок (лучше раздавить), траву (розмарин и тимьян обязательно) тушишь, поливаешь подливой строго две минуты с каждой стороны достаешь, ждешь 10 минут. кидаешь на сковородку на 45 секпереворачиваешь, еще 45 секпереворачиваешь (+ если сковорода-гриль можно заморочится: вращаешь что бы полосочки с предыдущего раза пересекались клеточкой) еще 45 секпереворачиваешь (с учетом сковороды-гриль) еще на 45 сек(всего 4 раза). разогреваешь сковороду по максимумупросто вот ваще (лучше чугун)пока греется: 1) кусок мяса промокнуть что б сухой был 2) если есть, разрезать плотные участки жира расстояние 2-3см (без фанатизма) 3) вымазать в соли и перце и чутка оливковое масло. #вырезка все же получше будет перед первым приготовлением один человек (не будем показывать пальцем) сказал: «стейки женщинам, говорят, не даются», а потом написал #рецептстейка:. (моих рук дело): #степеньпрожарки blue #мясо: козятинский мясокомбинат, #антрекот говяжий отборный вес: 394гр вкус - отличный, но вот мягкость хочется понежнее. итак, марина! для тебя!начнем с того как выглядит идеальный стейк #дляпривлечениявнимания. и кто больше? кто выграёт?. например, первые полтора года своей программерской деятельности (напомню, это мониторинговая онлайн система слежения за транспортом) я вообще не была в курсе что такое xmlhttprequest и ajax в частности. кстати, хотите рецепт стейков? даже если вы не оч разбираетесь в мясе, вероятнее всего у вас выйдет вкусно а если с мясом повезет то еще и сочно и нежно, такого вы точно нигде не пробовали! в рестиках так не делают (поверьте, знаю о чем говорю). ой как здорово! люблю такое!. конечно, но я его очень плохо веду , очень безответственный твиттеровод. привееет! я так рада тебя тут встретить!. в первую очередь стоит самому разобраться в основной идее на сайте + можно участвовать на любом этапе подготовки таких интервью, в том числе быть соведущим, или помогать в распространении инфы. интервью проводятся уже более 9лет, больше 20млн интервью проведено и мы не собираемся останавливаться, тк задача в короткие сроки опросить все человечество о том: в каком обществе люди хотят жить, какие шаги мможно предпринимать уже сейчас для перемен. вот к примеру в прошлую субботу я была ведущей интервью как раз по созидательному обществу: вообще приглашаю всех поучаствовать, тк это очень круто разговаривать о том, что тебя вдохновляет. ой, это вообще уже не проект, а часть жизни! #созидательноеобщество это международный проект для всех людей, главная цель - развитие человечества, главная ценность - жизнь каждого человека, главный приоритет - безопасность жизни. есть очень смешные (вообще нет) истории о том что я знала, не знала, и к чему это привело поделиться?. последние 1,5 года в b2b сфере, что-то вроде платформы для менеджмента чего угодно но со своей спецификой (фронт). международный волонтерский проект для обучения статистике и исследований (бэк/фронт/десктоп/девопс),. // а вот примерно с этого времени я более менее была осознанным специалистомngx-bootstrap под ангуляром 2 даже не в альфе (фронт), база данных на nodejs (бэк, тесты, девопс, бигдата, cha tool, cli tool),. странная коммерческая онлайн игра (бэк/фронт), сайт аггрегатор для дубаев + какая-то дичь со страхованием (бэк/фронт),. мониторинговая система слежения за транспортом (фронт/бэк), система управления работой банка в продажной сфере, типа отчеты, учеты, акции, бонусы (фронт/бэк), довольно известная платформа для блоггинга и жаренных новостей в америке (фронт/тесты/бэк),. платят-то хоть достаточно? на хлеб с маслом и икрой хватает?. интересно узнать про проекты в которых участвовала? просто чтобы это было что-то интересное, а не как строчки из резюме. по разработке: уже так давно в javascript, что страшно вспомнить (больше 11 лет), всем говорю что я бэкэндер (потому что выросла именно на нем), но проанализировав, поняла что и фронта было не мало. капуста кольрабикапуста пекинскаякапуста молодаямолодой картофельогурцы пикули. по образованию: магистр по защите информации с ограниченным доступом и автоматизации ее обработки боже, надеюсь когда-нибудь у людей не будет секретов. кулинария это прям мое: люблю овощи и фрукты, божественно жарю стейки, знаю рецепт борща-симфонии, восхищаюсь вильямом похлебкиным (мечтаю замутить ютуб-блог по всем его книгам), знаю все про суши, кофе и витамины с микроэлементами (есть даже свой стикер в телеге). мой девиз: если во что-то ввязываться, то по уши. одно ж другому не мешает. коротко о себе: 37 лет, улыбающийся пессимист, люблю javascript, член пк #holyjs, любящая и непутевая мама 7летней дочери и жена, волонтер в мод аллатра, участник проекта #созидательноеобщество. ну что? начнем сразу неделю с боли? понедельничный вброс, а потом пойдем знакомиться:выполняем таски или решаем бизнес задачи?. неделя подходит к концу надеюсь вам понравилосьесли да, то подписывайтесь на меня тут или пишите на. 6 надо быть очень отважным, чтобы отправить компартии скан своего паспорта при регистрации в huawei appgallery- не инвестируйте в китайские компании не потому что у них рисованная отчетность ( а потому что риски слишком высокие. 5 мораль тут простая:- не пользуйтесь китайским софтом, в том числе zoom- не пользуйтесь китайским железом понятно, что так или иначе всё собирается в кнр, но если и r+d китайский (как у huawei), то бегите, глупцы- не сливайте свои персональные данные в сервисы, типа tiktok. 4 то есть он буквально подделывал скриншоты, на которых неугодные властям люди стоят на фоне флагов запрещенных ближневосточных организаций и транслируют детское порно. 3 кроме простого отключения таких конференций, сотрудник zoom создавал поддельные учетные записи на имена полит диссидентов кнр, чтобы сфабриковать доказательства того, что они подстрекают к насилию и распространяют детскую порнографию. 2 в 2020 году выяснилось, что сотрудник zoom сливал китайскому правительству данные пользователей, которые критиковали власть или просто обсуждали события на площади тяньаньмэнь. 1 многие не знают, что большая часть разработчиков zoom находятся в китае и поэтому они открыты для давления китайских властей ( руководитель zoom – американец китайского происхождения eric yuan. сложно придумать какую-нибудь тему на сегодня, помимо политики по политике в рф каждый может сделать собственные выводы, поэтому давайте лучше расскажу о том, как и когда китай загрузит детское порно на ваш компьютер. ради науки. идея для исследования обучить нейронку, которая по твоим взрослым фоткам определяет - ты это на детской фотографиям или нетможет уже есть такое? или хотя бы датасет. у меня в руках есть что-то я не знаю что именно у меня в руках и поэтому спрашиваю тебя - не фрукт ли это?const fruits = [apple, pear]const item: unknown = jsonparse(1)fruitsincludes(item). есть планы починить. 3 если же вы посмотрите на includes как на boolean(arrayfind(), то все встанет на свои местано я все равно не согласен с таким поведением рано или поздно ts это исправит, как исправили isfinite запомните этот твит. я кстати знаю, что в те времена у них не было дженериков, но контент сам себя не напишет и лайки сами себя не соберут. 2 а как там у нормальных пацанов? в c# нет includes, но есть indexof:string[] robots = { r2-d2, bb-8 };int lexx = 790;int pos = arrayindexof(robots, lexx);c# не ругается, спокойно возвращает -1. ясно понятно. 1 моя логика такая: у меня в справочнике есть список фруктов и я хочу узнать, является ли арбуз фруктом или нет я ожиданию простой ответ - да или нет?includes(val: any): booleanно ts говорит мне, что я не могу задавать такой вопрос где массив создавали туда и обращайтесь. следующий пример чуть сложнее:const robots = [r2-d2, bb-8]const isrobot = robotsincludes(790)ts запрещает такое писать, тк тип выводится из массива arraytincludes поэтому я могу передать в includes только строку. 3 у ts была другая мотивация на самом деле для твой безопасности, сынок чтобы ты вместо isfinite(getnumber() случайно не написал isfinite(getnumber)в ts 38 починили конечно но осадок остался. 2 тут можно возразить, типа передай намбер, чтобы узнать инфинити это или нет но у нас нет метода isinteger, а typeof nan сломан поэтому у меня нет другого способа узнать число или нет, кроме isfinite. 1 разумно было бы предположить, что сигнатура будет такой:isfinite(val: unknown): booleanно ts считает, что правильнее типизировать так:isfinite(val: number): booleanну знаешь, передай мне намбер, а я скажу тебе намбер это или не намбер. поехали дальше как вы думаете, какой тип прописан в ts для аргумента val в numberisfinite(val)?прежде чем ответить, посмотрите спеку метода: если val равен nan, +-infinity или не number, то верни false- в остальных случаях верни true. 6 я понимаю, что это звучит как «покайтесь, ибо грядет», но если оставить microsoft без конкуренции, то js-сообществу может быть нанесен сильный уронпоэтому, разумно будет поддержать flow и др инициативы, типа чтобы оказывать постоянное давление на ts. 5 заиграл ли новыми красками typescript-слоган «ts это всего лишь надстройка над js»?поддержать, надстроить и уничтожить. чтобы описать их стратегию внедрения в отрасли программного обеспечения, использующего широко распространённые стандарты, путём расширения этих стандартов и дальнейшего использования этих отличий для получения преимущества над конкурентами. 4 проблема в «embrace, extend, and extinguish» «поддержать, надстроить и уничтожить» — фраза, которая, как было установлено министерством юстиции сша, использовалась в корпорации microsoft. 3 но потом microsoft напряглись и бросили все силы на поддержку react и у них отлично получилосьв итоге, выбирать flow было плохой идеей еще в 2017 году, а сегодня за такое можно вообще в дурку попастьтак в чем же проблема заехать полностью на ts и забыть про js?. 2 подробнее про это см сегодня такой подход находит сторонников среди лидеров мнений - вы пишите на vue 2, то скорее всего у вас нет другого выбора, кроме jsdoc + ts-check связки. 1 на этом преимущества flow заканчиваются раньше многие выбирали flow, тк у него была лучше поддержка реакта у ts с этим всё было настолько плохо, что я даже топил за связку jsdoc + dts. чтобы понять насколько flow превосходит ts достаточно взглянуть на этот код:type user = string | undefinedconst user: user = undefinedconst welcome = hello, ${user}в какой ситуации мне может понадобится «hello, undefined»? при этом flow мне скажет cannot coerce user. они ожидают, что ты знаешь как быстро возводить в степень -. ночной js-ts-flow срач?. 5 а как правильно? можно было бы просто взять reduce, но если тебе сегодня ко второму уроку, то вот моё решение:const mapped = name, value }) = [name, value])return objectfromentries(mapped)красиво? рука сама тянется к солнцу ☀️. да, тк typeof это не функция, а оператор а скобочки это просто возврат, вот так понятнее:typeof((((1). 4 дальше начинаются проблемы со скобочной записью в propey accessors если бы мне платили по 1$ каждый раз, когда я вижу такой код, то я был бы долларовым миллионером:. 3 что может быть проще? любым перебором прошлись по массиву и заполнили объект проблемы начинаются как раз с перебора никто почему-то не хочет использовать reduce или foreach или хотя бы for of начинают писать обычный for, путаются в индексах и ничего не работает. 2 пример хорошей задачи: напишите функцию, которая на вход принимает массив типа:[ {name: a, value: 1}, {name: b, value: 2} ]а на выходе возвращает объект:{ a: 1, b: 2 }казалось бы примитивная задача, но как и fizzbuzz, она круто выявляет пассажиров. 1 пример плохой задачи - плохая задача, тк она проверяет знание а не умение писать код если бы проверялось умение писать код, то я бы написал:const str = new array(n)fill(x)join(*)return eval(str). конечно от теоретических вопросов на собеседованиях не очень много пользы ведь продуктом жизнедеятельности программиста является код поэтому кажется разумным оценивать умение писать код покажу пример плохой и хорошей задачи на написание кода. 4 желательно, чтобы человек знал еще какой-нибудь язык, помимо js typescript подходит, тк считаю его отдельным языком обычно проверяется это вопросами на общий кругозор, например, что такое кортеж, множественное наследование и тп. 3 в качестве троллинга, чтобы разрядить обстановку, можно спросить typeof(typeof)именно в таком написании но мне потом всегда становится стыдно за такое поведение. 2 я не вижу смысла спрашивать wtf-вопросы, типа typeof null или [] * {} - 0 + , тк практического смысла от них нет не могу представить, в какой ситуации вам нужно умножать массив на объект но знать 4 + 2 было бы неплохо, тк даже ts вас от этого не спасет. 1 в мейле я уже сам нанимал людей в свою команду и принимал решение самостоятельно (вместе с руком группы) обычно я начинаю со скрининга по базовым js-вопросам, например typeof [] дальше можно углубиться - как именно определить массив? какие минусы у instanceof?. новая тема - идеальное собеседованиев яндексе я был собеседующим программистом, те проводил интервью и ставил оценки - на какой грейд, на мой взгляд, подходит кандидат но я не принимал решение о найме, тк собеседование состояло из серии встреч (. какой инструмент посоветуешь?. у нас prettier везде интегрирован, те запускается с помощью eslint --fixпопробуй этот конфиг поставить последним в списке extends тогда он затрет все ненужные правила eslint. из-за своей хрупкости они требуют слишком много ресурсов людям надоедает отсматривать диффы и апрувить измененияя жду когда machine learning разовьется до такой степени, то научится сам определять - где поехала верстка, а где просто дизайн поменяли см. катиться оно конечно должно автоматически а возврат в разработку это один клик на фича-флаг, который мгновенно выключит новый функционалразработчики ведь не настолько тупые, чтобы совсем сломанный функционал катить если и будут проблемы, то в мелких edge-кейса. да, но здесь вопрос компромисса между скоростью, затратами и гарантиями бывают проекты в которым темп намного важнее, чем гипотетические проблемы у 01% юзеров. с enzyme у меня намного больше опыта, еще со времени работы в яндексе но если столько людей советует testing library, то нужно попробовать). cypress выглядит классно, но у меня, к сожалению, нет опыта работы с ним. у меня почти нет опыта с testing-library, поэтому не могу подказать многие в этом треде высказались против enzyme хотя у меня с ним особых проблем не было, но возможно стоит получше изучить react-testing-library. если все это использовать на максимум, то можно отказаться от кучи тестов и релизиться хоть по 20 раз в день о любых проблемах вам сообщат метрики и мониторинг. 1 обмазаться кучей технических и бизнесовых метрик2 мониторить ошибки (sentry и тп)3 практиковать blue-green deployment4 использовать feature flags с сегментацией аудитории (условно говоря, у вас должна быть возможно открыть фичу для 1% юзеров). в продолжение вчерашней темы про тестирование есть вариант почти полностью отказаться от unit- и e2e-тестов, чтобы выпускать релизы быстрее для этого нужно всего лишь. в итоге идеальное тестирование это:- typescript strict: true- prettier + eslint с кучей плагинов типа sonarjs- unit-тесты на логику и утилиты (которая в папке utils, helpers, etc)- enzyme-тесты на переиспользуемые компоненты (которые в storybook)- e2e-тесты с codeceptjs. 6 звучит заманчиво, но я никогда не видел чтобы менеджеры или аналитики писали e2e-тесты а для программистов, gherkin это лишний слой абстракции, который рано или поздно протечет (как и любая другая абстракция)подробнее в статье. 5 если puppeteer завтра умрет, как умер webdriver, то вам не нужно будет переписывать свои тестыокей, а может лучше взять полноценный dsl типа как раз сможем посадить менеджеров писать e2e-тесты. 4 крутость codeceptjs в том, что вы можете взять любой раннер, не важно webdriver или testcafe, puppeteer или playwright получается что-то типа dsl, который запустится где угодно но только это не dsl, а нормальный javascript-код. 3 можно, конечно, писать тесты напрямую в puppeteer, но вам точно понадобится удобная работа с локаторами, page objects и тд поэтому обычно к puppeteer добавляют среду для тестирования; и лично мой фаворит это от. 2 поэтому лучше взять решения, которые базируются на родных api браузеров, например или. 1 используя selenium-библиотеки вы получаете кучу очень хрупких абстракций возьмем, например, = webdriverio = selenium = java-интерфейс = драйвер под конкретный браузерна каждом из уровней вас ждут проблемы, прям как в фильме начало. что взять для ui/e2e-тестов?. const comp = shallow(mycomponent isloading={true} /)expect( compcontains(spin /) )toequal(true). 6 нормальный тест в этом случае должен быть примерно таким: рендерим компонент с { isloading: true }, а в теле компонента просто ищем spin / с помощью - хорошо, нет - нет. 5 секрет в том, что никто никогда не смотрит что там в снапшоте потому что они огромные и постоянно меняютсяно если хотите продать бизнесу идею, что у вас покрытие тестами 146%, то можно использовать. 4 в теории звучит классно: кидаем в пропсы {isloading: true} и в снапшоте мы увидим что срендерился какой-нибудь spin / а если кто-то сломает наш компонент, то мы визуально (!) увидим, что снапшот поменялся и теперь там нет спиннера. не настолько отвратительно как когда менеджер проекта подходит к бэкендерам и поет песню ну где же ваши ручки?. а как правильно? конечная точка?. 3 в погоне за высоким покрытием, многие фронты упарываются по (не путать с тестированием скриншотами!)но я не понимаю что именно тестирует snapshot какая мне разница в какую структуру отрендерился react? какие гарантии нам дает эта структура?. 2 готовые конфиги (типа eslint-config-airbnb) мне не нравятся тем, что они смешивают стилистические и логические правила для стилистических обычно хватает а логические придется вручную собирать среди кучи плагинов, о которых я говорил выше. 1 в основе пирамиды на мой взгляд должны стоять не unit-тесты, а строгая типизация и строгие линтеры помимо стандартных eslint-плагинов, типа react, react-hooks, jsx-a11y, node, promise, impo и тд, обратите внимание на: и. с бэкендом определились идем дальше по пирамиде тестирования. 3 если же у вас swagger, то можно взять любой json-валидатор, тк формат ответа swagger это обычная json schema и вы можете взять условный для валидации всех ответов чтобы не нагружать клиент, лучше это делать внутри bff или на стейдже. 2 научите бэкендеров версионировать api и расширять ручки без ломающих изменений естественно, доверять на слово нельзя должны быть автоматические проверки всех ответов бэкенда на соответствие схеме в graphql это работает из коробки. 1 99% багов возникают на стыке систем условно говоря , на фронте все ок, на бэке все ок, а баги возникают в процессе их взаимодействия бэкенд поменял формат ответа и забыл вас об этом предупредить - и все сломалось поэтому в первую очередь решите вопросики с бэкендом. победило тестирование начнем с обсуждения того, из-за чего чаще всего возникают баги на фронте. традиционный обзор сентимента наблюдаем сильную поляризацию в обществе. отличная вчера была аквадискотека, но во всем важна умеренность сегодня не будет никакой провокации давайте вместе определим темы:. с первым вариантом мы вчера определились, что graphql-бэкенд вам никто не даст поэтому остается один единственный правильный вариант - mobxо плюсах и минусах mobx подробно написано в статье. так какой способ работы со слоем данных мне выбрать? если посмотреть на stateofjs, то у вас всего два варианта:1) graphql, apollo, relay2) mobx. ну а если вы начали новый проект с redux-saga, то имеет смысл сменить профессию. если же в 2021 году вы начинаете новый проект с redux, то имеет смысл задуматься о своем предназначении в жизни разве для этого вы родились? чтобы писать бесконечный бойлерплейт?возьмите хотя бы и забудьте про трудовика как про страшный сон. благодаря повальной чипизации населения общий интеллектуальный уровень людей растет поэтому каждый год удовлетворенность редаксом падает, с 93% в 2016 году до 67% в 2020: что имеет смысл хотя бы познакомиться с альтернативами. второе преимущество redux - его дикая популярность расскажу, что делать, если в детстве трудовик оставался с вами наедине, сажал к себе на колени и заставлял писать на redux. да, это проблема и redux и context api или обмазываешься мемоизацией/селекторами или наблюдаешь 3 fpsу нормальных ребят эта проблема решена из коробки:. 6 конечно большинство фанбоев ничего не слышали про идемпотентность, но крутость этого слова заставляет их успокоиться и хотя бы посмотреть в сторону mobx. 5 по правде говоря, редакс-фанбоям не нужна иммутабельность сама по себе их просто привлекает ореол крутости фп - чистые функции и все такое в таких случаях я объясняю фанбоям, что методы mobx хоть и не являются чистыми, но они идемпотентные. 4 почему нельзя просто повесить new proxy() и логировать вообще все что угодно, хоть каждое обращение к объекту?ах да, в ie11 ведь нету proxy ну что ж, печально работать на проекте, который поддерживает браузер, от поддержки которого год назад отказался сам microsoft. 3 говоря о преимуществах иммутабельности, часто упоминают простоту логирования и возможность поднять приложение из снапшота состояния но почему для логирования вы вдруг решили брать старое состояние, сравнивать его с новым, а разницу выводить?. n+1, dos, авторизация. если писать на yaml, то более-менеес качеством сгенерированного кода согласен, но зачем в него заглядывать? ты же его используешь как черный ящик, дергая только публичные методы. 2 но в реальном мире вам для текстового редактора скорее всего понадобится режим совместного редактирования и там уже нужно реализовывать совсем другие паттерны, а не примитивный memento. 1 в какой ситуации вообще вам может понадобиться иммутабельность на фронте? мне в голову приходит какой-нибудь текстовый редактор, чтобы легко можно было реализовать undo/redo. если серьезно, то преимущество редакса это иммутабельность koно вы платите огромную цену ради нее - бойлерплейтом, производительностью и скоростью разработки поэтому возникает вопрос - действительно ли вам настолько сильно нужна иммутабельность?. традиционные слова поддержки на этот раз от благодарных подписчиков. сегодня обсудим управление состоянием если вы думали, что в предыдущие дни были неаргументированные набросы, то вы ошибалисьчтобы вы правильно понимали ситуацию, я планировал твитнуть сегодня расскажу про преимущества редакса и целый день потом ничего не писать. прекрасный день, чтобы покинуть свой дворец и окунуться в пучину javascript-разработки. graphql отлично зайдет если вы начинаете проект с нуля в этом случае вы просто берете и увольняете всех бэкендеров во всех остальных случаях используйте swagger. в итоге из swagger-схемы вы получаете красивую документацию, типизированный сервисный слой для запросов к api и опциональную рантайм валидацию ответов бэкендазачем вам graphql? тем более что нормально поддержать graphql способны три с половиной бэкендера на планете. 10 ну а что вы хотели? это вам не graphqlподобная проблема описана в ишьюсе я так понимаю, его просто закрыли год назадс typescript-axios ( таких проблем нет поэтому внимательно выбирайте генератор. 9 не знаю как оно работает для swagger v2, но на третьей версии я получаю нормальный тип:loginmethod(): promiseloginsuccess | loginfail;но вместе с типом генератор решает сходить регуляркой по всему файлу и поставить эту палочку везде, даже в импортах:. 8 качество генераторов ( очень разное возьмем, например, typescript-fetch и попробуем сгенерировать клиент для swagger-схемы с полиморфным ответом oneof что-то типа такого:. 7 но что гораздо круче – это то, что, помимо типов, можно сгенерировать и полноценный клиент с помощью не нужно вручную создавать сервисный слой для работы с api, писать реквесты, типизировать вход-выход и тд. 6 из этой схемы дальше мы генерируем typescript-типы я пробовал разные библиотеки, но остановился на у тебя клиент на ts, то тебе все равно пришлось бы писать типы вручную вместо этого легче написать swagger-схему и сгенерировать типы. 5 если бэкендеры сопротивляются, то мы сами начинаем писать swagger внутри фронтовой команды то есть буквально вручную пишем yaml-схему на методы, которые дергаем и описываем ответы, которые ожидаем. 4 но лично я в таких случаях практикую другой подход первым делом нужно попросить от бэкендеров машиночитаемую документацию хоть в каком-нибудь виде raml, postman - не важно обычно они соглашаются на swagger. 3 первая мысль, которая в такой ситуации приходит в голову, - а давайте сами поднимем graphql-сервер и напишем резолверы к существующему rest apiоб это, например, рассказывал на holyjs:. 2 но проблема в том, что бэкендеров, которые только вчера отказались от soap или rpc в пользу json rest api, довольно трудно заставить заехать на graphqlпоэтому расскажу, как получить developer experience хотя бы приближенный к graphql. 1 graphql крут тем, что из коробки дает тебе документацию, валидацию запросов/ответов и ts-типы об этом подробно рассказала на прошлой неделе. идем дальше расскажу, что делать, если физрук оставлял вас после уроков и не давал пользоваться graphql. 8 отсутствие серверного приложения под фронтом дает кучу преимуществ например, - это голая статика ее можно задеплоить в любой cdn или даже просто в s3стенд на каждую git-ветку, никаких пятисоток, здоровый сон, крепкий аппетит. 7 в итоге, если у вас нет выделенной инфра-команды или вы не чувствуете в себе силы заехать на serverless, разумнее всего не начинать bff я видел кучу примеров, когда команда из двух фронтов начинает играться в бэкендеров получается как на картинке:. 6 и последнее про serverless в 2020 году хорошо выстрелил 5$ вы получаете 10 млн запросов, 1 gb key-value storage и все это автоматически доступно на всех cloudflare локациях, прямо как cdn только не забывайте, что многие подсети все еще в бане рнк. 5 из рф-провайдеров поддержку я знаю только от yandex cloud functions ( большой минус для остальных провайдеров. 4 однако даже в этом случае вам, скорее всего, нужен будет cloud devops. 3 соло фронтэнд-команда может затащить bff только в публичное облако взять какой-нибудь serverless framework и задеплоить в aws будет дорого, но без облака такой же производительности, надежности и масштабируемости добиться почти невозможно. 2 bff - это отличное решение, но только если у вас очень сильная команда инфры деплоить, мониторить, балансировать, логировать - все это не так просто, как кажется если у вас нет выделенной команды инфраструктуры (или сильных devops), не стоит в это ввязываться. 1 bff - это адаптер к внешним api, который агрегирует запросы из разных источников и отдает на фронт в удобном для фронта видев яндексе bff используется повсеместно подробнее в статье от -. начнем с bff. добрые слова поддержки от друзей на сегодня. новый день - новая тема сегодня обсудим вопросы взаимодействия с бэкендом. ребята, которые разрабатывали продукты на coffeescript, тоже контролировали его версию как там у них дела? обновились до coffeescript 251?. но используя yarn сегодня вы подписываетесь на то, чтобы быть вечным бета-тестером в этом нет ничего плохого, но старые люди скорее предпочтут подождать когда yarn вольется в npm и станет там чем-то типа nightly-версии. я достаточно старый, чтобы помнить времена, когда вокруг iojs был такой же хайп, как вокруг yarn сейчасiojs был производительнее и затаскивал новые фичи намного быстрее nodejs. пока нормальные ребята думают над impo-maps, чтобы механизм резовалва был единый для всех платформ: неважно браузер это, nodejs или даже deno (там вообще нет npm)как ваши resolutions будут работать в impo-maps? никак:. во-первых, непонятно как resolutions работает для вложенных зависимостей? никак: если вам по какой-то причине нужно будет отказаться от yarn, что вы будете делать?. yarn крутой, кто ж спорит но это не стандартвозьмем например выборочное разрешение зависимостей: функция, но только npm ничего не знает о ваших resolutions в packagejson. в файле solidarity описываешь какое окружение тебе нужно: в pre-commit хуке вызываешь команду solidarity, которая падает, если окружение не соответствует ожидаемому. да, ты прав я проверил сейчас, будет две версиино меня напрягает то, что у коллег могут быть разные версии npm (или вообще yarn) и непонятноиспользуют ли они один и тот же алгоритм установки. он выполнит в той последовательности, в которой команды объявлены в scriptsеще можно просто через пробел вызвать:npm-run-all build:css build:js build:html. кто дает гарантию, что твой проект адекватно будет работать с версией 201, если ты его тестировал только с 200? это вопрос доверия к разработчику пакета (что он следовал semver). представь, что твой проект зависит от х-пакета ^200 package-lock разрезолвил 200потом ты устанавливаешь новый пакет, который зависит от х-пакет 201 если указана версия ^200, то х-пакет установится один раз, версии 201. и, пожалуйста, никогда не используйте yarn в продакшенеyarn - это песочница, в которой тестируются самые безумные идеи когда эти идеи стабилизируются, они плавно перетекают в npm на сегодняшний день единственное преимущество yarn перед npm - это логотип. можно завести регулярную задачу (раз в месяц или в квартал) на обновление пакетов с помощью с полным регрессом, тестами и тд. в packagejson всегда имеет смысл указывать конкретные версии, особенно в dependencies секции указывая примерные ~version или совместимые версии ^version, вы как бы говорите себе:«все javascript-разработчики – это разумные люди, которые строго следуют semver». а так как лучше доверять машинам, а не людям, то есть смысл декларативно описать окружение с помощью и проверять его при каждом коммите (husky + lint-staged). чтобы npm install у всех разработчиков резолвил пакеты одинаково, нужно договориться, чтобы все сидели на одной версии node и npm (обычно это lts) добавьте эту версию в поле engines:. в итоге npm install нужно использовать только при добавлении новых пакетов в проектесли вам надоели пул-реки с +2к изменений, то можно написать тест, который будет падать, если в pr есть изменения в package-lock файле и при этом нет изменений в packagejson. во-первых, имеет смысл приучить всех в команде пользоваться командой npm ci при установке зависимостей, а не npm install это полезно не только в ci/cd, но и при локальной разработке, тк обычно у разработчиков разные версии npm, и пакеты могут резолвиться по-разному. package-lockjson. в старых проектах еще бывает полезно время от времени проверять packagejson на неиспользуемые пакеты в этом помогает depcheck и npm-checkу них, конечно, бывают проблемы с ложноположительными результатами, обычно из-за webpack resolvealias но в целом, свою задачу решают. также имеет смысл добавить packagejson свойство:private: trueчтобы случайный npm publish не выкатил ваш код в публичный npm если вы думаете, что с вами такого никогда не произойдет, то у вас optimism bias (. windows wsl опять же. сорри, не до конца разобрался исправлюсь)кстати, худший ux over делит мой личный топ с фейсбуком. в целом да, можно не париться но обычно находится пару человек, которые сидят на win например, тестировщики они имеют доступ к фронтовым репам, чтобы прописать data-атрибуты и тп. если одна из команд упадет, то остальные будут остановлены с sigterm в ci это работает стандартно - ненулевой выход если хоть одна проверка завершилась неудачно. не не, стартап стал частью дрофы, а не яндексе дальше все это стало частью росучебника. аудит безопасности пакетов должен стать частью ci/cd органично впишем в наш список команд:test:audit: npm audit --audit-level=high. test: npm-run-all --parallel test:*test:lint: eslint **/*{ts,tsx}test:types: tsctest:unit: react-scripts test --watchall=falseпросто и чётко, как png. кроме того, npm-run-all позволяет одной командой запускать несколько сценариев вместо:npm run build:css &amp;&amp; npm run build:js &amp;&amp; npm run build:htmlможем написать:npm-run-all build:*. в блоке скриптов packagejson не должно быть никаких платформо-зависимых команд например, оператор &amp; в windows cmdexe ведет себя не так, как в bash для параллельного и последовательного запуска команд лучше использовать. как и при старте нового проекта, начнем с особенностей packagejson начнем. на этой неделе я планирую давать короткие полезные советы, которые можно быстро применить в своей работе поїхали. слова благодарности друзьям за поддержку. в яндексмаркете я начал работу над убийцей amazon - маркетплейсом беру, а точнее, над админкой для партнеровчерез полтора года принял от cloud solutions предложение делать убийцу amazon web services. короткий рассказ о себев 2015 году я работал в стартапе, который делал убийцу amazon kindle для школьников стартап стал частью издательства дрофа, а я в 2017 году стал частью яндекса. всем привет меня зовут гафаров назим вы могли видеть меня в качестве докладчика на яндексовых мероприятиях, holyjs и других конференциях изредка пишу статьи на хабре, где пытаюсь несмешно шутить с помощью непонятных отсылок. ага. также надо сказать, что это работает в обе стороны, поэтому дизайнеру надо не бояться приходить к разработчикам и обсуждать планируемый функционал. а я уже :). меня можно найти вот здесь или в телеграмчике. осталось еще много всего, чем хочется поделиться, но нужно себя останавливать :)спасибо всем большое-прибольшое было очень здорово вести jsunderhood на этой неделе если у вас есть какие-нибудь вопросы или фидбек (хороший или негативный) то делитесь, не стесняйтесь :). в macos есть программка - color sync utility там можно посмотреть на 3d визуализации цветовых пространств. поражаюсь что изучая rust можно найти gitbook на каждый топик вот, например, про rust-компилятор. webassembly или wasm не wasm. multistage билды в докере очень удобная штука можно на первом шаге установить все собирающее, собрать, а на втором просто скопировать результат в новый образ. внутрь svg можно закинуть js-строку и она будет выполняться. когда пишешь плагинчик для webpack, есть возможность запустить еще один webpack внутри webpack 👻 и передать ему весь родительский контекст это бывает удобно если надо динамически собрать какой-нибудь дополнительный асет. вот тут большой выбор способов для zsh :). все индивидуально у меня – день :). советы по улучшению продуктивности:1 добавить единорогов в консоль 2 поставить себе какой-нибудь трекер (типа wakatime)3 поставить в трекере цель писать код _меньше_ чем  x часов x выбирается индивидуально у меня x=7. js-парсер v8 очень ленивый он не будет парсить тело функции если вы ее не вызываете. чтобы лениво грузить картинку ставим ей атрибут loading=lazy в хроме это гарантирует только то, что картинка на расстоянии x от вьюпорта будет грузиться лениво (те то что за экраном тоже загрузится) это расстояние зависит от типа текущего интернет-соединения (4g/3g/2g). используя webgl, мы повстречаемся с програмками-шейдерами один из типов шейдеров - fragment shader это програмка которая выполняется для каждой! точки которую мы рисуем и это окей, наши видеокарты ровно для этого и предназначены. и последний тредик – рандомные оклофронтовые штуки :). и есть еще один момент – эффективность сжатия определяется не форматом изображения, а кодеком например, pngшка сжатая без потерь oxipng может весить раза в два меньше, чем сжатая браузерным кодеком. тут все хитро :) любой формат без потери качества может сжиматься с потерями а результат зависит от задачи например, png в режиме суперурезанной палитры будет эффективней jpeg для сжатия картинки с линиями :) есть форматы которые умеют и так и так (webp). в общем – получив прикольное знание лучше выпустить его на волю :) форматов огромное количество: короткое сообщение, публичный gist, пост в блоге ( например). - мы часто экспериментируем с форматами сейчас, например, появилась идея складывать куда-нибудь идеи небольших проектов чтобы поэкспериментировать с технологиями которые кажутся нам интересными возможно это будет работать лучше чем создание собственных пет проектов :). - есть еще два тематических слота у дизайнеров – дизайн-час, у фронтов фронтенд-час мы предварительно собираем список тем и обсуждаем новую на каждом часе. - есть еще один слот где можно пообщаться или просто включить зум и послушать разговоры фоном это мой самый любимый формат, откуда я утащила много полезного дебаг фигма-плагинов, советы по 3d печати, генетические алгоритмы для dl, блокчейн – это все там :). в специальном канале можно написать что было бы интересно послушать и, возможно, кто-то из коллег, обладающих нужным знанием организует рассказ на интересующую тему. - у нас есть специальный временной слот где можно рассказать о чем-нибудь интересном, не обязательно техническом в рамках этого слота мы обсуждали иммунитет, атомную энергетику, японский язык, как летают самолеты, книги, мастеркласс по переговорам и еще много всего. - мы пишем чекины где рассказываем об интересных технологиях/книжках/курсах или просто описываем хорошие решения, которые применили на наших проектах. еще у нас есть канал где мы обсуждаем интересные события с участием или без участия марсиан. как мы делимся знаниями внутри компании:- у нас множество тематических каналов есть общие, типа frontend, backend, design есть посвященные определенной технологии: rust, docker, graphql я просто добавляю все что мне интересно в избранное. мое мнение насчет ой, ну это очевидная штука, зачем о ней говорить – лучше говорить чем не говорить то что пригодилось мне может пригодиться кому-то еще. тред про шеринг знаний внутри компании и вообще везде :)знания и навыки становятся намного полезнее если ими поделиться с другими это в первую очередь полезно для нас, ибо перед тем как поделиться нужно все систематизировать подробно изучить. воскресенье астрологи объявили день рандомного контента :) а пока я его придумываю, вот ссылочка на марсианский телеграм-канал, где мы делимся интересными на наш взгляд новостями и технологиями. ага тут от gif все никак не избавятся :). я точно не считала:) примерно 5. правда, как показывает практика, на нормальных качествах avif особого выигрыша не дает. на низких качествах остальные форматы начинают распадаться на блоки, а avif выглядит очень круто. avif использует универсальный контейнер – heif это универсальный формат для хранения изображений в нем, например, хранятся фоточки на айфонах, пережатые h265 кодеком. способы разбиения на блоки и набор режимов предсказаний отличаются для avif и webp avif более фичастый например, он умеет эффективно хранить повторяющиеся кусочки изображений. например, в качестве предсказания можно заполнить весь блок усредненным значением всех соседних с блоком пикселей. перед тем как раскладывать блок по частотам, мы заменяем его содержимое разностью между реальными значениями для пикселей и предсказанными предсказания делаются на основе соседних блоков. все сказанное выше про частотное разложение актуально для avif и lossy webp а в качестве промежуточной трансформации блока выступают предсказания. avif и lossy webp это просто фреймы видео, пережатого для avif - av1 кодеком, а для webp - vp8 кодеком, уложенные в специальные контейнеры вместе с метаданными. древние форматы (jpeg) пилились индивидуально более новые – lossy webp и avif это побочное следствие того как круто развились видеокодеки. потери это просто зануление коэффициентов для определенных частот. представим себе что у нас есть несколько картинок – базис накладывая базисные картинки друг на друга (допустим с разными прозрачностями) мы можем получить произвольный блок прозрачность – коэффициент нашего разложения а каждая картинка это частота. каждый кусочек (вернее циферки его представляющие) преобразуются специальной математикой преобразований может быть несколько, но конечным как правило является разложение на частотные составляющие (dct) сейчас расскажу что это. для начала каждый канал изображения разбивается на кусочки на какие – зависит от кодека (от формата) получается что каждый кусочек это просто массив целых циферок. не буду вдаваться в подробности сжатия для каждого формата, но попробую показать на пальцах как могут вноситься потери для сжатия. с потерями умеют сжиматься jpeg, webp и avif стоит также отметить, что все форматы без потерь тоже можно сжимать с потерями например, можно сконвертировать png-шку из режима true color в режим индексированной палитры и порезать количество цветов, скажем, до восьми. а это тредик про сжатие картинок с потерями тут все намного интереснее и разнообразнее у сжатия с потерями нет никакого физического предела зато можно задавать разные параметры, влияющие на качество конечного результата. во-вторых разные алгоритмы дают разное качество для разных типов изображений например, если к картинке добавить случайный шум, то она, скорее всего лучше будет сжиматься jpeg-ом а не lossy webp. есть методы оценки визуального качества изображений на основе нейросеточек вот от netflix например. во-первых не существует объективной метрики, способной оценить качество изображения обычно для сравнения используется structure similarity/dissimilarity index этот параметр можно посчитать разными способами. в статьях часто встречаются утверждения типа: формат изображений x лучше y или x сжимает изображения на 23% лучше я отношусь к таким утверждениям с недоверием. lossless webp активно использует predictive coding, умеет учитывать корреляцию между разными цветовыми каналами и хранить повторяющиеся кусочки изображений в виде ссылок в большинстве случаев он дает несколько лучшее качество сжатия по сравнению с png. webp это на самом деле 2 формата эти форматы просто пакуются в одинаковые riff контейнеры в этих контейнерах есть кусочек, называемый chunk header для lossless webp это vp8l. еще png умеет добавлять фильтры к каждой строчке пикселей в изображении (predictive coding) если правильно угадать фильтр, картинку можно сжать эффективнее для сжатия используется deflate. png умеет в палитру, как и гифки, но может сжимать индивидуально каждый пискель (можно работать с разными типами пикселей, rgb/rgba/монохром) можно задавать количество бит, которыми кодируется один пиксель или индекс в палитре. прикольно то, что иногда относительно древний lzw алгоритм дает лучшие результаты чем тот что используется в png. gif самый древний формат ему аж 33 года в основе gif лежит алгоритм lzw, который сжимает 256-цветовую палитру каждый пиксель это индекс какого-нибудь цвета в палитре при этом эта палитра индивидуальна для каждой гифки и может быть заасайнена на кусочек изображения. форматы, которые умеют сжиматься без потерь - gif, png, webp и всякая экзотика типа jpeg 2000 на всякий случай: jpeg 100% quality сжимается с потерями :). продолжаем тему про изображения в этом тредике суперкоротко о losseless форматахloseless - сжатие без потерь у такого сжатия есть определенный предел, меньше которого картинку сжать просто невозможно этот предел зависит от пикселей на картинке. решать проблему с размером изображений, которые мы не контролируем (те, что грузятся из админки) легче всего сжатием на летув марсианах мы используем для этого свой инструмент – imgproxy. побеждать тяжелые изображения можно несколькими способами,  которые лучше использовать в комплексе:1 быть внимательнее к своим асетам запускать lighthouse он найдет тяжелые картинки и поругается2 добавить автоматическое сжатие при сборке3 сжимать картинки на лету. самые распространенные причины огромных изображений: * пожать картинки просто забыли* изображения добавляются через какую-нибудь админку и добавляющие не понимают что нужна предварительная обработка. гайдов, докладов и выступлений о том как правильно готовить картиночки огромное количество (я тоже делала несколько :) но, не смотря на огромное количество доступной информации, я очень часто встречаюсь с мегабайтными монстрокартинками. дело в том, что данные для httparchive берутся из большого публичного дата-сета вот тут можно глянуть статью о том, как с ним работать нужную инфу легко вытащить, использовав bigquery вот так выглядит статистика по avif. суббота – самое время поговорить я красивостях, а именно о картиночкахкартиночки это огромная часть трафика на просторах интеренета тут, возможно, пропущен прекрасный формат – avif, о котором мы поговорим чуть попозже но это легко исправить. возможно, но в graphql это намного удобнее :). как правило мы используем sentry можно еще посмотреть в сторону apollo studio или использовать любую другую инструментацию зависит от того что какой gql-engine на сервере. этот подход настолько прикольный что, возможно, вдохновил создателей webpack сделать свои федерации :). совсем не обязательно использовать одну огромную схему ее можно разделить между вашими сервисамиа потом собрать все вместе при помощи специального гейтвея вот тут подробности. можно взять схему и сгенерировать из нее сервер-заглушку вся генерация занимает примерно 10 строчек кода. из схемы можно генерировать код причем очень разнообразный код самый лучший инструмент для этого генерировать статические типы (ts),  хуки, типы для резолверов, тесты, интроспекцию. схему можно визуализировать, чтобы увидеть связи между вашими сущностями или просто повесить на стенку и любоваться это можно сделать например при помощи. как я уже упоминала сегодня, на основе схемы генерируется очень удобная документация меньше вопросов к бекендам. утащив схему на клиент, можно провалидировать по ней все клиентские запросы мне нравится вешать подобные валидации на гит-хуки или гонять на ci это дает гарантию того, что в репозитории всегда будут валидные запросы. можно трекать историю изменений схемы (apollo, например, предоставляет для этого удобный сервис). схему можно куда-нибудь загрузить и использовать загруженное как референс можно использовать несколько разных версий схемы. тред о том что прикольного можно сделать с graphql схемой схема это строготипизированное описание всего-всего что умеет ваш бекендво-первых давайте покажу (ну вдруг кто-то не знает) как она выглядит. про схему и прикольные штуки которые можно с ней проделывать расскажу чуть попозже в отдельном тредике. валидация запросов зашита в graphql engine если вы прислали невалидный запрос, graphql engine заботливо подскажет вам где вы ошиблиськонечно 500тку получить все же можно, если неаккуратно написать серверный код :). в graphql есть subscription, который описывает стрим событий от сервера чудесный строго-типизированный стрим :). graphql может использовать любой транспорт пересылать данные можно почтовыми голубями однако чаще это делается по http или веб-сокетам. и мне не надо спрашивать бекендов как мне получить вот эту сущность? я просто тыкаю нужную ссылочу при этом я точно знаю, что я получу ровно то что мне надо а не null или котика. когда мне надо предложить какое-нибудь новое изменение в graphql api я просто кидаю расширение схемы в чатик. полученные доки это замечательный референс, который позволяет экономить кучу времени при обсуждении формы вашего api. самая крутая фишка graphql – автоматически генерируемая документация для генерации доков не надо делать вообще ничего. например, многие считают что graphql это что-то сверхгибкое, где можно попросить от бекенда все что угодно все ровно наоборот graphql это строгая спецификация и ограничения. graphql уже очень давно с нами, широко используется, но почему-то заблуждения насчет graphql все еще остаются. ладно, я немного преувеличиваю и при желании сломать можно все что угодно :) но, как показывает мой опыт, использую graphql очень сложно выстрелить себе в ногу. graphql не единственная технология, которая предоставляет строгий контракт так может делать restful апишка с openapi (swagger) описанием грубо говоря, restful + openapi это некое обещание от вашего бекенда, а graphql – гарантия. одна из технологий, которая выполняет все эти хотелки - graphqlкогда я говорю о graphql я подразумеваю 2 вещи: формат запросов + execution engine который выдает ответы на мои запросы. 4 множество сущностей, присылаемых с бекенда, строго ограничено потребностями моего интерфейса и у этих сущностей есть понятная мне связь. 3 у фронта и бека есть контракт он распространяется на все их взаимодействия. 2 бекенд никогда не пришлет мне того, чего нет в описании и мне никогда не придется искать null, спрятанный в мегабайтах jsonа. 1 где-то есть асет, описывающий все что может прислать мне бекенд. работать на проекте с надежным и понятным backend-api очень здорово список того, что нужно фронту от бекенда не очень-то и большой. а мне и рассказывать-то нечего :) где-то circleci, где-то github actions иногда статику складываем в хранилища (s3/google cloud) самописными webpack-плагинами для бекенда у нас как правило кубик и хельмкак-то экспериментировала с aws copilot, но опыт был неоднозначный :). я всегда за максимально простую архитектуру и итеративное ее усложнение главное не пропустить момент когда действительно нужно усложнять :). мне кажется, что перед тем как распиливать все на микрофронтенды, внедрять bff и прочие прослойки можно попробовать сформулировать:- что нужно клиенту- что может текущий/будущий бекенд- можно ли сделать наш интерфейс удобным для пользователя не переусложняя интеграции. сложные архитектурные решения могут появляться из-за того что несколько людей и/или команд просто не смогли договориться. перед тем как утверждать нам нужно архитектурное решение x неплохо еще раз посмотреть на свою задачу, на доступные ресурсы, на клиентов использующих ваше api и самое главное на команды которые этим занимаются :). в тредике появился патерн bff, который потенциально должен побеждать сложные интеграции во многих случаях это отличное решение, но давайте сделаем шаг назад. именно мапинг в таких случаях одно из худших решений сегодня поговорим про альтернитивы получше. случай выше – не марсианский опыт :) в марсианских проектах бывает всякое:) в некоторых проектах бекенд очень простой, в других – развесистый набор сервисов для каждого кейза мы стараемся выбирать архитектуру которая учитывает потребности клиентов (их может быть несколько). мне самой часто приходилось писать сложные маперы, чтобы превратить внешние данные во что-то подходящее для клиента поэтому сегодня мы говорим об интеграции с бекендом. есть проекты, где интеграция с бекендом заставляет значительно переусложнять клиентский код или добавлять прямо-таки удивительные проверки, типа если вам пришел список элементов, сделайте еще пару запросов чтобы убедиться что он правильный. круто что для многих бекенд это надежный источник данных! к сожалению это не всегда это так. я стараюсь проверять при этом мои проверки отличаются от проверок тестировщиков я, например, могу погонять профилирование, error tracking, посмотреть какие-нибудь хитрые граничные условия. переходим к коммуникации с внешними источниками данных для начала общий опрос-вопрос: как бы вы описали бекенд(ы) вашего текущего проекта?). тут может теоретически помочь еще один дополнительный финальный pr где можно посмотреть на всю картину в целом. у нас таких нет :). зависит от проекта набор довольно стандартный:линтеры (code-style, graphql валидации)тайпчекеры (ts/flow)тесты (jest)если есть бекенд в репозитории, то + бекендотесты и бекендолинтерыиногда кодогенерацияprettier. важно все :) по истории можно понять примерную структуру изменений например, если мы делаем какой-нибудь составной компонент из истории можно понять из каких частей он состоит :)+ аккуратная история помогает легче найти проблемный кусочек кода. лучше чтобы были рабочими :). самое простое повесить все проверки на pre-commit, но это не всегда оказывается удобным я люблю делать мелкие коммиты и меня раздражает если проверки гоняются слишком долго поэтому, я иногда перевешиваю слишком долгие проверки на pre-push. 3 настроить хуки и держать в страшной тайне флаг --no-verifyв марсианах мы так любим хуки, что даже запилили специальный инструмент для работы с ними. 2 не использовать человеческие ресурсы для проверок с которыми могут справиться наши линтеры или другие полезные инструменты. 1 настроить автоматический деплой всех веток обычно я провожу ревью в 2 этапа на первом просто смотрю код, а на втором проверяю что он работает мне всегда ужасно лень переключаться на новые ветки и запускать всякое лучше когда есть ссылочка что получилось смотреть вот тут. вот еще несколько полезностей для code review. иногда бывает удобно создать pr из основной ветки в пустой или какой-то специальный коммит эта ветка никогда никуда не помержится, но там можно вести долгие беседы о прекрасном :). примерно так же удобно работать если в новой фиче есть и бекенд и фронтенд и вы живете в одном репозитории тогда выбирается главная ветка, например бекенд, и на нее постоянно ребейзится фронтенд. то же самое можно делать если уже есть 10к строк готового кода разбиваем его на кусочки, запихиваем каждый кусочек в свою ветку и отдаем каждую на ревью минус такого подхода в том, что при правках придется ребейзить ветки. если фича состоит, скажем, из двух итераций: компонент вертолет и взрывающийся вертолет, то можно открывать pr вот так:dev - компонент вертолеткомпонент вертолет - взрывающийся вертолет. ревью предыдущих итераций не блокер для дальнейшей разработки, ведь не обязательно открывать pr прямо в основную ветку. когда я начинаю работать над новой задачей, то первое что я пытаюсь сделать – разбить ее на мелкие, но логичные итерацииэти итерации можно отдавать на ревью постепенно при этом злые баги поймаются раньше и не придется долго ждать результатов ревью. в отдельном тредике обсудим что делать, если фича которую предстоит отдать на ревью очень большаяесли такое произошло, то скорее всего что-то пошло не так изначально. первая строчка вежливее, потому что во втором случае нужно будет проверить что не удалилось что-нибудь важное :). нормальный вариант :) но часто коммит оказывается не последним. обычно я просто тыкаю кнопочку squash and merge. хорошую историю легко ревьюить ревью улучшает качество твоего кода :). переписать историю, форспушнуть. есть удобный трюк с флагом --fixup вы делаете коммит (когда угодно в вашей ветке) примерно так:git commit --fixup [ссылка на коммит к которому относятся ваши правки]дальше при rebase используете флаг --autosquash и вуаля ваши правки помержились в нужный вам коммит. форспушить в общую с коллегой ветку тоже можно, но тут нужно быть аккуратнее и использовать флаг --force-with-lease (у нас в блоге есть об этом статья, которую я здесь не привожу ибо она портит нам статистику своей популярностью :). перед тем как сделать pr я делаю интерактивный rebase при этом я переименовываю часть коммитов, разбиваю на части слишком большие, меняю их порядок после этого можно форспушнуть все что получилось форспушить в свою ветку всегда безопасно. я почти всегда делаю rebase c флагом --onto просто потому что не помню как работают другие варианты синтаксиса :). конечно же были :) я расскажу как с ними правильно поступать чуть попозже. мне очень нравятся митапы  в них прикольно участвовать как в качестве докладчика так и в качестве слушателя следующий будет на тему performance. я часто слышу что rebase и последующий forcepush это опасно и ужасно на самом деле все ровно наоборот ребейзить и форспушить очень полезно просто нужно понимать как это работает. я считаю хорошей практикой готовить свой код для ревью и для этого нужна всего одна простая команда - git rebase. в процессе разработки (особенно если пилится что-то большое или мы делаем какой-то сложный рефакторинг) история и содержимое коммитов могут получаться немного хаотичными хаос ревьюить очень сложно. хорошо бы сделать так, чтобы переключившись на любой коммит из вашего pr ничего не ломалось и было явно видно какой атомарный кусочек новой фичи или фикса в нем пилился. при ревью я первым делом смотрю на историю коммитов, поэтому, отдавая свой код на ревью я стараюсь чтобы это действительно была история, а не temp, fix, add component. каждый раз когда я делаю git commit, я предполагаю что его будут ревьюить и поэтому стараюсь упростить жизнь людям, которые будут этим заниматься например, я не в состоянии качественно отревьюить pr больше чем на 500 строк поэтому стараюсь таких не создавать. сегодня поговорим про коммуникацию между людьми и сервисаминачнем с того что посложнее – общения с людьми и code review в частностимне кажется, участвуя в code review, очень-очень важно быть вежливым давайте посмотрим как это лучше делать. он не плох, но под крышкой у него mongo-like запросы к redux-store из которых генерируются graphql типы и резолверы и там куда-то еще плагинчики инжектятся сложновато :). gatsby слегка теряет популярность (и мне кажется это неплохо, ибо он слишком сложен под крышкой)testing library прекрасная штукаsnowpack ❄️. а вот и state of js чуть больше wasm количество знающих и юзающих webc подросло, но как-то не слишком сильно pwa тоже побольше (ну а как иначе :) все любят typescript и svelte graphql и apollo все популярнее грустно видеть moment. я скорее рисовала тренд в рамках нашего сообщества с пониманием все сложнее :) есть некоторое количество популярных и обсуждаемых практик (микрофронтенды, например) иногда их применяют потому что задача этого требует а иногда потому что ну все так делают. bff иногда очень кстати, например если у тебя несколько микросервисов или если один бекенд используется несколькими очень разными клиентами. теперь про архитектуру (кстати она победила в опросе про академический бекграунд :)разумеется, думать об архитектуре, понимать общие паттерны, использовать современные практики – важно но меня не оставляет ощущение что в нашей сфере сейчас очень сильный перекос. я отношусь к этому как к развлечению и делаю только то что мне нравится на то что нравится время тратить не жалко :). не стоит экспериментировать на todo-листах, лучше что-нибудь нарисовать :). в процессе могут возникнуть интересные performance – челенджи (ведь приходится генерить кучу элементов а потом их анимировать). меня завораживает то, какие прикольные штуки можно создавать используя css/js и немного рандома получившиеся асеты можно сохранить как картинку или даже распечатать на 3d принтере. при этом можно поэкспериментировать с новой технологией, а заодно прокачать математику и физику один из моих любимых способов это сделать – generative a. давайте поговорим о пет-проектахзаниматься своими основными задачами иногда бывает скучночтобы работа не превратилась в ужасную рутину, которая видится как верстка по макету на react стоит иногда отвлекаться и развлекаться. согласна сухой текст это не здорово цель сокращений не засушить текст, а сделать его более простым и емким простые и короткие тексты легче читать, понимать и запоминать :). первую половину этой недели мы как раз обсуждаем этот вопрос stay tuned :). если это интересно, то конечно же расскажу и даже напишу :) но сначала хочу еще немножко поресечить с тех пор как я решала подобную задачу прошло уже много времени, хочу попробовать повторить трюк на более современных технологиях. можно обучить самостоятельно на мощных железках или взять готовую. самый простой случай - это уже обученая моделька которую вы затаскиваете в браузер и натравливаете на ваши данные детектировать котиков можно примерно в 5 строчек js и одну большую xmlку :). я очень хочу поэксперименировать с миксом pytorch и wasm, хотя понятия не имею что из этого получится но я обязательно расскажу :)а пока можно посмотреть на прикольные примерчики tensorflow. попробую откопать, но ничего не обещаю :). используя нейросеточки можно улучшать наши инструменты, например есть очень популярная история про dl-based autocomplete улучшать/подбирать качество изображений и распознавать речь прямо в браузере. используя ml/dl можно решать множество разнообразных задачмне, например, как-то пришлось детектить лица прямо в браузере :). а вот очень классный курс (но он немножко академический). первая причина – ml/dl это жутко весело просто попробуйте и вы поймете о чем я говорюесть множетсво способов начать экспериментирвать, например можно почитать статью (хотя довольно старенькую) в марсиансом блоге:. и последняя тема на сегодня – зачем же фронтендам data science?сразу предупреждаю – я не настоящий сварщик :). всегда можно посмотреть что-то по теме от mit. линейная алгебра/аналитическая геометрия (матрицы и векторы) очень полезный для фронтенда склилл особенно если вы хотите что-то анимировать или просто передвигать на странице если вы делаете что-то связанное с 3d ну тогда вы и так все знаете :). старая, но очень полезная статья на mdn в которой есть все что нужно про кривые. для рисования часиков и pie-cha пригодится тригонометрия. теория графов это отдельная, очень интересная история есть куча задач где она может быть полезна так что посмотреть что-нибудь по теории графов однозначно стоит есть крутые курсы от mit и от мфти. школьная физика тоже очень помогает например если вам нужно запилить взрывающиеся конфети или вертолеты :). как-то раз мне пришлось верстать страничку с текстом в рамочках рамочки должны были выглядеть как будто кто-то в спешке обвел текст маркером вместо того чтобы вставлять каждую рамочку унылой картинкой, я написала скрипт который генерирует рамочки (несколько кривых безье). ^ кривые безье это не только easing для анимацийими еще можно рисовать стрелочки я нарисовала очень много стрелочек за свою не очень долгую карьеру :). именно так :). узнаете картиночку?). я считаю, что академический бекграунд очень полезеноднако отсутствие подобного бекграунда ни в коем случае не является проблемой в любой задаче легко разобраться учитывая тонны качественного обучающего контента пригодиться может все что угодно в тредике будут примеры. интересно что вариант ничего не нужно набрал так мало голосов :). мне как-то пригодились фурье-штуки :) в целом никогда не знаешь какую задачу придется решать. в целом академический бэкграунд дает хорошую основу для исследовательского взгляда на мир - методологическую базу, которая позволяет не только пользоваться знаниями, но и создавать новые знания. нет, не перепутано :) а при чем тут data science расскажу чуть позже. соглашусь и не соглашусь одновременно :) я считаю, что лучше всего учиться на практике и не пытаться охватить сразу все интерес идет от задачи, например: react чистые функции (ой, а что это?) теория категорий. сегодня плавно переходим к техническим вопросам и заодно продолжаем разговор о полезных навыкахдавайте обсудим полезность академического бекграунда как вы считаете что и в каком объеме нужно знать фронтендам? data-science, простая математика, графы, ml, dl, тфкп?). правильно ставить елочки можно посмотреть на  там много прикольных правил. «»!. неа grammarly полностью решает все мои задачи, так что даже в голову не приходило искать другие решения :). не будьте как я и ставьте правильные кавычки :). для текстов на английском лучше использовать grammarly. если читать не хочется, то вот несколько простых правил:* перечитать написанное и выкинуть половину* перечитать то что получилось вслух и выкинуть еще половину* короткие слова лучше длинных* длинные предложения лучше разбить на короткие. поэтому прочитать несколько книг по теме кажется мне неплохой идеей больше всего мне понравилось on writing well: the classic guide to writing nonfiction если хочется чего-то на русском, то можно попробовать почитать пиши, сокращай. кроме сообщений в чатах я пишу комментарии к своему коду, комментарии к чужому коду (code review), технические доки, статьи, письма etcнаписание всего этого кушает много рабочего времени а от качества написанного иногда зависит судьба новой фичи. в марсианах быстро превратить свою мысль в сообщение особенно важно – ведь вся наша рабочая коммуникация происходит в слаке. полезный скилл номер три – конвертация мысли = текст наверное, вы уже заметили, что у меня с этим не очень хорошо, но я стараюсь исправиться :). думаю интуитивное понимание вот тут хорошо, вот тут плохо можно приобрести не имея особого таланта берем эти навыки, добавляем понимание техники, опыт разработки интерфейсов, помощь грамотного дизайнера и получаем хорошее приложение :). просмотр красивых картинок не поможет решать серьезные ui проблемы, зато может научить замечать некоторые косяки верстки (например, неправильные отступы). можно посмотреть на что-нибудь красивое вот список телеграм-каналов с красивыми картинками от наших дизайнеров. полезно посмотреть какие-нибудь курсы или почитать книжки (типа the design of everyday things)можно сделать пет-проект основной задачей которого будет создание удобного интерфейса. как можно прокачать чувство прекрасного?для меня самый лучший способ – поучиться у людей которые в этом разбираются в марсианах я часто прихожу в дизайн-чатик и задаю вопросы о сочетаниях цветов, о шрифтах и о том как в интерфейсе решить какую-нибудь хитрую задачу. мой опыт показывает, что если вы предварительно побрейнштормите над задачей вместе с дизайнером у вас получится намного лучше, чем если вы получите уже готовую задачу. приходится учитывать, что перед тем как включить камеру нужно попросить у пользователя разрешение, а так же то, что пользователь эти разрешения может отозвать. например, разрабатывая приложения для видеоконференций нужно примерно понимать как работает видео в браузере какие кодеки возможны, какие могут быть (а могут и не быть :) соотношения сторон и режимы. чаще всего вам предстоит создавать новый интерфейс вместе с дизайнерами редко дизайнер может продумать все за вас вместе вы сможете учесть больше намного больше деталей. полезный скилл номер два (и на мой взгляд самый-самый важный): чувство прекрасногобольшинству фронтов приходится в своей работе создавать интерфейсы чем лучше у вас прокачено чувство прекрасного – тем лучше получится. тут как раз речь идет о том, чтобы подкреплять метриками свои инженерные решения :) ну и говорить на более понятном языке. дальше вы проводите эксперимент, и у вас есть циферки, которые вы можете сравнить циферки это всегда хорошо :). если вам хочется запилить новую фичу, то хорошее объяснение будет звучать примерно так:давайте выкинем эту ужасную js-анимация на 1к строчек кода я предполагаю, что это никак не изменит метрику x. с первого взгляда может казаться, что фронтендам вся эта бизнесовая история совсем не нужна это почти всегда не так :) если у вас есть метрика, у вас есть количественное понимание вашей цели если у вас есть метрика, вы можете использовать её для экспериментов. все эти метрики связаны между собой как правило у вашего приложения есть небольшой набор целевых метрик эти метрики нужно хорошопонимать и уметь их использовать. отдельно надо сказать еще об одной очевидной штуке – метриках вашего приложенияесть технические метрики (например time to interactive), есть более бизнесовые (например конверсия для какого-нибудь действия). в том что 100тка lighthouse не всегда полезна для ваших пользователей и бизнеса :) (кнопка некликабельна). заодно можно найти там страшных монстров, типа layout recalculate на mousemove без тротлинга, заботливо скопипасченый кем-то из аналитиков :). многие считают что аналитика нужна чтобы снижать производительность вашего приложения при загрузке :) но она бывает полезна, чтобы составить представление о том, что делают ваши пользователипопросить доступ в аналитику почти всегда хорошая идея. чтобы лучше понять свою задачу неплохо разобраться для кого мы разрабатываем наше приложение посмотреть как ведут себя пользователи, какие устройства они используют и какие кнопочки тыкают. иногда, чтобы понять причину того что вы делаете приходится провести небольшое расследование и задавать вопросы. lighthouse отличный инструмент (об этом мы поговорим чуть позже), но это всего лишь инструмент. распространенный пример: нам нужна сотка на lighthouse!111 мой первый вопрос – зачем? часто оказывается, что нужно совсем другое например, приложение работает недостаточно быстро и нужно подправить несколько узких мест или пофиксить косяки связанные с seo. полезный скилл номер раз – умение правильно и быстро понимать свою задачу круто переходить от вопроса что мне нужно сделать? к вопросу зачем я это делаю?. когда я только начинала заниматься разработкой я считала, что для того чтобы расти и развиваться мне нужно изучить как можно больше технологий для начинающих разработчиков это, пожалуй, хорошая стратегия но набор и сложность технологий это не главный определяющий фактор. давайте сегодня поговорим про полезные для фронтенда (и не только) скиллы сразу хочу предупредить, что мое мнение на этот счет немного специфическое и далеко не все с ним согласятся но так только интереснее :). в какой-то момент мне стало скучно разрабатывать всякие железяки и захотелось поработать в области, где можно решать почти любые задачи и где физика не работает против тебя так я и стала фронтендом :). немножко расскажу о себе:долгое время программирование было моим хобби и мне даже не приходило в голову заниматься этим профессионально. всем привет на этой неделе с вами будет  я занимаюсь фронтом примерно пять лет, несколько из них в злых марсианахиногда я выступаю на конференциях и пишу статьи в марсианском блоге я рассказываю об очевидных вещах и на этой неделе планирую делать то же самое :). отдельное спасибо ведущим:. всем большое спасибо за этот год с наступающимвсех благ в новом годувернёмся 11012021. ураа. конец 2020 — самое время поностальгировать по давно ушедшим временам)тут вам не только снежинки на jquery, но и неминифицированные js и css, прямо с комментариями от разработчиков. завершилась моя неделя в jsunderhood на предновогоднее прощание фото ёлки, которая стоит с 1 декабря, но до сих пор не наряжена кидайте свои ☺️. молодой человек, мы сайт не для вас делали!. я недавно делал правда, падал там сафари. npm i react-snowfall. падающих не видела.  : а кто помнит народру? у меня там даже сайт был. а муравьев бегающих за курсором кто помнит? ) это годы 2003-2007 примерно. огооо. я добавляла падающие снежинки на свой сайт на  лет в 14. заканчивается последняя предновогодняя неделя кто помнит, как раньше любили добавлять падающие снежинки на сайт?). использовать можно уже сейчас заработает только в chromeно никак не помешает остальным. для «длинных» сайтов со множеством вложенных элементов это мегафича! перфоманс можно ускорить в разыособенно на мобилках со слабым cpu, на котором считается лейаут. к content-visibility: auto; нужно добавлятьcontain-intrinsic-size: element-size; иначе из-за отложенного вычисления размеров можно столкнуться с прыжками и рывками контента при скроллинге вниз. это флаг для браузера, что вычисление размера и расположения детей внутри элемента можно отложить, пока он не приблизился к вьюпорту. если у элементов, находящихся за пределами начальной видимой части страницы, дети не выпрыгивают куда не стоит, для них нужно прописатьcontent-visibility: auto. потому что в css есть такие клевые свойства как position: absolute или fixedможно выдернуть какой-нибудь див-потомок самого нижнего элемента, до которого еще полдня скроллить, и поднять его в начальный вьюпорт. интересно, что при начальном рендеринге страницы браузер вынужден посчитать и построить весь ее layout целиком даже если страница скроллится 10 минут вниз, размер и расположение элементов в самом-самом низу уже посчитано, едва она была открыта. к сожалению, как часто бывает, это чисто chrome фишка и та под флагом в canaryдрафт спецификации: же, думаю, на практике во многих случаях будет неочевидно, прелоад какой именно страницы пора сделать. если убрать poal за пределы вьюпорта и в момент, когда пользователь нажал на ссылку, активировать портал, добавив анимации, можно легко добиться красивого перехода между страницами, как на гифке выше круто!. визуально poal похож на iframe, отрисовывая новую страницу поверх открытойу него есть метод activate(), который делает переход к странице, предзагруженной через poal. последние два chrome dev summit гуглеры рассказывают про html poalsпо сути это новый html тег, который делает прелоад страницы до ее реального открытия пользователем. естественно с красивым переходом между страницами. на мой взгляд, идеальное веб приложение на мобильных было бы похоже на хорошее нативное ios приложение. site specific browser feature позволяла установить приложение на домашний экран она выпиливается без планов на возвращение ее или альтернативы. планы на нормальную поддержку pwa остаются только в chromium-based браузерах, из крупных edge и chromeфаерфокс пошел по пути safari. еще сам к примеру использую на стыке косплея, крафта и выступлений (и даже с использованием js, а не только c и arduino бывает). всегда можно написать такой код, чтобы довести других программистов до слёз вполне эмоционально. если нужен сайт, можно пойти в веб студию а если захочется художественную инсталляцию, в creative coding студию. есть даже целый ряд университетов, где можно получить степень creative computing или creative media technology!например, в university of the as london. такое направление называется creative coding это все, что находится стыке программирования и искусства чаще создание визуализаций, но вообще результатом может быть любая художественная форма например, в комментах написали про демосцену). многие находят творчество в коммерческих бизнес задачах) это круто!а можете ли вы представить программирование как инструмент для создания чего-то эмоционально-выразительного, а не решения практических задач?. считаете ли вы свою работу творческой?.  : то же верно и для опенсорса — маленькие проекты со свежими мотивированными мейнтейнерами часто отвечают и исправляют ошибки быстрее, чем крупные проекты с выгоревшей от потока сообщений командойпосмотрите на create react app, например. таких подробностей по доставке нативного приложения не знаю у вендора базовая основа всегда — линукс, дописанный и заточенный как ему удобно. ввод текста пультом — отдельная боль) лучше подключать клавиатуру. у netflix не веб-приложение, а нативное на плюсах поэтому технически оно совсем из другой оперысначала они пытались оптимизировать веб, много усилий потратили, но перфоманс их не устроил. поколений этих роботов довольно много самые новые умеют по голосу распознавать эмоции и будут пытаться вас рассмешить, если вы грустите). этот красавчик ездит на самокате. самое крутое — роботы-собакиэто одно из самых первых поколений. там же классный музей техники sony, который по своей инициативе собирают сотрудники. я больше не занимаюсь ни вендорами, ни теликами, и могу признаться в любви к sonyоднажды мы с коллегой были на встрече в их офисе, и я была впечатлена, насколько увлеченные своим делом люди у них работают. у меня осталось впечатление, что в китае очень много работают. быстрее всего исправляют платформенные баги небольшие китайские вендорысначала я была в шоке от сообщений «так, ну сейчас мы поработаем ночью, в обед раскатимся на телики, а вы утром посмотрите». тестирование на стороне вендоров, любых, находит два типа багов:- баги, которые минимально влияют на продукт и бизнес, зато вызывают максимальный батхерт при попытке их поправить- вообще не багии только иногда приходит что-то серьезное, пропущенное внутренним тестированием. это такая роль в команде, на которой нужно- убедить вендора, что багов в приложении нет, и его пора установить в стор- если выше что-то пошло не так, сделать фиксы и попробовать заново- убедить вендора поправить его платформенные баги asap. я тусила в компании с теликами побольше в основном потому, что кроме продуктовой разработки я участвовала в технической коммуникации с вендорами. и это интересно!. в целом, вместе со всеми инструментами сверху разработка под тв становится даже комфортной!плюс разработчик взаимодействует с теликами меньше половины времени, для большинства задач достаточно запустить проект локально в хроме. не то чтобы это часто нужно на практике, зато красиво! и можно почувствовать себя хакером. самый кайф — запустить локальную сборку сразу на куче теликов и, меняя джаваскрипт код, наблюдать как на них всех одновременно перезапускается приложение. если локально запустить node js сервер, то другое устройство в этой же локальной сети может обратиться к нему по адресу тестирования на тв локально запущенных девелоперских сборок используется этот принцип хотрелоад тоже будет работать). для дебага верстки и js в консоли на конкретном телике мы используем weinre, web inspector remote. и тут все стало круто и удобно. в какой-то момент всем надоело мучиться с разными способами установки на каждый телик + несоответствие тестовой среды и реальнойв локальной сети, где тестовые телики, настроили возможность редиректа с прод приложения на препрод, если у тв стоит определенный gateway в настройках. еще на некоторых, как на tizen, девелоперскую сборку можно установить с флешки. удачное тестирование в dev apps не гарантирует, что все будет работать в реальном приложении в моей практике был случай, когда на panasonic sma viera в тестовом приложении было доступно api по определению поддержки 4k а в реальном прод приложении оно не работало. воспользоваться приложением browser для такого же нельзя — в нем нет поддержки кучи api. для запуска девелоперской препрод сборки на части платформ есть специальные dev apps, куда можно вбить тестовую ссылку и запустить ее с остальными можно договориться, чтобы они добавили тестовое приложение с тестовой ссылкой на конкретные тв. он тоже неплохой). повидав много твшных пультов, подтверждаю, это один из самых удобных. вводная статья нетфликса про spatial navigation: у них крутой техблог!а у тех команды интерфейсов есть твиттер. мы используем но без костылей и проседания перформанса не обходиться планирую отказаться от нее. свой фокусный движок). но можно заюзать полифил! этом сайте демка) попробуйте поперемещаться по нему кнопками нашем приложении свой фокусный движок. для перевода фокуса по ивентам с пульта в приложении должен быть фокусный движок есть драфт css spatial navigation level 1 о нативной двумерной навигации пока он не реализован ни в одном браузере. иногда боль начинается уже на строении пульта кнопка доооооолго жмется вниз, доооооолго отжимается обратно, и примерно только тут сигнал долетает до тв. такая навигация называется spatial navigation сначала, самая простая часть, надо понять, какая из кнопок была нажата почти все платформы используют одинаковые keycodes, но некоторые идут своим путем. перемещение по приложению происходит с помощью кнопок ➡️➡️ в интерфейсе нужно ярко выделять фокусный элемент и максимально понятно давать понять, на какой элемент перейдет фокус по нажатию на одну стрелок. визуальные элементы должны быть большими, а количество информации, которую можно уместить во вьюпорт, снижаетсятакие интерфейсы называют 10-foot user interface. ux на тв драматически отличается от обычного веба пользователь смотрит на приложение с 3-х метрового расстояния и перемещается по нему с пульта или геймпада. да. у каждой платформы есть свой «платформенный код», относящийся только к ней например, он может быть связан с особенностями видео апи или drmчтобы не тащить плейстейшн код на панасоник, мы собираем отдельный билд для каждой платформы. в этом году наши тв разработчики написали и запустили с нуля новое приложение, которое написано на preact + typescript, с вебпаковской сборкой и докером оно крутое!я уже в этом не участвовала. так как тв приложение — веб приложение, в теории можно использовать любые инструменты и фреймворки для веба учитывая, что браузер на ос, где вы собираетесь запуститься, поддерживает все используемые web api + обычно есть платформенные особенности защищенного стриминга видео. это похоже на ревью приложений в app store). даа) для samsung и lg каждый крупный релиз должен заново проходить сертификацию остальные платформы менее строги (по крайней были год назад) и приложение можно обновить по ссылке после внутреннего тестирования. куда же все это отправлять или как установить свою ссылку в магазин приложений телика?у samsung, lg, panasonic, ps, xbox есть девелоперские порталы, с остальными нужно выходить на прямую коммуникацию с их менеджерами. да, так же для tizen и webos вы отправляете не ссылку, а билд приложения c html/js/css, архивированный в zip архив с расширением wgt или ipk. для webos и tizen можно написать нативное c/c++ приложение, возможно, с другими вендорами тоже можно договоритьсяно, кроме сложности разработки, такое приложение сложнее и дольше обновлять на каждой платформе. тв приложение на линуксовых ос — чаще веб приложение когда пользователь жмет на иконку приложения, открывается предустановленная ссылка в неком «браузере для приложений» от разработчиков этой ос в новых тв это обычно chromium-based, в старых может быть opera или на основе gecko. так выглядела часть тестовой тв лабы полтора года назад. у нас хоть только tizen и webos html приложение, но от их вариаций уже становиться плохо учитывая, что телевизоры находятся в офисе в другой стране лейаут легче дегабать в browserstack ища старые версии хрома.  : я вот как раз тв выбираю и несколько шокирован обилием платформ я думал они уже все давно на android. помните эту статью? это всего 5 браузеров) на теликах можно столкнуться больше, чем с 10 разными платформами особенно если поддерживать весь зоопарк тв, который выше, года с 15/16-го. веб-приложение можно распространять не только на linux-based системах, где без иных вариантов, но и на android лучше нативное но бывали исключения, что нативное неадаптировано под конкретную модель, и тут html приложение, как универсальный солдат, прикрывало собой это. кроме теликов есть тв приставки — playstation, xbox для разработки под ps нужно использовать webmaf sdk, и есть свое api для работы с видео xbox поддерживает media api по стандартам. некоторые вендоры ставят разные линуксовые ос на разные модели так в 19-м году у panasonic были модели на трех разных ос. далее есть огромное количество вендоров с меньшей долей рынка — panasonic, philips, hisense, tcl, haier, loewe некоторые из них частично на android, но у всех есть модельные ряды на разных linux-based системах. операционные системы тв — android и разные linux-based системы три самых крупных вендора в рф — samsung, lg и sony samsung и lg поставляют телики только на своих linux-based системах, tizen и webos sony частично на android, частично на линуксе, но больше на первом. о теликах! сейчас я не пишу под смарт тв, моя команда занимается только вебом до этого я работала с ними около 15 лет. математику я любила, и это мнение мне понравилось) я поступила на матмех спбгу и через 5 лет получила диплом, в котором написано «математик». мне было 16 лет, это был 10 год, я вбила в гугл «где учиться на программиста» и прочитала на разных форумах тогда популярное мнение, что настоящий тру программист должен отлично разбираться в математике. как я вошла в айти в школе математика давалась легче остального, и я пошла в физ-мат в средних классах в 11-м я уже была уверена, что хочу быть программистом не знаю, почему мб потому что у нас дома было много научной фантастики, и я перечитала книг про роботов. ого, круто). я думала, в минске небо всегда голубое!. ох, знакомые виды. классный снеговик!. давайте! я нашла фото вида из офиса) из дома у меня вид на питерский колодецделитесь своими!) завтра я расскажу про телевизоры. главная проблема удаленной работы — ослабление личных связей особенно когда во время удаленки выходят новые люди мое мнение, тут офлайн общение однозначно выигрывает удаленку можно подтянуть, созваниваясь с камерами итп, но никогда не дотянуть до офлайна. процесс оценки и распределения задач идет по скраму — планнинг, pbr, ретро созваниваемся в тимсетак же каждый день в одно и то же время созваниваемся на 15-минутный дейлик. есть априорное уважение, что все взрослые люди и сами могут эффективно распределить свое время, выполнив взятые задачи. во-вторых, не было напряжения, что кто-то дома не будет работать и обязательно нужно проследить у нас не было и нет тайм трекинга в офисе никто ни у кого над душой тоже не стоял. во-первых, не было проблем с коммуникациями на удаленке все просто плавно переместились из личного общения в телеграм, зум и тимс работают все примерно в одно и то же время, так как изначально из одного города и часового пояса. все время, что я здесь работаю, в тех команде всегда была очень приятная и открытая инженерная культура поэтому я тут так долго) по моим ощущениям, мы без выраженных проблем перешли на удаленку, я думаю, благодаря ей. а как устроено у вас в компаниях?). если посмотреть на сейчас из этой схемы ко мне больше всего относятся people manager и technical lead и немного administrator, в рамках получения задач внедрением методологии занимается скрам-мастер. прямо сейчас мы находимся в переходном периодеу нас появился скрам и спринты по 2 недели продуктовым направлением полностью занимается product owner, отдельный человек. да!! я пишу код совсем недавно в компании была полустартаперская атмосфера и не очень большая тех команда в 20м году количество людей сильно увеличилось, началась реорганизация процессов, и она еще не закончилась. в okko рекламы нет а само приложение можно «прорекламировать» на главном экране ос телевизора, поставив его иконку по умолчанию выше и заметнее остальных это происходит по договоренности напрямую с вендором твеще часто можно увидеть прямо на пульте кнопку «app name». завышенная же самооценка может влиять негативно на человека, так как отбирает у него мотивацию развиваться и меняться по этой теме мне очень понравилась книга: из исследований такого негативного влияния:.  эх, спб фронтенд дринкаст вообще был моим первым и любимым подкастом 🖤 даже про веб-стандарты узнала оттуда. я стараюсь держаться нормальной самооценки, не улетая в «я по умолчанию крут и молодец» или «я плох, мне просто везет» где-то я молодец, где-то нет, это помогает и чувствовать себя хорошо, и видеть путь развития. а однажды я случайно познакомилась с организаторами , и с тех пор пошло-поехало комьюнити-движение в 17м году мы с запускали подкаст-дринкаст затем я вовлеклась в организацию митапов, попала в подкаст , и была в пк. кратко напишу про свой бекграунд) около 25 лет я работала в криптостартапе, делающем биржу криптовалют сейчас около 25 лет я работаю okko здесь на веб-технологиях работают два крупных проекта: «обычный» веб и тв, плюс еще несколько внутренних инструментов. react, typescript, css-modules. всем привет! на этой неделе с вами я, мария просвирнина сейчас я тимлид фронтенд команды в  и соведущая подкаста «веб-стандарты». надеюсь, вам было интересно или хотя бы весело) рада была провести с вами эту неделю! всем спасибо и до встречи. в субботу рассказала про общие компоненты образовательных сервисов яндекса и про разработку reusable реакт-компонентов. в пятницу мы поиграли в демократию, и получился очень opinionated неглубокий тред про оверинжениринг. в четверг — про xstate и как можно применить знания с конференций в реальной разработке. в среду рассказала, как собеседовалась в яндекс и зачем. еще во вторник мы изучали «демографию» аккаунта смотрите на результаты. вторник был про хорошие процессы мне не хватило интеллекта сразу собирать все ваши ответы в один тред, так что буду делать это сейчас. все еще понедельник — начало карьеры. понедельник — чем я занималась до фронтенда осторожно, обсценная лексика: не читайте, если вы неженка. понедельник — представляюсь. доброго вечера воскресенья, надеюсь, у вас такой же классный день, как и у меня :)подошью к этому твиту все, о чем успела рассказать. не было) про оверинжениринг в общем случае согласна абсолютно — это пушка, из которой не надо стрелять по воробьям, и обычные компоненты обычным людям так писать ни к чему. завтра сделаю). у меня даже интерактивчик остался). состояние плоскости (текущий масштаб, шкалы по осям, размеры) распространяются через контекст или через дополнительные пропсы в reactchildren. а может и не быть) понимаете? контроль, над тем что будет, — у потребителя как-то так:coordinatesystem width={500} height={500} grid step={2} / xaxis / yaxis / fngraph fn=cosx color=red //coordinatesystemапи наглядное, а все лишнее скрыто от глаз. у меня как-то была задача сделать компонент координатной плоскости у плоскости может быть сетка, оси, на ней могут быть всевозможные графики, точки, области и сверху еще и интерактивность над ними. я очень люблю этот подход, и если его применить к месту, получается прямо супер. рулит внутренним состоянием основной компонент и обогащает своим состоянием детей, например, через контекст более подробно и с примерами кода, опять же, у кента кент. эта идея не новая, конечно, это уже сто лет есть в html select+option, details+summary, ul+li, вот это все торжество композиции, красивое лаконичное апи. чтобы подчеркнуть, что внутренние компоненты имеют смысл только внутри внешнего, их часто именуют через точку, добавляя их в статические свойства основного компонента. этот паттерн можно объяснить как «торчать кишками компонента наружу», давая к ним прямой доступ например, так:layout layoutheader classname=page-headerзаголовок/layoutheader layoutsidebarсайдбар/layoutsidebar/layout. тут я технично оставлю ссылочку на статью восхитительного. было бы странно, если бы so пытался покрыть всевозможные сценарии использования как насчет отсортировать массив животных по количеству ног? добавим эту логику внутрь и назовем опцию ‘bylegcount’, вдруг пригодится кому. этот паттерн, как и многие хорошие апи, использует инверсию контроля наглядный пример — любой перебирающий метод массива вы пишете arrso и делегируете выбор алгоритма сортировки методу, но контроль, как именно сортировать остается у вас. а может и нет, я не ваша мама). наверняка вы видели монолитные компоненты с пропсами на два экрана, которые потом щупальцами рассовывались по его внутренностямесли у вас есть такой, то, возможно, вам пригодится паттерн «составные компоненты». такая пушка, конечно, нужна не всеместь ли другие подходы к проектированию реиспользуемых гибких компонентов? чуть позже расскажу :). у всего есть трейдофф, и в данном случае это перформанс нужно искать баланс в количестве хоков, но программирование вообще про баланс. еще одно преимущество такого подхода — легко проводить продуктовые эксперименты, просто заменив нужный кусочек. сейчас, правда, появились мутанты-дескпады и смешали все карты)мы так под конец разработки узнали, что наши компоненты будут использоваться не только на ноутбуках и планшетах, но и на интерактивных досках в школах). так можно разделять не только логику, но и код для разных платформ (для десктопов не должны приезжать тачи, а для тачей, например, хаверы). нужно ли это всем потребителям? нет должен ли им приезжать лишний код, а на компоненте висеть лишние обработчики? тоже нетвыносим логику в хок, получаем compose(withsticky, compose(withthemeone, withthemetwo)(base). аналогично с логикой можно научить раскрывашку залипать при прокрутке: на сервисе она может использоваться, чтобы скрывать много текста, который может не влезть в экран, и тогда должна остаться возможность ее закрыть. на сервисе две темы? не беда: compose(withthemeone, withthemetwo)(base) модификатор темы «включится», если в собранный компонент передать проп theme c нужным значением нужные стили импортируются внутри модификатора: так в сборку попадает только реально используемое в сервисе. а дальше начинается вариативность: выглядит компонент у всех по-разному значит, выделяем внешний вид в отдельный hoc – «модификатор» на стороне сервиса компонент будет выглядеть как withthemeololo(base). раскрывашка умеет открываться и показывать контент и закрываться, скрывая его это основа компонента, причина для его существования и общая часть: это поведение нужно всем потребителям. эта штука — пушка лучше всего она проявляет себя на больших сложных компонентах, но я попробую рассказать, какие проблемы она решает, на несложном примере компонента-раскрывашки. разработчики общеяндексовой либы решали параллельно те же проблемы, и в итоге мы все стали придерживаться одного подхода и использовать. основное требование к компонентам в библиотеке — гибкость и возможность настроить под свой сервис у сервисов есть общие интерактивные обучающие механики, но разная аудитория: ученикам начальной школы свой дизайн, старшеклассникам — свой. мы внутри себя поресерчили, как такие компоненты лучше писать, эта тема меня очень увлекла, и по итогам я сделала доклад на митапе (вот ссылка, но я там очень стесняюсь, be gentle). эта движуха началась из-за того, что ui-либа, которая была тогда, не справлялась с задачами кастомизации когда был один дизайн на весь яндекс, было ок, но число сервисов росло, и красить их всех одним цветом был не вариант. последний свой год в яндексе я занималась созданием и развитием библиотеки компонентов образовательных сервисов, сначала по пятницам, а потом фултайм о том, какие требования предъявляются к таким компонентам и о подходах к их проектированию будет этот тред. доброго субботнего утречка! эта неделя наконец-то заканчивается, и многие скоро вздохнут с облегчением, и я в том числе. const changes = [];for (const key of objectkeys(newstate) {}return changesсразу понятно, что мы собираем массив из того, что изменилось в состоянии, и его возвращаем с редьюсом у нас летает какой-то acc, который передается из итерации в итерацию как горячая картошка). я короче не знаю, насколько этично шарить код из реальной кодовой базы, но фишка в том, что оно почти никогда не выглядит так лаконично, как в твоем примере оно выглядит вот так. agree to disagree). у меня был компоуз из 11 что ли хоков, грешна) там даже типы уже не выводились. а зачем?) могу придумать только чтобы из сериализованного стейта гидрироваться и получить то же состояние юая, но кейс специфический. здесь от редьюса только итерации мне кажется, просто короткий for of был бы выразительнее, с одного взгляда понятно, что происходит. я нашла!. ууу, ну потерпите, недолго осталось кушать говно. не, ну это прекрасный кейс применения редьюса, здесь он к месту отличный код. а напиши пример, где тебе кажется, что редьюс уместен?). блин, вот не хотела без контекста постить и не зряда, тут не нужен usememo мы знаем. а почему просто цикл не написать?). usememo там тоже не нужен, мой коллега в курсе) это на случай, если мне уж очень хочется какой-нибудь хук. расскажите что ли, чем грешите злоупотребляете редьюсом? делаете лишнее, там где не надо? любите втащить редакс слишком рано и хранить там, в фокусе ли инпут?. щас просто ради интереса прошлась по своим pr и встретила свой грех трижды , спасибо за терпение!). мой типичный грех — злоупотребление хуком useeffect засовываю туда какое-нибудь вычисление, в которое могло быть и в рендере, а потом смотрю на это свежим взглядом и такая «ну бля». ах да, я сама-то тоже оверинженерка причины обычно две — незнание и усталость. все написанное выше крайне субъективно, если у вас пригорело, сочувствую) но рада буду обсудить контрпримеры! уройте меня. я предпочитаю написать несколько коротких регулярок, проверяющих что-то поочередно, чем одну, внушающую ужас перед мощью математического аппарата и смирение перед собственной ничтожностью. часто оверинженеры любят регулярные выражения ими тоже можно задачу в одну строку решить, а потом кто-то потратит полдня, пытаясь вкурить написанное. еще можно «изящно решить задачу одной строкой» (мне кажется, поэтому многие неравнодушны к редьюсу), так, что потом никто ничего не поймет без двадцатистрочного комментария. помню, был божественный англоязычный тред, где чувак просил прислать ему примеры кода с редьюсом и переписывал их нормально я ссылку проебала, если у кого-то осталась, пришлите мне плз!. когда на собесе кандидат использует вместо цикла редьюс, понимаю, что сейчас будет весело. иногда, имхо чаще всего, от использования неподходящего под задачу инструмента(yes, reduce, i’m looking at you). иногда от незнания — можно быть просто не в курсе, что в html есть замечательная связка details+summary, которая делает нативную раскрывашку, и начать пилить свою, полную дивов, онкликов и ужаса. иногда это происходит от желания обобщить раньше времени — код обрастает плохо продуманными абстракциями, и черт знает, что там теперь в нем происходит. пусть будет оверинжиниринг под этим я понимаю явление, когда реализация идеи настолько излишне сложная, что идею саму уже никак не разглядеть. ну, поиграли в демократию и хватит. доброго вечера пятницы!я сегодня не разгибаясь допиливала таски перед отпуском, так что извините, если заскучалио чем поговорим?. ещё с помощью пакета xstate/test можно генерировать тесты по модели так же с помощью стейтчартов можно описывать формальные требования к системе и проверять корректность этих требований, но тут уже математика и более подходящие языки идут в дело, например tla+. тоже их люблю) динамика только в переходах — можно, перейдя в состояние, сходить за данными и решить, куда двигаться дальше а еще машины можно вкладывать друг в друга!. хоба. а еще. визуализатор помогает задокументировать и оттестировать логику, даже не начиная писать юай. красота!. это комплимент нашему менеджеру разработки с опытом дизайна). ах да, xstate прекрасна своей визуализациейвот какая-то версия моего автомата. вот такая саксес-стори расскажите теперь и вы мне что-нибудь :). покурила документацию и породила на основе xstate прекрасную страничку. бэкендер занят, так что выводить это состояние нужно было на фронте из набора флажкови тут в моей голове щелкнуло — я знаю идеальный инструмент для этой задачи!. проверено ли его тестовое, можно ли записываться на собес и когда, если он записан — когда и куда ему нужно подойти, результаты собеса и дальнейшие шаги, все такое. у нас была система поступления, написанная из говна и палок все в мыле, все занятые и тут мы решаем, что было бы классно, чтобы поступающий мог видеть, на каком этапе он сейчас находится. лето в образовании — всегда горячая пора, надо нахерачить фич к новому учебному годуа еще летом сезон поступления в лицей. я в то время работала над яндекслицеем, это образовательный проект для обучения старшеклассников программированию. прелесть стейт-машин в том, что они могут из набора данных вывести нужное состояние. (кстати, на слайде есть мат, и зуб даю чуваку никто не сказал, что его это не красит, ну да ладно). суть в том, чтобы избегать вот такой лапши. ну или 2019, у меня беды с башкой. на питерский holyjs 2018 приезжал и рассказывал про xstate и как с помощью стейт-машин можно управлять юаем и исключать невозможные состояния интерфейса. сегодня я хочу поделиться, как знания, полученные на конференциях и митапах, помогли мне в работе и послушать ваши истории). доброе утречко четверга!. освежила в памяти да и всезадачки на литкоде еще можно порешать). ну вот а я о чем в яндексе непростые джуны (джуны ли они вообще, неясно, но на бумажке джуны). ну слушайте, приложение из портфолио и продакшен уровня сервис не очень сопоставимы. джунам обычно не дают проектировать веб-приложения :). это было написано в контексте конкретной обсуждаемой проблемы, но я с вами согласна. без понятия я для себя решила, что мне так будет некомфортно, может, остальные тоже так решили, хз. где вы это прочитали? если что-то нормально для а, это не значит, что это ненормально для в. пишут клиентский код, пишут сервер на ноде, продумывают архитектуру, настраивают инфраструктуру, стартуют большие проекты из ничего в прод за несколько месяцевэто очень крутой опыт, растешь со скоростью звука просто. всеони делают все. сейчас расскажу, что делают в яндексе стажеры и младшие разработчики, пусть и под контролем опытного лида. короче, к проектам в такой схеме лучше не привязываться). в службе спецпроектов было много проектов в разработке и на поддержке: были постоянно закрепленные за ними люди, но в принципе все можно было переиграть: если где-то пожар, то на помощь временно перебрасывали людей с других проектов. в спецпроектах этих проблем не было: свежий стек, гендерный баланс, а еще часть проектов была образовательными, а образование я люблю :3. по итогам пятисот собесов меня позвали в погоду и спецпроектыв погоде были классные задачи, но древний жс и ни одной девушки из 42 человек (допускаю, что они все лапочки, но вообще это для меня red flag). да, все такменя смущает во всем этом, что компании поменьше бездумно копируют этот процесс. из плюсов — маловероятно, что вы вспотеете от любого другого собеса в вашей жизни, разве что в гугл какой-нибудь, но у меня пока нет желания повторять этот опыт. поток кандидатов там такой, что могут себе позволить и бездушными побыть, но это ебический стресс, ребят. процесс найма в я максимально бездушный: техсобес по скайпу + офлайн собес из четырех часовых секций (алгоритмы на бумажке, вёрстка по макету, теоретический жс, практический жс на доске) после этого собесы с командами. (кстати, если вы будете хамить и разводить срач — я вас замьючу, и выбирайтесь оттуда потом как хотите, мне надоело). зачем идти в яндекс?на начальном этапе карьеры — за возможностями для развития, разнообразием задач, за духом стартапа под безопасным крылом большой корпорациина не-начальном — все то же самое + опционы, конечно же). я проработала в контуре полтора годаза это время силами классных людей там выросло внутреннее коммьюнити фронтов, улучшился процесс найма, появился буткемп для новых ребята еще за это время я подкачалась, и меня снова позвали пособеситься в яндекс. краткое содержание предыдущих серий: бросила карьеру в безопасности ради фронтенда, научилась верстать, зафейлила интервью в яндекс и устроилась в контур. доброго утречка среды надеюсь, этот день будет менее срачегонным, потому что я решила рассказывать про свой опыт дальше. вот уж для чего не нужен опрос. соре, там всего четыре пункта влезает. а как ваш уровень оценивает работодатель?. концентрация сеньоров). отличное комьюнити у ильи климова и он тоже всегда всем отвечает, корректирует ребят да много различных комьюнити и разработчиков, кто свободно делится своими знаниями можешь в наше комьюнити (devc: moscow) постучаться у нас есть программа менторства). ого, рекрутеры, внимание. как вы сами оцениваете ваш текущий уровень?. а давайте сделаем. из мамки надо еще сеньором сразу вылезать. надеюсь, вам повезет с командой так же, как повезло некоторым здесь, что они теперь считают, что стали квалифицированным инженером самостоятельно. нас читают новички, так что1) нормально, если вы не можете разобраться в незнакомой технологии в одиночку2) нормально просить о помощи3) нормально учиться. обнимемся. я запускала проект в одну каску, будучи младшим разработчиком в великом яндексе и это нормально. читай внимательнее, не о яндексе речьно, кстати, в яндексе в моей первой команде было два младших разработчика и два стажера. возможно, твоя практика репрезентативна только для тебя? так, мысль вслух. короче, объясняю, как устроен мир, а то вы, возможно, не в курсахне во всех командах есть больше одного фронта, особенно в продуктовыхразмер компании не влияет на то, оставят тебя одну с крупными задачами или неткоманда может состоять из одних джунов. все-все, я поняла, спасибо, мы закончили. страна розовых пони просто :). я ору, боже не было сеньора в моем случае, был другой фронт, но он был в отпуске, и я в одну каску проработала месяц а еще сеньор бывает не всегда, а тем более ментор. я сейчас тоже умею и разберусь в новой технологии за несколько дней а когда начинал, тоже умел?. я вообще немножко обескуражена: рассказываю, что весь мой опыт в жс на тот момент был парой тестовых, а мне говорят, что надо было открыть справочник по апи и хуйнуть сервис на реакте с нуля вы ребята или гении, или где-то пиздите). ты учитывай, что дело было давно, и контур большой и разный). ты принял ироничную неделю близко к сердцу). в контуре у нас тоже была большая продуктовая команда и ежедневные летучки на овер-сорок минут, причем стоя моя бабкина спина выла. не смотрела на это с такой точки зрения, спасибо!у нас большая продуктовая тима, и спринты и планирования у нас отдельные, но стендап общий наверное, было бы эффективнее проводить стендапы по подкомандам, но мы бы вообще перестали чувствовать себя одной командой на удаленке. вскрикнула. а мне кажется, цель в эффективном взаимодействии людей, что не отменяет, что в разных командах цель может быть разной. я прям помню, что там было — статья thinking in react, где интерфейс на компоненты делили, и устаревшая дока по апи с createclass. ну да, цель засинкаться, разве нет?. 1 рассажите, над чем работаете и в контексте чего находитесь2 планируете продолжать дальше? закончили, а от результата зависит кто-то еще? держите коллег в курсе3 помогите коллеге спланировать свой день, сообщив, что собираетесь его отвлечь и договоритесь о времени. тогда, мне кажется, у нас диалог немного о разном) я не про то, когда человек приходит и говорит «у меня лапки, учите меня, а я посижу» я про то, когда человек приходит и говорит, что его компетенции недостаточно для выполнения задачи и он готов ее повысить. хорошая документация расскажет вам о best practices и выдаст quick sta guide а если всего этого нет, то тут и не-новичку будет тяжко. и кстати для контекста — не у каждого инструмента есть мануалы и документация, и, если вы помните, у реакта она была такой классной далеко не всегда и первым делом я ее всю прочитала, разумеется. задача новичка в том числе в том, чтобы учиться, и учиться быстро если новичок просит отправить его на курсы, которые он еще и проходит в свободное время, это хороший, годный новичок. тоже важный этап — агрегировать боли всех участников и вместе подумать, как их можно решитьеще хорошо обращать внимание не только на то, что неудобно, но и на то, что хорошо и классно. а что страшного в том, чтобы сказать «я не знаю»?я обозначила, что сейчас не умею, но научусь, а при выполнении такого условия — научусь быстрее и лучше. стендапы в распределенных командах лучше проводить текстомв любом случае, стендап тоже встреча, и у нее должен быть план:- рассказать, что делали- рассказать, чем собираетесь заниматься- какие есть проблемы, чья помощь может понадобиться сегодня. это упростит жизнь техписам, которые будут документировать фичу по окончании разработки, это упростит жизнь тестировщикам, это упростит жизнь вам :). часто описание задачи включает в себя только заголовок, и тогда наша задача уточнить требования и зафиксировать их в тикете каждое изменение, каждую договоренность фиксировать в тикете тоже. бывает) не стесняйтесь тогда взять бразды правления в свои руки!. если где-то затык, что-то мешает выполнять свою работу эффективно, это повод для обсуждения, а не для бомбления в своем углуникто за вас для вас хорошо не сделает (learned it the hard way). добавлю, что для всего перечисленного нужно сначала договориться и продолжать договариваться, потому что все меняется. такие митинги бесполезны и утомительны, организатор встречи должен ее модерировать. в распределенных командах процесс онбординга — удаленный не скажу, что мне было просто, но очень помогло то, что большинство вещей было задокументировано, и каждый новый человек проверяет на актуальность и обновляет эту документацию. знаю, что коммуникация должна быть по возможности асинхронной и в текстовом формате, а если общение ведется голосом, нужно зафиксировать результаты текстом что еще?. когда я вышла в авиасейлс, я была первым фронтом не на пхукете разница во времени с пхукетом 4 часа, так что пол-рабочего дня я была предоставлена сама себе. больше всего мне интересно послушать про хорошие примеры процесса межкомандной коммуникации в распределенных компаниях с разницей в часовых поясах. фидбек очень важен, мы всегда стараемся его давать. сочувствую! зато опыта на пару лет вперед :). кстати, девочки, если очередной мужик назовет вас деткой в интернете, я даю вам лицензию откусить ему ебало. мне после гигантского яндекса было непривычно, когда я спрашивала, куда я могу обратиться с таким-то вопросом, а мне говорят «сходи к антохе»)а как же канал поддержки? дежурный? sla ответа?200+ человек это не тысячи. прекрасная формула!. ииии кстати, хорошо что я об этом вспомнила, потому что нужно это задокументировать в базе знаний нашей команды :). я добавляю метку к своей задаче в джире и переношу ее в need review копия задачи попадает к серпу на доску в оговоренные сроки задачу берет в ревью их разработчик, и дальше она либо переносится в ready to deploy, либо возвращается в работу, если нужны правки. пример:я часто залезаю в код поиска, он вне моей зоны ответственности мы с командой серпа настроили процесс кросскомандного ревью. все так — договоренности между командами должны выглядеть как простой набор правил. для меня тоже, поэтому я и согласилась быть первым фронтом в команде и выстраивать процессы с нуля) но для новичка хорошо попадать в команду, где уже все настроено хорошо, иначе откуда получить этот опыт «как надо»?. согласна: в компании должны быть очерчены зоны ответственности, а ответственные и способы связи (рассылка, канал в слаке, ) должны быть зафиксированы в общедоступной базе знанийбуду формулировать в положительном ключе, чтобы получились критерии хорошего процесса в итоге). что для вас хорошо выстроенный процесс, а что — не очень?. часто кандидаты жалуются, что в их компании проблемы с процессами, но мало кто может объяснить, что конкретно не так. доброе утречко вторника! сегодня в весь день hiring event, так что тредов от меня не ждите, но есть одна штука, которую я хочу обсудить. все, вы победили, держите корону олда. в плане багов — возможно, так и есть я к тому, что хромиум де факто монополист, как ie в свое время. я верстала под ie6 в универе, дед. кайф какой, ctf для фронтендеров. думаете, это не из сорма выгрузки?. я уже молчу про то, каким человеком надо быть, чтобы в наше время идти работать в фсб. видимо, нормальные умные люди к ним не идут, остаются не очень умные и на все согласные. из нашей группы, насколько я знаю, тоже никто работать в фсб не пошел, хотя мы, кхм, кадры зато пошел бывший коллега из мегафона, с тех пор я о нем ничего не слышала. я сейчас читаю расследование про покушение на навального, и вот что я вспомнилабыть безопасником в окологосударственной структуре — это не только скучно, это еще и мерзко нужно быть специфическим человеком, чтобы со спокойной душой копаться в частной жизни других людей. ты в атлантик-сити?) сало уже не там, мы на большой морской. мы сейчас про си или про жс? в жс вообще пофиг, а в си константные переменные лежат в ридонли области памяти, насколько я помню. контур — классное место, особенно для начала карьеры, я очень рада, что туда попала там не боятся давать новичкам серьезных задач, и я быстро на этом выросла. первой большой задачей было запилить новый сервис на реакте я сказала, что не ебу, что такое ваш реакт, отправьте меня на курс по нему и меня отправили! я подумала — вау, теперь я еще и учусь бесплатно). я стала частью команды контурфокуса, если кто знает этот сервис, дайте пять. мое тестовое удовлетворило ребят из контура, и пройдя небольшой собес, я стала новоиспеченным фронтом моей радости не было предела — я буду учиться любимому делу и еще и деньги получать за это? потрясающе. тут я поняла, что моя будущая работа не всегда будет приятной, а еще узнала слово полифил. хром — новый ie :). вторую неделю я выполняла одно из требований — приложение должно корректно работать и отображаться в ie8 это был пиздец, веб-разработчики прошлого, снимаю перед вами шляпу. первую неделю я вспоминала, как умножать матрицы, училась верстать кнопки с уголком и, конечно же, познавала js. тестовое — калькулятор матриц — я делала 2 недели, оно все еще лежит на моем гитхабе и по большей части мне нравится; я бы себя позвала сейчас на собес). сейчас, когда я старая и занятая, я тестовые не жалую, но на тот момент это был win-win: не пройду отбор, так научусь чему-нибудь!. лирическое отступление: когда я жила в екатеринбурге, там было два крупных работодателя — яндекс и контур с яндексом с наскоку не вышло, так что я написала в контур, и мне прислали тестовое. ахах, на тот момент мне бы jquery тоже пригодился!я знала, как было устроен веб на момент 2013 года в программе курса были штуки, которых я не знала: адаптивность, ретинизация, флексбокс, препроцессоры так что я решила, что это какое-то новьё и не прогадала). проходила у них до этого бесплатные курсы, и простота объяснений и подача информации мне зашли. очень рада, что сейчас есть комьюнити для новичков! наверняка на тот момент, когда я начинала, они тоже были, но узнать об этом было неоткуда. рекрутеру яндекса меня порекомендовал бывший однокурсник, который решил мне помочь на новом пути джедая я сходила на собес, на котором невероятно опозорилась) забегая вперед, собеседующий потом сидел со мной в одном опенспейсе, и мне было дико стремно. рекрутер гугла нашел у меня на гитхабе какую-то учебную поебень на с и звал на собес на позицию, хаха, security engineer я прислала свое резюме фронта без опыта, и со мной на это вежливо попрощались. меня распирает чсв ведь это знак судьбы, да?). итак, я защищаю дипломный проект, у меня есть серт об окончании курса и дикое желание развиваться в вебе дальше в этот момент мне на почту падают письма от рекрутеров гугла и яндекса. ни в коем случае так не думаю, просто объясняю :3. интенсив длился месяц, и это был месяц ада, но мне невероятно понравилось! верстка — все еще одна из любимых частей моей работы. все еще хожу за знаниями к хорошим спецам и плачу за это деньги, так быстрее и эффективнее всего в этом году проходила курсы по стилю и по дизайну презентаций, но об этом потом расскажу). когда не шаришь в чем-то, как я на тот момент, самым логичным выглядит пойти за знаниями к тем, кто ими обладает и может хорошо научить. веб сильно изменился с того момента, когда я интересовалась им в последний раз, а отличить в интернетах херню от не-херни мне не хватало экспертизы. кстати, не рекомендую идти на продвинутый интенсив, минуя базовый я смогла это вытянуть только потому, что на тот момент- уже не работала- имела небольшой опыт верстки- мне было очень интересно, и я могла херачить просто круглые сутки. правда, другим моим любимым проектом было написание криптоалгоритма на ассемблере, но где это можно применить, кроме выебона на собесе, было неясно). план был такой: в процессе обучения понять, моя это тема или нет на успех намекал тот факт, что в универе любимым проектом у меня было создание сайта с нуля, от бэкенда до верстки и дизайна. интенсив, кстати, стоил треть моей месячной зп на тот момент, но я была настроена решительно. как раз в это время начинался очередной интенсив по продвинутой верстке от все места на тот момент уже разобрали, но я написала организаторам, и местечко для меня в итоге все-таки нашлось. так что я съездила в отпуск, накопила сил, вернулась и положила заявление на стол. при таких вводных усваивать новую информацию, чтобы сменить профессию, было, мягко говоря, затруднительно. occasional дикпик, конечно, вносил разнообразие в серые будни, но в среднем через меня проходило такое количество информации, что я даже ленту твиттера после работы читать не могла. я не смогла стать хорошим спецом по иб просто потому, что мне было неинтересно классно было проводить аудиты безопасности и расследовать инциденты, но большей частью моей работы было лупить в dlp-систему на предмет утечек ребят, это так скучно!. предлагаю вести его самостоятельно). на всякий случай уточняю. любое математическое образование для разработчика — профильное является ли оно при этом обязательным, чтобы быть разрабочиком? нет. сорян, неделя будет тяжелой и для вас тоже. уточняю — «любого» !== каждого, а любого профиля является ли высшее техническое обязательным? очевидно, что нет. хотя нет, там была еще криптография, криптография заебись. 4 курса универа — всевозможная математика, алгоритмы, программирование, сетевые технологии и только пятый у нас вели почти одни фсбшники, вот этот год моей жизни можно смело сжигать. вообще общего у спеца по иб и программиста (любого) — техническое образование. в фронт откуда только не заносит! знаю химиков, философов, учителей русского языка. кто-то предпочитает let, потому что короче). имеет ли это отношение к жс — хуй знает, но я так ломала программы на с (в учебных целях, естественно, товарищ майор, спокойно). вот программа загружена в память, и злые хакеры хотят переопределить переменную, положив в нее что-то свое, поменяв байткод получится ли у них или программа упадет с ошибкой?. есть у меня еще не совет, а, скорее, когнитивное искажение для меня спор, что использовать для констант — let или const — был изначально решен: конечно, const!. не отправляйте личные фотки через корпоративную сеть, а особенно с рабочей почты где-то в далеком уральском городке над очередным дикпиком хихикает весь отдел иб. валидируйте пользовательский ввод. логируйте только обезличенные данные пользователей если их можно будет идентифицировать — можно словить знатных пиздюлей. охуительных историй из мегафона не будет (мне сыкотно), но будут охуительные советы от бывшей безопасницы. для вас. кстати, если у вас вдруг проблемы с иронией, эта неделя будет сложной(. самые охуительные истории у меня, конечно, из мегафона есть securityunderhood какой-нибудь? позовите меня. нативно вышло, да?. до сала я поработала в мегафоне специалистом по информационной безопасности и фронтом в контуре и яндексе. авиасейлс, поиск дешевых авиабилетов!. меня зовут лена рашкован, я фронтенд-разработчица в авиасейлс. давайте я для начала представлюсь, да? да. вот, кстати, и мотивирующая шиба дня:. как вы понимаете, в область моих интересов входят как шибы, так и программирование, а сама я — невероятно разносторонняя личность. доброе утречко понедельника! всю эту незабываемую (или нет) неделю с вами проведу я,. конечно не получится менять компоненты в фигме и возвращать их в библиотеку в виде компонентов максимум опять же показывать разницу скриншотами. наоборот можно посмотреть как предлагают тут через figma api на мой взгляд нужен один источник правды для компонентов (ваша библиотека) и можно если вам это нужно брать цвета/размеры автоматом из фигмы. в общем на первый взгляд из этих инструментов вполне можно добиться чего-то интересного, но надо пробовать и ковырять, возможно я ошибаюсь). часть стилей можно прогнать через (спасибо что упомянул в докладе) написав небольшой словарь или написать плагин для postcss, для лучшей совместимости с фигмой. дальше можно накрутить несложную автоматизацию и как минимум получить возможность отдавать дизайнерам ваши компоненты, чтобы они работали уже с ними, можно например добавлять автоматические скриншоты изменений, уведомления через api фигмы и на что ещё фантазии хватит. в принципе в ситуации с styledcomponents (с отдельным css можно через extract plugin в webpack) достаточно несколько строчек, чтобы конвертнуть ваш react-компонент в html и потом добавить его в figma. кстати, немного покопав, я нашёл плагин html figma который работает не всегда идеально, но позволяет вам импортировать в фигму html, и большую часть css. я не встречал таких подходов, может где-то они и есть) но дело в том, что сейчас figma стандарт де-факто во многих компаниях, и это не картинки, а вид представления, в том числе и кодом. на этом всё, с вами был если у вас есть какие-то вопросы или предложения — пишите в твиттер или телеграм, я всегда открыт к общению. записывайтесь в наблюдатели на любые выборы в вашем регионеих всегда не хватаетэто очень важно совсем не страшно и относительно не сложнообщайтесь со старшими, доносите до них информацию, замещайте телевизор с пропагандойогромное уважение беларусам 🤍🤍 и хабаровчанам. если хотите, чтобы больше людей узнавало про то, в чьи карманы уходят их налоги, узнавало правду про коррупцию и проблемы в стране — поддержите на выбор:проект  вышеперечисленным проектам я доначу и доверяю. если вы опасаетесь, что вас загребут, когда вы просто идёте по улице (как было со мной) и вам понадобится бесплатный адвокат (это может быть очень важно) — изучите информацию или поддержите овдинфо. если хотите уменьшить вероятность, что вас посадят по сфабрикованному делу и никто об этом не узнает, или хотите сделать так, чтобы таких случаев стало меньше, поддержите медиазону. если вы не знаете про ситуацию с врачами или хотите им помочь, или у вас есть в окружении врачи, которые не знают как добиться помощи в текущей непростой ситуации —. достойная медицина, образование, пенсии, пособия, доступная среда, честные суды, честные выборы, человеческое отношение, чистый воздух и вода в конце концов — это то, что должно нам государство за наши налоги, и то что мы должны требовать любыми мирными способами. почему я считаю что важно интересоваться политикой и стараться быть активным гражданином? потому что независимо от этого она вас касается так же как и ваших родных, родителей, возможно детей (если они у вас есть или будут), и напрямую вас лично. часто в моей ленте можно встретить политические посты: что-то, что беспокоит лично меня и я хочу хотя бы так обратить на это внимание так же, наш подкаст один из немногих в нашем сообществе, кто поднимает эти темы в виде критики или шуток. я заметил, что на меня подписалось некоторое количество людей, но у меня там довольно редко бывают какие-то технические мысли, иногда ретвичу что-то интересное что увидел, иногда там что-то повседневное. неделя подходит к концу) спасибо всем за обратную связь и вашу реакцию! рад был пообщаться, надеюсь кому-то это было полезнос последним тредом не вышло, но немного ещё добавлю. вот это вполне неплохо работает. ага, спасибо, нашёл. а как вы конвертировали стили из figma в css с его помощью? создавали свой словарь?. спасибо!. да вот что-то ничего толкового не находится. вот это интересно) пойду погляжу, спасибо. почитайте на следующем холи) или на том же piterjs, они чаще но тут ещё было бы круто иметь именно готовый инструмент, иначе каждый будет пытаться пилить что-то своё и идея так и не разовьётся :(. вот про style dictionary я пропустил и за его упоминание отдельное спасибо мне кажется, если заморочиться и совместить все эти подходы, то можно сделать классный инструмент по синхронизации в обе стороны. было бы круто, если бы можно было взять и наоборот конвертную грубо говоря реакт-компонент (разметку и стили) в фигму, вот это то, чего мне лично не хватает, и возможно это даже реально, тк react-figma делает нечто похожее, но к сожалению только из своего формата. синхронизировать сущности из п1 определённо классная идея, но на мой взгляд это меньшее из зол взаимодействия у меня нет проблем забрать новую иконку руками и добавить импорт svg в компонент, а цвета и размеры как правило довольно редко меняются. зар, доклад отличный, я его пересмотрел, но тут есть две проблемы:1 это работает только для простых сущностей: цвета/размеры/отступы2 это работает только в одну сторону дизайнеры не могут подтянуть изменения с фронта. прямое обращение к dom наоборот самый быстрый способ нет ничего быстрее поэтому тот же svelte работает быстрее — он напрямую работает с dom вместо viual dom в реакте queryselector и queryselectorall работают очень быстро, особенно если использовать просто класс в селекторе.  : математик и отец американской криптографии уильям фридман был страстным фанатом кодировать сообщения: в рисунках, текста и даже в музыкальных произведениях. вот к примеру интерфейс на канвасе сделан, если кому повдохновляться. моя саксес стори: 1 грубо накидал в фигме2 написал на реакте приложениес ios такая же история намечается, но наоборот: swiftui figma. так нечестно) сам нарисовал, сам написал. честно говоря очень мало смотрел во что-то опенсорсное осмелюсь предположить, что в material ui можно смотреть.  по этому надо использовать правило eslint + disable с комментом в тех 10%, которые правилом не покрываются а в вашем случае рано или поздно накопится критическая масса пересоздающихся значений, которые поставят колом всю систему и вот тогда будет больно.  начинающим разработчикам могу дать такой совет:производительность зависит слишком от многих факторов (версии фреймворка, браузера, системы) и нет универсальных рецептов эта одна строчка кода ускорит ваш проект в 5 развсегда нужно копать и профилировать свой проект самому. безопаснее куда-то). обещают это порешать. посмотрим). в идеале конечно не должны) но лучше чтобы дизайнеры использовали наработки фронтов. дизайнеры - нам нужны тулзы, которые специализируются на интерфейсах и делают это лучше чем сейчасразработчики - дизайнеры должны писать код. конечно есть куча других митапов и конференций, но я привёл в пример то, за чем по большей части слежу я. если не знаете куда податьсяесли тема простая или вы не уверены в себе — попробуйте локальные митапы (сейчас во время пандемии и онлайна думаю можно подаваться на любой, например или )если что-то более сложное — попробуйте например это крутой опыт. ну и конечно же помочь другим лучше понять тему, разобраться с чем-то, узнать что-то новое или подать пример чем больше докладчиков — тем всем нам лучше. так же, вы можете таким образом помочь своей компании привлечь новых сотрудников (если конечно вы в этом заинтересованы) или получить признание внутри неё и привлечь внимание к своему проекту (особенно opensource). как правило, подавать доклад можно на стадии идеи и за довольно большой срок после чего можно накидывать план, простейшие слайды, собирать обратную связь от ментора и постепенно приводить в порядок и улучшать свой доклад, писать текст, прогоняться, запоминать. если боитесь, что не справитесь — как правило, к вам будет приставлен человек (или несколько) который поможет вам по теме доклада, по подаче, по структуре, укажет на ошибки, подскажет как сделать ваш доклад лучше они сами в этом заинтересованы. так же это пресловутый личный бренд вас возможно начнут замечать будущие работодатели, люди в сообществе вы начнёте чувствовать себя более уверенно и в теме и на публике, получите отзывы, узнаете над чем поработать и где вы ошиблись. чем доклад поможет именно вам? если вы делаете доклад, вы скорее всего хотите сделать его максимально хорошо (чтобы банально не лажануть) поэтому во время подготовки вам придётся погрузиться в тему намного глубже, а глубокие познания это большой плюс. если нет — подумайте какие проблемы вы решали и что из этого может быть полезно другим технологии, подходы, практики, решение проблем — всё это может быть полезно для сообщества (и опять же для вас) если совсем глухо, подумайте, так ли полезно для вас текущее место работы. часто, и большие конференции и локальные митапы нуждаются в докладчиках поэтому я бы хотел призвать вас подумать о том чтобы не стесняться и подаваться с докладом если вам есть о чём рассказать — поделитесь с другими, это принесёт пользу не только слушателям, но и вам. речь пойдёт о докладах и конференциях все мы любим получать знания, особенно хорошо, когда есть интересная вам тема и кто-то делает полезную выжимку по ней, со своим опытом, интересными идеями и решениями, которые принесут вам пользу. завтра, чтобы не забивать голову разработкой, я постараюсь, если получится, запилить тред на отвлечённую тему не всё же о разработке говорить) а пока попробую вас немного вдохновить). пора валить). честно говоря не сталкивался с такими проблемами может быть потому что код был немного по-другому организован если функция зависит от пропсов, то при перерендере она ведь и так получит новые. я наверняка всей сложности не понимаю, но кажется, что можно было бы на лету трансформировать обычные реакт-компоненты в компоненты react-figma а их уже отдавать в фигму или это совсем космос?. спасибо!. спасибо). к сожалению у меня всё только под веб). еще, если очень хочется получить стабильный инстанс функции, то можно сделать вот так: гораздо эффективние и аккуратнее, чем usecallback с 5 зависимостями. но переписывать это конечно вопрос а сильно сложно обычный react-component автоматом перегонять в react-figma компонент? насколько это вообще реально на твой взгляд?). с этим можно жить, чтобы хотя бы базовые компоненты синхронизировать). еще ни разу не удалось что-то оптимизировать через usecallback всегда в deps array проскакивала какая-то часто меняющаяся зависимостьв целом, вот тут есть хорошая статья и правильными выводами:. у меня есть доступ, спасибо) пошёл смотреть. извини, я похоже многое упустил в твоём андерхуде, попробую найти и перечитать если можно использовать существующие компоненты это огонь. ну нет) react + styled-components. ещё могу сразу подкинуть баг-репорт) но не знаю какая допинфа нужна я запустил boilerplate, но hmr не сработал лоадер в фигме крутится, но изменений нет появляются, если снова тыкнуть в плагины и выбрать react-figma. вообще, честно говоря, очень сильно не хватает какой-то развёрнутой информации в идеале доклада) я наверняка пропустил кучу информации про react-figma, если есть где почитать/посмотреть был бы благодарен. или я чего-то не понял, или не совсем так) поправь меня пожалуйста, если я ошибаюсь, но я так понял, что react-figma экспортирует в фигму только компоненты, которые написаны с использованием api react-figma те по сути нужно переписать дизайн-систему под инструмент. ненавижу это правило) не всё, что используется внутри useeffect должно быть в его зависимостях я передаю в депсы только статичные или заранее вычисляемые зависимости, никаких функций, массивов, объектов. да норм было зато ты сразу видишь какое поведение ожидается но согласен, решение спорное. да, есть такое, и не всегда они подходят но так можно предотвратить лишний перерендер детей в дереве компонентов лучше конечно сначала ознакомиться с документацией по ним). есть еще вот такая классная вещь. да, я думаю тут надо прям серьёзно подойти и потратить кучу времени и сил) у меня к сожалению пока их столько нет. ну вот да я думаю тут нужен какой-то инструмент, который всё это объединит спрос на это в сообществе по-любому есть и я думаю рано или поздно что-то подобное должно появиться, учитывая что у той же фигнмы есть вроде вполне неплохой api. к сожалению показать не могу, тк скорее всего на данном этапе это nda для компании. ну вот сейчас оно вполне плавно работает, в том числе на android-планшете они там все зумятся по горизонтали переделать на canvas — хорошая идея для дальнейших оптимизаций, но пока вроде не болит) спасибо за комментарии. да, где бы такое взять только). если поменять эти пресеты в фигме, то система перерендерит, реакт-компонент и сравнит со скриншотом компонента из фигмы — если все ок компонент попадает в прод, а разраб увидет что компонент был изменен если найдутся отличие, то апдейт дальше не идет, разраб видет ворнинг. тоже давно думаю о такой реализации примерная схема: компонент из фигмы подтягивается в какую-то систему, там на его базе верстаетсч react-компонент и связывается с пресетами компонента из фигмы (цвета, радиусы, отступы, етс)дальше. хорошее дополнение. особенно полезен тротлинг сети, а то локально и на своих 100мбит интернета всегда все летает, а надо бы и на 3g проверять. зум это скорее процесс, реализован он в моём случае через изменение ширины подложки в которой находятся элементы, тк это зум как в редакторах — только по горизонтали при рендере ещё происходит обсчёт всех позиций, навешивание обработчиков и тд. кто ещё какие полезные тулзы для отладки посоветует?. если хочется именно превентить перерендер компонента, советую посмотреть на reactmemo() (и его аргументы), зачем нужен и как работает useeffect и usecallback. для любителей graphql и apollo есть так же плагин который поможет вам как минимум понимать как хранится ваше состояние, плюс оттуда сразу можно делать запросы и дебажить их. если вы используете redux, то есть тоже неплохой плагин для дебага вашего стейта. так же бывает полезно при разработке для мобильных девайсов использовать встроенные возможности chrome/safari, подключать девайс по проводу и дебажить так, как будто вы всё делаете локально пригождалось много раз. про devtools в хроме (я пользуюсь им) можно говорить бесконечно через них можно дебажить гриды, анимации, доступность (говорят в firefox с этим ещё лучше), дебажить js, и снимать метрики всего и вся подробнее можно ознакомиться здесь и на youtube. так же не забывайте, что есть вкладка performance через которую можно записать снэпшот и посмотреть что именно выполняется дольше всего, а так же включить network/cpu throttling и проверить как ваш сайт/компонент работает на более медленных девайсах или интернетах. так же в девтулзах хрома есть очень много полезного, в том числе меню rendering через которое можно включить отображение всяких перерисовок, пересчётов лэйаута, fps и много всего интересного, потыкайте в каждый пункт. если просто узнать перерендеривается компонент или нет, можно дедовским способом — залогировать перед возвращением jsx, можно накинуть breakpoint, можно открыть девтулзы, там в elements всё будет моргать на изменение dom для react есть хороший плагин. сначала стоит решить процессы коммуникациями, а потом уже оптимизировать на сегодняшний день я не слышал ни об одном удовлетворительном инструменте или подходе, где дизайнер может сделать норм компонент без разраба. примерно такой подход мы сейчас хотим попробовать сначала рассказать в целом как устроена наша разработка, потом вместе попробовать что-то набросать. насколько я понимаю, он предлагает систему типа framer’а выглядит хорошо, но на мой взгляд подходит далеко не всем к сожалению, хотя спасибо, надо будет подумать в эту сторону. нужно похоже смотреть в его сторону, да) правда пока вполне хорошо работает и так, но возможно когда-то придётся переделать. да, я думал что возможно стоит сделать это отдельным тредом, чтобы было смешнее). мне нравится эта идея вопрос тут ещё в том, готовы ли дизайнеры уходить во framer и сможет ли он полностью заменить figma, хотя тут я могу чего-то не знать. ага, вот ещё в копилку плюс обратная синхронизация в инструменты дизайнеров тут под вопросом. дизайн через код в теории кажется хорошим решением мы как-то в яндексденьгах пошли путём что дизайнеры делают react-компоненты, потом разработчики их переделывают/доделывают проблема тут как минимум в том, что не все дизайнеры на это готовы. да, идея годная. потому что если надо плавно отресайзить скажем 300 dom-элементов по событию pinch-to-zoom, то при перерендере плавности добиться будет сложновато. идеальный вариант, который бы хотел я — дизайнеры рисуют компоненты, разработчики их реализовывают, дизайнеры подтягивают к себе в условную фигму реакт-компоненты и строят интерфейсы на них, при изменениях со стороны дизайна создаётся что-то типа pr в дизайн-либу и так по кругу. проблема в том, что параллельно существуют две вселенных в одной компоненты строятся чтобы было красиво, а в другой чтобы было переиспользуемо и качественно исполнено в коде иногда это становится сложно поддерживать качественно в актуальном состоянии. мне кажется это не решает проблему тк слишком большой человеческий фактор + слишком много параллельной работы у этих двух сторон хочется автоматизации. я писал тред). из того что сходу вспомнил это пока всё если кто вспомнит ещё — welcome. полезная фича в api карт — перевод координат в относительную позицию во вьюпорте карты например вы передаёте туда lat/lng, получаете top/left так вы сможете двигать точки без перерендера любым удобным вам способом но придётся немного напрячься во время движения карты и зума. если вы в react-приложении работаете с картами в динамике (например куча точек двигаются по карте) я бы скорее посоветовал не использовать react-обёртки, или искать те, где есть хороший доступ к api. я наверное далеко не всем сейчас рассказываю что-то новое, но надеюсь кому-то это будет полезнотак же есть intersectionobserver отследить пересечения элементов и например не пересчитывать то, чего пользователь сейчас не видит. в подобных интерфейсах вам могут пригодиться или упростить жизнь такие веши как:resizeobserver подписываться на изменение размеров dom-элементов например можно обрабатывать то, что при зуме ваши элементы стали слишком маленькими. и тут мы вспоминаем старых друзей например documentqueryselectorall, классы у компонентов, windowaddeventlistener и вот это всё. в последний раз я занимался разработкой компонента, который очень похож на таймлайн аудио-редактора скролл, зум, много объектов, много слоёв, всё это динамически может меняться можно хоть обмазаться мемоизациями — никакого профита это не даст. почему вообще react? потому что в целом библиотека компонентов на нём, проект на нём, и можно было бы наверное посмотреть в сторону того же svelte, но честно говоря не очень понятно что бы изменилось кроме усложнения сборки и взаимодействия между компонентами. самая распространённая вещь из react в таких компонентах это useref чтобы создавать и хранить ссылки на dom-узлы для дальнейшего взаимодействия без перерендера компонентов, useeffect чтобы обновить состояние при внешних изменениях, всё остальное на чистом js. в последнее время я получил неплохой опыт в разработке более-менее сложных (в плане взаимодействия с пользоваталем) компонентов все они были на react главная задача — никогда или почти никогда не перерндеривать ваш компонент). ладно, тут верно подметили, что это не совсем так. да, я видел этот доклад там точно есть полезная инфа, но это не совсем то решение, которого хотелось бы оно не решает проблему синхронизации более-менее серьёзных вещей. надя рассказывала в докладе на субботнике:. спасибо, обязательно посмотрю. вопрос скорее про внутрикомандное взаимодействие все готовы сделать хорошо, но нет подходов/инструментов. никак. тред: как делать сложные, быстрые, плавные, высокопроизводительные компоненты с активным взаимодействием пользователей (скроллы, зумы) и большим количеством элементов, на react. друзья! а у кого-нибудь есть success story по поводу синхронизации между дизайнерами и разработчиками в контексте разработки дизайн системы и интерфейсов на базе компонентов? есть ощущение, что сейчас это одна из проблем, которую пока никто красиво не решил. ага та же беда часть плагинов к graphql-compose перевел на тайпскрипт а сам компоуз руки не доходятflow жутко тормознутый стал где-то с версии 070 да и своей строгостью крови попил нещадноза все время флоу сожрал месяца два моей жизни, тайпскрипт от силы неделю. мне даже кажется, что его лютая тормознутость погубила его сильнее, чем строгость и отсутствие типов меня бесило постоянно его убивать и перезапускать и ситуация как-то не улучшалась) зато, если я правильно помню, ошибки он выводил лучше чем tsхорошая статистика). у меня тоже не получается совмещать некоторые вещи кто-нибудь знает секрет, как успевать делать много полезных дел за день?) я точно знаю, что такие люди есть. я более-менее расковырял декораторы если интересно послушать, рассказывал немного про них в своём докладе. хороший подход!. да, мне кажется лучше искать какую-то золотую середину) если у тебя весь проект покрыт сложными типами, которые понимаешь только ты — ничего хорошего в этом нет.  : мы в марсианах не ищем огромного технического опыта и готовы брать фронтендеров на выроств вакансии мы специально ушли от тех требований и сформировали 5 критериев личности спросите себя, подходите ли вы под них — если да, то в 50% вы пройдёте отбор. 😱. да! антон красавчик) не раз залипал на его видосы с разбором задач. еще даже не начинал работать 🤔. неплохой вариант). надо искать разрабов среди друзей и друзей друзей может показаться, что ты отвлекаешь людей от работы, но как правило мы любим помогать людям. кто-то тоже задался вопросом, не нашел и сделал сайт с менторами не имею к сайту никакого отношения. код точно, а преподаватель мне кажется вполне может им быть при разных обстоятельствах. у меня просто были очень слабые преподы) но это и не вуз был. лучший ментор - чужой код) вообще я бы не то что советовал в вуз сходить, он мне больше связей дал, чем знаний, а для этого можно в тусовках типа хакатона поучавствовать). кто-нибудь участвует в advent of code? такое рождественское соревнования с задачами по программированию, если вдруг пропустили отличный способ размять мозгино для ленивых раздолбаев типа меня есть разбор задач. тоже отличный вариант найти ментора круто, когда есть такая возможность я в своей шараге мог бы быть ментором препода. надо же как-то без двухнедельных новогодних праздников выживать). а кто им был? однокурсник или препод?. работу отдыхаем). пока рановато). первое что приходит в голову — на работе, но на работе его тоже может не быть (или не быть профильной работы) мне кажется, что ментора можно найти в профильных сообществах, но только если ментору не придётся тратить слишком много времени на вас есть у кого-нибудь ещё идеи?. хотел поговорить про реакт, но уже самому от него немного тошно поэтому на правах ведущего я позволю себе немного рекламы но всякую херню я бы вам советовать не стал, сам сейчас фоном смотрю новый видос от  классный и очень старается. я не клал) ещё работаю. пятница, вечер! уже отдыхаете, или ещё работу работаете?. о, спасибо! супер понятно про dataloader’ы. спасибо за разъяснение, да, в теории массив может меняться и скорее проблема не в ts. да, но это всё же отчасти кастинг вариант с “as const” лучше выглядит. о, выглядит круто, спасибо! попробую перенести на реальный код.  кажется с вариадиками можно немного хакнуть аргументы функций. ага, спасибо, ожидал что есть простое решение). конечно было бы идеально чтобы ts как-нибудь сам это разрулил). ага, точно) спасибо. да, но ты тут перечисляешь что у “a” такой тип, а у “b” другой, а я хотел чтобы были несколько вариантов как через перегрузку и можно было бы использовать в объекте любой из перечисленных. типизация функции styled для css-in-js: 60+ строк типов на одну функцию + 130 строк dtslint тестов. ну это почти тоже самое я бы не хотел вообще указывать тип для coordinates. вот тоже интересный момент как не кастовать тип? сходу не придумал. а потом познаёшь дженерики, сложные выводы типов, и пути обратно в js нет. да, возможно так и есть если уже писали на типизированных и особенно строготипизированных языках, наверное ощущения другие. у меня честно говоря голова уже плохо соображает, но если никто не подскажет, погляжу завтра кто готов?). сложно объяснить в рамках твиттера) по сути у каждого ключа объекта может быть функция со своим набором параметров, да нужно описать это в типе объекта и чтобы работало и при описании объекта и при дальнейшем его использовании и типы были правильные). ну с any повсюду смысла вообще никакого нет, это правда. мы с и пытались, но так красивого решения и не нашлибыли ещё такие варианты и дал правильные ссылки). например, есть recordstring,function где function это функция, в которую могут приходить разные наборы разных параметров (допустим заранее известных) казалось бы решается перегрузкой, но нет (мой тупой вариант который я думал будет работать). ох, это я могу, но сложно описать непростой кейс) я попробую, но не обещаю что будет понятно). да, видел это) было ещё что-то из этой серии уровень упоротости конечно высочайший хотел бы я так же). а я вот после ts полез во flutter с его daом - вот где типы так типы! особенно после накатки null-safety - теперь даже в ts проектах пытаюсь такое же применить, но увы, ts не всемогущ к сожалению (((. да не, ну ты же можешь и на что-то забить, сделать проще, тут скорее речь о том, чтобы прокачиваться в познаниях нового и делать что-то крутое). о, классная штука! спасибо) надо позалипать, и вы присоединяйтесь. сорян) переходите на светлую сторону (или тёмную, кому как) как мы выяснили раньше, для этого не нужно обладать сверхъестественными способностями или огромным количеством времени. да, кстати, хорошее замечание когда ты сначала пишешь типы для того же компонента (более-менее сложного), ты сразу начинаешь размышлять в другом порядке. ну тут и jsdoc может справиться, но честно говоря я не очень верю в комментарии, которые могут расходиться с кодом и никто тебе об этом не скажет. честно говоря я не считаю ts модной технологией, как в общем-то и react это уже отчасти стандарт и вариант пути развития для вас и вашего проектаесли хочется послушать почему ts а не js я уже кидал ссылку на хороший видос про это. мне кажется typescript это не только про то чтобы ошибок было меньше, это большой новый мир с интересными задачами и поиском решений, вызовы самому себе, разминка для мозгов. а так же не могу не поделиться кодом от смотрите как круто можно затипизировать аналог lodashget() с автодополнением. вообще, честно говоря, чем больше узнаёшь typescript, тем больше понимаешь, что ты его не знаешь интерфейсики накидать каждый может, а затипизировать какой-то сложный кейс в проекте бывает довольно сложно и главное интересно + узнаёшь что-то новое. вообще я планировал более полезных вещей накидать про typescript, а не просто развести срачик)статья на хабре “typescript мощь never” про то, как работает тип never, зачем он нужен, и как его использовать во благо для меня было открытием. думаю на небольших проектах смысла в этом нет (хотя знать полезно), а вот на больших наверняка можно в рамках оптимизации что-то улучшить как минимум я бы посоветовал включить правило в eslint для возвращаемых типов функций если ещё не. небольшие штуки можно и на js с // -check писать будет почти также как и на ts, только в качестве типов — jsdoc. в отрыве от typescript хочу порекомендовать интересный telegram-канал “валя читаешь ишью от валентин следит за интересными issues во фронтенд-инструментах и комментирует их не знаю как он это делает, но безумно интересно и полезно. пару недель назад вышла неплохая статья про то как писать более быстрый (речь о компиляции и использовании, не о рантайме) код на ts почитайте, там есть неплохие советы в целом рекомендую подписаться на они бывает постят интересное. я бы не был прям настолько в этом уверен буквально сегодня вполне себе словил ошибку в браузере) но их явно будет меньше, да. я как-то в последнее время, даже небольшие проекты начинаю делать на ts, потому что когда пишешь на js чувствуешь себя голым) но это лично мои ощущения в целом, он конечно для многого совсем необязательный. typescript + eslint + stylelint + prettier + editorconfig =. надеюсь никто так не делает) кстати typescript compiler выдаёт вполне себе нормальный код в билде, по крайней мере по большей части. не использую ts, потому что проект на vue2 a он с ts не очень дружит это проплавили в vue3, но резона на него переписывать щас нет как альтернатива можно начать использовать ts-check. ещё eslint с набором правил под ts позволяет ловить много мест где any всплывает совсем неявно и своим всплытием запарывает всю типизацию. а так даже никто бы и не ругнулся) можно легко что-то забыть. ну да) некоторые вещи очень сложно покрыть типами). возможно на чистом js это превратилось бы в ещё больший ад). на проектах с большими командами сложно представить будни без типизации, все сломается за деньтипизация отнимает время, да, то зато экономит его вдолгую, при фиксе багов, при написании кода, исключает человеческий факторя рад что это становится стандартом в фронте. о да!.  так у тебя и от взгляда на плохой js не будет никаких иллюзий но тут другая проблема - хуже чем «отсутствие типов» это только плохо/неряшливо написанные типы и кроме плохого кода получаем бонусом typing headache. но вот насчёт any не совсем согласен без any не было бы typescript, но пользоваться им не стоит более того, я бы рекомендовал включить настройку noimplicitany в tsconfig и не использовать any по возможности в своих проектах как минимум тип unknown может помочь в части случаев. в последний год не помню проблем со сторонними типами, но набор инструментов может отличаться и конечно что-то ещё не покрыто можно помочь сообществу и совместными усилиями покрыть типами инструмент, которым пользуешься, или сгенерировать типы сомнительного качества автоматом. спасибо за развёрнутый ответ попробую немного подискутироватькак я уже говорил, время разработки как правило увеличивается только во время вхождения (которое может быть не быстрым)насчёт удорожания вакансий не могу ничего сказать мне кажется сейчас это близится к стандарту. проблем смеси js+ts ровно ноль конфиг ts позволяет настроить проверку js или её отсутствие. расскажи про минусы в ts я не считаю его идеальным и не считаю, что в нём нет минусов, просто интересно послушать разные мнения.  признаться, я видел приблизительно одинаковое к-во людей, говнокодящих на ts так и на js причём, говнокод на ts обычно сильно страшнее, особенно когда типы люто не сходятся и в них кидают все чем могут, лишь бы компилятор «заткнулся». но и тем, кто уже активно пишет на ts советую посмотреть я с опытом ~15 года на ts подчерпнул оттуда полезные моменты. не пали). раз дмитрий пацура лайкнул мой твит, прорекламирую его доклад “почему следует выбирать typescript вместо javascript” полезно, особенно тем, кто ещё не начал или только начинает изучать ts. по опыту могу сказать, что:1 кажется, что работы добавляется только первое время, пока не начнёшь себя комфортно чувствовать с ts дальше начинается обратное — упрощается рефакторинг, сокращается количество глупых ошибок2 тесты нужно писать независимо от выбора js/ts :). на выходе, если говорить про браузер, у нас только один вариант — получить из чего-то js, не обязательно из суперсета, можно и из другого языка. вроде он вполне себе полноценный отдельный язык. от бэкграунда зависит людям из мира java, c# проще понять ts и начать писать правильный код на нем. тот же wrike показывает, что даже на da можно найти/обучить разработчиков (“даже” не потому что он плохой а потому что не сильно популярный) мне кажется количество вакансий на ts будет только расти, так что разработчики тоже должны быть заинтересованы в расширении кругозора. а какие были минусы?. как я писал вчера, мы переводили наш проект с одного подхода на другой (в рамках graphql, но не суть) у нас сначала было только несколько резолверов на новой схеме, потом половина, мы немного страдали, а потом собрав волю в кулак перенесли остальное главное хотеть). честно говоря я не заметил особых проблем у меня был опыт участия в переводе проекта с js на ts — обычная рабочая задача конечно, если проект очень большой, это накладывает свои сложности, но если не просто начали и забили, а постоянно активно кто-то этим занимается — вполне ок. молодцы). только неделю назад голосовали нашей фронт-группой по выбору яп для нового проекта со счётом 2:1 победил typescript. наверняка немалое хороший повод начать внедрять typescript на текущем месте работы, чтобы потом тебя не отсеяли это же не typescript виноват в том, что ты его не знаешь). насчёт пригодного кода… мне кажется тут важно понимать принципы того, как не надо писать типы (слишком сложные, типы сильно завязанные на другие типы и тд), и после пары пулл-реквестов с ревью от команды ты вполне сможешь писать пригодный код. да, сложные типы встречаются, но я думаю любой разработчик хотя бы примерно понимает что такое массивы, объекты и перечисления конечно придётся почитать документацию или посмотреть доклады + почитать код, но мне кажется это не должно стать какой-то огромной проблемой. если проект взрослый и написан более-менее норм, скорее всего человек вполне может легко войти в него начиная с приблизительной копипасты соседних кусков кода, особенно если задачи будут не сильно сложные. сложный вопрос всё зависит от уровня разработчика, кода проекта и задач мне кажется, что порог входа должен быть ниже (объясню), а время вряд ли будет сильно больше, если задачей не будет что-то типа “покрыть типами lodash”. перешел на ts ровно год назад до сих пор не понимаю как без него раньше писал? еще и спорил что он не нужен). ха! а почему это суперсеты нечестно? ну писать то можно хоть на perl’е вопрос чтобы что?. ух, сочувствую) молодцы!. раз смелые и отважные, не вижу проблем чтобы начать) typescript хорош ещё тем, что на него можно переходить довольно плавно, по чуть-чуть, без строгости. да, уже как-то говорили об этом) интересный подход я отрыл ссылку из того треда, вдруг кому будет интересно как можно дружить typescript и jsdoc. о, интересный канал, подписалсяошибки в typescript и правда иногда выносят мозг (хотя нельзя не отметить, что ситуация улучшается), но для меня, его преимущества покрывают все недостаткикстати, канал был бы сильно лучше, если бы там была ещё сразу ссылка на issue в typescript. помню в давние времена мы как-то тоже выбирая между flow и typescript выбрали flow, потому что “его потом выпилить легче если что” до сих пор выпиливают. жестоко. да, имелось в виду конечно что-то, что компилируется в javascript например, typescript. хороший ответ я не могу. это точно неправда). ключевой вопрос этого аккаунтапредлагаю закрепить навсегда. я тебе не верю!. сегодня я погряз в работе, но у меня есть вопрос для вас — кто-нибудь ещё пишет на javascript продакшн проекты? если да, то почему?. фрагменты — часть спецификации graphql вопрос в степени их интеграции при желании из apollo можно собрать relay, но из коробки он очень низкоуровневый это не хорошо и не плохо — просто под разные задачи. спасибо) буду всё смотреть, читать очень пригодится в ближайшее время. бонус:если в query можно для ошибок использовать и interface и union, как советует саша соломонто для mutation это нифига не удобно максимум interface можно заюзать никаких union-типов в ошибках мутаций - иначе будет много боли с обработкой ответов. 3/3 а есть отдельная каста ошибок для мутаций мутация это операция на изменение данных и ошибка может и должна быть только однаошибку можно вернуть как в errors так и в payload, если клиент ее запросил в запросе подробнее я тут расписывал. 2/3 ошибки для query достаточно хорошо описывает sasha solomon: есть ошибки сервиса и они улетают в errors а есть ошибки бизнес-логики (я их называю проблемами) которые может отхендлить клиентское приложение - нет доступа, нужна оплата и тп. спасибо большое! очень полезная информация. круто! надеюсь пригодится и у тебя всё получится). хороший вопрос) из документации dataloader’а можно узнать, что он за один проход event loop’а собирает все айдишники с которыми ты вызвал load(), а в следующий проход вызывает саму функцию со всеми накопленными, после чего возвращает результат промиса. возможно пока не сталкивался может быть стоит мокать данные другим способом, например через отдельный mock-сервер или ещё как-то. да, классная штука это минус архитектуры apollo client ещё раз посоветую доклад от  и все остальные, которые от павла найдёте здесь он как раз разбирает оба клиента. да, всё так, но не совсем apollo действительно в этом уступает relay мы для себя решили эту проблему так — у нас запросы делают только контейнеры (страницы) и передают данные вниз никакого кастома не городим, компоненты сами никуда не ходят. дальше, каждый раз, когда нам нужно запросить пользователей из бэкенда, мы не идём туда напрямую, а делаем так в итоге, при запросе, все эти id накопятся и выполнится один запрос за пользователями и намапятся на наши сущности. вам сначала нужно написать его используя библиотеку выше код довольно простой мы создаём dataloader, который принимает функцию с массивом id пользователей, делает запрос в наш бэкенд с фильтром по этим id, дальше возвращаем их в том порядке, в котором мы запросили (это важно). логично было бы запросить комментарии, взять уникальные id пользователей из них, и запросить один раз этих пользователей с тем самым фильтром userids примерно этим и занимается даталоадер. допустим ваш бэкенд имеет ручку getusers у которой есть параметр userids, который является массивом айдишников для запроса если вы например выводите список комментариев и запрашиваете автора по его id, у вас будет столько запросов за пользователями, сколько комментариев. да даталоадеры — очень полезная штука, особенно в graphql я к сожалению не смогу рассказать про кишки, но расскажу как мы её используем и как я понимаю её работу в этом контексте если кому интересно, в документации есть подробнее. можешь пожалуйста немного подробнее?. ооо да если стоит задача написать api first приложение и есть куча связей, то nest как redux просит кучу бойлерплейтапри этом хочется ddd и вот тут я изобрёл graphql-compose-modules ссылку не даю, тк нет документашки но на нем мы уже год сидим и довольны как слоны. да по сути нет никакой разницы метрик нет, тк разные приложения возможно у apollo-server есть какой-то оверхед, но больше вероятность накосячить руками по сути это всё тот же nodejs-сервер в котором идут всё те же запросы к бэкенду глобально мне кажется разницы никакой нет. спасибо, обязательно посмотрю. на этом пока кажется всё решайте сами стоит ли оно того лично для меня — 100% стоит удоство использования на высоте, синхронизация с api, много всего из коробки, всё типизировано приятно разрабатывать такие приложения. так же, внезапно вы можете получить ситуацию, когда на одну страницу у вас будет скажем 15 запросов вместо 3 забыли где-то dataloader или ещё что-то, поэтому мы в dev-окружении всегда выводим небольшие попапы с количеством запросов. если вы используете (по-умолчанию) включенный кэш всех запросов, есть вариант забыть где-то что-то обновить и получить неконсистентное состояние мы решили по-умолчанию этот кэш выключить и возможно включать для отдельных запросов пока не болит. так же, вам нужно научиться корректно обрабатывать массивы ошибок от сервера мы пока не дошли до этого, поэтому показываем стрёмный ответ уверен, какое-то решение есть, возможно у каждого своё. например, вы переполучили данные, apollo пытается положить их в кэш, они там уже есть, пытается их смержить, но безуспешно если вы явно не обработали ошибку, есть вероятность увидеть white page и долго думать. так же, тк apollo матчит данные с кэшом по двум полям: id и __typename, вы всегда должны запрашивать сущность с её id, иначе при обновлении кэша стрельните себе в ногу. типы из вашего api это не совсем те типы, которые вы получите тип ответа от apollo-server будут содержать ещё некоторую информацию, другие (но такие же) енамы вам скорее всего придётся научиться с этим жить (мы вроде научились). похожая ситуация с пагинацией с одной стороны удобно, с другой — вам нужно в специальном методе updatequery самому смёржить данные и вернуть их звучит вроде логично, пагинация всегда разная, но мне кажется можно было придумать решение изящнее. из того что я заметил на текущей версии ac (говорят часть из этого уже стала удобнее):не очень удобная ручная работа с кэшом чтобы после запроса его оптимистично обновить, нужно писать примерно такую балалайку со всей структурой. что мы получили в итоге? в api описываем только сущности и их связи, на клиенте только то что мы хотим запросить, стартуем приложение и получаем типизированные хуки с типизированными запросами и ответами которые супер удобно использовать, но давайте и о недостатках тоже поговорим. после этого, в коде мы вызываем что-то вроде usegetusers() или usegetuser({variables: {id: 123}}) и получаем наших пользователей типизированных так же как в api. чтобы совсем автоматизировать процесс мы при старте приложения идём через тулзу graphqurl в наше api по http, забираем схему и скармливаем её в codegen, который для каждого компонента где у нас есть запросы генерирует специальные хуки на основе usequery, полностью типизированные. всем же нам хочется сделать запрос в api с теми параметрами, которые оно действительно принимает, и точно знать что мы оттуда получим и будем использовать для этого есть отличная тулза graphql-code-generator (зацените сайт). так же есть его аналог uselazyquery чтобы вы могли делать запрос не при рендере, а по нужным вам условиямв итоге, всё довольно сильно упрощается — берёте ваш умный компонент, в нём вызываете usequery, берёте эти данные, показываете их — profit! но и это ещё недостаточно хорошо. собственно сами данные, ошибки, признак того что запрос выполняется, функцию для перезапроса данных и пагинации, возможность включать/выключать перезапросы по таймеру и другие полезные штуки так же можно описать события типа oncompleted. хук usequery через который вы делаете запрос на ваш сервер, подставляя туда собственно graphql query и переменные при необходимости, предоставляет вам кучу всего полезного. с ac вам по сути не нужен стейт-менеджер более того, его использование не рекомендуется я уже год не видел redux и очень этому радтак же ac поставляет react-hoc’и для староверов и hook’и для модных ребят работают они примерно одинаково, я буду рассказывать в контексте хуков. так же он позволяет делать optimistic ui, например вы отправили формочку создания пользователя, эти данные сразу подпихнули в кэш и уже можете его показать дальше можно перезапросить эти данные, чтобы всё было совсем консистентно. через ac можно делать запросы на сервер, кэшировать данные (например вы переключаетесь между страницами и второй раз запрос не выполнится — это настраивается). погнали дальше как я говорил для сервера мы выбрали apollo server, соответственно на клиенте мы решили взять apollo client (ac для краткости). вот оно как оказывается, ещё лучше. для меня это наверное пока все минусы, которые могу вспомнить в остальном только плюсы, и большую их часть я ещё не рассказал есть ещё пара моментов касаемо клиентской части, но о них чуть позже. а так же, в ответе у вас будет ошибка, но не просто ошибка, а массив ошибок с кучей полезной и не очень информации может быть есть какие-то общепринятые подходы к ошибкам, может быть что-то хитрое подскажет, у нас пока это задача на ближайшее будущее и мы смотрим в логи. не знаю насколько это минус, но есть непривычная, и с нашей стороны пока не обработанная история ответ на запрос всегда будет со статусом 200 (если сервер жив) соответственно, вам нужно либо переопределять это поведение на сервере, либо обрабатывать корректно на клиенте…. возможно я иду немного поверхностно если хотите каких-то более глубоких подробностей — дайте пожалуйста знать). так же с apollo server идёт удобная тулза, которая содержит всю документацию, все связи в удобном виде, все ваши схемы, и песочницу с валидацией для выполнения запросов. обожаю тдд, до пандемии случалось спонтанное парное программирование польза очевидна и понятна. я пока немного поработаю если у вас есть вопросы — с удовольствием отвечу чуть позже продолжу про клиентскую часть, кодогенерацию, синхронизацию между api и клиентской частью, и возможно что-то ещё. связи тоже описываются довольно просто у сущности вы описываете поле методом класса, внутри функции которого делаете запрос за связанной сущностью нужно только не забывать использовать dataloader’ы чтобы не генерировать лишние запросы на бэкенд. мы начали со schema first, код конечно всё равно нужно было писать (описывать связи между сущностями), и честно говоря мне этот подход нравился больше, но в итоге мы перешли на code first для большей гибкости выглядит это примерно вот так. во втором случае, вы описываете все сущности как классы в nodejs, берёте type-graphql в помощь, можете навешивать валидации из возможно привычного вам class-validator, и тд. серверное приложение с graphql можно писать минимум двумя способами — schema first и code first, можно даже совмещать их в первом случае чтобы описать сущности вы пишете в специальном синтаксисе типизированную graphql-схему типа такой (картинка из интернета). на сколько я понимаю, серверная часть может быть практически любой можно написать свою, можно взять какую-то из готовых, мы решили выбрать и на клиенте и на сервере apollo, тк он более близок к сообществу и лучше развивается, чем тот же relay, хоть и уступает ему иногда. первый выбор который перед нами встал — какие библиотеки использовать я пересмотрел пару докладов от павла, вспомнил наши разговоры на holyjs и предложил apollo. у меня такого опыта не было вообще не считая прекрасных докладов от  а у моего коллеги был, но небольшой и мы начали делать mvp. нам казалось, что он удовлетворяет многим нашим потребностям — легко запрашивать только необходимое, получение связанных сущностей, отсутствие отдельного метода контроллера на каждый чих мы решили рискнуть. когда нам понадобилось сделать новое api для нового проекта, мы примерно прикинули схему сущностей, написали в голове несколько сотен методов nest-контроллеров, и загрустили в этот момент нам пришла идея попробовать graphql. мы так жили, но было некомфортно кстати про то, как мы сделали систему контроля доступа через рефлексию в typescript я делал доклад на прошлой холи если не слышали про рефлексию в ts — советую посмотреть. до этого у нас было одно api на nest — куча контроллеров, там же проверка доступов, там же некоторая логика нам приходилось внедрять в запросы параметры типа includes чтобы по запросу доставать дополнительные данные,отсутствовала какая-либо синхронизация с клиентским приложением. по сути всё просто — клиентское приложение идёт в api за данными, api через клиент (рассказывал вчера) идёт в микросервис, агрегирует и возвращает данные, плюс содержит некоторую логику. так же мы предпочитаем разделять фронтенд на api и клиентскую часть во-первых чтобы не мешать мух и котлеты, а во-вторых этим api могут воспользоваться другие сервисы и мы сразу закладываем это при разработке. у нас на бэкенде микросервисная архитектура, у каждого микросервиса своя зона ответственности, например один отвечает за пользователей, другой за депо, третий за автобусы и тд как правило они не связаны, и максимум что у нас есть это id какой-то связанной сущности. некоторые считают, что graphql это что-то типа запросил с клиента всё что хочешь, сервер вытащил всё из базы и погнали на самом деле не совсем так запросить можно только то и так, как вы это сделали. сразу оговорюсь, что это мой личный опыт и наблюдения, в некоторые вещи я не успел погрузиться достаточно глубоко, могу иногда нести чушь на взгляд graphql-гуру. расскажу немного про graphql вы наверняка уже слышали про эту технологию, но как и в докладах, я люблю почитать какие-то реальные истории об использовании, чем абстрактные рассказы, поэтому расскажу про наш опыт почему мы выбрали graphql, как это работает, какие профиты даёт. 3 сложно сказать) мы пишемся каждую неделю, всё уже смешалось чтобы совсем без упоминания может и есть, не уверен, и точно не назову, тк мы часто вспоминаем кого-то или чей-то твит часть тем берётся из твиттера. 21 но вообще, я считаю, что много выпусков (особенно с крутыми гостями) набирают незаслуженно мало прослушиваний. 2 слишком много переменных зависит от гостя и темы и названия, и скорее всего от положения луны надо ещё понимать, что для кого-то один гость — боженька, а для кого-то ноунейм например выпуск с психотерапевтом собрал много прослушиваний. спасибо). 1 мы все довольно разные, и каждый вносит что-то со своей стороны, подкаст бы наверняка изменился он возможно и мог бы существовать без кого-то из нас, но у меня есть ощущение, что возможно в этот момент он бы перестал выходить я слабо себе представляю такое продолжение. к сожалению не все подписчики jsunderhood слушают наш подкаст) если кому интересно, мы пишем подкаст уже больше трёх летподкаст фронтенд юность есть на большинстве площадоки у нас есть крутой youtube канал, например там есть ламповое интервью с дэном. и где она сейчас?!. кстати, мы ожидали, что контрибьютинг будет сложным и рассматривали вариант с форком, но тк фича не горела, решили попробовать заслать pr и его приняли так что не бойтесь отправлять фиксы в чужие репозитории) принесёте пользу тем, кто столкнётся с такими же проблемами. насчёт генерации http-клиентов на typescript из java, добавил в реплай, как обещал. мы используем openapi-generator ( через maven plugin ( и typescript generator ( и даже заслали им багфикс для енамов. мне это напоминает локальный хакатон) но обычно в тех хакатонах где я участвовал, в конце не было какого-то стоящего результата) возможно это связано с тем, что это твоё рабочее время, а на хакатонах интереснее потусоваться или возможно я был на каких-то неправильных хакатонах. спасибо, сергей. пробовали ли вы когда-нибудь экстремальное программирование? принесло ли вам это какой-то опыт? может быть кто-то планирует внедрить в своей команде такое?. так же у нас уже был опыт парной разработки с ребятами из смежных команд это облегчает интеграцию между проектами. сложно сказать, что эти встречи очень продуктивные в плане скорости разработки проекта, но таким образом мы обмениваемся опытом, идеями, постоянно есть кому предложить что-то, о чём не подумал другой разработчик ну и просто лишний раз общаемся. из забавного — для java-разработчика например очень необычно то, что у нас можно вызвать consolelog и передать туда функцию а я удивился, когда он использовал numeric separator, потому что сам им никогда не пользовался. в качестве подхода был выбран tdd язык, в зависимости от направления разработчика, может быть конечно не очень привычным, но это вносит свои плюсы — бэкендеры познают nodejs и typescript и вносят свои подходы в наше приложение. смысл в том, что мы создали ежедневную встречу утром, в которой по желанию участвуют разработчики из команды (бэкендеры, фронтендеры, тимлид), и каждое утро кто-то один берёт инициативу на себя, шарит экран в зуме и разрабатывает какую-то фичу, остальные смотрят, подсказывают. недавно мы решили устроить необычную активность нам понадобилось сделать небольшой внутренний проект силами нашей команды, и мы решили делать его всей командой по очереди один стэк (nodejs, nestjs, клиентскую часть ещё не выбрали, но наверное это будет react, посмотрим). всем доброе утро) спасибо за вашу активность!сегодня начнём с небольшого рассказа о совместном программировании, а днём планирую более технический разговор первый день после отпуска, но надеюсь всё успею. openapi generator же там прямо можно указать что вместо фетча использовать не говоря о разнообразных пресетах, в которых можно генерировать код. мы наследуемся от common клиента в котором все настройки и абстракция над http-клиентом генерируем только входные/выходные типы и обращение к ручкам микросервисов если очень надо, отдельные клиенты можно генерировать на основе другого шаблона где в конструкторе другие настройки. красиво!. о, выглядит интересно. я такое только для реакт-компонентов сделал). это было на другом месте). спасибо!. кстати, довольно полезная книга при работе с людьми из разных культур:. ага. спасибо за разъяснение) теперь понятно. ничего сверхъестественного про то как работает js, вакансия была не на фреймворк чел изучил спеку.  : если вы разработчик с опытом работы в 3-4 компаниях (локация неважна; снг + заграница будет плюсом), и вы готовы уделить 1час времени, стукните в личкуделаю исследование, где ваш опыт пригодится! вам человеческое спасибо и в карму от вселенной за ретвит низкий поклон. можно пройти стажировку в крупной компании, например яндекс (сам брал стажеров не один раз к себе) на опыт никто не смотрит, если знаешь js и понимаешь в программировании - секции пройдёшь после стажировки, во-первых можно остаться, во-вторых вопросы про опыт отпадают. да, вообще отлично. согласен. как минимум под другим предлогом да, но вообще, если тобой будут довольны, то смысла в этом нет. мы так один раз чела на мидла взяли без опыта во фронте. на мой взгляд вариантов тут как минимум несколько:1 искать компанию, которая берёт джунов без опыта2 идти на стажировку3 врать, что опыт есть4 показать себя на собеседовании так, чтобы взяли без опыта, попросить тестовоеа много кто ищет джунов обязательно с опытом?. странно поставлен вопрос во-первых компаний, которые нанимают джунов явно больше одной во-вторых это обычно указывают в вакансии, на специальных сайтах даже фильтр такой есть, поэтому. кодогенерация вообще огненная штука о ней ещё поговорим чуть позже. чуть позже, если интересно чем, закину в реплай. ещё мы сделали такую штуку:бэкендеры пишут на джаве rest-apiна ci сразу билдится клиент к бэкенду на typescript из swagger-схемыподтягиваешь эту версию клиента в nodejs-apiprofitразработка сильно ускорилась. спасибо. интересно про jscodeshift. второй пункт довольно суровый. а можешь немного подробнее как применяете jscodeshift?. не стоило, согласен. мы делаем разные npm пакеты и у нас есть потребность постоянно открывать pr в соседние репозитории, публиковать canary версии и тд, поэтому накрутили разной автоматики, в общих чертах про нее можно тут почитать:. норм! боты тоже хорошее направление у нас с помощью бота можно уйти у отпуск) сейчас работаем над ботом для слака, который в конце спринта спрашивает какие задачи ты хочешь предложить в следующий спринт (уменьшение техдолга). второй позволяет не думать что потеряешь что-то при копировании, а копирую я постоянно и опять же можно писать свои обработчики буфера. две вещи, без которых не могу уже представить жизнь — alfred app и pastebotпервый помогает настроить переключение между приложениями по хоткею, но с помощью уже написанных или собственных workflow можно сделать много интересного применений куча. кстати про автоматизациюподелитесь опытом, приходилось ли вам автоматизировать какие-то процессы и рабочие моменты?я стараюсь упростить всё, чем я пользуюсь часто потому что леньв первую очередь это алиасы для git команд и автодополненте для shell (zsh). можно написать код для автоматизации того, что не нравится. если у вас есть лишние 100к и вы доверяете бренду — пожалуйста знаю ребят оттуда, уверен они постарались сделать всё максимально хорошо больше ничего не могу сказать. дают обсуждаешь задачу, говоришь, что нужно r&amp;d, закладываешь время на это в рамках задачи, определяешь definition of done и погнал бывает что на какие-то вещи берём сами по-партизански но обычно проблем с этим нет. если ты знаешь js на хорошем уровне, не понимаю в чём проблема освоить фреймворк или библиотеку самому как-то без курсов по jquery же справлялись) и как освоишь технологию по которой нет курсов? нужно учиться обучаться, читать, ковырять, пробовать, решать проблемы. согласен, что мотивация очень важна и она должна идти изнутри. как в общем то и в любой школе или в институте. «сходи, почитай доку», - это самый недооцененный совет я бы его и многим «синиорам» смело советовал но исключительно в доброжелательном ключе, мол, сходи почитай доку и потом обсудим оф доки и исходники сторонних пакетов - это, зачастую, кладезь знаний. тоже верно обычно это стараются преподавать в школах и институтах, но можно посмотреть на тот же csc если вы в питере или новосибе они хорошие ну и наверняка есть куча видео на ютубе и статей. честно говоря не хочу выписываться в войну школ я сам там не учился, а каждый владелец школы считает её лучшей выбирайте что вам ближе и где лучше усваивается, благо вариантов много. да, согласен ментор нужен, или человек, к которому можно если что обратиться сейчас есть целые сообщества и узкой и широкой направленности, где подскажут. я просто не очень много знаю про школы писал выше, что школы с широким спектром знаний это ок есть явно больше одного способа освоить программирование выбирайте что вам больше нравится. не могу не репостнуть противоположную точку зрения. спасибо!.  плюсую начал с них за ~6 месяцев подтянул свой уровень с нуля на достаточный, чтобы начать работать. из курсов ребята делают с душой и с желанием сделать тебя хоть немного похожим на программиста 😬. если вас отправили на удалёнку без вариантов, и вам от этого грустно, попробуйте поговорить с работодаталем можно работать в офисе с соблюдением мер безопасности у нас так работает меньшинство, те, кому дома некомфортно. как человек, который без бэкграунда учил js, скажу что нужно идти на курсы дело даже не в знаниях, а в тусовке в моменте ты захочешь бросить все это и тут то придет на помощь ментор и однокурсники а когда освоишь базу можно и петпроджекты и все вышеуказанное. есть положительные отзывы об htmlacademy на сколько я знаю, там как раз пытаются дать более полные знания и курс довольно объемный опять же, я скорее за самообучение, но если это кому-то полезно окей. опят же, если есть база, хотя он не так популярен и мне не показался проще реакта, скорее немного другой, но возможно концепции и правда проще. мне довольно сложно понять, я так понимаю проблемы разницы культур других стран?. пропустил вчера, зато сегодня ещё больше в тему. своё мнение рассказал оно не претендует на единственное верное если у кого-то есть хорошие советы как изучить js с нуля — кидайте свой опыт). ответил тут. если нет базы, можно почитать или по старинке книжки если лень, лучше подумать а нужно ли тебе это вообще? программирование это постоянный процесс самостоятельного изучения и поиска решений. поддерживаю начинаешь проект для себя и по ходу разбираешься, гуглишь, пробуешь сейчас на любой новичковый вопрос уже есть 10 ответов на stackoverflow. смотря какой уровень если знаешь базовый js, почему не почитать доку по тому же реакту? все создатели фреймворков и библиотек прикладывают максимум усилий чтобы сделать их доступными посмотрите например доку по svelte с песочницей там всё сделано максимально понятно.  : мужики, не держите в себе, понойте немножко, долго терпеть вредно для вашей хрупкой души и это не шутка:). из-за короны закрыли офис?. нет ничего плохого в том чтобы ныть во-первых твиттер был сделан для нытья, во-вторых мы в 2к20, тут даже мужикам можно спокойно ныть и никто не скажет что нам этого нельзя)и вообще, нельзя копить в себе негативные эмоции. пойду пройду курс. это как уметь только включать автопилот в самолёте и думать что ты пилот нужно (на мой субъективный взгляд) изучать сам язык, понимать зачем фреймворки, почему они такие разные и как сделать без них. начинать путь в программирование не с изучения библиотеки/фреймворка, а с чего-то более основополагающего потому что это больше похоже на обман реакт в вакууме на готовых примерах не так уж сложно, но толку от таких знаний?. прикинули что с обычным рестом это будет жесть, тк с нестом опыта уже хватало обсудили между собой, накидали пример, рассказали тимлиду, ему понравилось, начали делать проект на apollo, поняли что плюсов ещё больше и оставили, потом развили. спасибо, влада) меня просто немного понесло) пишу во время еды и отдыха от еды. спасибо). пока не думал, и мне всё нравится нахожу куда я могу развиваться в этой области мобилки не очень интересно, хотя как пет-проджект попробовал бы (но это отдельная боль, если хотите, можем обсудить пет-проджекты) для датасайнс я скорее всего слишком тупой). вообще я думал, что буду мало писать, а получилось по ощущению много не устали от меня?) не слишком много болтовни? кому скучно? или может было интересно?. были времена, когда мы выходили курить с коллегами, бомбили на работу, спрашивали советов, помогали друг другу, решали задачки, угарали хвала яндексовым курилкам с маркерными стенами это наверное одно из немногих мест, когда курение приносит не только вред, но и пользу. конечно можно обмениваться опытом не только на работе, но лучше, когда работа — один из таких вариантов конференции, митапы, статьи, твиттер, блоги — вариантов куча. огонь). это грустно надо искать дружбанов в соседних проектах или в соседних компаниях. ага). а, такое у нас есть почти везде (везде где это нужно и есть такая возможность) постоянно этим пользуемся и почти всё через даталоадеры. возможно так и есть) а что такое обратные связи? куда посмотреть?. с командой всегда узнаёшь больше две головы лучше, чем одна) надеюсь вас будет больше. да, я заценил инфраструктура в яндексе это то, перед чем я реально снимаю шляпу деплой, нагрузочное — всё делается довольно просто, хорошо масштабируется. интересно звучит а чем именно занимаешься? факт, что твоим продуктом пользуется столько людей — вдохновляет я много работал над внутренними продуктами, в этом тоже есть свои плюсы и минусы. вот такие штуки конечно поражают и радуют наши автобусы попали в игру от они и правда очень красивые раз смеюсь над комментариями на про нашу компанию, когда говорят что всё это фигня и у нас ничего нет. сложно смапить опыт и процессы разных компаний наша эксплуатация поддерживает наш проект в разных окружениях уже сейчас часть процессов на нашей стороне безопасники дают нам советы и мы всё исправляем возможно я не совсем тебя понял). не могу ручаться, но ретвитнуть могу). да, здорово, что ты будешь знать какие-то аспекты html/css/js/react/etc, но без реального опыта разработки и опыта нахождения решений, я считаю это конь в вакууме опыт в программировании это опыт в программировании может я рассуждаю как старпёр, но я не очень верю в курсы. сложно курсы бывают разными, наверняка они кому-то помогают я лично не проходил курсы на мой взгляд — курсы это избранная теория и узкая практика это может быть полезно как дополнение, но я не верю во все эти условные «c++ за 24 часа с гарантией трудоустройства». в продукте, который делает наша команда — да он во-первых не готов ещё настолько, чтобы его запускать, а во-вторых мы двигаемся по плану, у нас есть вейпоинты и есть срок запуска ну и есть несколько окружений — для тестирования, для интеграций с другими системами и тд. надеюсь и правда хороший). безопасники есть, с ними взаимодействуем в обе стороны, но асинхронно тк в нашем проекте пока нет продакшна — можем себе позволить. в роли архитектора в вопросах внутрикомандных решений у нас выступает коллективный разум команды — все разработчики команды и тимлид подразумевается, что все участники команды — профессионалы с хорошим опытом все предложения обсуждаем, критикуем, принимаем общее решение. да, честно говоря до сих пор бывают затупы много сущностей, много связей отчасти поэтому выбрали graphql вот наша схема api. да, спасибо! аккаунт в твиттере с вакансиями для джуниоров. кстати одна из причин, по которой я с удовольствием работаю — проект написать систему управления парком автобусов — очень интересная задача и большой вызов. ещё мобильные приложения для водителей и много всего другого я занимаюсь разработкой api и кабинета для управления флотом (парком автобусов) не уверен что могу рассказывать много подробностей, но если кому интересно — спрашивайте, попробую ответить. у нас очень много команд всего даже не перечислю и пишут мозги для автомобилей/автобусов, основной сайт (большая система с кучей возможностей для кастомеров) внутренние продукты, инфраструктура, внешние api для клиентов. плюс есть каналы в телеге и твиттере с вакансиями для новичков (подскажите в реплаях пожалуйста, не найду), так же мы в репостим вакансии для подготовки ещё можно посмотреть публичные собесы типа этого. может у кого есть идеи лучше, но я бы посоветовал определиться с зп, поискать вопросы для собесов, готовиться, идти на собес, запоминать в чём плаваешь, просить отзыв если не дали, готовиться и так по кругу, пока не найдёшь что нравится и куда возьмут. это в текстовом виде? у нас на самом деле нет с этим больших проблем, тк пока всего два часовых пояса — москва и лондон. 🤤. у нас есть общие встречи на постоянной основе, где рассказывают куда движется компания, где разные команды показывают свои результаты и планы таких проблем не испытываю команда работает эффективно, и по внутренним и по внешним оценкам процессы постоянно улучшаются. печалит отсутствие общего дизайна архитектуры системы, каждый пилит как нравится, печалит отсутствие стремления развиваться у программистов компании особенно ведущих. нет никогда не работал фрилансером. менять работу считаю необходимо у всех свой предел, но я бы посоветовал делать это тогда, когда вам плохо нет мотивации, постоянно плохое настроение из-за работы, дикая лень? очень вероятно что пора валить (или обратиться за помощью). и правда, нехватка кадров это проблема зацените фоточки и вакансию. а заодно пришлось переводить больше встреч и чатов на английский мы делаем это уже наверное в течение года, но команда была русскоязычная, поэтому всё кроме демо (за которыми следят другие команды) и стендапов (для тренировки) было на русском. забавный случай был недавно к нам в команду пришёл новый дизайнер стендапы у нас были в 11 дизайнер из лондона у них это 8 утра) пришлось подвинуться. слышал только положительные отзывы о работе в aviasales поддерживаю, что баланс очень важен я бы посоветовал искать компанию, в которой понимают, что переработки это зло (но в редких случаях необходимость). php сила!. не всегда конечно это возможно, но круто, когда можно подойти к «заказчику» и переубедить его попробовать точно стоит. раньше не думал, что меня будет радовать удалённая работа, теперь полностью согласен особенно когда есть выбор а вот нечёткие задания, особенно если ты сеньёр мне кажется нормой большая сила — большая ответственность. самый большой плюс в том, что все вопросы решаются быстро захотели новую технологию? обсудил со вторым фронтом, тимлид окнул — погнали так мы например внедрили graphql и дико этому рады. считаю большим плюсом то, что у нас мелкие команды (в моей 2 фронта, 2 бэкендера, тимлид, продакт, и ожидаем возвращения qa) есть смежные команды типа devops, что-то переиспользуем, но команды очень независимые. считаю важным, чтобы атмосфера была дружеская, но критика за дело тоже важна мне лично некомфортно, когда меня или только хвалят или наоборот я хочу знать и про свои достоинства и про недостатки иначе можно либо загнаться (какой я лошара) или ошибочно думать какой ты крутой. у нас был хоший коллектив, много интересных людей, интересный проект, но мне не зашла система по которой оценивается твой труд, которая влияет на твою зарплату, твои ощущения себя плюс я чувствовал себя не очень комфортно с руководителем в итоге я ушёл в arrival. немного продолжу про себя, а потом обсудим ответы на вопрос в итоге из денег я ушёл в яндекс, но не прошло и года, как я понял, что это не моё сразу скажу, что компания большая, всё очень зависит от проекта, команды, и много чего ещё. ну изучать вёрстку и программирование я начал раньше, чем устроился на работу сложно уже сказать какой именно год это был возможно тогда уже был adsl. а пока, давайте поделимся эмоциями? расскажите, что на текущем месте работы вас больше всего радует и вдохновляет, ну и конечно же что больше всего вас раздражает и печалит?. сегодня я вряд ли смогу поднять техническую тему, начнём их попозже планирую рассказать про опыт использования graphql, разработку сложных react-компонентов, typescript, и может быть что-то ещё. adt 🏾. продолжу чуть позже, в отпуске нужно иногда отвлекаться от твиттера если есть какие-то вопросы, с радостью отвечу всем хорошего дня!. я знал, что яндексденьги не совсем яндекс, но раз у меня появилась возможность получить опыт в крупной компании фронтендером, я решил его не упускать и это были прекрасные 3,5 года отличные коллеги, классная атмосфера но со временем понял, что хочется чего-то нового. ещё с тех времён, когда я был бэкендером, я очень хотел попасть в яндекс я сходил на собеседование и понял, что мои знания javascript сильно отличаются от реальных требований меня по-доброму разнесли, я забрал листочек со своими ответами и начал изучать его глубже. в море некоторые отчаянные тоже купаются мы купаемся в крытом бассейне + есть открытый с подогревом. насчёт сочиа) дорого понятие растяжимое) со скидкой наши билеты из питера стоили на двоих туда-обратно 9к гостиницы есть разные я решил что хочу с видом на море)б) сижу в кофте на набережной, сзади на пляже люди в купальниках, сейчас +14 и нет ветра. тк бэкендеры в то время скорее были фуллстэками, я часто сталкивался с фронтендом, и в итоге понял, что там всё интереснее для меня, обновил резюме, мне позвонили из яндексденег, я прошёл собеседование (не знаю как) и попал во фронтенд. не, на выходных было больше, но всё равно не сказать что много. того, кто вначале зачитывает донаты. тогда, как мне кажется, никто сильно не заморачивался по ux и фронтенд был немного другим я начал двигаться в сторону php, в итоге через несколько лет написал с коллегой высоконагруженную рекламную сеть, несколько раз её переписали естественно было интересно, но немного надоело. немного расскажу про свой путь зарабатываю программированием (и получаю от этого удовольствие) примерно 13 лет не учился в университете (иногда жалею, но в целом нет), учился всему по книжкам, на ощупь, изучая чужой код, и через статьи в dial-up интернете. это сочи ничего сверхъестественного) внутри россии можно перемещаться свободно. спасибо) мы все стараемся магия наверное в том, что сейчас стали больше говорить про компанию. спасибо илье за крутую неделю было очень интересно! и очень хочется попробовать react-figma, попозже расскажу почему. так получилось, что неделя в jsunderhood немного наложились на мой отпуск, поэтому иногда я буду пропадать, но зато смогу показать вам немного солнца, которого в моём родном петербурге маловато). всем привет!на этой неделе буду с вами я — александр богачёвсейчас я работаю в на позиции senior frontend developer и являюсь одним из участников подкаста фронтенд юность. happy coding!. остальные явки/пароли на. по любому вопросу можно также постучаться в телеграм -. поставьте звездочку - до 1к осталось совсем чуть-чуть. в твиттере. на ютуб канал. на github:. всем спасибо за внимание, это была отличная неделя! с вами был , подпишитесь на меня в твиттере и во всем остальном --. этот список я подытожу камерой leica m3 - легендарная дальномерная камера, заточенная под уличную фотографию. еще одна красивая камера - rolleiflex 28f это среднеформатная зеркальная камера с двумя объективами - верхний для видоискателя, нижний - для пленки производится с 50-х годов, стоит ~120к на ибей. это средний, 120-й формат пленки, размер кадра 6x6см большинство сталкивалось с форматом 35mm, для сравнения, размер кадра там 36×24см. одна из моих аватарок была снята на эту камеру:. это системная камера, есть куча разных задников например, можно поставить задник, который будет снимать на кассеты polaroid ~140к рублей на ибей, до сих пор в ходу у студийных фотографов. hasselblad 500 c/m и похожие - еще одна легендарная камера, модификации которой летали в космос. одна из модификаций, f3 nasa, с магазином на 250 кадров - летала в космос. nikon f3 - оч красивая камера, дизайн разработан легендарным джорджетто джуджаро имеет съемную призму и кучу модификаций. pentax 6x7, он же 67 - здоровенная и очень красивая среднеформатная камера (за счет деревянной ручки) поговаривают, что звук затвора настолько громкий, что соседи могут вызвать полицию. --- $5000 на ибей. японская камера-пулемет времен второй мировой войны использовалась как симулятор для экипажей самолетов - по снимкам оценивали точность. rollei 35 - одна из самых маленьких 35мм камер. contax t2 - компактная камера из титана с объективом carl zeiss 38/28 ~70к рублей на ибей. hasselblad xpan - позволяет фигачить вот такие широкие кадры стоимость - ~200к рублей. интересный факт - многие пленочные камеры могут стоит сотни тысяч рублей и сегодня небольшая подборка интересных камер:. такие вещи и приводят к тому, что на зенит я снимал по одной пленке раз в полгода, а на f100 - мог отстрелять пленку за день. ну вот в моей f100 - есть автоэкспозиция и автофокус это позволяет за долю секунды поднять камеру с пояса и сделать резкий кадр на улице - самое то для уличной фотографии. у крутанов была япония, вот например, легендарный игорь костин с никон. все фотографы в союзе старались обзавестись заграничной техникой хотя бы производства carl zeiss jena ddr. зенит камера действительно очень неудобная. я из тех неправильных людей, которые как привыкнут к какому-то инструменту, так не могут с него слезть как говорится, не ищите логики. частично ответил тут -. у меня ломался зубец для перемотки пленки пришлось донора из японии заказывать ради одной маленькой детальки. на высокочувствительных пленках типа ilford 3200 - оно само особенно если использовать не самый подходящий проявитель прямо наждачка:. plustek медленный - слайды перемещаются в ручную одна плёнка- часа полтора для больших объемов нужен сканер, который умеет протягивать пленку автоматически. кроме того, пленка не накапливает шум на длинных выдержках, поэтому ее до сих пор активно применяют в астрофотографии. понятно, что если сравнивать с современными цифровыми камерами, малый формат пленки (35мм) проиграет но если взять пленку среднего или уж тем более большого формата - цифра скорее всего проиграет. у меня айфон 11 и он снимает как говно (простите). а еще даже на камеру из 60-х годов можно снять так, что айфон будет нервно курить в сторонке если вы были на выставках, где были представлены старые фотографии вы могли заметить, что фотографии там резкие как стекло и с отличной контрастностью. хотелось контролировать весь процесс самому, а с цветом это довольно хлопотно + ч/б фотография как явление - многие фотографы говорят, что настоящая фотография может быть только в ч/б. + сама пленочная фототехника, даже такой осовремененный вариант как у меня дает невероятные тактильные ощущения крутить колесики и нажимать на кнопки - несравненный кайф после айфона. для меня пленка - это способ борьбы с выгоранием и напряжением на работе ничего так не перезагружает, как пойти погулять на несколько часов с камерой с оптическим видоискателем. так исторически сложилось - у меня уже выработался некий подход и видение того, что я хочу получать при переходе на цифру я все равно буду снимать примерно также и переводить фотографии в ч/б. почему же я не перешел на цифру?. еще из экспериментов, мне бы конечно, хотелось попробовать поснимать на средний формат например, на mamiya c330. при этом сами камеры и пленки стали заметно дороже когда я покупал свой никон в 2015 году, он стоил 6500 сейчас такие камеры продают за 18-20к. например, лаборатория среда. последнее время пленочная фотография стало очень доступной - есть много специализированных магазинов и лабораторий, в которые можно по почте отправить пленку. все хочу сделать сайт с фотографиями, но руки как всегда не доходят. фотографии я раньше выкладывал еще и вк, там также есть множество специализированных групп по пленки, в которые было почетно попасть, например:. последние годы люблю снимать вертикально, вот кадры с последней пленки:. еще из интересного - на пленку можно делать мультиэкспозицию, это когда один кадр экспонируется несколько раз экспериментировал с этим я немного, вот один из таких кадров:. это часть творческого процесса немного жалею, что не попробовал оптическую печать, мой аналогово-цифровой процесс - конечно не совсем тру. в дополнительной обработке я не вижу ничего плохого, поскольку исторически снимки могли довольно сильно ретушироваться на этапе оптической печати:. поскольку в сильверфаст неудобно обрабатывать фотографии, я довожу их в лайтруме. экспериментировал я и с пленками большой чувствительности, например, ilford delta 3200 на них как правило очень много зерна но результат иногда получался интересным:. основная пленка, которую я начал применять - ilford hp5+ оно отлично работает с пуш-процессом - это когда, пленка экспонируется выше номинала, например, вместо iso 400 ведется съемка на iso 800 и удлиняется время проявки. немного снимков после перехода на новый процесс. к нему идет программа silverfast, которая хоть и довольно архаична, но вполне себе работает на последней мак-оси:. сканеры - самая дорогая штука во всем пленочном процессе, бывают модели за сотни тысяч рублей. вишенка на торте: сканер для пленок у меня недорогая модель, plustek opticscan 8100. + химия - проявитель (я предпочитаю концентрат), фиксаж, стоп-ванна. + некоторые специализированные приспособления, рукав для зарядки пленки в бачок + экстрактор пленки из катушки. + набор склянок для растворов и термометр из местного магазина мед техники. самое основное - бачок для проявки. я решил проявлять и сканировать пленки сам, чтобы иметь полный контроль над процессом. даже интересные изначально снимки выглядели каким-то блеклыми, что-ли выправить сканы из лаборатории не получалось - это были пожатые bmp-файлы. с ч/б пленкой было сложнее работать, поскольку фотолаборатория у нас в городе умела проявлять только цвет да и сканировали они такие пленки хуже приходилось искать умельцев, которые могли бы проявить такую пленку. постепенно мне захотелось экспериментов и я начал пробовать снимать на черно-белую пленку первой, которую я взял - была ilford pan 100. снимал я тогда уже на более дорогие пленки, например, kodak ektar, cinestill 800t. вот фотографии, которые я делал на него тогда:. но больше всего впечатлял огромный оптический видоискатель - он больше, чем даже у большинства современных зеркалок. после механического зенита эта камера с серийной съемкой 45 кадра в секунду выглядела как автомат по эргономике она ближе к цифровым зеркалкам - именно на базе подобных камер nikon и canon сделали свои первые цифровые камеры для профессиональных фотографов. это автофокусная автоматическая модель 1999-года, которая позиционировалась как полупрофессиональная. это nikon f100 с автофокусным объективом 50mm 1:18d:. но все поменялось в 2015-м - я купил камеру, на которую снимаю до сих пор:. снимал я довольно мало - примерно по одной пленке за полгода. тогда я использовал не дорогие позиции пленок - kodak color 200 и fujicolor c200 и проявлял/сканировал их в местной фотолаборатории. немного снимков того периода, ламповость и фирменное закручивание гелиоса на месте:. нем могу сказать, что советская фототехника отличалась особой надежностью - но весь комплект до сих пор в работоспособном состоянии как и любую механику его надо периодически взводить и прощелкивать - хотя бы раз в год. к нему также шел комплектный чехол и вспышка электроника фэ-27. мое увлечения пленкой началось в 2014 году, когда мне «по наследству» достался зенит ет с объективом гелиос 44м. сразу скажу, что на мои снимки можно посмотреть у меня в инстаграме -. в воскресенье хочется чего-то лайтового, поэтому встречайте пленочной фотографии тред.  : happy 25th bihday #javascript 🎉🎉🎉incredible history timeline from netscape to space by special thanks for helping to , , and its a big honour for me to be a pa of this project team. интересный тред про процессы на удаленке. или более сложные, например, когда при разработке новых экранов приложения используются реальные данные из апи. могут быть более простые применения у этого подхода - например, можно фетчить актуальный курс валюты и отображать его. это потянуло за собой и улучшение dx, например фича с hmr (hot module replacement) была инспирирована именно опытом с additivka. но реальное применение способствовало и развитию самой библиотеки, поскольку в процессе я находил баги react-figma и сразу их правил. может показаться, что получилась разработка по принципу когда в руках молоток, все вокруг становится подозрительно похожим на гвоздь. помимо автоматизации мы получили еще возможность портирования игру на другие платформы, например в веб, поскольку были использованы компоненты типа view, text и stylesheet совместимые с react-native, react-native-web более подробно про это было в треде. после переноса всех карточек картина выглядела так, больше всего карточек малых заказов:. после запуска плагина в фигме, будут все принтеры:. для чего я использовал свою же библиотечку. а потом просто пробросить данные в компонент:. выгрузить карточки из аиртейбл достаточно просто, надо описать метод, который будет ходить в таблицу с принтерами:. визуально он выглядит вот так:. определили компоненты для карточек и их стили проект не в опен-сорсе, но могу показать, например, компонент для карточки принтера:. для того, чтобы выгрузить данные в фигму, подняли проект из бойлерплейта. aiable удобен своим api, и большим числом типов данных для ячеек например, там есть файл-аплоад. сложили все карточки в виде строк в aiable, каждый признак - это колонка. мы пришли к решению этой проблемы:. поддерживать кучу карточек в актуальном состоянии и тем более вносить изменения в их дизайн оказалось трудной задачей, поскольку при серьезных изменениях приходилось менять все карточки. 2) возможность поиграть в игру прямо в figma, перетаскивая карточки как компоненты из панели ассетов это стало очень востребовано, когда пошел ковид. 1) выгрузка карточек на печать в pdf. дизайн делается в фигма и по сути дела он двойного назначения:. карточек довольно много - 100 штук, но все они укладываются в 4 вида шаблонов. в мы разрабатываем настольную игру для обучения 3d-печати, в которой есть множество карточке - с принтерами, лабораториями и тому подобным. библиотеку можно использовать для автоматизации рутинных дизайнерских операций, можно легко строить интеграции различных api с фигмой есть пример с фетчингом данных в репозитории:. помимо дизайн-систем, у есть еще интересные интерсные применения, о чем расскажу в треде. если что-то не попало в список, не значит, что оно было хуже всех спикеров кто у нас выступал, мы ценим☝️. доклад семантика для циников вадима макеева. не совсем доклад, но все равно много полезного - в дискуссии про стейт-менеджемент:. про стилизацию от. про wasm от. про вебпак и линзы от. доклад про асинхнронность - по длине и хардкорности скорее ближе к holyjs. толком-то фронтенда нет, но ничего, сейчас наверстаем. доклад про типографику. продвижение опен-сорс проектов. про производительность postrges, это скорее воршоп на английском языке. если наконец хотите узнать, что такое монады - доклад. мой топ видео - на случай если будете искать, что посмотреть в выходные.  : тоже об этом думали и сделали первую версию «общалки» для #jokerconf и других конференцийтеперь конференции на можно смотреть в классическом и игровом режимах на удивление многим заходит :)выглядит это как то так в итоге:. на них можно было узнать все интересующие вещи от спикеров и вообще круто пообщаться с единомышленниками. важная вещь, которую мы лишились из-за короновируса - это, конечно, afterpay. часто мне мог просто нравится какой-то спикер, а все остальное мероприятие проектировалось из основного доклада. старался немного заглянуть в будущее и понять, что будет важно через год или два. я редко отталкиваюсь от запроса аудитори, скорее всегда больше ориентировался на свое внутреннее ощущение в выборе тем. я много занимался выбором тем и приглашением и приглашением спикеров. содержательная часть:- выбор тем и спикеров- ведение эвента. в доковидное время к этому еще добавлялись:- организация фото/видео съемки- логистика спикеров- кейтеринг- коммуникация с площадками- печать стикеров и бейджей. операционная часть:- организация анонсов и smm- поддержка сайта- граф дизайн- коммуникация с партнерами. если совсем упрощать - делится на операционные вещи и на содержательную часть. кажется, что делать события просто, но на самом деле это работа, которая делится на множество направлений. особое место у нас всегда занимала фронтенд разработка и js такие события всегда набирали самое большое число зрителей например, state management talks в пике в эфире смотрело 150 человек из 26 городов одновременно. начали делать дискуссионные клубы по темам, первым из них стал no code talks. стало понятно, что классический формат митапов - 2-3 доклада + вопросы, не совсем хорош для онлайна. нам пришлось срочно переводить событие полностью в онлайн начали использовать сетап, который используем и до сих пор - зум с трансляцией в ютуб. первым пострадал javascript meetup он планировался как офлайн мероприятие сильно задолго до наступления изоляции. короновирус, который пришел в рф в начале 2020-года, конечно, сильно вмешался в работу сообщества. начали делать разные эксперименты, например, на makers meetup люди рассказывали исключительно про свои разработки. рос и уровень событий - мы обзаводились новой техникой и сами становились опытнее рос и уровень спикеров, которых мы приглашали. постепенно события стали становится более специализированными, под конкретную тему, например pure meetup - про функциональное программирование. и например, во варианте для стикеров:. в марте 2021 года сделала редизайн логотипа, он стал таким:. в то время мы называли события по названиям событий или по праздникам, которые были в этот день 18 октября - советский космический аппарат «венера-4» успешно вошёл в атмосферу венеры и начал её изучение поэтому rocket. первая обложка в редизайне, которую сделала дизайнер и (по совместительству моя жена) , выглядел так:. дизайн обложек до:. поскольку я визуал и эстетика для меня очень важна, через какое-то время я запустил редизайн сообщества первое, что мы начали менять - это обложки событий на. начал я с того, что просто пришел и попросил дать возможность повести инстаграм сообщества в то время я как раз активно пользовался инстаграмом. при этом активно участвовать в организации сообщества я начал примерно 25 года назад. появилось почти 10 лет назад спойлер - в декабре планируем отмечать юбилей:. локальные сообщества - это прекрасный пример того, что разработчики, которых раньше считали чуть-ли не социопатами - могут прекрасно социализироваться и самоорганизовываться. тред про локальные ит-сообщества, через призму моего опыта организации эвентов в.  : только 34% разработчиков на гитхабе из северной америке почему же мы говорим только про политику сша в опенсорсе?. почти всё отстальное время работы над open source проектом - это поддержка сообщества ответы на комментарии, общение в чате, ответы на stackoverflow, закрытие issuesработа с самим кодом от силы 5% всего времени. наверно треть всего времени, что у меня уходит на я трачу на продвижение в основном это написание демок и их постоянное обновление. развитие опен-сорса - это появление новых инструментов для разработки, которые в свою очередь позволяют работать более эффективно реальному сектору экономики. поскольку опен-сорс - это инфраструктура, на которой сейчас держиться пол-интернета, его развитие косвенно помогает развитию все остального. опен-сорс - это понятное общественное благо и довольно давно известно, что вложения в общественное благо идут на пользу экономике, даже если не видна непосредственная польза этому самому государству. 7) государство ит-сфера склонна не любить государство (и на то есть основание), но в конечном итоге именно оно печатает деньги и может наполнять ими фонды. из плюсов - компании спонсоры имеют меньше влияния на распределение средств, меньше соблазна погнаться за сиюминутной пользой в ущерб общим интересам. из минусов - могут возникать вопросы к тому, как именно распределяется финансирование - точно ли это справедливо. у этого есть как плюсы так и минусы. он похож на вариант 5, с той разницей, что появляется третья сторона, которая решает как должны распределяться средства. этот вариант мне кажется наиболее перспективным в будущем, поскольку давно зарекомендовал себя в других сферах (наука, например) как способ аккумулировать и вкладывать значительные средства в развитие. 6) фонды и грантовая поддержка примеры - apache и linux. и отчасти похоже на вариант 3. это выглядит более интересно, но, конечно трудно осуществимо на ранних этапах и точно также требует усилий - например, внедрение опен-сорса в режиме пилота в компании. 5) инвестиции компаний-пользователей данного опен-сорса + платные поддержка и консультирование. а тот же патреон еще и требует дополнительных усилий на генерацию контента. - мне кажется, работают не очень хорошо, трудно насобирать на сумму, которая хотя бы чуть-чуть была похожа на зп разработчика той же квалификации. 4) частные донаты - например, open collective + pateron. к сожалению, возможно скатывание во вариант 2. как правило, речь о неких платных облаках так делает очень много кто например,. 3) опен-сорс, который нашел способ как монетизироваться иногда очень даже неплохо монетизироваться - как в случае с vercel (разработчики nextjs), которые получили $21m инвестиций. также, если библиотека станет не нужна компании - она вероятнее всего умрет. выражаться это может в том, что пулл-реквест от стороннего разработчика почти не имеет шансов быть принятым, как видно на примере репозиториев фейсбука. из минусов - сообщество в этом случае не влияет на развитие библиотеки, поскольку требования формируются из компании, которая является его оунером и у нее нет стимулов прислушиваться. 2) опен-сорс под крылом крупной компании, которая его разрабатывает для своих нужд, которые как правило лишь отчасти совпадают с интересами сообщества, которое его используют хрестоматийный пример - react в фейсбуке. 1) разработчик пилит опен-сорс в свободное от работы время это обычная история на начальном этапе, но чревата тем, что может возникать систематическая нехватка времени на развитие и поддержку + bus-фактор. вариантов вообщем-то несколько:. прежде всего - непонятно, что с финансированием, кто платит за банкет на мы ломали копья на эту тему, но кажется, так окончательно ни к чему не пришли. продвижение - это важная проблема, но основные проблемы начинаются, когда опен-сорс начинает приобретать зрелость и разрастаться. для этого подойдут чаты в телеграме, reddit, имейл-рассылки важно попасть в тему - было бы странно рассказывать про реакт-библиотеку в чатике по машин лернингу. разумеется, если вы сделали какой-то опен-сорс проект - его надо донести до той аудитории, для которой он предназначен. разумеется, нужно грамотно оформить ридми - люди оценивают прежде всего глазами, да и поисковую индексацию никто не отменял. на эту тему есть уже ставший классическим доклад андрея ситника что-то новое сказать сложно. не то чтобы нужно быть каким-то гением маркетинга, чтобы продвигать опен-сорс, но если вы до этого занимались только разработкой - будет непривычно, это немного другую жанр. как это часто бывает - мало что-то закодить, на это еще это как-то продвинуть. стартую тред про опен-сорс разработку и ее проблемы, в продолжение последнего эвента на. о, это интересно, а есть какие-то подробности?. я попросил пашу подробнее рассказать про #modulefederation, встречайте “гостевой” тред. либо keynote - в нем проще накидывать, но в шовер - это код, со всеми преимуществами, можно сделать любой эмбед. для презентаций я в основном использую либо shower вадима макеева. даже больше презентаций, в некоторых движках не могу выдавить и слайда. чем-то похоже на теорию о том, что язык может влиять на экономику - люди по разному думают на разных языках. у меня еще конечно, всегда очень зависит то, как я пишу, от того, в чем я пишу это касается и статей и презентаций.  : вообще, it - это в какой-то степени калька с научного мира статьи, конференции, доклады - все это уже там было и есть. путь настоящего самурая!. все как всегда - мало написать, надо еще и продвинуть. не может не радовать, что появляются продукты на стыке - например, - переработанный ноутбук для вычислений. при этом, конечно, и научному миру есть чему поучиться, например можно подсмотреть принципы управления и коммуникации из it. можно даже спрогнозировать, что дальше появится в it-среде, глядя на научную я думаю, постепенно появятся такие вещи как рецензирование, индексы цитирования и все такое прочее под новым соусом. вообще, it - это в какой-то степени калька с научного мира статьи, конференции, доклады - все это уже там было и есть. и конечно же, рецензирование. это если, конечно, сильно упрощать так-то между этим может быть миллион итераций и работы с научным руководителем. пишешь на latex, потом передаешь это в журнал. мне помогает академический опыт, хоть и технологически там все совсем по-другому. обычно начинаю что-то писать на потом выгружаю это в notion (мардаун), даю кому-нибудь почитать, вношу правки, экспортирую в маркдаун, подменяю в. мой английский далек от идеала, но написание статей помогает его учить. частично помогает grammarly и но много недочетов все равно остается. не могу написать текст грамотно без вычитки ни на русском, ни английском, поэтому всегда прошу кого-то помочь. впрочем платформа может и не дать ничего. интересным вариантом выглядит селф-хостед блог, потому что можно настроить все под себя и подключить любую аналитику но сложнее всего в реализации и нет аудитории, которую может дать платформа. пробовал медиум, но на нем бесконечные пре-роллы. где вы пишите статьи? я вот предпочитаю потому что он совместим с маркдауном и опен-сорсный. я за то, чтобы была гибкость в выборе инструментов и возможность их комбинировать. для описания дизайн-системы можно использовать mdx, вот пример:. он без проблем интегрируется с react-figma и другими примитивами с помощью пакета. с ним легко реализовывать темизацию, и он совместим со множеством уже существующих решений, например его используют chakra ui и rebass для кастомизации. для описания стайл-гайда я рекомендую использовать system ui theme specification. подход, который я изложил, не считаю единственно правильным но его можно расширять как в ширь так и в глубь с помощью сторонних библиотек и строить дизайн-систему по кирпичикам так как вам хочется. yep, react-figma made it possible. пока нет, я думаю через какое-то время появится на канале. слайды из доклада также можно полистать на спикердеск. код там не такой сложный - конфиг стайл-гайда + тупые компоненты а разработчики могут ревьюить то что получается - это же код!. при дизайнер дизайн-системы, при желании, вполне может научиться править ее код без помощи разработчика. в случае необходимости внесения изменений цикл повторяется. так что пока я вижу себе процесс следующим образом: дизайн-систему отрисовывает дизайнер переносится в код используется продуктовыми командами. по сути дела, нужно развитие искусственного интеллекта, развитие алгоритмов вроде gpt-3. а потом все это мержить, если после этого на дизайне что-нибудь поменяется. не умеют работать с изменениями - вам банально захочется пробрасывать пропсы в компонент, для этого придется менять сгенерированный код, потому что ни один плагин не умеет работать с семантикой предметной области. но большинство решений умеют генерить только под какой-то ограниченный стек, который не факт что вам подойдет. была демка даже у нас - использует babel для формирования ast дерева. есть множество неплохих плагинов, например. разработчикам хочется генерировать код из дизайна, но к сожалению это пока не слишком-то осуществимо - нет хороших технологий. это конечно несколько контр-интуитивно, что мы из кода помещаем что-то в figma нам даже пришлось добавить строчку в ридми. в самом деле, все остальное использует один и тот же код - и компоненты для веба, для мобильных приложений и для фигма. у меня не было задачи перенести задачи полностью, но зато продемонстрировано, как сделать так, чтобы код был single source of truth для дизайн системы. в примере реализован кусочек дизайн-системы гитхаба primer. как это выглядит и работает, можно посмотреть в примере. и отобразить в figma, для того, чтобы продуктовые дизайнеры могли собирать из нее экраны для этого подойдет. такую дизайн-систему можно также будет отобразить в виде каталога компонентов, например, с помощью storybook. визуальные элементы можно реализовать в виде компонентов на react для кроссплатформенности этот код лучше описывать сразу на react-native. стайл-гайд - укладывается в обычный js-конфиг, поскольку это в принципе просто значения. в принципе, все описанное выше можно положить в код. по аналогии с подходом infrastructure as code можно использовать подход, который я бы назвал design system as code. поверх ui-кита и стайл-гайда также можем строить что-то еще, например сделать каталог компонентов в storybook и набор ассетов для дизайнеров архитектура выглядит примерно так:. как правило, ui-кит содержит множество разных состояний компонентов. ui-кит пользуется значениями из дизайн-системы, например вот тут для компонента кнопки используется цвет:. понятно, что одного стайл-гайда мало, и тут нам на помощь приходит ui-кит ui-кит это набор базовых элементов - кнопок, инпутов, тултипов и тому подобного. в стайл-гайд обычно входят цвета, типографика, размеры/отступы. если очень упрощать, то в соответствии с этим подходом в основе всего должен лежать стайл-гайд стайл гайд - это набор базовых значений причием слово значения - тут ключевое. его основной концепт - что дизайн должен идти от простого к сложному. основополагающей книгой по дизайну для меня является атомик дизайн брэда фроста. мне всегда хотелось соединить дизайн и разработку, поэтому стартую тред по дизайн-системам, по мотивам моего доклада на. если абстрагироваться от стейт-менеджеров и сконцентрироваться именно на хранении бизнес-логики, то мне очень понравился доклад александра мадьянкина как построить гексагон. так-то у нас тоже но мало, из-за того что куча легаси. что насчёт recoil? я не пробовал, но выглядит интересно, и доклад крутой от автора тут.  : одно точно могу сказать: стоит выйти из зоны комфорта в виде redux и попробовать какой-то альтернативный стейт-менеджер если не на реальном проекте, то хотя бы на пет возможно ваша жизнь никогда не будет прежней, как моя после эффектора. одно точно могу сказать: стоит выйти из зоны комфорта в виде redux и попробовать какой-то альтернативный стейт-менеджер если не на реальном проекте, то хотя бы на пет возможно ваша жизнь никогда не будет прежней, как моя после эффектора. не та!. мало каким сайтам на самом деле нужен стейт менеджмент, если юзать react-query или или swr для кеша запросов с бека. логакс, вдохновленный crdt. можно написать врапер над rxjs уже есть реактивность, надо просто где-то накапливать стейт так, например, делает. например, firebase, в котором можно подписываться на изменения. в принципе, для стейт-менеджемента еще можно использовать вещи, изначально может быть не слишком для него предназначенные. самый проблемный момент - никто не знает, где же должна находиться бизнес-логика проекта (копий на эту тему было сломано много, но добавьте свои пять копеек). интересная встреча по стейт-менеджерам была на. - мне просто нравится иллюстрация, не пробовал. у артема также есть список с разными стейт-менеджерами. - выглядит очень круто, но я сам, к сожалению, не пробовал автор - артем. что еще интересно?. писал и просто на реакт хуках/стейте - но не рекомендую, код быстро становится неподдерживаемым. тысячу лет назад использовал mobx - но не зашло, магия + декораторы (фу-фу-фу) + слишком здоровый бандл. использовал также стореон - офигенно для маленьких проектов. и писал статью:. я состовлял awesome-list по эффектору. - реактивный стейт-менежер на нем можно писать очень короткий и семантичный код но нужен скилл. apollo client - пожалуй самый энтерпрайзный вариант из не-redux энтерпрайзный за счет того, что код на нем получается более менее одинаковый у всех легко подключать еще разработчиков на проект. помимо понятного всем redux, который до сих преследует в кошмарах и легаси-коде я использовал:. поговорим за стейт-менеджмент? кто что использовал для управления стейтом?. сейчас уже и у qa специалистов часто бывает требование git в вакансиях. и не такое запускали. не то чтобы прям там супер-часто надо было что-то обновлять можно долго ехать с зафиксированной версией если есть время на апгрейд - заняться. в фейсбук это давно просекли 1:10:13 абрамов говорит, что больше 700 экранов в фб приложении на react-native. для бизнеса react-native это подарок потому что разработка гораздо дешевле и быстрее для большинства приложений нет смысла писать нативно абсолютно все экраны это явный оверкилл. доступ к сенсорам, пуш нотификациям, например. это js и можно использовать привычные библиотеки и подходы. поддержка крупного вендора - react native разрабатывается фейсбук. используются настоящие нативные компоненты ос внутри - при необходимости можно добиться более нативного вида. достаточно много специалистов и низкий порог вхождения для react разработчиков под веб. кто как относится к react-native? мне самому кажется не самым плохим выбором для кроссплатформенной разработки по нескольким причинам:. ☝️. итог: реакт рендереры это жутко интересно, но местами бывает хардкорно и сложно стоит попробовать, если хотите лучше разобраться, как работает реакт. в фигма постепенно развивается auto-layout, все больше новых фич я думаю, постепенно мы сможем выпилить yoga layout, но пока еще не все свойства можно реализовать на авто-лейауте. на вход - json-дерево c элементами и их стилями, на выходе абсолютные координаты, которые применяются к фигма-нодам. проблема была с тем, что yoga не хотела запускаться внутри main-треда, пришлось ее загонять в ui-тред. поскольку нам было важно обеспечить совместимость по api с реакт нейтив, мы взяли именно ее. не мало хлопот также доставила поддержка стилизации с помощью yoga layout эта библиотека обеспечаивает поддержку лейаут-свойств - маржины, паддинги, флексбоксы и используется, например в react native. на всякий слуйчай еще приведу такую картинку, main тред предназначен для работы с документом, ui - для того чтобы реализовать интерфейс плагина. это же позволило достаточно легко реализовать поддержку react devtools чуть позже. итоговый реквест выглядел примерно так. потому что реакт-реконсилер аппендидит за один проход, для этого по сгененрированным id находим ноды и соединяем их. но все равно, реакт реконсилер с промизами не работает, поэтому пришлось генерить айдишники, чтобы связывать ноды. к счастью, есть реализация rpc для фигмы, которая частично облегчила эту задачу:. архитектура стала выглядеть примерно так, вместо того, чтобы создавать объекты непосредственно в методах хост конфига, мы стали посылать в сообщения в main-тред фигмы:. так вот, для нормальной работы hmr нам нужен был websocket websocket в фигме можно использовать только из ui-треда поэтому мы приняли волевое решение переписать рендерер, чтобы он ранился из ui-треда. написан на c, но ведь фигма web-based, скажете вы так вот, они ранят этот движок с помощью wasm более подробно подробно об их плагинной песочнице можно почитать в статье. в фигма main трейд запускается с помощью движка quickjs, написанном на c что само по себе создавало немало проблем - он хоть и поддерживает сразу es6, но падал банально на комментариях, слово impo. за исключением hmr дело в том, что main-тред в фигме надежно изолирован в песочнице и не позволяет использовать привычные браузерные апи (например, зафетчить какие-то данные из сети). это отлично работало, тем что методы хост-конфига не могут быть асинхнронными, а апи фигмы - более-менее синхронно. мы запускали рендерер в мейн треде и создавали в методах хост-конфига ноды сразу, с помощью плагинного api фигмы. после перехода на react-reconciler схема выглядела так:. одним из самых серьезных челенджей при написании рендерера была реализация hmr - для ее реализации пришлось менять архитектуру. и на последнем , есть слайды. в докладе ярослава лосева на. более подробно про то, как написать свой рендерер можно послушать в докладе софи альперт. например, там уже заложена поддержка регидратации (когда рендерер запускается снова и не должен пересоздавать созданные ноды), реакт хуков (в наивной реализации они не заработают, несмотря на то, что импортируются из react). такую реализацию можно даже попытаться усложнить, но в целом нет смысла - react-reconciler сразу поддерживает множество вещей. это может быть строка для нативных элементов, или функция - для компонентов-оберток. это будет некое дерево, которое можно попытаться рекурсивно обойти в поле type элементов этого дерева будет приходить тип реакт-элемента. reactcreateelement будет возвращать разные вид данных в зависимости от ситуации, но в целом это уже самый обычный джаваскрипт. после того, как babel (или ts-компилятор) трансиплирует jsx, получится множество вложенных вызовов функций reactcreateelement. когда мы только, начинали разрабатывать свой рендерер, первая наивная реализация выглядела примерно так:. в теории да, в mvp библиотеки react-figma и в старых рендерарах вроде react-sketchapp (на момент ее создания еще даже не существовало react-reconciler), так и было сделано. можно ли написать реакт рендерер без библиотеки react-reconciler?. например, createinstance будет вызван, когда требуется создать новый элемент на вход придет тип элемента (например, div в вебе) и его пропсы. по сути дела требуется, в нужных местах описать, как обрабатывать создание, вставку, удаление элементов. библиотека react-reconciler использует паттерн visitor, то есть при обходе дерева реакт-элементов будут вызываться методы хост-кофига, на вход которым будем подаваться элементы по одному. для того, чтобы описать, как работать с конкретной хост средой, требуется описать хост-конфиг. это пакет, который позволяет писать свои собственные рендереры в нем хост средой называется среда, в которой должен работать этот реакт-рендерер. столь большую гибкость обеспечивает библиотека. а наиболее полный их список есть тут. более подробно о разных реакт-рендерарах можно почитать в моей статье. есть целое семейство рендереров в редакторы для дизайнеров, первым из которых был. - рендерер реакта в pdf. - реакт рендерер для threejs, позволяет крутить 3d-модельки. react hardware позволяет управлять железками (например, arduino) с помощью react. например, ink - позволяет писать консольные утилиты на react. react native это реакт-рендерер, который разрабатывается фейсбуком, но есть множество сторонних. самый известный пример это react native - на котором можно разрабатывать приложения под ios и android, используя нативные виджеты операционных систем. реакт силен тем, что был спроектирован так, что позволяет достаточно легко расширяться под платформы, отличные от веба. попробую раскрыть тему, в которой довольно немало покопался, пока разрабатывал - реакт рендереры и реконсиляция тред. есть рабочие кейсы у genereal electric (predix apphib) и у swisscom в сбере похожая архитектура из плюсов - легко ci/cd, декомпозиция, в ge можно использовать разные фреймворки в одном приложении. если есть проблемы которые микрофронтенды решают, то отличная штука у нас в тинькофф активно используются последние несколько лет. на эту тему на последнем был отличный доклад павла  черторогова. раз уж заговорили про микробиблиотеки, то давайте обсудим микрофронтенды сам не разу не пробовал кто что думает?. если большинство браузеров уже поддерживает что-то более новое, почему бы и нет. на больших проектах можно использовать size-limit, но вот на es5 писать скорее всего неудобно будет. да! preact это тема. если под жирной библиотекой подразумевается большой бандл - то не микробиблиотека. возможно терминологически это не совсем корректно, но библиотеки вроде wouter и eo-locale, которые, мягко говоря, не однострочники, я тоже отношу к микробиблиотекам. немного поясню для меня микробиблиотека это не про оборачивание однострочника в пакет, а про контроль размера бандла который иногда может достигаться за в том числе за счет отказа от лишних фич. 🔥. не видел, но в ramda сложение двух чисел есть. прежде всего - размер бандла на его размер у старых библиотек часто без слез не взглянешь. шаг транспиляции добавляет много лишнего кода когда начинается битва за байты, это неприемлимо. webpack-bundle-analyzer на проектах потом скажет вам спасибо. мне кажется, это отличный способ вкатиться в опен-сорс - написать микро-версию с контролем размера с помощью size-limit. что уж там говорить, я даже не видел нормального слайдера до сих пор приходится тащить react-slick, кодовая база которого тянется из jquery. множество библиотек для реакта берут начало в 2015 году и не соответствуют современным требованиям. рассказывают много, но до сих пор для многих нужд нет хороших микро-библиотек!. есть еще хорошие примеры? скидывайте в тред. генерация идентификаторов. стейт-менеджер. и множество библиотек , который является основным популяризатором этого подхода:. tinyhttp - веб-фреймоворк, автор. react-colorful - колор-пикер, автор. eo-locale - интернационализация для приложений, автор. wouter - роутер для react и preact, автор. еще примеры микро-библиотек:. но, конечно, есть смысл написать тесты. за счет того, что сами библиотеки микро- не должно составлять труда проконтролировать весь внутренний код без типизации. типы можно подкладывать отдельно, в виде dts и jsflow файлов. и, конечно, нужно настроить size-limit на ci/cd, чтобы контролировать размер бандла конфиг выглядит примерно так. мой конфиг для микробиблиотек: использует плагины es5/no-es2015, es5/no-es2016 под капотом. для того, чтобы случайно не написать что-то на современном es, можно использовать eslint. если есть возможность - лучше писать на es5 без транспилиции. как же сделать свою микро-библиотеку?. а начиная с марта 2021-года гугл будет использовать производительность на мобильных девайсах как основную метрику для ранжирования сайтов. производительность - однозначно тренд это года. микробиблиотеки хороши тем, что не дают бандлу вашего приложения разрастаться. модуль для работы с localstorage для библиотеки. реакт хук для медиа-выражений:. реакт хук для того чтобы, фетчить данные:. примеры моих собственных библиотек:. микробиблиотека - это пакет, который1) решает какую-то одну небольшую проблему2) экстремально мало весит. микробиблиотек тред. видео нет, есть бойлерплейт проект + как запустить. родился и живу в городе тверь и являюсь его неформальным амбассадором. b2b маркетплейс для ит-консультантов. интенсивы по 3d печати + образовательная настольная игра. хочу постепенно трансформироваться из аутсорсера в продукт, поэтому пробую себя в стартапах:. и митапах. редко, но метко выступаю на конференциях. квалифицированный преподаватель-исследователь изучал исследование операций и экономику общественного благосостояния в мгу имею ряд публикаций по теме. опен-сорс разработчик, мой основной проект:. организатор эвентов сообщества. основатель и software engineer в компании занимаемся it-аутсорсингом и консалтингом. немного про меня:. всем привет! на этой неделе с вами поговорим про опен-сорс, организацию ит-сообществ, как интегрировать дизайн и разработку и много чего еще. вот и пришло время прощаться, как говориться: keep doom-scrolling, keep refreshing, have a good week. для high-level понимания не могу не порекомендовать блог. не хотите spidermonkey, есть jsc ( есть chromium ( llvm и другие вообще можно подглядывать идеи с gsoc, которые студенты бросили или которые гуглу оказались не интересны и делать их, например. btw: в большом проекте всегда есть что можно доделать, но на это просто не хватает людей например todo в wasm в spidermonkey очень много. идем в и выбираем задачу с тегом good-first-bug там обычно что-то в духе переименовать переменную например , тут даже уже патч полуготовый есть, но человек просто забил после ревью, хороший шанс дописать. моя первая рекомендация это mozilla несмотря на все увольнения и странности с руководством в mozilla очень дружелюбное и понимающее сообщество крутых программистов, например lars hansen, julian seward и другие они всегда подскажут, помогут и объяснят #codingneveralone. если ты не студент, то стажировки тоже есть, например но если хочется просто для души и ради культуры сделать что-то полезное, то проще самому взять какое-нибудь несложное issue и попробовать его сделать. если ты студент, то тут есть что выбрать я рекомендую обратить внимание на оплачиваемые стажировки - google summer of code и. но как начать если еще есть и основная работа не связанная с open-source или как начать когда непонятно с чего начать, или как получить с этого хоть какие-то деньги. коммиты в какой-нибудь большой и известный компиляторный или браузерный проект позволяют попрактиковаться в промышленном программировании, познакомится с культорой кода и получить весомые строчки в резюме. 3/3 язык для экспериментов для web эмуляция различных языков, эксперименты с отказом от js в браузере и переписывание фронтенда на другие языки использование wasm формата как кросс-языковой язык для общения. 2/3 игры вспомните сколько было прекрасных игр на flash да, технология оказалась небезопасной, но все же как только в wasm завезут возможность напрямую вызывать webgl/webgpu api браузера настанет настоящий ренесанс для браузерных игр. 1/3 в итоге получаем отличную ide для генетиков, которая не тащит за собой qt и работает сразу в браузере и причем скорее всего сопоставимо быстро с обычной десктопной версией. 1/3 идеальный пример это это ide для генетиков пользователями которой являются студенты по сути это ui на qt + библиотеки на c переписываем несложный ui на js, вычислительную часть перекладываем на wasm + simd + распараллеливаем. 1/3 десктопные приложения которые сложно поставлять и которые одновременно требуют производительности. спасибо, это очень правильный и осторожный ответ, я бы добавил что для wasm нужна скорость, иначе если он будет предсказуемо работать, но медленнее js, то он не даст ничего индустрии:. не такой уж wasm и безопасный: из примеров, в c есть data секции только на чтение, а в wasm их еще нету даже в предложениях. wasm не умеет напрямую с api браузера общаться, так что это будет работать через js, что несомненно обвалит весь прирост в скорости и на js получится быстрее. #wasm очень интересная технология, но мне кажется что ей недостает фокуса на правильных вещах для себя я выделил 3 пункта где wasm просто идеально подходит поделитесь своими идеями реального применения wasm, а в конце дня я напишу свои. btw: он есть в как лучшая рекомендация по компиляторам. а что вы посоветуете?. также по компиляторам рекомендую видеокурс: автор круто разбил все на модули и качественно все описал. по компиляторам мне нравится engineering a compiler она достаточно базовая, но хорошо структурирована и позволяет понять основы. мне очень понравилась серия книг clean* да, роберт мартин за свою жизнь написал только fitnesse, который не блещет популярностью и одну игру на clojure, но все же читать его приятно его книги небольшие и позволяют понять принципы программисткого ремесла. моя рекомендация по sicp, начать с лекций на hexlet, они по sicp бесплатные это не реклама, просто мне там понравилось после освоения первой главы по видео продолжайте читать уже саму книгу. есть великая книга - sicp, бьюсь об заклад её скачивания подскочат вообще, только ленивый не писал про эту книгу на хабре на cppcon 2020 недавно про нее тоже говорили ( и роберт мартин её хвалил ( книга стоящая. вообще, если хотите знать основы, то смело следуйте этому сайту, ничего лучше я не находил:. это не значит что хороших книг нет, есть! для себя я понял что читать их надо не для того чтобы прочитать, а для того, чтобы получить удовольствие от осознания новых идей, неспеша, максимально медленно. но если вы прям сразу как максимально крутой парень начнете читать книгу дракона, естественно в оригинале, в перерывах почитывая кнута, то очень скоро заскучаете. забавно что этот культ крутых книг, по моему скромному мнению, поддерживают те люди, которые этих самых книг никогда и не читали. вокруг книг много хайпа есть книга дракона, есть книга динозавра, есть книга тигра, я думаю есть еще и другие фантастические твари :) такое впечатление что если прочитать их все то можно тут же стать мега мозгом. меня много спрашивают о том, что бы такого почитать чтобы стать тру программистом, 10x или просто наконец-то выучить весь c++ еще больше я спрашиваю тоже самое :). третий день, хочется пожертвовать им и просто поговорить о книгах. подытоживая могу сказать что это не все так сложно как и я описал комитить в большие проекты это как играть в dark souls, сначала все сложно, часто умираешь, но потом, привыкаешь и начиаешь играть лучше и получать от этого непередоваемое удовольствие. 7 наконец после заливки ваш код может внезапно упасть через неделю на какой-нибудь конфигурации os + arch, например потому что фазер или тестер найдет что-нибудь, так что вливать все это надо не один раз на картинке видно количество моих провалов для этой задачи :). 6 чтобы это все залить в браузер надо разбить все работу на очень маленькие кусочки и заливать по отдельности на ревью никто не будет ревьюить большой pr. 5 не сильно сложный пункт, но нужно помнить что разные os требуют разного abi, особенно windows с его shadow stack, так что это тоже надо поддержать. 4 эх, еще от моих правок отвалился аллокатор регистров аллокатор регистров это компонента компилятора которая обычно очень сложно написана пришлось снимать логи и общаться с людьми в чате, в итоге баг оказался в самом аллокаторе. 3 менять и фиксить баги в двух компиляторах - baseline и ion это было относительно легко, потому что и baseline и ion живут в обном репозитории mozilla внезапно пришлось синхронизовать изменения с компилятором на rust - cranelift, который живет в отдельном репозитории :(. 2 делать платформенно-зависимые правки и фиксить баги для arm32, arm64, x86 и конечно x86_64, благо mips и mips64 мне не пришлось трогать да, низкоуровневую часть кода все еще надо править под каждую платформу, даже в 2к20. 1 в sm то и дело в разных частях кода раскидано знание о abi: где и в каких регистрах ожидаются значения и тд так как wasm использовал системное abi пришлось вручную обрабатывать каждое такое место и разделять новое abi с двумя байтами и системное. я пропущу тот момент что задача требовала еще и проведения небольших исследований, а опишу лишь небольшой перечень задач - багов с которыми я столкнулся. если не сильно вдаваться в мотивацию, то мне надо было добавить пару байтов прямо после аргументов функции на стек чтобы потом использовать это под свои нужды два байта, мне надо добавить всего два байта…. в отличии от api abi работает на более низком уровне и отвечает на такие вопросы: а как физически передавать параметры функции? в какие регистры их распихивать? как вообще представлять функцию на стеке и тд. abi это application binary interface, те это что-то похоже на api, в том смысле что это тоже набор соглашений о том, как будет происходить взаимодействие частей системы. вот в прошлом году мне поручили сделать оптимизацию в wasm, которая помимо всего прочего требовала поменять abi в spidermonkey spidermonkey это движок js в браузере firefox. другой пример парольный менеджер в браузере рядовой фулстек разработчик скажет что это по сути всего лишь бд для паролей, но стоит вам начать его писать как вы поймете что даже очень хорошей командой из 4-5 разработчиков пишется он за 15-2 года. например, средний инженер гугла может потратить всю свою карьеру только на то, чтобы в google drive интерфейсе правильно работала кнопка сохранить. “пфф, да как два байта дописать” людям, которые не знакомы с внутренней кухней разработки браузеров или компиляторов иногда бывает очень непонятно почему вроде казалось бы очевидные вещи делаются ну очень долго. не пользуюсь им, но он есть dbezhetskov. вот к слову и патч в jsc который добавляет поддержку обновленной секции elements и reference-type proposal:. возвращаясь к своей задаче я написал пару функций для парсинга в стиле:paialresult warn_unused_return parseelemkind(uint8_t&amp; elemkind), потом вызвал их через этот чудесный макрос, который по факту делает if и все, код получается читаемым, расширяемым и вот это вот все. также андрей александреску предлагал внести похожий способ обработки ошибок в c++:. посмотрите как функция объявлена, auto sectionparser::parseelement() paialresult, это же в прямом виде rail way oriented development в c++ более подробно об этом подходе можно прочитать тут:. спустя буквально пару часов я прозрел, блин, а это удобно не надо как в go писать каждый раз if not error, просто в случае ошибки указываешь что возвращать и все. посмотрите на эту кучу макросов: cant get element sections count);несмотря на макросы это почти читабельно, исключая того что под wasm_parser_fail_if может скрыться нетривиальный кусок кода. я уже привык что код на c++, да еще и в больших проектах не блещет новыми идеями и фишками из новых стандартов, развитие происходит неспеша и очень консервативно, но когда я нашел нужную мне функцию parseelement() я уже смотрел с презрением. тут буквально на днях я работал над webassembly в javascriptcore javascriptcore это движок для js и webassembly в webkit, который используется в браузере safari я собирался поддержать новый формат кодирования секции element в wasm, те мне просто надо было поправить парсер. это не то, это занудно, это мертво. привет хакеры! всю эту неделю я буду ващим mc из мира разработки компиляторов. неделя подходит к концу, спасибо вам за нее! надеюсь, что не создал впечатление пьяного бати со своими байками, а так же что вам был интересно читать не про технологии, а про подход. я пока новичок, но мне вот little big workshop из не стандартного набора зашел mario pay норм для вечеринок, animal crossing для расслабиться. animal crossing, little big workshop (внезапно оч залипательно), зельда (оч зашла), но я пока новичок). так что, если я таки решу поехать кукухой, то у меня появился второй вариант: купить яхту, основательно подготовить ее и отправиться в кругосветку. это буря эмоций, спортивный азарт и множество тем для обсуждения с командой, а у ж каким вкусным вечером кажется эфес! в общем, 2 недели на яхте помогли мне неплохо привести голову в порядок, передохнуть от работы и соц сетей, в телефон заглядывать не было никакого желания. но есть еще один не самый очевидный можно поучаствовать в недельной регате, коих проходит достаточно и принять участие может каждый, для этого даже особых навыков иметь не надо главное — найти команду и опытного капитана со спортивным прошлым (и возможно настоящим). помимо выходов с парусом на пару часов можно выбрать еще два варианта провести время на яхте первый это тот самый, который обычно рисует воображение при слове яхта перемещаться между живописными гаванями, купаться и пить апероль-шпритц. к лицензии прилагается довольно тяжелая зависимость от нового увлечения причем тут есть несколько форматов и яхтинг вполне может стать летним хобби, если в вашем городе есть парусные тренировки знаю, что с этим точно все хорошо в москве и санкт-петербурге, спасибо силе ветра. в эту историю я ворвался совершенно внезапно для себя, благодаря другу в прошлом году весной я поехал на шкиперскую практику, ни разу до этого не бывав на яхте, только почитав книжки для теоритической базы в общем 10 дней практических занятий на яхте и лицензия в кармане. ну и завершить хочу относительно новым для меня увлечением, про которое можно пошутить что это только для тех, кто зарабатывает 300к/сек, но на самом деле это относительно доступный вид досуга речь о яхтинге. но в любом случае это очень круто прочищает мозги и дает кучу впечатлений (и контента) если окончательно поеду кукухой, то куплю бус, переделаю под кемпер (хочется конечно vw california, но денег жалко) и отправлюсь в длительное автопутешествие. пока денег у меня было не много, но была машина, я путешествовал по сибирским городам, когда доход стал позволять — перешел на путешествия по европе на арендованных машинах разница в комфорте конечно колоссальная. очень люблю путешествовать, особенно автопутешествия возможно эту любовь мне привили родители, в 2002-м мы ездили на машине из новосибирска в сочи, было оч круто!. зимой это горные лыжи вид спорта, который доступен не в каждом регионе и в санкт-петербурге с ним довольно печально приходится брать отпуск и ехать кататься обычно это либо шерегеш, который можно совместить с посещение родственников в новосибирске, либо 2 долины во франции. летом я люблю кататься на велосипеде причем не люблю это делать в одиночестве и стараюсь это делать в компании единомышленников но это были все, что доступно всем чем же интересным я занимаю свободное время?. очень люблю читать! это у меня с детства, причем сейчас я одновременно читаю плоский мир пратчетта и фентезийные серии от не очень известных авторов на сайтах для самиздата с книгами у меня как с фильмами и я вечно бросаюсь из крайности в крайность фильмы/книги/видеоигры. кстати о видеоиграх этим я тоже грешу, сейчас играю на pc, ps4 и nintendo switch не ожидал, что switch так плотно войдет в мою жизнь, но это действительно удобный формат консоли с отличными играми. как-то в ожидании выхода мстители финал, мы решили пересмотреть все фильмы и сериалы вселенной история конечно на любителя, но я люблю крупные вселенные в фильмах, сериалах и видеоиграх. я люблю ходить в кино и залипать в сериалы для меня это история эпизодическая (иногда накатывает и не могу оторваться от сериала, а иногда могу и за месяц ни одного фильма не посмотреть). неделя заканчивается, сегодня выходной, а как я вчера сказал, не круто будет говорить о работе я вчера затронул тему хобби и отпусков и хотел бы ее сегодня немного раскрыть начну с простого и разжижающего мозг. чем больше ваше хобби отличается от работы, тем полезнее для вашего психического здоровья а физическая активность полезна и для здоровья обычного. вообще, радикально переключать фокус помогает и в рамках обычной рабочей неделе допустим у вас 2 раза в неделю скалодром в 19 вечера это отличный повод вовремя закончить работу и переключиться на самом деле, скалодром может легко заменить хоть книжный клуб. если хотите заняться пет проджектом, то от выгорания это точно не спасет но зато может помочь попробовать пройти хоть какие-то игры из тех, что накупили на стиме/или еще какой платформе за все это время еще круче конечно будет какая-нибудь спортивная или туристическая история. что же делать со всем этим счастьем? лучший выбор - максимально сменить остановку и уехать подальше, но и на дачу тоже подойдет (времена сейчас особенные) рабочие чаты лучше не смотреть, да и вообще в телефон не залипать. тут я конечно же порицаю , потому что их система не позволяет взять отпуск так, чтобы из 28 8 дней не попало на выходные и говорю огромное спасибо , что я могу распоряжаться своими отпускными днями так, как хочу. государство не просто так дало нам 28 дней отпуска и вагон праздников многие коллеги из сша могут позавидовать нам! есть правда нюанс, наши отпускные дни могут быть записаны на выходные, когда мы берем длинный отпуск, а по тк рф надо брать один непрерывный отпуск от 14 дней. англия где-то по-середине и очень сильно зависит от того, где находится головной офис компании и кто у руля про страны бывшего ссср ничего не скажу, но подозреваю что ситуация от рф не сильно ощущаетсяподозреваю, что большинство читателей, как и я, живут в рф, что нам делать?. если в скандинавии просто не принято перерабатывать, то в германии работодателя ждут очень серьезные штрафы, если выяснится что сотрудник работал сверх положенного не знаю правда ли, но слышал что у мюнхенских сотрудников выключают vpn на выходные на всякий случай. чем больше мы перерабатываем, тем хуже работаем и эта штука имеет накопительный эффект в россии переработки иногда считаются нормой слышал, что в штатах в этом плане еще жесче так что если не можете ничего с собой поделать, то можете рассмотреть западную европу и скандинавию. что еще важно? сохранения режима труда и отдыха! тут я регулярно делаю ошибки мне нравится концепция про мозготопливо, с помощью которой рассказывает об особенностях работы нашего мозга так вот, экономьте ваше мозготопливо и вовремя прекращайте работать. что я подразумеваю под окружением? коллеги, начальник, друзья, семья и даже люди на которых вы подписаны в интернете чем больше вы доверяете этому человеку, тем больше он будет разрушать ваше психическое здоровье, так что следите за состоянием близких, это в ваших интересах. что же еще может способствовать выгоранию? токсичное окружение! когда вам итак живется не сладко, а вокруг люди, что подчеркивают любые ваши косяки, говнят на работодателя и индустрию, то жить становится совсем не сладко. как этому научиться? не знаю, возможно вам поможет терапевт с мой стороны, я не один раз был виновником хештега #вкживи и видел, как на появлялись новости с упоминанием моих косяков. проблема минорная? можете не откатывать код и так же спокойно разбираться главное — не создавать панику, она не только помогает наломать дров из-за поспешных решений и суженного обзора, но и подкидывает довольно качественного угля в топку нашего котла для выгорания. кто-то умер? нет вы просто наемный сотрудник в компании? скорее всего за проступки привязывают к позорном столбу и выдают 10 плетей? сомневаюсь в общем не надо волноваться по поводу того, что уже случилось если проблема критична — откатите код и спокойно разбирайтесь. во-вторых, умерить свои переживания о каких-то проблемах не отказатьсья от ответственности, а постараться убрать из этой истории переживания например на прод уехал баг, полмиллиона пользователей страдают да, это плохо по отношению к пользователям да, немного стыдно. что вообще делать для того, чтобы избежать выгорания? (или хотя бы оттянуть этот момент)во-первых, не брать на себя слишком много ответственности чем больше дедлайнов висит на вас, тем ближе выгорание чем чаще при проблемах на проде в 3 часа ночи звонят именно вам, тем хуже. уже заволновались? можно попробовать пройти вот этот тест летом он показал мне довольно серьезную стадию выгорания, но кажется я просто психически стабильнее, чем средний фронтендер и мне это почти не мешает. как понять, что выгорание подкрадывается, или уже находится в активной фазе? вас начинают раздражать различные вещи на работе раздражение может как переходить в злость, так и в расстройство но итог один: вам все меньше нравится ваша работа, а коллеги вокруг кажутся мудаками. мои наблюдения показывают, что чаще всего выгорают люди, которые искренне переживают за продукт: как со стороны привлекательности для пользователей, так и с точки зрения технической составляющей если вы привыкли делать какую-то работу с 9 утра до 18 вечера, то вы в безопасности. кто-то подвержен различным стрессам больше, кто-то меньше склонен предположить, что на это влияют как генетически заложенные черты характера, так и перенесенные переживания, причем как в детстве, так и в довольно взрослом возрасте. дисклеймер: я вообще ни разу не психолог и не специалист по выгоранию, моя цель сегодня — обозначить проблему и высказать свое мнение по этому поводу (зачем-то же меня пустили в этот аккаунт на неделю). шёл, шёл медведь по офису, видит — фронтендеры стартап без выходных пилят, сел с ними пилить и выгорел бородатые шутки бородатыми шутками, но я лично знаю немало специалистов, которые почувствовали на себе различные стадии выгорания да и сам у себя замечал, что уж. чем занимаетесь сегодня? уверен, кто-то работает активно, или пассивно (это когда смотришь сериальчик, а сам думаешь как же ту багу побороть) это уже другой момент хочу сегодня поднять тему гигены труда и психического здоровья. ну чего началось то? =) не, тут же вообще другой формат происходящего одно дело, когда пытаешься что-то сконструировать, а другое — сохранить в голове что-то полезное с помощью относительно случайного человека. о, я же самую главную мысль забыл сформулировать! если вас устраивает текущий уровень, ваша зп, задачи и работа она только для денег, то не гнаться за тем самым развитием, это тоже нормально!. может у вас есть рецепты, как можно получать знания без нудного процесса? я 5 лет назад год учил испанский, а сейчас начал учить немецкий и этот процесс конечно та еще нудятина зачастую. иногда что-то новое узнаешь на собеседовании от кандидатов, прям тащусь в такие моменты! вообще, с собеседованием почти как с подготовкой доклада, хочешь ты или нет, но в скором времени начинаешь очень глубоко разбираться в тех темах, на которые общаешься. и ты вроде приехал про свой кейс рассказать, но вот уже помогаешь разобраться как с нашим апи работать, а теперь ребята споткнулись об реакт и ты им про setstate рассказываешь а потом тусишь на афтерпати в местной крафтовой пивоварне в общем 10/10, рекомендую!. меня удивил сам формат: нет жюри, команды делают peer review и вносят результаты в голосовалку, потом из финалистов победителей выбирают зрители кейс делали как команды из россии, которые отлично знают что такое вк, так и ребята со всего мира, что вообще про вк не слышали. у нас внутри 2 раза в год проводятся хакатоны очень люблю их за возможность попробовать новую технологию и разнообразить рабочую рутину довольно познавательно было поучаствовать в хакатоне с другой стороны: в прошлом году мы представляли кейс от вк на в хельсинки. в прошлом году поехал на , но почти все доклады поделились на чтение документации со сцены и обсуждение различных проблем в сообществе но организация конечно была очень крутая и больше всего меня поразили ребята из. до определенного момента, я считал что ездить на конференции помогает кругозору, но то ли кругозор достиг определенного уровня, то ли конференции стали лайтовее, в общем теперь на них катаюсь только ради тусовочки и не рассчитываю узнать что-то новое. иногда читаю чаты и , но эта история больше полезна для новичков одним из самы эффективных оказывается чат с бывшими коллегами (некоторые и нынешние в общем то) он совсем не про технологии, а больше покекать или посраться, но иногда узнаю прям стоящее. зато я подписан на телеграм каналы, такие как defront ( от саши , вебня ( от сережи , и веб-стандарты ( от и. но это про так называемое развитие вглубь, а что делать с кругозором? как узнать, что вышел очередной перспективный фреймворк? я пробовал подписываться на рассылку хабра, реддита, медиума итак далее, но по факту у меня на них нет времени (или если честно, то просто влом). нет лучшего способа в чем-то разобраться, кроме как поставить себе цель кого-то обучить в моем случае это подготовка доклада на конференцию это ведь вполне прикладная задача, в рамках которой надо структурировать знания и транслировать максимально понятным языком. вообще, мне никогда не давался подход сейчас я всю документацию перечитаю и буду шарить мой выбор — разобраться в рамках прикладной задачи, сделать что-то быстро, а если надо, то начать разбираться, вплоть до ковыряния исходников плюс есть еще один действенный метод. для меня в определенный момент это тоже касалось очень важным, на всех it-мероприятиях я старался обсуждать только профессиональные темы и рад был пообщаться с известными специалистами на условном highload++ но в какой-то момент новые знания перестали легко залетать в голову. еще лет 5 назад, на собеседовании было принято узнавать: а кандидат развивается? не стоит ли на месте? поэтому часто встречался вопрос откуда вы получаете знания? ну и все такие давай про банду четырех рассказывать и конференции, где были сейчас это актуально, или поменялось?. кстати, забыл про такой момент, если у кандидата много всякого на гитхабе то и тестовое можно скипнуть, но такое к сожалению попадается очень редко. я рад, если ошибаюсь! а это прям про серьезный финтех, а не про криптостартапы сейчас?. но это может быть эпизодическое ощущение но очевидно, что универсального рецепта не будет. опять же можно так и ответить: я вообще менять работу не планирую, но если настаиваете, то можно пообщаться, вдруг передумаю а они там уже пусть сами решают, надо оно им или нет. о, в соседней ветке оч похожий вопрос как по мне, то мало кто бывает в 100% уверенности, что менять работу не планирует. если 100% не собираешься менять место работы, то пожалуй не стоит по крайней мере точно никому не стоит об этом говорить но всегда ли есть эта железная уверенность?. кстати, частично поэтому всегда стараюсь ответить мол сорян, но сейчас не планирую работу менять, если вижу что человек сделал что-то чуть большее, чем заменил имя в шаблоне. уверен, что исключения есть! а так же в банках часто практикуют квартальные и годовые бонусы, да и в целом с деньгами нет проблем. интересно, нет ли исследований скрипты vs персонализированные тексты: по какому сценарию быстрее происходит найм. не, такое то понятно фигня. а приведи пример задания на 30 мин, по которому можно что-то интересное понять?. всмысле реально на 30 минут, или кажущимися на 30 минут? люди на собеседовании за 30 минут иногда с правильной скобочной последовательностью не могут разобраться. а заодно и потренироваться в навыке собеседоваться, кто знает когда он внезапно может потребоваться и добавить еще одну историю в свою копилку для посиделок с друзьями. в общем ходить на собеседования это почти всегда полезно, хотя бы раз в год так вы можете разведать ситуацию на рынке, пообщаться с интересными людьми, узнать достойно ли вы получаете на текущем месте. а если вы собрались релоцироваться в первый раз, то это вообще весело у ваших родственников может оказаться весьма противоположное мнение на этот счет, ваш партнер может резко передумать, а текущий работодатель начнет накидывать контр офферов и это вы еще не начали искать жилье. и вот оффера не случилось, или он оказался на меньшую сумму, чем хотелось бы ну ок, бывает зато случился полезный опыт собеседования иногда от того что оффер случился бывает еще хуже! ведь надо как-то сказать об этом руководителю, коллегам, передавать дела. и тут часто могут слиться и сказать нет, почти не увольняются когда в компании штат 300+ человек, то они точно увольняются с некоторой регулярностью! а ведь можно ответить бывает, вот вася 5 лет проработал, но решил релоцироваться, ушел в гугл техлидом и ты такой сразу: мм!. что я пытаюсь узнать о компании, когда мне дают право голоса? на сколько нормированный рабочий день, как выбираются технологии, правила для кодстайла как устроен процесс, много ли встреч есть ли возможность выбрать технику часто ли увольняются сотрудники? а по какой причине?. потом техническая часть и все как в тумане если это было собеседование на английском по скайпу, то все как в тумане еще на пару часов и голова вообще не варит. когда просят рассказать о себе, то выбираю интересную задачу за последнее время, где я внес больше всего импакта и рассказываю о ней упоминаю, что я не только код писать люблю и что мне норм руководить, читать доклады и страсть как люблю кататься на конференции. какую информацию я жду от рекрутера? (сейчас будет немного доковидный взгляд) как компания относится к эпизодической удаленке, что они думают про мои зп ожидания, тусят ли сотрудники во внерабочее время все остальное можно уточнить на собеседовании. с деятельностью компании разобрались, что дальше? в тематических чатах, где могут быть сотрудники этой компании, например spbfrontend для питера, можно спросить, есть ли кто из этой компании? что нравится, что нет?. почему не аутсорс? я люблю, когда я на одной стороне с заказчиком, когда он всегда доступен и настроен на конструктивный диалог аутсорс это лотерея в этом плане, но если вы хотите быстро прокачаться, поднять денег или релоцироваться, то условный epam это вполне себе выбор!. почему не финтех в общем случае? финтех это большая денежная ответственность, из которой вырастают излишние меры безопасности, как информационной, так и проверки удлиняющие релизный цикл ну и атмосфера в таких компаниях немного натянутая, люди в пиджаках там. но ладно, у нас же канал про фронтенд на что я буду смотреть, при выборе работодателя? у меня, как и у многих, есть ряд загонов на эту тему, но основных 2: в общем случае это не должен быть финтех и не должен быть аутсорс, но исключения возможны. вот мне hr таня из райка написала очень персонализированное письмо и мне сразу захотелось узнать, классно ли там работать!а то открываешь почту, а там компания из s&amp;p 500 ищет программиста программировать, ну и сдерживаешься чтобы спамом не пометить (а многие и помечают). что-то перерыв затянулсяитак, что же я думаю про процесс найма, когда нахожусь в роли соискателя? рекрутеры, если вы вдруг попадете в этот тред, то пожалуйста перестаньте рассылать шаблонные письма. например в чаты с бывшими коллегами или чаты с фронтендерами обычно кидаю в те чаты, в которых чувствую себя комфортно, а не левым хреном с горы. ну, я же схематично обозначил, а нюансы не знаю, да и не положено мне могу только предположить, что когда в штате тысячи сотрудников, то можно и медианой оперировать, а дальше закон больших чисел сработает и отбалансирует. но они же не совсем прикладные. это хороший вопрос! скажу честно, пока причина где-то на границе недоверия и страха из-за этого недоверия, но я серьезно задумался об этом. часто важна самостоятельность, ввиду некоторого наследия старых процессов, когда один человек мог заниматься одним разделом, до конца еще не успели отойти от ряда привычек у меня в команде важным фактором является дотошность, иначе не сработаемся (речь о команде) скорее всего. конкретно в мою команду поток маленький и по резюме еще ни разу не зарезали (хотя пару раз было сожаление, что так не сделали, и оба раза это были кандидаты от агентств). по-сути это даже первый этап, но как выстроить эффективное собеседование через эл почту у меня ни опыта ни представления нет. потому что хочется оставить хорошее впечатление о себе, тут же как на свидании, все в равных условиях. зависит от потока кандидатов, если он действительно большой, а на код не посмотреть, то почему бы и нет?. кажется, пора немного остановиться, задавайте вопросы, делитесь своим опытом, а я выдохну и попробую рассказать о своем опыте со стороны соискателя. ну и последний этап, финальное собеседование здесь 2 цели: выложить перед кандидатом все потенциальные трудности работы в компании и проверить его совместимость с командой потому что если человек увольняется в течении полугода из компании, то это очень больно и дорого выходит. может, ты и классный спец, но после такого у кандидата будет плохое впечатление от собеседования, скорее всего расстроится что зря пошел и он то еще дно бонусом будет говнить в чатах с друзьями не столько про тебя, сколько про всю компанию, а может и в социалки вынести это все. на каждом из этапов важно относиться к кандидату с уважением, потому что интервьювер это лицо компании для кандидата не знаю почему, но некоторые интервьюверы игнорируют этот факт могут отвлечься на звонок, или залипать в мессенджере. это история часа на два, когда кандидату предстоит решить более-менее серьезную задачу и рассказать ход мыслей интервьюверам раньше было принято давать тестовое, но оно многих отпугивает и кандидаты просто пропадают и я их понимаю!. что происходит после интервью? если нет очевидного решения вроде он крутой! или зеленоват для нашей вакансии, то мы стараемся сравнить с текущими сотрудниками или другими кандидатами если нет однозначного понимания, то мы приглашаем кандидата на лайвкодинг помним про стресс. поэтому я всегда стараюсь кандидату помочь довести решение задачи до конца возможно эта маленькая победа его расслабит перед следующей задачкой, а может быть он воодушевится еще в процессе решения текущей. и не стесняетесь делать предположения скидка на стресс делается всегда, но если человек полностью замыкается и молча смотрит на экран/доску, то тут мы никаких выводов сделать не сможем как по мне, то важно относиться к людям по-человечески,. собеседование это всегда большой стресс для обеих сторон, но для кандидата он сильнее, потому что в какой-то момент для интервьюверов собеседование превращается в рутину нет ничего страшного в том, чтобы затупить на решении задач, если вы рассуждаете в слух. на каждом из этапов важно не только узнать от кандидата побольше информации о его опыте, но и проверить правдивость этой информации иногда кандидат может не рассказать об интересном опыте, считая его скучной рутиной, иногда хороший кандидат может завалить решение простой задачи. 3 спасибо за интервью, теперь настала твоя очередь задавать вопросы мы готовы ответить на любые: процессы, технологии, принятие решений, какие плюшки есть в компании и какой ide мы пользуемся. 2 спасибо за рассказ о твоем опыте, как ты смотришь на то, чтобы порешать пару технических задач? нам важно увидеть твое рассуждение, чтобы понять на сколько глубоко ты успел погрузить в js и css со многими вещами не сталкиваешься до возникновения определенных задач. 1 мы хотим побольше узнать о твоем опыте, расскажи пожалуйста какие интересные задачи тебе приходилось решать ранее это может быть как крутое техническое решение, так и просто задача, которая подарила много эмоций и запомнилась надолго. поэтому я всегда пытаюсь создать комфортную атмосферу прощупываю кандидата лайтовыми шутками, рассказываю о недавних казусах, что произошли у нас и всегда стараюсь сообщить кандидату о том, что будет происходить и зачем обычно это 3 этапа интервью и вот такие вводные я даю. обычно же кандидат волнуется от волнуется немного до забывания слов в этом нет ничего страшного, но это создает некислый стресс для интервьювера, ведь цель собеседования не унизить кандидата, а понять где он свой опыт приукрасил, а где поскромничал. бывают очень бодрые кандидаты и с ними довольно просто общаться, считаю что сам к таким отношусь но правда с такими кандидатами есть один нюанс, все собеседование ты пытаешься понять, не лапшу ли тебе на уши вешают, или он действительно на столько крут? но это скорее исключения. технологии, с которыми приходилось работать на этих проектах, чем конкретно вы занимались и чего удалось достигнуть но на самом деле может быть просто название компаний и эти подробности останутся для интервью итак, резюме классное, кандидат интересный у нас первое интервью. хотел утолкать в один твит, по получилось на два лучше всего модифицировать сопроводительное письмо под конкретную позицию, тогда вы с большей вероятностью вызовите интерес у потенциального работодателя что отобразить в резюме? проекты, над которыми вы работали раньше. я люблю здоровые коммуникации и дотошно разбираться в проблеме, но избегаю чрезмерной бюрократии я уже 10 лет в коммерческой разработке и 8 из них - во фронтенде, не люблю спорить о правилах линтера и фреймворк для меня всего лишь инструмент. привет! меня зовут илья, и я хочу работать у вас, потому что мне нравится ваш продукт (даже купил подписку на 5 лет)! я вдохновляюсь сложными задачами по фронту, но составления запросов в бд вгоняет меня в депрессию. что помогает на этом этапе? очень люблю, когда есть сопроводительное письмо это такой краткий текст, который содержит мотивацию кандидата и сводку по его предыдущему опыту этот текст можно как приложить к письму, так и закинуть в шапку резюме, сейчас покажу пример. и вот человек откликается, мне в руки попадает резюме и я пытаюсь понять, стоит ли тратить время соискателя и коллег, или в резюме есть какие-то моменты, указывающие на то, что кандидат нам не подходит например у нас будет много верстки, а у кандидата вообще нет нужного опыта. когда ставку одобряют, я иду к рекрутерам и говорю: а помогите ка нанять человека, вот описание вакансии, хочу джуна/миддла/сеньера, вот эти навыки ключевые и жду бонусом сам пощу вакансию, кидаю в тематические чаты, где обитаю, если там это считается приемлимым. берем реальный пример я понял, что у меня в команде появилась потребность добавить рабочих рук, потому что задач много и мы не справляемся я иду к своему руководителю и прошу ставку ставка это что-то вроде резервирования кусочка зарплатного фонда на ближайший год. поговорим сегодня на самую любимую тему в айтишных чатах после обсуждения зп? да-да, я говорю о найме причем хочу посмотреть на него как со стороны соискателя, так и со стороны работодателя. можно использовать packagejson files, вместо npmignore. раньше это все вроде зеркалилось на сайт, но может чего путаю, а может просто найти не могу поможешь?. ну, автоматически это довольно сложно делать, надо код анализировать, а фактически это сейчас забота того, кто публикует пакет, надо всего лишь убрать лишнее через npmignore. ну, тут только последние на фронте могут понадобиться. ну как-то так и может до 50мб приложение вырасти. я видел на 25, что грузились почти сразу и это не был внутренний продукт. не, ну есть кейсы когда дешевле запихать вычесленный список простых чисел, например. я вот регулярно провожу собеседования и инженеров на них с каждом годом приходит все меньше, а формошлепов на реакте - все больше. это если было куда стагнировать) а если разработчик джуном пришел на локальные технологии, какие у него шансы вырваться? =). да, но только потом сидишь такой до старости в этой конторе, 90-летний программист на коболе. я вот покопался в памяти и понял, что всегда возникало велосипедостроение в тех местах, где надо было сделать что-то через чур специфичное и критичное к рантайму. в этом нет ничего плохого, просто попробуйте это учитывать при выборе следующего работодателя, взвешивая все за и против а если бы я жить не мог без написания велосипедов, то я бы побоялся увольнятся в никуда, хотя ладно, я и так боюсь увольняться в никуда. и через пару-тройку лет вы можете ощутить себя джуном на рынке: вокруг незнакомые названия, компании нанимают людей, что пишут код под конкретный фреймворк и пользуются гитом, а вы года 3 как не ребейзили. к чему я это все, на самом деле? если вы хотите выбрать что-то не из мейнстрима, то будьте готовы к потенциальным сложностям, это нормально причем не мейнстрим с большой вероятностью может случиться с вами в faang, они привыкли сидеть на своих технологиях. 2 интерес сохранился, но текущий проект в компании завершился, а на остальных сплошное легаси тут либо депрессия, либо уход из компании3 через 3 года с вами не продляют контракт, хотя все шло хорошо, а вы релоцировались ради этой работы, например во флоренцию. вот загорелись вы тем, что хотите писать например на elm? и тут есть несколько вариантов после того, как вы соглашаетесь1 через полгода интерес пропадает, перегорание, разочарование ну ок, можно вернуться в предыдущий стек (ну или вообще уйти из программирования). и случай 3, когда вам надо выбирать технологии и это может повлиять лично на вас вот вышли вы на рынок труда, разослали резюме, прошли по несколько интервью и на руках у вас офферы и дальше мы пытаемся балансировать между: зп, технологиями, продуктом, командой и локацией. хороший момент, который я почему-то опустил как само-собой разумеющийся но возможно я просто не натыкался на подобные комбинации компактности и плохого рантайма а есть наглядные примеры?. этот момент я что-то упустил, да, если заказчик внутренний и у него нет выбора, то можно и понаглеть правда если у вас код приложения под 50-100мб получается, то браузер может тупо начать крашиться. можно поискать запасной аэродром!. ничего не подходит? не бойтесь сделать форк, но перед этим внимательно изучите исходники ну или хотя бы попробуйте завести тикет о недостающем функционале, вдруг повезет? ну и не бойтесь пробовать и перебирать варианты, когда пишите прототип. как замерять размер? могу порекомендовать вот этот ресурс и смотреть на minified размер, потому что нам библиотеку надо не только скачать, но еще распарсить и выполнить если вы поняли, что библиотека тяжеловата, то можете посмотреть на аналоги. функционал библиотеки можно оценить по документации, перспективность по гитхабу и частоте релизов, остался размер почему вообще размер библиотеки так важен для нас? ну подумаешь 10кб или 100кб но только вот на 20-й библиотеке это уже будет 200кб или 2мб а 20 это не предел. тут нам предстоит искать баланс между весом библиотеки, ее функциональностью и перспективностью (активность авторов на гитхабе, количество пользователей) ну и еще на плече будет сидеть маленький дьявол и говорить используй moment, всегда же так делал раньше!. для начала надой пойти и спросить коллег, вдруг эта задача решена, а вы не в курсе? совет выглядит слишком очевидно? но почему-то этим шагом часто пренебрегают, а потом в проекте появляется 5 разных реализаций одной функции решения еще нет? идем дальше. поехали дальше случай второй: вам надо выбрать библиотеку для решения абсолютно рутинной задачи: форматирование даты, генерация uid, рисования графика, таблицы, визивиг что делать, на что смотреть? может писать самому?. но и деревья крутить не заставят?. училась, до последнего курса не дошлаво даёт фундамент профессии/сферы знаний и помогает всё структурировать также способствует заведению полезных связейявляется веским поводом для переезда или оттягивания взросления при напряжных отношениях в семьена поиск работы не влияет. серебряной пули нет, но сейчас популярны подходы с микрофронтендами и с монорепой (всмысле когда в одной репе много пакетов, а не когда весь код в кучу) в 5-м вебпаке добавили module federation интересно что из этого получится. ну так никто не говорит о том, что этого достаточно). не, ну я же коллективный аккаунт веду, мне не надо чтобы меня токсичным ублюдком назвали и отписались). ну или пару велосипедов сбоку на сварочку прихватить!. в моем мире с понями и радугой (уверен, не только моем), я бы вообще этот этап предпочитал проскакивать, а то потом груз ответственности на весь проект растягивается. даже миддлов готовых нет под него!. именно эту мысль я и хотел выразить, просто пытался сделать это аккуратно, а то звучит довольно обидно!. что еще я не упомянул?. 5 самое неочевидное, пожалуй а вдруг прямо сейчас бизнесу выгоднее купить готовый конструктор и за неделю его допилить? да, это звучит отвратительно для разработчика, но зато может закрыть сиюминутную потребность и быстро запустить mvp. 4 а может бизнес сразу готов выкладывать результаты в опенсорс? это дает преимущество для всех: разработчикам красивый гитхаб профиль и уважение, а бизнесу экономия на ci. 3 некоторые продукты подразумевают систему вайтлейблов это когда один и тот же ресурс прикидывается отдельными сайтами ни разу с таким не работал и не могу предположить как быстро становится известно о подобной концепции, но может в реплаях кто расскажет. 2у продукта видится потолок по части наращивания функционала? если потенциал продукта хороший, то вскоре вам понадобится решать проблему тесноты репозитория для 100 разработчиков а какие веселые деплои бывают, когда все команды пытаются затолкать фичи в прод до конца квартала!. момент о котором не все велосипедостроители задумываются, но про который спрашивают себя опытные кандидаты а через 1-2-3-5-10 лет я буду нужен на рынке после работы в этой компании? хорошо если речь только о фреймворке, а если в компании свой диалект js?. но может сложиться так, что продукт нишевый, взрывного роста команды не планируется и тогда можно позволить написать свой фреймворк под условный картографический или медтех стартап ну или ваш работодатель просто крупный игрок и может себе позволить все что угодно. многие кандидаты даже не будут читать вашу вакансию, если там нет заветных слов react, angular, vue, svelte, а рекрутер из агентства не сможет смаппить вашу вакансию на резюме кандидата. 1 планируется ли наращивать команду? как активно планируется это делать? выбор велосипедов или нишевых технологий может заметно влиять на найм, вам придется искать специалистов, которые готовы разбираться в продукте самостоятельно, ведь на soc нет готовых решений проблем. но выяснение скрытых желаний бизнеса это вообще отдельная история и задача для опытного тимлида, а в лучшем случае и проджекта, что будет ему помогать но есть довольно понятные факторы, которые можно сразу учесть. уже подоспел хороший комментарий от бизнеса никогда не смогут вас сразу рассказать о том, что им надо почему мы сразу на сказали про темную тему? так это же само собой разумеется, вон даже macos из коробки такое умеет!. с пользователями разобрались, команду порадовали, а как теперь учесть интересы бизнеса? бизнес любит когда быстро, бесплатно и масштабируемо как можно влиять на быстро и бесплатно плюс минус понятно, а что такое масштабируемость?. ну и добавить немного диктатуры, потому что демократия хороша для понимании всей картины, но чертовски сложна для принятия решения, можно пару месяцев правила для линтера выбирать берете наиболее близкий вам конфиг, модифицируете под 80% ожиданий команды и разбираетесь на ходу. с пользователями разобрались, что же важно для команды? обычно это субъективные предпочтения касаемо языков и фреймворков правила для линтера и определенные подходы (с di или без, например) тоже можно отнести в субъективную историю тут самое важное - понять хотелки команды. почему так? ответ довольно очевидный, но стоит его явно дать: в противном случае мы будем плодить техдолг и те самые куски кода, что через полгода с отвращением назовем легаси и будем всячески избегать. если это потенциальный долгострой, то тут у нас 2 варианта: сделать mvp по схеме выше и после проверки гипотезы все переписать с нуля, или же подойти к вопросу основательно: выбрать типизируемый язык, настроить очень строгие линтеры, работать в ci/cd пайплайне с первого коммита. о чем еще стоит подумать? на сколько этот будет долго жить? если это разовый спецпроект под какое-нибудь событие, то можно даже не подключать линтеры, писать на чистом js (если вам вдруг так удобно), смело пробовать новые подходы и технологии (ну, если сроки позволяют). тут можно продолжать накидывать варианты фич, которые так или иначе влияют на архитектуру приложения: темизация, pwa, выбор поддерживаемых платформ, работа на нестабильном канале, подключение платежных систем, различных способов авторизации, кажется я уже пошел в сторону бекенда. с пользователями все понятно: нам нужны технологии, которые помогут реализовать отзывчивый интерфейс и выбить хотя бы 90/100 в лайтхаусе тут нам иногда придется подумать об ssr, и хорошо бы об a11ly хотим выходить за пределы одного языка? сразу учитываем i18n и l10n. итак, чем же руководствоваться при выборе фреймворка? хорошо бы учесть влияние последствий на: пользователей, коллег и бизнес часто разработчики думаю про пользователей и коллег (хотя тут чаще про себя любимого),а про бизнес забывают и это не удивительно, пусть менеджеры думают. начнем с самого ответственного варианта пора стартовать новое приложение и так вышло, что у вас есть право голоса если вы единственный, кто принимает решение и это у вас в первый раз, то я вам немного сочувствую, но не переживайте, все будет хорошо!. как и обещал, сегодня будет день о выборе технологий и инструментов давайте начнем с того, когда вообще приходится делать этот выбор и какие могут быть последствия ошибки? (спойлер: скорее всего необратимых последствий не будет). не, я на мжк рос и до нас крупные провайдеры долго доходили. не, речь прям про бэм инструментарий от яндекса, который они одно время пиарили. уже не в 2, но офисы дешевле, да. я бы хотел завтра рассказать о своем взгляде на выбор технологий и инструментов, но пока можете начать накидывать в реплаи истории успешного использования не меинстримовых технологий/инструментов. из подобного знаю про екатеринбург: там балом правят яндекс и контур, поэтому все местные ребята умеют в бэм, а местные вебстудии сидят на стеке яндекса. скорее даже просто создает среду, в которой ты этому либо научишься, либо пойдешь своей дорогой. как раз дозрел опрос и результаты получились довольно интересные но реплаи примерно совпадают с моим мнением: вуз не дает знаний, он дает навыки для получения знаний и существования в обществе, что неплохо помогает срезать углы не только в начале карьеры. довольно частая история, когда курса после 2-го студент разочаровывается в системе образования, открывает свою игровую/веб студию и нанимает бывших одногруппников, как те выпустятся. почему же в нск такое развитое it? есть несколько вузов с хорошими техническими специальностями: нгту, нгу, сибгути, выпускники которых собрали изначальное комьюнити и показали, что в it интересно и денежно на самом деле не обязательно выпускники. как по мне, то для города с населением в 15 млн человек, что находится в 3к км от москвы весьма неплохо сейчас же в городе открылись офисы таких крупных компаний, как: яндекс, сбер, тиньк, jetbrains, контур, магора, нгс разросся после покупки и еще невероятное количество студий. у меня нет опыта жизни в другом городе и я не могу сделать выводов, на сколько it движ в нск был активным в 00-х и 10-х, но давайте посмотрим на крутые it компании, что можно считать новосибирскими? 2гис, parallels, цфт (они делают очень много банковского софта), alawar, xored. еще в новосибирске были те самые пираты есть такой рассказ дневник тестировщика, уверен, что многие его читали так же у него есть продолжение действие там как раз происходит в новосибирске и основано на реальных событиях. причем эти гиганты росли не толко сами по себе, но и поглощая мелкие локальные сети одну из таких я даже организовал для своих соседей играл с ними в кс по сети, ну и перепродавал им трафик. так что интернет в нск появился довольно рано, но при этом был довольно дорогим это неплохо подстегивало местных провайдеров развивать как внутренние ресурсы, так и качество сети после переезда в спб я прям скучал по сервису и тарифам от и. это когда уже удалось войти в айти, а как собственно войти?. но не все так плохо наверное многие слышали про новосибирский академгородок? так вот, еще в 90-х в его институтах появился nscnet (свой интернет с выходом в глобальную сеть). завершу перечисление основных минусов нск тем, что технически он находится в лесу мало того, что до ближайших более-менее крупных городов по 300 км, так еще и деревни не часто встречаются комары и мошки это популярная летняя проблема, но к ним еще добавляются энцефалитные клещи. в общем, тащиться лишний раз на другой конец города желания нет совсем не знаю связано ли это, но местные компании, еще до распространения мобильного интернета, начали активно обзаводиться собственными сайтами, а потом и обосновываться в соц сетях. плюс улицы чистятся плохо, а тротуары в ужасном состоянии, что превращает жизнь без личного автомобиля в выживание но с личным авто тоже не так все просто, город разделяют на сектора: река обь, жд пути и скоростная магистраль, соответсвенно немногочисленные мосты часто в пробках. еще про новосибирск часто говорят: оооо, у вас то целое метро есть! но оно очень скромное и строится по станции раз в 10 лет в целом, весь общественный транспорт в городе достается в наследство от мск и спб со всеми вытекающими. новосибирску сильно не повезло с ребятами у власти, поэтому в городе без карты невозможно ориентироваться очень давно мне кажется эта картина васи ложкина прям про новосибирск (можете еще видео фбк глянуть про нск, если еще не). в целом, погода располагает долго сидеть за своим комплюктером а так же располагает к тому, чтобы спланировать свои перемещения заранее можно предположить, что поэтому 2гис получился таким хорошим, но причина скорее в проектировании города. климат летом либо дожди, либо жара осень очень короткая (красивые желтые листья быстро опадают) зима начинается довольно рано, удерживает свои позиции до последнего: сугробы под под 2 метра ну и от -10 до -35 за окном поэтому весна длинная, холодная и довольно грязная. могу немного рассказать о плюсах и минусах того, что я родился в новосибирске, но вы можете смело примерять к своим родным городам, а может к потенциальному месту для релокации начну с плохого, потому что для качественной обратной связи надо заканчивать на хорошем. можете рассказать про свои родные города в плане старта для it? какой город оказался хорош тем, что предоставил отзывчивое комьюнити, а какой дал хорошего пинка под зад?. внезапно, но после вчерашнего треда появилось 2 интересных мнения: одни интересуются где в новосибирске хорошая тусовочка, а кто-то считает, что точка старта вообще значения не имеет, но такое суждение очень походе на ошибку выжившего. ну там де про привилегии было, очевидно что в нск родиться хуже чем в спб и лучше чем в рубцовске!. точно, там был лицей, а первый курс в 2006-м!. ну а почему самая большая конференция? потому что тусовочка была и надо было где-то собираться я вот как переехал, так на кодфест как на встречу выпускников гоняю (или вместо, потому что на встречу выпускников не гоняю, а на кодфест всегда стараюсь приехать потусить). но точно была! иначе бы  так не взлетел!. надеюсь, я не слишком сгустил краски, но вот в этом докладе попытался рассказать о состоянии фронтенда и его эволюции. ну тут еще стаж может закрывать эту проблему, да. я специально сформулировал как учился, а не окончил в опросе!. а за что именно саша топит?). ну кстати, для иммиграции 100% полезно!. а давайте ка сделаем небольшой опрос!что думаете о высшем образовании?. двагис как продукт, но дубльгис как компания. что же я представляю из себя, как специалист в 2020? мне 31 год, я работал в 3-х крупных it-компаниях, активно писал на js, da, ts много ковырялся как в кишках angular, так и в кишках react все еще не определился, нравится ли мне тимлидство и готов ли я завязать с кодом. а в третьих — возможность узнать коллег с другой стороны например, можно круто затусить с hr-ми и ребятами что организуют ивенты, очень часто они оказываются классными, и в обычной рабочей рутине так не раскрываются (не то чтобы мерч важнее коллег, но так по твитам удобно бить). начиная от устройства в 2гис и до текущего времени я всегда вписываюсь в любые активности: выступление на конференциях, организация стендов и прочее во-первых, это тусовочка, полезные знакомства и личный брендво-вторых, это клевый мерч. когда я стал заниматься этим не один, а начал набирать команду, то дело пошло бодрее потом мы добавили поддержку ts и стало совсем хорошо, я почти перестал скучать по da сейчас мы подтянули фронтенд вк до должного уровня и перед кандидатами не стыдно на собеседованиях. для начала мы наладили нормальный сбор js-ошибок с использовании ravenjs от sentry с сохранением текстов ошибок и стектрейсов в clickhouse затем начали причесывать сборку, переносить js код под webpack. и спустя некоторое время это случилось опять илья, а не хочешь ли ты заняться инфраструктурой?на тот момент уже довольно много всего хотелось полечить, так что я согласился. через пару месяцев я уже забыл о том, как круто было писать на da, неплохо ориентировался в кодовой базе и подходах разработчиков, но от легаси иногда хотелось плакать очень радовался, когда можно было пилить фичу на react!. и вот я выхожу в вк и понимаю, что почти все круто шарящие фронтендеры теперь руководители и им не особо есть когда писать код, кодовая база примерно уровня 2010-го года, разработка идет в бешенном темпе и технический долг только растет. я долго размышлял над оффером, но всегда мечтал работать в офисе, что находится в зингере, над продуктом с огромной аудиторией в команде действительно опытных специалистов ребята из райка пробовали удержать меня разными способами, но я решил, что меня коней на переправе не оч. груз ответственности становился все больше, я начал теряться в процессах, словил легкое выгорание и тут сдал меня эйчару вк я пришел на собеседование, оно как-то оч быстро пролетело и я даже от тестового умудрился отбрехаться. отдых был недолгим и вскоре я обнаружил себя руководителем команды, которая занимается развитием ui-kit это были очень холиварные времена, особенно если учесть что продуктовым командам надо побыстрее, а половина разработчиков пришла из net и им ui не хочется заниматься вообще. хотелось переехать поближе и как-то так совпало, что мне написали ребята из и мы друг другу как-то сразу понравились был переезд в санкт-петербург, новая команда, смена js на da и старт в роли обычного разработчика - возможность передохнуть от тимлидства. но все равно это было очень интересно, чувствовалась огромная причастность к продукту, но появлялось ощущение, что еще немного и я прирасту корнями на фоне этого всего произошло падение рубля, я ощутил вкус путешествий по европе, а кататься из новосибирска долго и накладно. ну и самое тяжелое: ты вроде весь день ходил по встречам, а ничего полезного не сделал это по начало неплохо так угнетает и совершенно не очевидно что с этим делать особенно когда вокруг тебя царит дружеская атмосфера доверия и максимальной самостоятельности. к этому времени я уже довольно давно участвовал как в собеседованиях, так и в продумывании архитектуры, но тут потребовалось как формировать команду, так и планировать ее работу (читайте и отчитываться перед компанией тоже). это были прекрасные 55 лет сначала мы врывались во фронтенд с бекендным бекграундом, потом прикручивали knockoutjs, затем писали свой фреймворк и где-то на середине этого пути случилось то, к чему я стремился где-то внутри: я стал тимлидом. это было прекрасное время! маленькая дружная команда, интересные задачи и самое главное — ментор! спасибо , он тогда неплохо помог мне упорядочить всю информацию, что была у меня в голове и научится писать осознанный код с паттернами, абстракциями и прочими solid и dry. и где-то в районе 5-го курса мои социальные связи выстреливают зовет твитерских на экскурсию в новый офис (чтобы нанять комьюнити менеджера во flamp на самом деле), я прихожу, удачно знакомлюсь с темой и через пару собеседований выхожу джуном. там я писал на c++, c# и потом на java, но руководствовался лишь теми знаниями, что были получены во время обучения (то есть так себе программировал) ах да, было это на 4-м курсе и я продолжал получать высшее образование, но уже начинал сомневаться в этой затее. с первой работой как-то так и получилось я делал верхний уровень асутп для шахтной вентиляции, катался в командировки в кузбасс и был 20-летним сотрудником в маленькой компании с офисами без кондиционеров среди 35-летних ребят, которых жизнь уже немного потрепала. но тогда я совершенно не представлял, как выглядит продуктовая разработка, испытывал жуткий страх при виде чистого листа и считал, что мое будущее - работа c++ разработчиком, но не представлял где. помимо тусовок, во время обучения в вузе, ты учишься продавать результаты своей работы вот мои одногруппники нашли лабы старших ребят по унылому предмету, вот мы из этого что-то слепили, а вот мы пытаемся своей бригадой это продать преподу не напоминает работу в корпорации?. самое классное — это различные тусовки, причем в основном не айтишные кругозор это очень полезно на длинной перспективе, знакомства помогают развивать личный бренд, а так же это все помогает не поехать кукухой (или поехать). но университетские времена для меня кажутся крутыми не потому что я получал первый опыт веб-разработки и не потому что часть предметов была действительно полезной и давала полезные базовые навыки (тогда я еще не представлял, что они полезны и как их применять вообще). где-то здесь я начал фрилансить и делать сайты на php за деньги (до этого подрабатывал эникеем по сарафанному радио) мне казалось, что у меня обязательно должен быть свой фреймворк на php, меня дико воротило от верстки и необходимости рисовать дизайны, я был вебмастером. учился я на автф в нгту в то время (2004-й год) в моем окружении особо не возникало вопроса: нужно ли высшее образование?, всем было очевидно, что нужно конечно! проблем с поступлением у меня особо не было, первые два курса тоже давались легко. там же я наконец познакомился с программированием, и тут же прыгнул с головой в историю с олимпиадным программированием, тут спасибо преподавательнице по информатике вынырнул из олимпиадного программирования я тоже довольно рано, курсе на 1-м. не смотря на то, что я рос в довольно криминальном районе города, мне очень нравилось учиться, так что к 10-му классу я не скололся, а поступил в замечательное заведение — лицей нгту, спасибо ему за крутой опыт и возможность завести много крутых знакомств!. семья у меня где-то под границей среднего класса, так что я рос в хорошей атмосфере, но с четкими установками: на квартиру мне придется заработать самостоятельно но были и плюсы: с компьютером и интернетом я познакомился примерно классе в 5, хоть интересы и крутились вокруг игр. пора уже рассказать о себе!давайте для начала разберемся с привилегиями мне повезло родиться белым цисгендерным мужчиной, но не повезло это сделать в новосибирске но тут конечно как посмотреть, хоть и холодно, зато в городе отличная it-тусовка. это же заведомо холиварная тема, но желающим могу предложить обсудить в оффлайне за кружечкой пива. я только вернулся с отпуска (который у меня затянулся дольше планируемого), немного в шоке от накопившегося в рабочих чатах, так что пойду всем отвечу, потушу пожары и можно будет полноценно стартовать неделю. дальше я хочу обсудить с вами профессиональное развитие (хард/софт скиллы, личный бренд, вертикальный/горизонтальный рост) и закончить хотелось бы на теме отдыха от работы, нормализации психического здоровья и хобби. о чем я бы хотел поговорить на этой неделе? для начала хочу рассказать немного о своем опыте, затем хотел бы обсудить проблемы найма в it (нужен взгляд с обоих сторон, конечно же) к середине недели можно поговорить о выборе технологий и инструментов. всем привет! на этой неделе с вами илья таратухин () работаю в , считаю что культура гораздо важнее навыков. с вами был спасибо всем за внимание и комментарии напомню, что у меня есть и англоязычный аккаунт также меня можно найти в телеграм-чате о веб-компонентах. от себя могу только добавить, что погружение в эту сферу принесло мне интересный опыт, которого я мог бы и не получить в проекте на react, куда собеседовался на позицию джуниора весной 2016. неплохое резюме прошедшей недели андерхуда, хотя не могу сказать, что в полной мере разделяю пессимизм автора. полезные материалы о веб-компонентах. разработка на es-модулях в браузерах. элемент template и его перспективы. композиция и слоты в shadow dom. ограничения и проблемы shadow dom. кастомизация и css shadow pas. особенности подключения css в shadow dom. изоляция стилей в shadow dom. проблемы кастомных элементов. немного о typescript и тестировании кастомных элементов. опыт написания кастомных элементов без зависимостей. нужны ли кастомным элементам библиотеки?. о применении кастомных элементов в 2020. о том, почему не взлетели веб-компоненты. кастомные элементы: знакомство. в завершение недели собираю все треды о веб-компонентах в один. много статей и примеров есть в подборке web components the right way — это awesome-list, который я мейнтейню уже почти два года. статья от jan miksovsky о нюансах, которые нужно учитывать и о задачах, которые приходится решать, создавая свой combo-box. очень подробная статья от david lorenz о проблеме реализации изоморфного рендеринга веб-компонентов на примере vue. storybook for web components on steroids — статья от thomas allmer из проекта open web components о создании storybook-prebuilt: сборки storybook для разработки на es-модулях с es-dev-server. web components punch list — простой чеклист доступности для кастомных контролов (в том числе, веб-компонентов) от steve faulkner в качестве примера использован нативный button. looking back on five years of web components — еще более подробная статья от joe gregorio о том, как команда skia попробовала polymer, но отказалась от него в пользу ванильных кастомных элементов. shipping web components in 2020 — довольно интересная статья, в которой joe pettersson из bankedjs делится опытом использования веб-компонентов для создания встраиваемых виджетов. shadow dom in depth — неплохое чтиво, где некоторые моменты на мой взгляд изложены чуть более подробно и наглядно, чем на mdn и в учебнике кантора например, хорошо описаны слоты. доклад “web component styling &amp; theming” от justin fagnani советую тем, кому интересно больше узнать о приемах стилизации shadow dom — я на этой неделе коснулся их лишь в общих чертах. доклад jan miksovsky “creating customizable web components” с описанием некоторых приемов из библиотеки компонентов elix. как и обещал, делюсь полезными материалами о веб-компонентах. на этом на сегодня закончу на выходные заготовленных тем у меня нет, но поделюсь некоторыми материалами о веб-компонентах. автоматизация занимает время, которого приходится добиваться с боем зато доля человеческого фактора снижается, а разработчики пишут код, вместо того, чтобы тратить время на рутину. а еще о проблемах надо говорить я упоминал, что часть проектов мои коллеги перенесли в монорепозиторий до этого я показал менеджменту, сколько времени уходило на ручную работу. разумеется иногда бывает и такое это как раз то, к чему я клоню: если уж проблему не удалось предупредить, ее нужно быстро распознать тот же баг chrome мы могли заметить еще в canary. по крайней мере, теперь мне не приходится чинить авралы хотя изредка они случаются по вине браузеров например, в chrome 65 при использовании нашего vaadin-grid крашилась страница. в целом фронтенд намного спокойнее хотя тут можно, например, ошибиться в названии переменной однажды я так и сделал, в итоге у нас больше 2 месяцев не работал сбор анонимной статистики. прошло почти 5 лет с тех пор, как я сменил профессию но и сейчас я каждый раз тщательно проверяю версии и на секунду испытываю тревогу, когда запускаю утилиту, делающую npm publish. благодаря человеческому фактору мне случалось ехать в офис среди ночи, чтобы помогать коллеге поднимать базу из бэкапа в другой раз сменщик заболел, и вместо 12 часов я отработал сутки. от человеческого фактора не застрахован никто я достаточно долго был подвержен такому риску, хотя это конечно же не идет ни в какое сравнение с ситуациями, где на кону человеческая жизнь. более 7 лет я нажимал bat-файлы и вводил нужные даты утром, под конец 12-часовой ночной смены, это требует чуть больше внимания, чем обычно в общем, трёхтысячные годы иногда случались. смысл в том, что это могла быть и мажорная версия менеджмент вряд ли бы этому обрадовался как известно, из npm после случая с left-pad крайне проблематично что-то удалить. работа включала в себя применение sql-скриптов, присылаемых разработчиками по скайпу возможно, вы слышали шутку про тех, кто запускал update без where и тех, кто еще нет я запускал. в тот раз отличился не я, но в моей карьере тоже бывало всякое до перехода во фронтенд я больше 7 лет работал в it-отделе крупного банка как человек-cron, ну и еще немного админил базы данных. для начала простой факт: у фреймворка vaadin есть версия 1415 следующая за ней имеет номер 14116 к счастью, это был всего лишь патч-релиз, и обращаться в npm для отката мы не стали. тред в честь пятницы 13-го о человеческом факторе и багах. отвечаю на вопрос о визуальном конструкторе vaadin: сейчас в разработке плагин для vscode для приложений на lit-element и typescript когда будет альфа, поделюсь в личном аккаунте. ахах передам маркетологам, спасибо :/. улучшения требуют времени у нас в vaadin для этого есть community friday: пятница в конце двухнедельного спринта в этот день можно заниматься и своими опенсорс-проектами, это приветствуется. единственный способ разгрести груду тикетов — постоянство и автоматизация помогает даже использование меток еще очень важно наличие в проекте issue template, а лучше нескольких. когда issue много, они превращаются в груз, который производит угнетающее впечатление простой способ решить проблему — настроить stale bot, но мы пока еще к этому не готовы. иногда бывает и так, что доходят руки до issue, висевшего без ответа несколько месяцев я в таких случаях всегда испытываю дискомфорт, даже если причина в не совсем корректной формулировке. немного о процессах раз в неделю мы просматриваем новые issue, стараемся на них отвечать и добавляем метки также каждую неделю один из нас поочередно следит за вопросами в slack и discord. в прошлом мы в vaadin также использовали gitter на мой взгляд, он был удобен только ссылками на issue никаких особых улучшений за 3 года там не появилось в итоге недавно мы перешли на discord. для общения у нас есть канал в слаке polymer project там иногда появляются мейнтейнеры lit-html, в том числе justin fagnani свой канал там есть также и у проекта open web components. иногда коммуникация с сообществом позволяет найти кандидатов, которые впоследствии присоединятся к команде я сам был одним из контрибьюторов, а в итоге получил оффер в vaadin. разработка продукта в open source подразумевает коммуникацию с теми, кто его использует это полезно в смысле выявления багов, также можно получить полезный фидбек, иногда он вдохновляет. после waffle пробовали github projects, там оказалось несколько недостатков: не было возможности связать issue и pr, отсутствовали status checks пришлось перейти на zenhub как меньшее зло. при разработке на github важен удобный project board несколько лет назад мы использовали waffle, идеально подходивший для наших задач к сожалению, этот сервис уже давно недоступен. насчет тестов скриншотами: с этим у нас пока все печально каждый раз приходится смотреть локально, что именно сломалось надеюсь, когда-нибудь у нас дойдут руки интегрировать argos ci. для тестирования мы используем saucelabs у них есть бесплатный план для open source по запросу правда, как-то раз от них пришел email с жирным намеком, что их щедрость имеет свои границы. мы постепенно переходим с travis на github actions пока общее впечатление положительное огорчает отсутствие возможности перезапустить отдельный job (можно только workflow целиком). недавно в travis объявили об изменении ценовой модели вкратце, безлимит для open source проектов заканчивается дополнительные бесплатные минуты обещают выдавать после рассмотрения запроса. в будущем, надеюсь, переедем дальше как раз пишу об этом, в нашем случае это не так просто. много репозиториев = много билдов в ci мы пока используем travis, а у него лимит 5 free jobs на организацию отправив pr, можно идти пить кофе, хотя чаще всего приходится ждать сильно дольше. задача осложняется тем, что у vaadin есть lts-релизы и компоненты на polymer 2 нашей команде предстоит поддерживать еще несколько лет (хотя версия на html impos по факту уже год как deprecated). надеюсь, в будущем удастся перевести разработку библиотеки в монорепу и унифицировать версии для api компонентов на java мои коллеги это уже сделали, это сильно упростило процесс релиза. количество репозиториев тоже создает сложности мажорные версии нужно релизить в правильном порядке, обновляя при этом зависимости у нас есть скрипты, чтобы не делать все вручную. кроме того, мы поддерживаем несколько минорных версий и иногда бэкпортим фиксы в таких случаях важно следить за npm dist-tag, чтобы более ранняя минорная версия не получила тег latest. подход, где каждый компонент — отдельный npm пакет, имеет свои недостатки например, нужно следить за версиями, чтобы избежать дубликатов зависимостей, иначе в приложении будут ошибки. для конвертации в polymer 3 у нас есть cli-утилита любая версия компонента доступна в bower и npm одновременно, но при этом код там разный с точки зрения semver это выглядит весьма странно. как я уже упоминал, компоненты vaadin написаны на polymer почти весь код до сих пор на polymer 2 и поэтому использует bower так что поддерживать приходится больше 40 репозиториев на github. в этом треде поделюсь опытом трех лет поддержки библиотеки веб-компонентов в open source и расскажу о превозмогании трудностей. кстати, пользуясь случаем, приглашаю в русскоязычный чат о веб-компонентах в telegram (приходите холиварить и к нам тоже):. в комментариях поделились ссылкой на дискорд о es-модулях. на сегодня все завтра поделюсь опытом поддержки библиотеки компонентов в open source кроме того, в честь пятницы 13-го будет небольшой тред на тему человеческого фактора. подводя итоги, скажу, что на сегодняшний день es-модули можно использовать не только как compilation target, но и в процессе разработки думаю, этот подход будет развиваться и дальше. также стоит упомянуть утилиту dual publish от андрея ситника она помогает настроить публикацию esm и commonjs версий. в рамках esm-bundle для некоторых популярных пакетов настроена автоматическая публикация вот, например, версия chai на es-модулях, которую мы в vaadin используем с web test runner. до сих пор я говорил об инструментах но есть и еще один момент: многие пакеты в npm до сих пор не имеют esm-версии в качестве возможного решения joel denning создал проект esm-bundle. недавно экспериментальная поддержка hmr на основе этой спецификации появилась также и в web dev server в качестве плагина советую взглянуть на примеры в документации. замечу, что эта спецификация hmr имеет ряд отличий от реализации hot module replacement в webpack их сравнение приводит tobias koppers (автор webpack) в своем комментарии к этому issue. кстати о hmr: авторы vite и snowpack при участии jovi de croock (preact) работают над черновиком реализации соответствующего api для разработки на es-модулях на основе impometa. сегодня vite находится в стадии release candidate его документация содержит упоминания es-dev-server и snowpack с обзором отличий в решаемых задачах и используемых подходах, прежде всего hmr. дальше, по-видимому, эван увидел мой ретвит, где я упомянул es-dev-server вскоре в его проекте появились заимствованные оттуда идеи, вроде использования es-module-lexer и lru-cache. теперь еще об одном проекте в апреле идеей разработки на es-модулях загорелся эван ю отсчет можно вести с этого твита ради этого проекта эван даже отвлекся на время от работы над vue 3. опытом разработки на es-модулях с использованием snowpack поделился bryan braun в статье описаны ряд аспектов: зависимости, css, кэширование отдельно упомянуты плюсы и минусы. кроме snowpack, fred k schott также запустил skypack — поисковую систему и cdn для пакетов, поддерживающих es-модули проекту уже больше года, до ребрендинга он носил название pika. с выходом версии 20 snowpack превратился в систему сборки с поддержкой typescript, jsx, react, vue и svelte и бандлером для продакшна подробнее можно почитать в анонсе релиза. идея snowpack в двух словах — запустить rollup один раз после npm install, скомпилировать все зависимости в папку web_modules и далее подключать их оттуда, используя относительные пути. есть и другие похожие инструменты пожалуй, самый известный — snowpack, который разрабатывает fred k schott между прочим, в прошлом он работал над бандлером и cli в команде polymer. новая версия es-dev-server получила название web dev server он поддерживает некоторые плагины rollup, а также предоставляет плагин на базе esbuild для компиляции typescript на лету. es-dev-server пользуется популярностью среди разработчиков веб-компонентов на lit-element команда polymer рекомендует его как замену утилиты polymer-cli, поддержка которой прекращена. вторая часть статьи посвящена проекту es-dev-server это сервер для локальной разработки на koa, который поддерживает es-модули и предоставляет удобную систему плагинов. две статьи о разработке на es-модулях написал lars den bakker из проекта open web components в первой из них он описывает их синтаксис, в том числе dynamic impos и impometa. полифилл пропозала impo maps для браузеров с поддержкой es-модулей предоставляет пакет es module shims. в будущем эту проблему планируется решить с помощью impo maps этот черновик предложил domenic denicola из google, недавно о нем также позитивно высказались представители mozilla. единственная проблема — отсутствие поддержки bare module specifiers, стиля импортов nodejs браузеры понимают только относительные пути к файлам об этом написал damien seguin. на сегодняшний день es-модули имеют более 90% поддержки они реализованы везде, кроме ie11 — для него многие советуют собирать отдельный es5-бандл с атрибутом nomodule. к моменту выхода polymer 3 в 2017 году все основные браузеры реализовали поддержку es-модулей переход на них был логичным решением, позволяющим не зависеть от бандлеров и в дальнейшем. кстати, еще команда polymer пыталась продвигать идею http/2 server push с помощью prpl-server популярности этот подход не приобрел, а теперь http/2 push и вовсе удаляют из chrome. polymer 1 был полностью написан на es5, поэтому babel тоже не требовался — достаточно было поднять nginx идиллию нарушал режим f5 monkey и секунды ожидания обновления страницы. зависит от инструмента (о некоторых из них я расскажу в треде) известные мне используют для решения проблем кеширования lru-cache. небольшое предисловие: polymer всегда продвигал идею bundler-free разработки и html impos в нее хорошо вписывались компоненты и целые приложения было принято разрабатывать без webpack. тред о разработке на es-модулях в браузерах. возможно, в будущем template станет опорой для неких новых конструкций, меняющих наши представления об html но полезен он и сейчас, что подтверждает статистика chrome platform status. как и css-модули, которые я упоминал вчера, этот черновик долгое время был заблокирован, но теперь возобновление работы над ним стало возможным благодаря переходу impo asseions на stage 3. напоследок упомяну еще один черновик, предложенный после удаления html impos он называется html modules и в теории придаст новую жизнь декларативному применению template. в перспективе dom pas могут сделать манипуляции с dom более эффективными и упростить написание библиотек вроде lit-html но пока эта идея в стадии обсуждения и к ней есть ряд вопросов. развитием идеи template instantiation является новый черновик dom pas за общим авторством разработчиков webkit и chrome это api на первый взгляд имеет много общего с устройством lit-html. наряду с aom, это один из примеров инициативы со стороны webkit из моих предыдущих твитов могло сложиться впечатление, что все инновации двигает chrome, но чаще это плод совместных усилий. теперь о перспективах template недостаток этого элемента в том, что он не предоставляет api для интерполяции значений в качестве возможного решения предложен черновик template instantiation. замечу, что lit-html в этом плане не уникальна более того, andrea giammarchi утверждает, что в hyperhtml он реализовал этот подход раньше, а разработчики из google позаимствовали его идею. именно этот способ использует библиотека lit-html от команды polymer, синтаксис которой основан на tagged template literals подробнее о принципах ее работы можно почитать в ее wiki. впрочем, создавать template можно и в javascript это полезно для ванильных кастомных элементов: по сравнению с использованием innerhtml темплейты быстрее (нет лишних затрат на парсинг). темплейты в polymer использовались с кастомным синтаксисом для data binding вместе с html impos это позволяло писать в html вообще все про типизацию шаблонов тогда никто не думал. для ie11 есть полифилл, который имеет ограничения например, нельзя использовать template внутри элементов table и select: в обоих случаях ie удаляет незнакомый ему тег. на первый взгляд этот элемент прост, и появился он в браузерах намного раньше custom elements и shadow dom тем не менее, его внедрение потребовало изменений html-парсера. получить содержимое template можно с помощью свойства content, используя один из двух методов: contentclonenode(true) или documentimponode на практике разница обычно несущественна. содержимое template является инертным: элементы не попадают в dom, скрипты не выполняются, стили не применяются по сути это декларативный способ создания documentfragment. сегодня начнем с треда про элемент template раньше он считался частью веб-компонентов, хотя сейчас о нем вспоминают реже. на сегодня все завтра поговорим про элемент template и его перспективы, а также о разработке на es-модулях в браузере. заодно стоит упомянуть проект open ui, в рамках которого разработчики edge, salesforce и chrome обсуждают улучшения стандартных элементов интерфейса, представленных в html. этот проект находится в стадии прототипирования (intent to prototype был опубликован в августе этого года) кроме слотов, среди идей упоминаются и css shadow pas для нативных элементов. одна из возможных перспектив применения слотов — кастомизация нативных элементов (в первую очередь, select) этой теме посвящен черновик custom control ui от разработчиков edge. vue поддерживает компиляцию в кастомные элементы, используя при этом нативные слоты (но scoped slots не поддерживаются). на мой взгляд, это достаточно показательный момент: фреймворки предпочитают свою модель композиции, поскольку она лучше решает их задачи, и привносят свои абстракции (scoped slots). интересный факт: svelte 3 отказался от нативных слотов, потому что контент в них попадает сразу, тогда как по мнению rich harris для фреймворка удобнее возможность отложенного рендеринга. кстати, лучший способ более детально ознакомиться с api, о которых я рассказываю (в том числе и слотами) — проект web-platform-tests для shadow dom там есть целый набор тест-кейсов. при добавлении или удалении элементов на элементе slot возникает событие slotchange оно не является синхронным и срабатывает в конце микротаска, после mutation observer. на практике это означает, что если внутрь слота передать элемент ul, то стили к самому списку с помощью ::slotted(ul) применить можно, а вот ::slotted(ul li) использовать не получится. компонент с shadow dom может применять стили к переданным в слоты элементам с помощью псевдоэлемента ::slotted() важный момент: использование сложных селекторов не допускается. назначение slot — проекция контента из так называемого “light dom” (снаружи) в определенную точку внутри shadow dom за примерами в очередной раз отсылаю к учебнику ильи кантора. элемент slot является частью shadow dom и включен в стандарт whatwg во времена “версии 0” в chrome ему предшествовал элемент content, работавший несколько иначе. в завершение темы shadow dom — небольшой тред о слотах и композиции, которые я как-то обошел стороной. так или иначе, статистика показов страниц в chrome platform status говорит сама за себя: по сравнению с кастомными элементами, у которых около 10%, shadow dom почти вдвое менее популярен. да, чуть не забыл: реклама же! мне однажды тоже довелось встретить div с shadow root в рекламном баннере яндекс-почты для блокировщиков это проблема. в качестве заключения: проблем у shadow dom по-прежнему много, и о них желательно знать заранее (или придется городить костыли) неспроста youtube использует полифилл даже в chrome. еще есть баг на ios, связанный с кнопками быстрого перехода между полями формы в shadow dom он был исправлен совсем недавно. вроде бы, все основные проблемы перечислил есть и другие — например, в chrome в shadow dom не работает перевод страницы. есть issue на эту тему, где в том числе поделился опытом diego ferreiro val из salesforce согласиться на добавление api, которое бы нарушало изоляцию, разработчики браузеров не готовы. насчет webdriverio: поддержка shadow dom появилась в версии 550 и реализация у них своя (поскольку в протоколе webdriver нет стандартизированного api). проблема № 8: тестирование на сегодняшний день shadow dom уже поддерживается в cypress, testcafe, webdriverio и playwright в selenium поддержка пока не реализована. проблема № 7: сторонние скрипты google tag manager, a/b тесты, аналитика и все, что так любят добавлять на сайт маркетологи, очень плохо дружит с shadow dom об этом тоже важно помнить. проблема № 6: изоляция стилей не работает в случае с font-face и keyframes решение этой проблемы требует стандартизации на данный момент font-face в shadow dom использовать нельзя. затрагивает эта проблема и браузерные расширения, прежде всего менеджеры паролей каждому из них потребуется соответствующий фикс например, в 1password он уже реализован. проблема № 5: проблемы с автозаполнением форм в баг-трекере chromium есть issue на эту тему, и ему уже больше трех лет в общем, с формами у shadow dom как-то совсем не задалось. sam thorogood из google написал экспериментальный полифилл, позволяющий обойти это ограничение в safari для одного из компонентов vaadin я интегрировал этот полифилл в форк quill. в chrome этот метод реализован на shadow root, в firefox работает глобальный метод но в safari действует изоляция, и getselection() не возвращает данные об элементах внутри shadow dom. проблема № 4: отсутствие api для работы с выделенным текстом внутри shadow dom при использовании windowgetselection() это актуально для wysiwyg-редакторов вроде ckeditor, quill и trix. справедлива эта проблема и для элементов input внутри shadow dom в прошлом polymer предлагал компонент для сериализации форм с рекурсивным обходом вложенных shadow root. проблема № 3: изоляция затрагивает также и элемент form если кнопка в форме находится внутри shadow root, отправлять форму она не сможет пример приводит в своей статье poul h hansen. одна из идей в рамках aom — атрибут, позволяющий явно указывать id элементов, к которым необходим доступ извне что-то вроде атрибута expopas, который доступен для css shadow pas. решением может стать accessibility object model (aom) это целый набор экспериментальных api, которые пока находятся в разработке подробнее можно почитать в статье léonie watson. о том, как эта проблема проявляется на практике, написал devon govett из adobe он поделился выводами из своего эксперимента на тему использования хуков react aria внутри веб-компонентов. проблема № 2: изоляция shadow dom создает преграду для связей по id в итоге aria-атрибуты вроде aria-labelledby не работают для элементов, находящихся по разные стороны shadow root. к стабильной версии декларативный shadow dom еще не готов идет обсуждение рисков, связанных с xss и санитайзерами также пока неясно, что будет с декларативными кастомными элементами. видео с примером использования декларативного shadow dom для изоляции стилей недавно опубликовал вадим макеев. существует черновик api декларативного shadow dom, над которым работает mason freed из google реализация есть в chrome за флагом, недавно о ней вышла статья на. кроме того, это также означает проблемы с seo в качестве решения в google советуют renderon на базе puppeteer, который умеет отдавать роботам статику мои коллеги в vaadin его используют. проблема № 1: та же, что и для кастомных элементов — shadow dom не работает с выключенным js этот факт делает невозможными некоторые сценарии использования, прежде всего ssr. как и кастомные элементы, shadow dom имеет ряд ограничений, наиболее важные из которых обусловлены самим устройством api, реализованного в браузерах в том числе, природой изоляции. тред про ограничения shadow dom и связанные с ними проблемы. именно как раз следующий тред будет про изоляцию вообще всего (id, формы) кстати, с радио-кнопками был баг в safari. вопрос о shadow dom и csp в vaadin: на самом деле клиент java-фреймворка до сих пор использует gwt и поэтому там нужен и unsafe-eval но при этом бизнес-логика выполняется на сервере. верно, не совсем корректно выразился проблема скорее в нежелании команды chrome менять api. единственным механизмом темизации пока остаются кастомные css свойства cassondra robes из red hat предложила подход к их именованию, применяемый в библиотеке patternfly elements. изначально вместе с ::pa() предлагался также селектор ::theme() для решения проблемы темизации компонентов на данный момент он не реализован, идет обсуждение возможных альтернатив. вкратце, псевдоэлемент ::pa() позволяет переопределять стили отдельных элементов в shadow dom, имеющих атрибут pa — подобно тому, как это делает ::placeholder() для нативного input. не так давно (firefox 72, safari 131) появились css shadow pas на сегодняшний день это рекомендуемый способ кастомизации shadow dom о том, как он работает, у меня есть статья с примерами. при использовании кастомных элементов можно модифицировать стили с помощью наследования: класс-потомок переопределяет css родителя этот подход использовался в библиотеке elix. polymer и компоненты paper elements использовали механизм css-миксинов они так и не стали стандартом и не были реализованы в браузерах tab atkins в своем блоге объяснил, почему. долгое время кастомные свойства были единственным способом кастомизации в библиотеках веб-компонентов это было не так уж удобно: не делать же переменную для каждого css-свойства. о селекторах :host и :host() можно почитать на mdn и в учебнике ильи кантора замечу, что :host-context() есть только в chrome и, вероятно, будет удален из-за проблем с производительностью. кастомные свойства можно комбинировать с селектором :host() и устанавливать их значения в зависимости от атрибута на элементе это позволяет поддерживать разные темы или варианты. кастомные свойства (css-переменные) являются наследуемыми по умолчанию и тоже пересекают границы shadow dom если объявить свойство на html, оно будет доступно в любом shadow root. первое, о чем стоит помнить: наследуемые свойства (color, font-family и другие) на элементе с shadow root проникают внутрь, то есть каскад работает некоторые считают это поведение проблемой. еще один важный аспект shadow dom — кастомизация стилей при наличии изоляции это становится проблемой, поскольку некоторые стили надо переопределять небольшой тред на эту тему. думаю, postcss плагин мог бы помочь (не уверен, есть ли готовый плагин для этих целей) в sass использовать css-переменные можно, так делает, например, bootstrap. также рекомендую пример конфигурации webpack и style-loader для работы с shadow dom в проектах на react и vue, приведенный во второй части статьи дениса мишунова о frankenstein migration. пример реализации для react — библиотека cease, всего 30 строк и 500 байт без зависимостей советую заглянуть в ее документацию, там хорошо описаны подводные камни shadow dom. но черновики — вопрос будущего, а пока мы говорим об элементах style, добавление которых требует js стоит ли полагаться на такой подход? решайте сами, исходя из конкретных задач. рабочее название этого api — “css modules” хотя против него были возражения в связи с тем, что существует популярная библиотека с таким названием и могла бы возникнуть путаница. важен этот черновик тем, что является одной из ступенек на пути к cascading stylesheet module scripts в перспективе это возможность нативно импортировать стили из css-файлов в javascript. по инициативе разработчиков webkit идет обсуждение, каким образом устранить выявленные недостатки в этом api в связи с наличием двух разных позиций дискуссия затянулась. еще есть constructable stylesheets — эксперимент, реализованный только в chrome и по их замерам более производительный это api используется в lit-element с фолбеком на style для firefox и safari. современные браузеры кэшируют содержимое style, так что на производительность этот способ не влияет можно использовать и link rel=“stylesheet”, но так обычно не делают из-за fouc. размещать стили внутри shadow dom обычно рекомендуется с помощью элемента style для тех, кто придерживается строгих правил csp, это означает необходимость unsafe-inline. кроме изоляции стилей, shadow dom влияет и на то, каким образом они добавляются на страницу тред о том, что это значит на практике и каких улучшений стоит ждать в обозримом будущем. слоты и композицию обязательно обсудим в отдельном треде согласен, фича действительно уникальная. встраиваемые виджеты — действительно один из тех случаев, где изоляция оправдана кстати, не знал, что grammarly использует shadow dom еще его одно время использовал twitter. добавлю, что nicole sullivan из google уже зондирует почву на предмет альтернативной инкапсуляции на css media queries в поддержку высказался rich harris, известный критик shadow dom. подытожим: изоляция shadow dom предлагает решение одной из важных проблем css, но при этом приносит новые иногда его использование оправдано, но в целом этот подход не взлетел. в результате у material web components мы можем внутри shadow dom увидеть классы, именуемые по бэм (правда, это связано и с тем, что базовые стили подключаются из отдельного npm-пакета). с одной стороны, shadow dom позволяет забыть об именовании классов но, устраняя одну из причин появления css-методологий, изоляция не отменяет необходимости писать поддерживаемый код. что примечательно, такие вопросы задают не только новички то есть, причина не в отсутствии понимания принципов изоляции, а в желании сохранить удобные, устоявшиеся практики. раньше в слаке polymer регулярно звучал вопрос “как использовать bootstrap внутри shadow dom” (стоп, а нужна ли тогда изоляция?) сегодня тенденция поменялась: стали спрашивать про tailwind. изоляция исключает конфликты из-за имен классов, селекторов по id и тегам это полезно, но в реальных проектах регулярно возникает необходимость в сторонней библиотеке на css-классах. кстати, заглянуть внутрь input type=“range” или video можно не только в браузерах на основе chromium (галочка “show user agent shadow dom” в настройках devtools), но и в safari. это ключевой момент: изоляция shadow dom подобна той, которой обладают встроенные html-элементы о том, как это выглядит на практике, можно почитать в статье ire aderinokun. но повсеместное использование shadow dom чревато рядом последствий mattia astorino приводит хорошую аналогию: завернуть приложение в shadow root — все равно что поместить его в input. еще один момент: обычно, вне зависимости от выбранного способа инкапсуляции стилей, его принято строго придерживаться вряд ли имеет смысл смешивать в одном проекте несколько подходов. пример: если на странице есть reset, normalize или глобальные стили для box-sizing, внутри shadow root они не применятся это, впрочем, не столь важно при использовании компонентного подхода. в статье на web fundamentals есть фраза “shadow dom fixes css and dom” я бы сказал, все обстоит наоборот: он ломает некоторые привычные представления, требуя иначе структурировать код. в теории изоляция кажется полезной но как показала практика, в качестве универсального решения этот подход не работает (в том числе потому, что его реализация требует js, но не только). сразу определимся с терминами: инкапсуляция = стили компонента не протекают наружу изоляция = то же самое плюс отсутствие для внешних, глобальных стилей возможности проникнуть внутрь. “проторенной тропой” я называю способы инкапсуляции стилей, ставшие традиционными: бэм и другие методологии, css modules, css-in-js все это — варианты именования или генерации классов. этим летом я выступал на devpay russia с докладом “shadow dom: вдали от проторенных троп” тред отчасти написан по его мотивам. сегодняшняя тема — shadow dom, его возможности и ограничения начнем с треда о главной проблеме, которую shadow dom призван решить: глобальный неймспейс и отсутствие в css изоляции. на сегодня все завтра поговорим о shadow dom, о том, что значит его изоляция на практике и какие ограничения она накладывает. наконец, одно из недавних дополнений к стандарту — способность указывать aria-роли и поведение по умолчанию без использования атрибутов этот механизм появился в стабильном chrome 81. второй пример — кастомные псевдо-классы, доступные за флагом в chrome 79+ скорее всего они, как и кастомные css свойства, будут требовать префикс из двух дефисов, например my-element:--active. напоследок упомяну некоторые черновики новых api, которые в перспективе могут облегчить жизнь разработчикам кастомных элементов прежде всего, это механизм обработки фокуса. проект howto: components для решения проблем с порядком загрузки использует promise внутри connectedcallback как я понимаю, это единственный надежный способ. из комментариев: проблема № 6, связанная с жизненным циклом мне с ней сталкиваться не приходилось, но реализованное в браузерах поведение выглядит сложным и создает риски. в этом случае esbuild опционален и нужен только для typescript, из коробки там нативные es-модули без процессинга. иногда базовые классы специально отделяют от определений кастомных элементов и выносят в отдельные файлы без сайд-эффектов я следую этому принципу статья на эту тему:. суть прежде всего в поддержке es-модулей из коробки и гибкой системе плагинов (можно использовать плагины rollup) это не альтернатива jest, скорее замена karma. пробная реализация в виде миксина для lit-element есть в проекте open web components имеется ряд ограничений, в частности требование не определять используемые элементы глобально. решить эту проблему призван черновик scoped custom element registries, над которым работают представители google и salesforce сейчас идет обсуждение аспектов, связанных с shadow dom. проблема № 5: кастомные элементы регистрируются глобально в сочетании с невозможностью их переопределения это критично для больших проектов, разрабатываемых многими командами. проблема № 4: поскольку переопределять кастомные элементы нельзя, hot module replacement не работает есть полифилл, который патчит customelementsdefine и методы жизненного цикла. в vaadin мы обходим эту проблему с помощью pnpm там есть возможность гибкой настройки с помощью pnpmfilejs версии можно модифицировать в процессе установки в хуке readpackage. это одна из причин, почему polymer долго использовал bower: там плоское дерево и установить две версии одного пакета невозможно в npm нужно следить за версиями и надеяться на dedupe. проблема № 3: кастомный элемент с одним и тем же тегом можно определить только один раз это значит, что на странице нельзя использовать две версии одного компонента (будет exception). проблема № 2: кастомные элементы не имеют кросс-браузерной поддержки форм form associated custom elements api уже добавлено в стандарт, но реализовано только в chrome… here we go again. проблема № 1: кастомные элементы не работают с выключенным js это заметно ограничивает область их применения есть черновик декларативного синтаксиса, но пока в стадии наброска. в моем списке есть пробелы, требующие доработок и новых api в браузерах, но это еще полбеды на мой взгляд, более существенные проблемы проистекают из самой природы кастомных элементов. я обещал рассказать о не решенных проблемах кастомных элементов в этом треде перечислю основные из них. пример конфигурации web test runner и собственно тесты для кастомных элементов можно найти в моих проектах vanilla-colorful и vanilla-hamburger, о которых я рассказал в предыдущем треде. для тестирования компонентов на typescript в web test runner есть плагин на базе esbuild компиляция в esbuild занимает доли секунды и на длительность выполнения тестов почти не влияет. также в web test runner есть и экспериментальная поддержка тестирования скриншотами до сих пор мы использовали gemini, который уже не поддерживается и довольно медленный. почему переходим не на jest? во-первых, нам часто приходится дебажить edge cases в конкретном браузере кроме того, насколько я понимаю, jest из коробки не поддерживает es-модули. сейчас мы переходим на web test runner, который разрабатывает lars den bakker из ing он быстрый, поддерживает es-модули, позволяет запускать тесты в puppeteer, playwright и не только. раньше в экосистеме polymer был свой тест-раннер: web-component-tester необходимость в нем была обусловлена использованием html impos, позже появилась и поддержка es-модулей. в vaadin мы тестируем наши веб-компоненты в реальных браузерах это помогает обнаружить баги, которые воспроизводятся, например, только на ios или появляются в свежей версии chrome / firefox. пример конфига jest с использованием typescript для тестирования проекта на lit-element можно найти в темплейте hoverboard от gdg. перейдем к тестированию кастомные элементы можно тестировать с помощью jest с тех пор, как была добавлена их поддержка в jsdom 162 благодаря усилиям pierre-marie daus из salesforce. подробнее о том, как работают миксины в typescript, можно почитать в статье николая платонова кроме преимуществ, у этого паттерна есть недостатки и некоторые ограничения. поскольку кастомные элементы используют нативные классы, общая логика в них обычно выделяется в миксины по сути миксин — это функция, принимающая класс и возвращающая новый класс. еще можно типизировать кастомные события, которые используются элементом, для вывода типа eventdetail в addeventlistener на днях james garbutt опубликовал статью о том, как это сделать. можно было бы изобрести нечто вроде data-атрибутов проблема в том, что и с атрибутами этому соглашению многие не следуют. если вы используете react, нужно также добавить определение кастомного элемента в специальный интерфейс jsxintrinsicelements это позволяет описать поддерживаемые свойства и их типы. для начала о typescript прежде всего, кастомный элемент стоит добавить в интерфейс htmlelementtagnamemap это сделает его тип доступным в методах queryselector и documentcreateelement. тред о кастомных элементах на typescript и тестировании. переопределять нативные свойства можно мы в некоторых компонентах так делаем с tabindex (там, где нужно делегировать фокус внутрь shadow dom)не думаю, что это приведет к smooshgate, поскольку веб-компоненты не патчат прототип htmlelement. и в завершение треда — еще один чеклист от justin fagnani о том, как публиковать кастомные элементы в npm есть полезные советы о структуре пакетов, важные поля packagejson и так далее. в качестве более обзорного чтения советую gold standard checklist от jan miksovky, на чьи работы я часто ссылаюсь он содержит ряд требований к api веб-компонентов, доступности и многое другое. также на web fundamentals есть список best practices для кастомных элементов там достаточно подробно описаны атрибуты и свойства (и как при работе с ними избежать бесконечного цикла). некоторые из описанных приемов можно увидеть в проекте howto: components от авторов web fundamentals он не обновлялся три года, но до сих пор актуален — одно из преимуществ стандартов. еще один интересный прием — встроенный метод handleevent для обработчиков событий он позволяет обойтись без использования bind(this) или стрелочных функций в addeventlistener. насчет сравнения с “angular первых версий” — на самом деле, намного больше все это похоже на lit-element если точнее, его базовый класс updatingelement, который не требует lit-html. с помощью пары строк кода реализуем простейший асинхронный рендеринг этот подход (batch updates) позволяет обновлять dom один раз за микротаск при изменении нескольких свойств. свойство может быть установлено до того, как элемент связан с классом при этом геттер и сеттер будут затенены (shadowed) чтобы это исправить, вызываем сеттер в connectedcallback. в сеттерах свойств принято вызывать сайд-эффекты (например, обновлять dom) значения по умолчанию задаются в constructor, это позволяет переопределять их с помощью атрибутов. в этом примере я использую symbol, чтобы эмулировать приватное поле это полезно, поскольку иначе в автокомплите и браузерных devtools будет много лишнего подробнее в статье jan miksovsky:. как и стандартные html элементы, кастомный элемент может иметь атрибуты и свойства по умолчанию они не связаны между собой в качестве решения обычно используется пара геттер-сеттер. оба проекта написаны на typescript и покрыты тестами об этом, пожалуй, сделаю чуть позже отдельный тред а пока несколько слов о подходах, использованных при написании этих компонентов. второй мой проект — vanilla-hamburger: набор гамбургер-кнопок с разными анимациями, порт библиотеки hamburger-react в отличие от оригинала, под капотом использует button, а не div. подробнее можно узнать в 248 выпуске подкаста веб-стандарты, где мы с обсуждали наши колор-пикеры и сравнивали плюсы и минусы используемых подходов. от идеи до реализации прошло всего несколько дней замечу, что опыта разработки на react у меня нет исходный код react-colorful хорошо оформлен и снабжен комментариями, это очень помогло. так появился проект vanilla-colorful, порт колор-пикера react-colorful от (если пропустили его неделю, обязательно почитайте). итак, рассказываю о двух своих недавних пет-проектах это “клоны” react-компонентов, написанные на ванильных кастомных элементах без зависимостей вся эта история началась с твита:. по вышеуказанной причине в сообществе веб-компонентов принято публиковать в npm исходный код кастомных элементов в es2015 примеры, которые будут в этом треде, следуют этому правилу. решается эта проблема с помощью с помощью манки-патчинга htmlelement с добавлением вызова reflectconstruct в составе “официального” полифилла для этого есть отдельный скрипт. еще один момент: кастомные элементы требуют нативных es2015-классов это тоже своего рода зависимость es5-код, полученный с помощью babel, не будет работать с customelementsdefine. кроме “официального” полифилла от разработчиков google, был еще document-register-element от andrea giammarchi он использовался в angular и amp на данный момент deprecated и уже архивирован. правда, долгое время была одна неявная зависимость: полифилл его нужно было подключать на страницу отдельным скриптом, размер которого в среднем составлял 5-6 kb (min + gzip). кастомные элементы без зависимостей писали еще 5 лет назад, на “версии 0” вот, например, популярный в то время компонент роутера (и один из первых проектов на github, куда я контрибьютил). тред про кастомные элементы без зависимостей, с примерами из личного опыта и заодно немного о best practices. верно это то, о чем я вчера говорил в треде о framework-agnostic кстати, вот неплохой веб-компонент для выбора даты на stencil. о своем опыте применения этих знаний в написании кастомных элементов без зависимостей расскажу в следующем треде. если вы пишете на библиотеке — стоит понимать, как она работает в этом помогает чтение исходников и особенно тестов в свое время я изучал таким образом устройство polymer и lit-element. мне этот факт напоминает расхожую фразу: начнешь писать на чистом js — рано или поздно напишешь свой фреймворк что не обязательно плохо, ведь в процессе можно многому научиться. статья демонстрирует, что при использовании ванильных кастомных элементов размер бандла быстро разрастается, когда компонентов в приложении становится больше (в приведенном примере их 30). в этой статье перечислены более 40 способов написать один и тот же простой веб-компонент, с бенчмарками и сравнением размеров бандла в том числе, представлены и фреймворки. я бы выделил три основных типа библиотек:— основанные на классах (lit-element, fast),— основанные на функциях (haunted, atomico),— компиляторы (stencil, lwc, solid). библиотеки позволяют писать меньше бойлерплейт-кода и не думать о некоторых нюансах, но в чем-то и ограничивают некоторые из них скрывают нативные api, взамен предлагая собственные. когда-то у polymer был слоган “jquery для веб-компонентов” — то есть, набор костылей, потребность в которых со временем отпадет но годы идут, и что-то пока библиотек становится только больше. может быть и больше но да, строить приложение целиком на ванильных компонентах я бы не стал. пример: компонент рендерит dom один раз, в дальнейшем нужно обновлять только атрибуты или css-свойства я не вижу смысла для этого подключать библиотеку или фреймворк, даже “исчезающий”. но значит ли это, что библиотека / фреймворк нужны всегда? я так не думаю бывают случаи, где тащить лишние килобайты js вовсе не обязательно и вполне хватает нативных api на чистом js. в ответ на это сторонники фреймворков справедливо замечают, что одних только кастомных элементов в любом случае недостаточно: нужен “клей”, чтобы строить приложения на их основе. отсюда и вбросы вроде “web components will replace your framework” по-моему, от таких заголовков больше вреда, чем пользы увы, некоторые из сторонников веб-компонентов этим страдают. здесь мне видится некоторое столкновение интересов: фреймворки и кастомные элементы реализуют одну и ту же абстракцию компонентов, но разными путями и на разном уровне. об этом, в частности, говорит один из разделов документации react изложенная там позиция лишена критики в адрес веб-компонентов, но общий посыл очевиден: “скорее всего, вам это не нужно”. веб-компоненты эту задачу не решают от слова совсем они ничего не говорят нам о том, как и когда рендерить — они предлагают, что именно рендерить (кастомные html-элементы). для начала стоит определиться, какие задачи мы решаем в моем понимании, задача фреймворков — обновление представления при изменении данных ответ на вопросы, когда и как рендерить dom. так это выглядело на бумаге но на сегодняшний день реальность такова, что авторы фреймворков не видят смысла использовать api кастомных элементов например, об этом говорил evan you:. в комментариях к статье rob dodson заметил, что веб-компоненты — набор низкоуровневых примитивов библиотеки и фреймворки могли бы использовать их, чтобы изобретать меньше абстракций. в итоге возникает ассоциация кастомные элементы = библиотека” и закономерный вопрос: так ли полезен стандарт, если без библиотек все равно никуда? об этом однажды написал chris coyier. по моим наблюдениям, у статей о веб-компонентах есть общая проблема: библиотеки вроде lit-element и stencil упоминаются часто, а вот о ванильных кастомных элементах материалов куда меньше. первый тред на сегодня — о том, нужны ли кастомным элементам библиотеки и в каких случаях можно обойтись vanilla js. на этом на сегодня все завтра будет больше практических моментов из личного опыта еще поговорим о пока не решённых проблемах и, конечно же, обсудим некоторые из ваших пожеланий. напоследок упомяну еще и про такой феномен, как “html framework” (термин предложил paul bakaus из команды amp) пример подобного набора примитивов — numl от. плагины вроде swiper обычно требуют html с определенными классами или атрибутами кастомный элемент с shadow dom мог бы помочь сделать код чище, а api — более унифицированным. есть еще одна область, в которой потенциал кастомных элементов, на мой взгляд, далеко не раскрыт я имею в виду альтернативу jquery-плагинам для небольших сайтов вроде лендингов. в концепцию генераторов статики кастомные элементы тоже вписываются (они же сами — часть html) чаще других в этом смысле упоминают 11ty вот, например, статья от авторов. среди примеров могу назвать инструменты для cms от проекта hax (редакторы для drupal и wordpress) и joomla ui custom elements (частично на них построен интерфейс админки joomla 4). но этот пример — исключение чаще кастомные элементы используют там, где о выключенном js не заботятся это админки, дашборды, корпоративные порталы с формочками и табличками. кастомные элементы github (в частности, меню и модальный диалог) сохраняют часть функций при выключенном javascript благодаря использованию стандартного элемента details. разработчики github следуют идее прогрессивного улучшения и используют кастомные элементы без shadow dom об этом они рассказали в известной статье о выпиливании jquery. но вообще использовать shadow dom вместе с кастомными элементами не обязательно это независимые части стандарта, напрямую никак не связанные между собой. встраиваемые виджеты могли бы не засорять страницу своей разметкой, пряча ее за html-тегом также им пригодилась бы изоляция shadow dom, о котором мы еще поговорим. раньше точечному использованию веб-компонентов в проектах на другом стеке мешали проблемы с производительностью полифиллов нативная реализация делает такие сценарии возможными. к похожим юзкейсам я бы отнес микрофронтенды кастомные элементы упоминаются как один из элементов концепции, которую сформулировал michael geers на сайте. особенность “франкенштейн-миграции” в том, что кастомные элементы и shadow dom в данном случае — средство, а не цель если для проекта такой вариант оптимален, почему бы и нет?. интересный сценарий — инкрементальная миграция с помощью кастомных элементов этот подход описал денис мишунов в докладе я создал франкенштейна и статье в двух частях. все вышеперечисленное — примеры использования кастомных элементов для создания компонентов интерфейса это наиболее частый случай их применения, но не единственный. как размер бандла, так и производительность сильно зависит от реализации завтра коснусь темы библиотек подробнее. в vaadin мы используем кастомные элементы как фундамент для java-фреймворка, предыдущая версия которого была основана на gwt публичные api во многом удалось сохранить. при этом стек может быть любым: свой фреймворк (lwc от salesforce, ui5 от sap, fast от microsoft), набор библиотек вроде jquery и knockout (oracle jet), библиотека компонентов (sencha extwebcomponents). это скорее иллюстрация того, что технология понемногу перестает быть маргинальной пользоваться ей или нет, стоит решать в каждом конкретном случае исходя из поставленных задач. это как раз то, что я имел в виду под js-функциями, которые мы используем для таблицы с кучей колонок не слишком удобно. для разработки в энтерпрайзе кастомные элементы привлекательны возможностью постепенно модернизировать существующий стек технологий, избегая внешних зависимостей и vendor lock-in. возможно, поэтому некоторые компании поддерживают две реализации своей дизайн-системы — на react и на кастомных элементах: spectrum от adobe, carbon от ibm, patternfly от redhat. обращаю внимание на то, что с react все не так просто есть надежда, что полная совместимость появится в react 18. на самом деле, от фреймворков поддержка кастомных элементов требует определенных усилий набор тестов на совместимость можно найти на сайте custom elements everywhere. если стоит задача сделать api полностью декларативным (темплейты в html), то без помощи библиотек пока не обойтисьв vaadin-grid мы раньше использовали template из polymer, сейчас переходим на js-функции и директивы lit-html на их основе. причина роста популярности — у ряда крупных компаний есть запрос на framework-agnostic типичный юзкейс: библиотека компонентов, используемая в проектах на разных фреймворках. по данным chrome platform status, уровень использования достигает 10% показов страниц их методика подсчета и провалы на графике вызывают вопросы, но другой такой статистики я не встречал. на сегодняшний день кастомные элементы используют adobe, apple, esri, github, firefox, ibm, ing, internet archive, microsoft, nintendo, oracle, red hat, salesforce, sap, tencent, tesla, vmware. тред о применении кастомных элементов в 2020 с момента релиза firefox 63 прошло почти два года, в safari поддержка появилась еще раньше так что уже можно делать некоторые выводы. недавно стартовал проект community protocols, где обсуждаются идеи хелперов для веб-компонентов там есть issue на эту тему. нативного эквивалента нет элемент slot отвечает только за композицию элементов в domнасколько я понимаю vue scoped slots, они также решают проблему передачи данных в компоненты. спасибо за фидбек все эти темы обсудим обязательно. как раз в следующем треде поговорим о том, где сегодня используются кастомные элементы. но личным опытом разработки на bleeding edge я поделюсь позже если, конечно, веселые истории из серии “мыши плакали, кололись” и постмортем пожирания кактуса кому-то интересны. ряд компаний, включая и те, где мне довелось поработать, в свое время все же поверили в светлое будущее с компонентами на базе браузерных стандартов на чем в той или иной степени обожглись. да, к чести автора, он все-таки не категоричен но регулярно встречаются и более резкие высказывания. некоторые вообще называют веб-компоненты мертворожденной технологией но особенно я был удивлен, увидев их упоминание в одном ряду с flash (автор цитируемого твита — сторонник react). в итоге до сих пор бытует мнение, что custom elements и shadow dom — детище google, которое кроме продуктов этой компании (youtube, интерфейс chrome) якобы нигде не используется. но фальстарт, вызванный стремлением chrome “причинять добро” путем проталкивания сырых api, уже сыграл свою роль возник миф о том, что веб-компоненты медленные и бесполезные. angularjs использовал кастомные html-теги, но там была своя реализация насколько я знаю, нативные кастомные элементы появились в angular 2+ (в виде angular elements с версии 6). jan miksovsky, один из участников тех событий, написал статью с детальной хронологией и рассказал о том, как были разрешены ключевые противоречия в области shadow dom. в 2015 году разработчики браузеров смогли достичь компромисса основные недостатки были устранены, и в процессе обсуждений отсеялось многое из того, что оказалось лишним. впоследствии они сами это признали, lit-element во многом и стал следствием тех ошибок. в разное время над devrel в области веб-компонентов работали addy osmani, eric bidelman, rob dodson, monica dinculescu, mark dalgleish некоторые из них позже дистанцировались от этой темы. вместо того, чтобы сразу признать проблемы, некоторое время команда chrome делала хорошую мину при плохой игре ставка была высока, к тому времени были задействованы немалые ресурсы. веб-компоненты версии 0 были сложными, далекими от реальных проблем (таких, как стилизация select) и во всех браузерах кроме chrome требовали полифиллов, убивавших производительность. недостаткам ранней реализации, существовавшей только в chrome и впоследствии печально известной как “версия 0”, посвящен доклад tj vantoll “web components — what’s the catch?”. html impos вместе со спорными аспектами shadow dom оказались камнями преткновения, по вине которых веб-компоненты, доступные за флагом в firefox, дождались релиза лишь спустя годы. я ожидал несколько меньших процентов тех, кто уже использует в остальном, по-моему, цифры достаточно предсказуемые. в треде про polymer расскажу подробнее если вкратце, 4 года назад недостатки сильно перевешивали с тех пор изменилось многое. одна из причин негатива — вместе с полезными api, ставившими задачу объяснить устройство html, активно навязывались попытки радикально его переосмыслить прежде всего, html impos. так или иначе, за последние несколько лет веб-компоненты собрали, пусть и не без оснований, слишком много негатива и еще, по моим ощущениям, обросли рядом устоявшихся представлений. в обоих случаях речь идет о технологиях, продвигаемых google благодаря их, скажем так, агрессивной политике в этой сфере отношение к таким начинаниям часто неоднозначное. прежде всего, упоминания веб-компонентов ни в одном стандарте вы не найдете как и pwa, это зонтичный термин, под которым в разное время понимались разные черновики спецификаций. возможны, вы заметили, что до сих пор я избегал термина “веб-компоненты” думаю, тред на эту тему будет не лишним. да, на polymer (в google есть свой внутренний форк). самый простой способ потестить кастомные элементы — сайт есть примеры разных библиотек и vanilla js. в не нормативных разделах спецификации кастомных элементов можно найти ответы на вопросы “зачем”, “как” и “чего пока не хватает” отдельно советую пример элемента taco-button. кстати, вы любите читать спецификации? я обычно первым делом ищу в них разделы, отмеченные как “non-normative” там можно почерпнуть ценную информацию, не углубляясь в детали. часть этих улучшений и базовое для них api element internals уже добавлены в стандарт whatwg но в стабильных версиях браузеров этих дополнений пока нет (кое-что есть только в chrome). в перспективе браузеры предоставят разработчикам контроль над рядом аспектов, доступных нативным элементам: поддержка форм, обработка фокуса, псевдоклассы состояний. пока главный плюс — сама способность определять свои html-теги и назначать им поведение с помощью js это только первый шаг и он затянулся на годы, но заложил основу для следующих. автономные кастомные элементы сами по себе умеют немногое по сути это те же span, у которых есть жизненный цикл и которым не нужен mutation observer, чтобы отслеживать изменения атрибутов. использовать браузерные api, относительно которых не достигнут консенсус, я не советую так что дальше речь пойдет об автономных кастомных элементах, реализованных в chrome, safari и firefox. дело в том, что разработчики webkit принципиально отказались внедрять модифицированные встроенные элементы (customized builtin elements) с их позицией можно ознакомиться здесь. поддержка браузерами — кроме ie11 и старого edge многих наверняка смутит “paial suppo” в safari, сейчас объясню. это пока ознакомительный тред, о критике и недостатках поговорим отдельно по мере сил я постараюсь быть объективным. если слышите впервые, советую эту главу в учебнике ильи кантора она небольшая, но хорошо описывает api и некоторые тонкости. опрос: знакомы ли вы с кастомными элементами?. тема первого дня — кастомные элементы как в узком смысле (часть стандарта html), так и в широком (framework-agnostic подход к написанию компонентов и приложений на их основе). до vaadin работал в компании owox, где участвовал в поэтапной миграции приложения с polymer 05 на 10 застал все версии polymer и могу многое о нем рассказать (в том числе и о недостатках). в vaadin занимаюсь разработкой и поддержкой нашей библиотеки компонентов на polymer 2 и 3 (в будущем планируем перейти на lit-element) разработка ведется в open source:. темы недели:— кастомные элементы: все еще не торт?— shadow dom как средство изоляции— ванильные компоненты без зависимостей— разработка на es-модулях в браузере— библиотеки компонентов и open source. всем привет! с вами сергей куликов () работаю в vaadin, последние 4 года пишу на веб-компонентах. грустная история 😯. а что они изменили? это же просто другое представление старой функциональности. о, я не знал ) у меня просто нет ни штатовских, ни малазийских. на этом все спасибо вам, было веселодо вечера ещё готов отвечать на вопросы, ну и если что, пишите в личный аккаунтс вами был , подписывайтесь, ставьте лайки. не знаю, что за деревенька пиши если приедете. за 9 месяцев не встретился с проблемами такими =). ну, технически я живу вообще в 100 метрах от офиса и никуда не езжу, а скорее хожу. 😇 нет, в районе пляжа равай у нас тут офис, удобно не ездить далеко. есть, компания оплачивает частный детский сад/школуя не знаю, не задавался вопросом, можно ли тут жить всю жизнь. у нас корпоративная a plus. я не знаю. о, еще можете подписаться на телеграм-канал специальный. пишите вопросики, расскажу подробнее про отдельные аспекты жизни на райском острове. приятный бонус — билеты до бангкока по 60 баксов доехать до аэропорта и потом от аэропорта до дома стоит примерно столько же, кек. ну такое, я предпочитаю ничего инородного не вставлять в розетки в детстве однажды сунул мокрые пальцы во вскрытый выключатель, с тех пор уверен, что удар электричеством — не круто. в целом, жить на пхукете прикольно, но немного раздражает деревенскость хочется в город. на следующей неделе нужно будет съездть к ним, снять швы пока — это был лучший контакт со стоматологами в моей жизни. в четверг я закончил пить антибиотики, и уже в пятницу приехал удалять зуб операцию заняла около часа, больно не было вообще (кайф!), все ласковые и приветливые стоило 4000 бат (140 баксов). пару недель назад у меня очередной раз воспалилась восьмерка, я приехал в эту клинику, они сделали рентген-фото, посмотрели и посоветовали зуб удалить а пока дали обезболивающее и антибиотики (чтобы убить инфекцию, которая делала зубу больно) прием стоил 500 бат (15 баксов). в пятницу ездил удалять зуб мудрости это не входит в страховку, я должен был оплатить все сам, поэтому поехал не в ту лакшери-клинику, где обычно мы лечимся, а в небольшую частную стоматологию на районе. а вот с оплатой была беда — сумма за тот день была больше 500 баксов, такие траты страховая не одобряет без согласования я прождал их ответа в больничке почти 4 часа, оплатил из своего кармана и уехал домой деньги вернулись через неделю. мне показали два вида костылей, я выбрал одни и меня научили ими пользоваться — нарядили в специальную обвязку, чтобы если я начну падать, медсестра могла меня удержать и научили ходить по ровной поверхности, по лестнице, садиться и вставать. после наложения гипса отвезли в комнату восстановления — всякие беговые дорожки, тренажеры, небольшая лестница построена там люди восстанавливаются после травм. весь стафф был супер-вежливым, все хорошо говорили по английски по больнице меня катали на кресле. когда приехал с травмой в больничку, почувствовал себя в фильме — медбрат помог выйти из машины, усадил на кресло-каталку меня сразу опросили по небольшой анкете, завели карту и покатили к доктору потом рентген, снова доктор, наложили гипс — все заняло около 40 минут. правда довольно дорогая, но правильная страховка покрывает все кейсы в начале лета надорвал связку в лодыжке все лечение получилось около тысячи долларов, из своего кармана заплатил 10 баксов за дополнительный эластичный бинт (первый я испачкал чем-то). не так сильно относится к работе, но — тут очень хорошая медицина. интересно, что даже не привычная по форм-фактору клавиатура айпада без русских букв не вызывает проблем. ну, понятно, с русскими буквами клавиатуру тут достать нельзя я сначала очень волновался что будет супер-неудобно, но нет — быстро привык. по очевидными причинам в магазинах продаются компьютеры с тайскими буквами на клавиатуре чтобы купить компьютер только с английскими буквами — нужно специально заказывать его, я ждал почти месяц. во время сильного ветра иногда выключается даже свет после таких дней, в офисе обычно половина зарядок от ноутбуков сгорает, кек. интернет во время сильного дождя либо становится жутко медленным, либо полностью ломается. примерно половину года тут низкий сезон — не очень жарко и очень дождливо в целом кайф, но есть нюанс. зимой 2019 я жил месяц на кипре там британские вилки-розетки и это было довольно неудобно — приходилось использовать громоздкие переходники в доме их было мало, а покупать на месяц и выкидывать мне показалось глупо. ну чудо же! мечтаю, чтобы во всем мире применили эту тактику. все зарядки из россии работают, тостер с британской вилкой — работает, местная техника с китайскими вилками — работает. все время, что я тут живу, меня поражают розетки везде в таиланде делают розетки, которые понимают любые вилки. так уж получилось, что я живу в таиланде и тут есть пара особенностей, относящихся к работе. хуки — самое печальное что происходило с реактом ) а про вью не могу сказать. очень хорошая мысль. мне кажется, что в ts они де-факто появились можно отрицать это, но факт остаётся фактом — куча кода уже написана. дискуссионный вопрос как-то тут рассказывал, почему писать логику на фронтенд нормально не абстрагируясь от стм не хочется повторять, но можно найти полистав тот тред. прикольно, но снова не понял чем он отличается от nvm. вот те же мысли абсолютно. о, а я смотрел на него, но что-то не понял сути. конечно, прав я не хотел тебя обидеть, прости, если что. йее, все так. на мой взгляд, слишком стронг опинион — признак не самых развитых софт-скиллов а это действительно что-то плохоено я рад ошибаться в этом вопросе. у тебя очень стронг опинион. вот ещё советуют solid (. к своему стыду, ничего о нем не знаю, расскажешь в двух словах?. ок, ты прав спасибо. да. но после любого пет-проекта на любом из них, возвращаться к написанию логики внутри редакса — жуткая боль. стейт-менеджеры нового поколения — мой краш: ,  я совсем не специалист в стм, чтобы рассказывать о них подробно, послушайте лучше умных людей тут. другая интересная штука — это по сути способ писать веб-компоненты, а потом использовать их в приложениях на привычных js-фреймворках там вообще много интересного, но я пока не добрался до вдумчивого изучения. меня последнее время очень прет , вот тут делился первыми впечатлениями — если вы не пробовали его, то попробуйте он правда прикольный. это касалось тулинга вокруг разработки теперь давайте обсудим библиотеки, которые помогают строить приложения проще, надежнее, быстрее. факт, да. я без побъеба спросил =)я слежу за фронтендами где-то с 2013 наверно, плюс минусесли ты хочешь правда обсудить — класс, но если просто хочется показать какое фронтенд гавно — мне не хочется, сорян. примерно так дата приходит строкой и потом становится датой. пока этот проект совсем сырой (намного сырее первых трёх), но пощупать уже можно. rslint ( — это как eslint, только быстро меня очень утомляет долгий линтинг большого проекта на ci, а тут все будет быстро. следующая интересная штука, это замена nvm, снова написанная на rust — fnm ( в нем я вижу чуть меньше смысла, чем в предыдущих двух, версию ноды мы все-таки меняем не так часто, как собираем проект. потому что текущий мейнстрим не справляется с требованиями бизнеса ¯\_(ツ)_/¯. конечно, в нем пока сильно меньше возможностей ( но для многих проектов они и ненужны. другое интересное решение, связанное со сборкой проекта swc ( — это компилятор js/ts, написанный на rust он быстрее бабеля в 20 раз. выглядит как очень поверхностный взгляд, если честно скажи, ты разрабатываешь фронтенды? это сообщение выглядит как впечатление человека, который находится в плену стереотипов. не, в моем понимании развитие — это новые идеи, это новых подходы и какие-то серьезные улучшения (быстрее, проще, дешевле, вот эвер). расшифруй, пожалуйста, мысль. кто-нибудь использует esbuild для продакшна?. я пока не пробовал его в бою, только на небольших демо-проектах, но выглядит он впечатляюще. сейчас набирает популярность esbuild ( — это бандлер js написанный на go и он прямо блейзинг фаст говорят в 10-100 раз быстрее чем классические сборщики. и с этим ничего не поделать — медленно, долго вероятно, эту проблему нельзя решить с помощью js-тулинга. ну правда же очень медленно один из моих рабочих проектов на топовом macbook pro 13 собирается 160 секунд а на моем прошлом компьютере собирался почти 10 минут. помните статью про то что фронтенды собираются неадекватно долго?. я, если честно, не верю, что одна из них станет популярной в обозримом будущем, но, мне кажется, что на их основе вырастет что-то очень клевое лет через 5. вебпак 5 не принёс ничего кардинально нового, реакт 17 вообще вышел из фич мейнстримовый фронтенд стагнирует и не развивается поэтому давайте поговорим о странных, экспериментальных или просто непривычных технологиях. все вокруг шутят, что в мире фронтенда новый фреймворк появляется каждую неделю штош, было бы здорово, но основные технологии стагнируют уже много лет. меня все еще мучает зуб (вернее, его отсутствие), но давайте я кратенько расскажу про новые странные веяния фронтендов. мы используем class-transformer, чтобы превращать ответы сервера в умные модели в одном приложении. или в class-validator, class-transformer. а тебе не кажется, что в условном nest они смотрятся довольно гармонично?. что думаете о декораторах в js/ts?. ох, сочувствую 😥. на этом все, простите, но челюсть болит так, что даже сериал смотреть тяжело, не то что писать что-то осмысленно. и тогда же привык смотреть что вообще на зависимость которую я ставлю, читать ее исходные тексты и смотреть, что по факту прилетает в бандл потом это помогло мне избежать гигантского числа проблем. с тех пор я топлю за то, чтобы библиотеки все поставлялись в виде максимально современного js, а я бы уже сам решил до какой версии их бабелить. оказалось, что одна из библиотек поставлялась в современном js, и мы не бабелили ее, конечно исправили быстро, но было неприятно. в консоли сообщение, что const — это не понятно логично, да. делал приложение, которое должно было поддерживать не самые свежие браузеры (типо ie11) и после очередного релиза оно начало валиться прямо сразу, до белого экрана. после следующего факапа я приучил себя читать исходный код используемой библиотеки 😝. я думаю, просто сканируют интернет на предмет торчащих баз. но, все закончилось плюс-минус хорошо, базу восстановили из бекапа и кажется, заказчик не имел претензий и, даже, похоже что похититель никуда не выложил украденные данные. это, пожалуй, был самый страшный факап в моей жизни. в логах были странные сообщения — схема базы не соответствовала представляем приложения о схеме я зашёл в базу, а там одна таблица readme, в которой одна строчка — сообщение, что база похищена и требования выкупа в биткоинах. а потом обнаружилось, что на сайте сломалось все — на клиенте любой запрос заканчивался ошибкой 500. но чтобы залезть туда со своего компьютера, я ее высовывал наружу и в однин прекрасный момент забыл спрятать обратно 🤪. база была в контейнере на сервере и в нормальной жизни вообще не торчала наружу — доступ до неё был только внутри локальной сети на сервере. как-то раз я делал сайт, и из-за криворукости переодически приходилось лазить руками в базу, чтобы исправить какие-то проблемки. и руки из жопы 😇. мы не знали, что проблема в базе ) просто нагрузка выросла. мммм, мы с тобой вместе над этим проектом не работали ). забавно, что два бага в сумме дали корректно работающую программу и проблему мы заметили только из-за нагрузки на процессор (фильтровались миллионы записей на каждый запрос). я очень долго искал проблему, пока не понял, что криво написал запрос через typeorm, я получал все записи (не только для конкретного пользователя) а потом, уже в другом месте приложения лишние случайно отфильтровывались. однажды я делал небольшой бекенд на nodejs, в нем был запрос на получение всех записей пользователя через пару недель работы в продакшене нагрузка на сервера начала заметно расти, почему — не понятно. любопытно, что потом, через 5 лет я встретил сайт, который делала серьёзная студия с такой же проблемой это вообще популярная уязвимость. кстати, никто не заметил, сайт проработал пару лет, контора закрылась, все хорошо. соответсвенно, достаточно было угадать имя таблицы с пользователям и можно было вписать туда нового пользователя с админскими правами отправив в куке sql-запрос. самый старый и самый скучный я когда-то делал сайты на php за небольшие деньги, и на одном из них была самописная админка в ней была очень тупая уязвимость — из куки читалось значение и оно отправлялось в sql запрос без экранирования. мне кажется, что надувать щеки и показывать какой ты классный, никогда не факапишь и вообще молодец — глупо все ошибаются, кто-то больше, кто-то меньшеошибаться нормально, главное учиться на ошибках и не косячить два раза одинаково. я бы рассказал, но у меня совсем нет с этим опыта как-то повезло все время работать с классными и интересными. у меня одна такая тянется уже почти месяц сегодня планировал закончить, но случился сик-лив. я помню было такое событие, факап-найт там собирались программисты и делились факапами мне кажется это очень классной идеей. кстати, прямо сейчас читаю эту книжку, в пишу конспект. и я хочу, чтобы вы выбрали тему на день я могу рассказать про свои факапы (для которых уже истёк срок нда), или рассказать какие интересные технологии связанные с фронтенд-разработкой появляются прямо сейчас. пятничная задачка — это что-то веселое, экспериментальное, полезное для продукта и приятное для разработчика поэтому я подготовил две темы, которые кмк и веселые и полезные. пятница — самый нерабочий день из рабочих в нашей команде в пятницу принято делать особенные — пятничные — задачки. сори, если задело я выбрал такую стратегию ведения этой недели =). во, еще одно взвешенное мнение про книжки, лайк. всегда можно сменить команду, или сменить чувакау нас тоже есть почти эрланг-программиста, эликсир-программисты, но ничего, не безумцы. да стаж и положение вообще не аргумент это какая-то фигня из университетских времен. ладно, кажется, я пережил стоматологические штуки только говорить не получается здорово, что можно писать в твиттер. да, факт книжки просто так витать абсолютно бессмысленно. хз, кажется, когда устаёшь, это не повод так себя вести. я по умолчанию считаю всех людей нормальными, просто некоторые не умеют общатьсяда, чувак сразу был чутка оффенсив, но это со всяким бывает оказалось, что он совсем дурачок, ну, не повезло, что сделаешь. очень кек. я вчера показал вам книжки которые советует этот чувак теперь я ещё больше не уверен, что к его советам стоит прислушиваться но вы сами смотрите. если это такая пост ирония, то здорово 😌 но верстку то правдо поебло. результат работы выражения ) почитай репку, там есть примеры. чтобы можно было «вернуть» результат из любого блока кода. мне тоже нравится этот пропазал. со всяким бывает ). о, кстати type-driven development у меня в списке для чтения. я предупреждал что сегодня день странненького джаваскрипта ). в дополнение к треду про книжки чувак принёс свой список не могу ручаться за его адекватность правда, не читал. ну ладно, это тоже вариант 😺. класс, то есть мы уже почти подобрались к моменту, когда ты посоветуешь какие книги нужно читать вместо тех, что я выложил в треде расскажешь?. да я вообще не настоящий сварщик, поэтому и в аналоги не умею, это правдая просто не вижу никакой лестницы это типо дерево такое, можешь туда качаться, можешь сюда и зачем устраивать какое-то измерение, кто круче, кто настоящий художник и все такое — я не понимаю. а что если в propscolor лежит строка white? вот этот кейс придется еще обработать выше. мне кажется, ты зря противопоставляешь написание кода и чтение книг одно другому не мешает ведь. угу, это правда можно в конце еще || поставить, но уже сложновато получается. я не понял аналогии но, на мой взгляд, если лид работает «надзирателем» — это плохой лид да и программиста я бы больше с плотником сравнил чем с художником. кстати, кмк, это почти всегда лучше switch/case. тру-стори. интересно, а почему ты считаешь лидов клиническим случаем программиста?. тоже возможно я встречал много разработчиков, которые за 10 лет написали много разного кода, но программировать так и не научились нет универсальных рецептов. я больше придерживаюсь все таки позиции, что читать книжки полезно если не делать из них культа. интересная мысль со стороны практики💁‍♂️. если бы нам надо было декодить видео - я согласен что тут нормально и на клиент что-то положить, но условную логику корзины выносить на клиент - такое себе :). это была уже трансформация меня: мне всегда казалось что на бекенде как и на мобилах тоже json перекладывают :) а тут и связи и там логика интересная и там, огонь!. самое крутое: после кучи итераций именно бекенд стал источником правды и там стало настолько интересно что я в какой-то момент захотел сам что-то там попрограммиовать :). бекенд начал лучше понимать боли фронтов и уже сам предлагать чего бы ещё можно вынести к ним. что поменялось: самое главное, уменьшился ttm и релизы стали происходить ради новых фич, а не для тюнинга старых. казалось бы, простые и очевидные действия но структура проекта начала поразительным образом меняться. второе с чем мы начали работать это максимальное «сужение» клиентов мы начали все-все-все что можно выносить на бекенд и если можно где-то заложиться и вынести на сервер, то выносим. первое что я сделал, установил правило «на чьей стороне фиксим баги», где почти всегда мы начали решать не в пользу бекенда, потому что его можно доставить за 5 минут. конечно, со стороны всегда все кажется понятным, но в жизни мы всегда натыкаемся на какие-то грабли :). выяснилось, что для того чтобы добавить пару строчек нам нужно примерно 2 недели и перевыпуск приложения нужно было что-то менять. казалось бы, ничего не страшного, но этот день всегда наступает: приходит клиент и говорит что срочно нужно что-то добавить. что было: логика максимально вынесена на клиент, очень много «зашитых» моментов, например тексты ошибок или порядок экранов там где можно это не делать. давайте расскажу какие произошли трансформации в одном из проектов с точки зрения взаимодействия всех частей когда на проект пришёл я и отнял бразды у бекендера. по нашим наблюдениям - чуть ли не в 2 раза но конечно надо понимать что во вью немного проще вход, поэтому если смотреть чисто по срезу рынка может казаться что и в 4 :). несмотря на то что технологии разные, языки разные и (под) команды немного разные, их всех объединяет несколько общих вещей: таски в трекере, единая модель ветвления (gitflow) и одинаковый для всех процесс доставки (везде автодеплой). теперь про бекенд, если про python набросить обычно нечего, то про php обычно много шутят и воротят носы :) но всё-таки выяснилось, что если быть немного инженером и подходить к проектированию с головой - то он даже очень ок. сейчас расскажу про фронт, а потом перейдём к самому страшному: php на бекендевариантов у нас было немного, либо react либо vue, очень быстро оценив рынок выбрали второе найти человека на react - ну ооочень дорого. с мобильной частью все просто: андроид я пишу либо сам либо просто знаю что происходит, с flutter перед затаскиваем его в компанию я тоже достаточно подробно разобрался и мы сделали предварительно пару мелких приложений чтобы понять где зайдет, а где нет. да, все что показывается в браузере у нас на vue js. обычно это вот так:1 php (laravel) + vue js + flutter либо 2 python (django) + vue js + flutter 3 либо вместо flutter это android и редко android + ios. давайте прежде чем расскажу про стек, скажу пару слов про саму компанию мы аутсорс, но клиент как правило не диктует нам чего использовать, поэтому у нас есть небольшая свобода в этом плане. план будет примерно такой:1 какой вообще у нас стек и в чем из этого я понимаю 2 как меняется взаимодействие разных частей проекта, когда лид «фронтовик» 3 найм людей4 правда ли нужно разбираться во всем 5 как развивать команду 6 разгрузочный день. всем привет! я тимлид в кросс-функциональной команде, но больше известен по android crew за эту неделю я постараюсь это исправить рассказом о том как управлять командой в которой нет твоего стека совсем. #рекламаприглашаем на бесплатный демо-урок онлайн-курса «пишем flutter-приложение с использованием redux»: узнайте, готовы ли вы к обучению на курсе — пройдите тест на знание платформы:. и пожалуй я всё надо отдыхать скоро уже будет новая неделя и новый авторне забываем упоминать если что-то пишите в моих потокахда с ником я где-то накосячил когда аккаунт создавал конечно. дельные комментарии я не фанат идей алана кея, но согласен с тем, что написал автор. твиттер вообще странный. как не работает 🤔 уже несколько людей меня нашли в телеге. пишите в личку мне лучше в телеграм сразу там уже обсудить детали можно будет. однако 🤔 а вроде цифры с потолка брал а порядок цифр получился похожий на правду. у вас есть все шансы. конечно берём нобелевскую делим на 10-50лет (скок там времени учёные думают?) и получаем зп. странно может в резюме чего не того - не описана мотивация и желаниепопробуй завести github страничку и начать выкладывать свои куски кода которые пишешь. не боятся ходить по сообеседованиям и получить отказ походишь поймёшь, что спрашивают изучишьрано или поздно найдёшь куда возьмут но не советую задерживаться в компании если нет наставника :). персонально только внутри компании а так репетиторство времени много отъедает было конечно пару раз, но там попросили сильно. были в цфт, тензоре на 10-15 человек кое где ещё приглашали что-нибудь рассказать людям которые 30+ пошли в итна платные не разу не ходил пару раз приглашали, но не срослось может и к лучшему - не люблю платное образование. ну и кто еще не ответил, можно высказать свое мнение о этой недели :)а я закругляюсь буду еще отвечать на ваши вопросы, но больше никаких потоков не будет. в процессе работы когда учил, этого еще не понимал, но и в процессе работы я стараюсь всякие лекции проводитьа вот когда начал преподавать на курсах, то осознал :). ну и на последок, небольшой такой милипусенький намек :)я ищу в команду 1 джуна/мидла и 1 сеньора круто есть есть опыт avfoundationинтересных задач полно есть задачи тянущие на хороший диплом, а то и нобелевку кто близок по духу и мыслям. микро история ооп:. про армию:. про логирование:. правила для улучшения качества кода/ про хороший код:. как я провожу собеседования сейчас:. про swiftpm. моя архитектура чуть древнее tassta, но которая есть в открытом виде, на небольшом но приближенном к реальности проекте. tassta:общее: меня:. тензор: что совсем не удалось:. потоки про архитектуру до мобилы: мобильное:. поток про мою библиотеку ditranquillity:. 10 задачек на алгоритмы которые мне приходилось решать:. поток про мою финансовую безграмотность, и про то, что не стоит идти против своих принципов:. поток, про потоки :) ну точнее просто тут будет собрано, что я интересного писал за неделю. так пора закругляться надеюсь кроме кучи холивара/пригорания, я принес кому-нибудь что-нибудь полезное :)пойду собирать все норм темы в одно место. это отличное описание к тому, что такое хороший модуль/класс/метод - чем меньше вы удивляетесь при попытке его понять/прочитать, тем лучше этот модуль/класс/метод. ну и еще одна интересная чтука, которую я люблю рассказывать вместе с абстрагированием:принцип наименьшего удивления - абстракция должна охватывать все поведение объекта, но не больше и не меньше, и не привносить сюрпризов или побочных эффектов, лежащих в нее сферы применимости. 6 никогда не забывайте про инкапсуляцию - делайте ваши классы максимально закрытыми да получилось слегка сумбурно но я не планировал это рассказывать - я такое больше люблю устно рассказывать. 5 в 90 годах параллелизм тоже был чем-то новым сейчас эта наша реальность задумайтесь над определением свойство системы, отличающее активные объекты от пассивныхя это определение очень долго не мог понять, но в нем есть какая-то магия :). кстати посмотрите на swift - там убрали слово protected apple как-бы намекает - к черту наследование, используйте модульность да и бесполезность public + open без модулей, тоже намекает на это. 4 когда-то модульность это было что-то новое и крутое, сейчас это наша реальности - не стоит от нее бежать - это лишь еще один уровень в вашей иерархией над классом. 1 скорей всего ооп еще будет меняться2 выражайте свои намерения более четко и ясно - а то будет как с аланом кей - имел одно, все поняли другое3 иерархичность - это то, что должно быть присуще вашей ооп программе а наследование и полиморфизм только частные случаи. потом в приблизительно 2010 годах кто-то создает новое понятие ооп и как-то его вписывает в массытеперь к выводам из всей этой микро истории, которую обычно я рассказываю больше часа :d. дальше гради буч выдвигает своё мнения о ооп, которые записаны в книге ооад это около 90 годов скорей всего это мнение он взял из того, что витало тот момент в воздухеи пишется язык java под этот ооп. так это краткий экскурс в теории а теперь все-же к истории, и выводамтермин ооп ввел алан кей имея ввиду smalltalk 1972 год js программисты радуйтесь - ваш язык истинный ооп и там была основа в посыле сообщенийкто-то говорит, что язык simula67 тоже был ооп. полиморфизм это - свойство системы, позволяющее использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объектакстати полиморфизмов бывает много, и разных вики в помощь короче это не только слово override :). давайте рассмотрим и их два мы уже смотрели вышенаследование это - свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. а современных принципов, то ли 4 то ли 3:полиморфизм, наследование, инкапсуляция и еще иногда добавляют абстрагированиеи тут самое интересное - скок бы я не искал, везде пишут эти принципы, но ни где не пишут откуда и когда они взялись. вот быстро 7 принципов они написаны в книжке гради буча объектно ориентированный анализ и дизайн можете почитать - интересное чтивозачем я их тут написал? об этом попозже, давайте посмотрим на современные принципы ооп. сохраняемость – способность объекта существовать во времени, переживая порождающий его процесс, и (или) в пространстве, перемещаясь из своего первоначального адресного пространства. типизация – это способ защититься от использования объектов одного класса вместо другого, или по крайней мере управлять таким использованиемпараллелизм – это свойство, отличающее активные объекты от пассивных. иерархия: это упорядочивание абстракций, расположение их по уровнямиерархичность - ооп программы должны образовывать иерархию :). инкапсуляцию уже разбиралимодульность: это свойство системы, которая была разложена на внутренне связанные, но слабо связанные между собой модули модуль сильно связан внутри и слабо связан во вне. давайте быстро:абстрагирование - процесс при котором мы выделяем абстракции абстракция фокусируется на существенных с точки зрения наблюдателя характеристиках объектаи это одна из самых сложных задач в ооп - правильно выделить абстракции. но интересно, что в университете нам преподавали именно эти принципы ооп хотя на тот момент уже актуально было другое пониманиеа сами принципы такие:абстрагирование, инкапсуляция, модульность, иерархичность + типизация, параллелизм, сохраняемость. ладно идем дальше тут быстренько разобрались а теперь java программисты - вы в курсе что язык java соответствует 7 принципам ооп? думаю многие даже не в курсе, что был виток развития ооп где было 7 принципов, и java язык который был сделан по ним. мне нравится очень такое определение инкапсуляции - это объединение и сокрытие данных просто, лаконичнокстати не представляю как можно писать на ооп не используя этот принцип :). после обучения спокойно, по началу было тяжеловато например сейчас я добрался до macbook с его клавой - пишу без проблем а мак вообще с немецкой клавой - нет ни английских ни русских символов :). обмен сообщениями где-то позабыли по дороге, и теперь в ооп такого понятия нет алан кей кстати об этом сильно сожалеет, что его поняли не верноно хоть инкапсуляцию поняли - один из принципов которые и по сей день актуален. ооп для меня означает лишь обмен сообщениями, локальное сохранение, и защита, и скрытие состояния, и крайне позднее связываниеи условно говоря, он говорил, что ооп это: обмен сообщениями и инкапсуляция тут все это подробней:. интересней всего, что думал/говорил алан кей в те времена да он придумал термин объект но его идея ооп была не в этом, а в передаче данных вот одни из его слов:. но на всякий случай повторимся ооп - это, методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования. как говорится вначале было слово, ну точнее до ооп было :) термин ооп ввел алан кей, в 1970х годах, для языка smalltalk но многие считают, что первым языком был все-же simula67на всякий случай повторим, что же такое ооп, конечно это можно и в интернете найти:. правильный ответ на опрос ты серьезно? и опечатку я совершил случайно, но когда увидел решил оставить подвох был в том, что я не уточнил в какое время то нужно считать сколько было принциповудивлен, что кто-то ответил 7 - видимо есть еще люди знающие историю. ладно начнем тему истории оопсразу оговорюсь - я не считаю это чем-то важным для программиста, но и бесполезным тоже не считаютак-как твиттер не то мест, где можно много написать, то пройдусь по важным моментам тольконачнем с опроса:. тож верно. работает - отлично в обратную сторонуя частично понимаю такие команды - сидит сеньор, а там баг: кнопку перекрасить ну чё я лох такое делать что-ли? вон джуна найму, он за неделю перекрасит а потом и модуль напишет за год а сеньор может даже не ревьювить от лени идеально. ну сбер самая такая вообще я в цфт поссорился с лидом команда из-за этого 25 человек на 100к строчек кода, и экранов чтук 30 типичная ошибка - денег много значит и команду можно побольше, в где ты найдешь на рынке сток сеньоров? нигде поэтому возьмем кучу джуном слабых. ну команда сбера это скорее показатель как люди не знающие всего этого справляют с проблемами - нанимают кучу людей так как решить проблем не могутне могут из-за не понимания всего выше перечисленногов мифический человеко месяц отлично описана ситуация команды сбера. слова одиночки где-то в первые лет 5 программирования я тоже так думал и даже писал достаточно хорошо и даже в универе думал - и зачем мне это а потом начал работать в команде и мнение резко изменилосьибо ну я вот тут фигню поменял, а ту сделал что-то не понимают. если вы не пользуетесь инкапсуляцией в ооп программах, то мне не о чем с вами говорить. они интересных в двух моментах:1 сами принципы полезны для понимания - помогают лучше писать код2 история у них прикольная но знать сколько их, или помнить наизусть определения на самом деле не важный факт. а вы бычтро отвечаете на не серьёзные вопросы :)но я прежде чем попаду домой не начну писать историю - устал уже с телефона писать. доктор принимал в течении года не помогло может есть что-то сильнее?. а тьфу блин я подумал глаз и забыл, что сканировать можно разное. вопрос с подвохом на затравочку перед следующей темойсколько признаков ооп?ps подвох в формулировке вопроса. ну у нас офицер играл в танки wot поэтому служащие тоже играли в танки начали с его аккаунт - фармили емукак-то кто-то свай принёс в итоге один человек траванулся офицер вначале отпоил его, а потом отпоролиногда голодали в полях по 2-3 дня. ну что было ещё в армии? да много чего мне один раз прилетело автоматом по голове благо реакция спасла - закрылся рукойшутки про гнутые автоматы - правда автоматы все стреляют рандомноесли вы знаете ит - лучше молчать а то будете документу печатать, и в excel сидеть. короче не забываемые эмоции а на улице был ноль и дождик грязь я после этого с радостью играл в гонки героя - детский лепет по сравнению с тем :). но думаю объяснять, что когда мы доехали ожидать, что будет связь было наивно 10км провода скрученного из кусковсадим человека - едем обратно ищем обрывы - раз в 500 метров прозваниваем провод и держим его в руках чтобы не потерять. дальше едем - полевка вечно выпадает из машины на кочках постоянно останавливаемся и ищем еёна очередной остановке и поисках я чуть себя не разрезал - полевка была натянута как струна на уровне шеи и так метров 200 натяжки такой. и начинаем тянуть первый фейл - ров офицер решил проскочить как переднее колесо пролетело чудом, но заднее нетпобежали к соседям куда-то вон туда, искать бтрбтр то и лагерь нашли машину искали дольше. чтобы понять надо там было быть: ночь надо провести 10км полёвки - это тонкий кабель для связи на котором слон сможет повеситься, выдержитза руль машины садиться офицер вы с двумя мотками этой полёвки взаде с открытой дверью. внутри я уже отправил когда понял ошибку. ну тут уже скрыть не удалось служащему влетело по полнойпотом этот бтр до базы везли, и офицерам была головная боль - как начальству доложить подобное?. тотже! служащий взорвал бтр новый полгода назад сделанкак было: холм, бтр застрял, бежит капитан с криками - глуши мотор {мат} и тут бах мотор взорвался пробил корпуссо слов служащих: водитель - тут стрелка в красной зоне 11к оборотовкапитан - прорвёмся, жми. я не помню, что сделал служащий, но его заставили бегать по полям с лопатой за место автомата и каждый раз когда он видит офицера, он должен был падать на землю брать автомат/лопату и кричать тратата ржали всей частью над ним. следующий случай ещё одна машина - антенна полностью выносная 18 метров когда её ставишь гемор в том, что она падает - надо аккуратно растяжки кидатьтак вот, она упала приземлилась около майора почти по носу прошло благо майор был спокойный. а да вообще я ездил на вот такой машинке обычно командир тот кто вон сверху тусится - его задача поднимать чёртову антену которая вечно застревает. ух как же я тогда наделал в штаны но старослужащие без палева смотри сделать так, что никто об этом не узнал :). эта антена поднимается из нутрии - там рычаг который надо крутить он застрял, я решил помочь ногой и тут такой: бум, бум, бум, бабах в общем перестарался порвал трос внутри - металлический толщиной в 3 пальца. а веселье началось после учебки в боевой части вот тут и начались байки начнём с начала на первой недели я сломал бтр - точнее сломал антену 12 метровую у негона фотке которая торчит. вначале я учился в учебе пол года там было почти скучно - снег кидали на дорогу, потом с дорогину пожалуй самое весёлое это люди переболевшие по 3 раза ветрянкой за пол годано жили мы на болоте/торфе весной стало жарко - ну чтож тушить палками горящий лес возможно. так был я в войсках связи сейчас я сержант - это три полоски являюсь командиром командно штабной машины в мои задачи входит поддержание связи со штабом для капитанов во время движения и в поле. у котлина есть свои библиотеки сейчас уже (math например свой) но по факту большую часть приходится брать из java массовов своих вроде вообще нет. потихоньку переходим к армиии сразу ответ - идти туда не стоит исключение: если вы не способны за собой даже смыть в общественном туалете, то вам стоит вот таких личностей там быстро воспитывают. у нас классы и структуры очень по разному сделаны у структур нет ссылок как таковыхколлекции все это структуры у них закон copy on write - копируются при изменении но тут компилятор умный играет роль - и копирует не всё подряд всегда :). я к нему как к react native отношусь - когда-то был бум, а потом все забыли. нет их можно преобразовать к таковым без проблем, но это две разные реализациивообще swift пошло другим путем - новый полностью язык, и возможности конвертировать к старому obj-c b варианту. swift:let a = [1,2,3,4]var a = [1,2,3,4]kotlin:val a = arrayof(1, 2, 3, 4)val a = mutablelistof(1, 2, 3, 4)помойму array нету мутирующего в котлине. у них нет своей реализации массива/словаря и вроде строкиа то что есть это наследие 1991 годов ещё. я мечтатель и жду, что сделают что-то подобное всеже в мире - будет уже возможность сделать связку разных языков безшовно формально это возможно - мы все завязаны на ассемблер (которых тоже много ), но технически сложноподобное должно перевернуть ит. да сложно но я погружался в swift например тоже есть минусы - string у нас что-то переусложненное конечно редко надо со строкой делать что-то сложное, но когда надо это боль. в swift это всё скрыто - ты не паришься, что выбрать: linkedlist или arraylist или mutablelist в swift массив/словарь/множество это часть языка, с отличным синтаксисом в kotlin это библиотеки из java. в том, что для apple это очень не типично :). тут microsoft показатель кстати - их dot net (clr) который объединяет 3+ языка безшовно это круто с++, с#, f#, и какие-то ещё. а пока кроссплатформу все делают как один язык, она не станет популярнойс++ с точки зрения кроссплатформы хорош во всём, кроме как того, что это с++а как бы здорово было - пишешь на высокоуровневом языке и сразу этот код используешь в ios/kotlin. а кроссплатформа в мобиле если честно я верю в чудо - появление чего-то, что станет пригоднымитут я считаю должно произойти несколько важных вещей:1 поддержка нативных языков по платформам2 единый общий язык для бизнес логики3 простая интеграция со всем. + apple сделали важный шаг - открыли язык это в перспективе времени, должно положительно сказаться на язык. а так да - если сканировать радужку, то должно быть надёжнее но пока это никто не делает, и думаю не просто так. радужку кто-то сканировал? вот это я в мобилах не видел 🤔 помойму в мини устройства впихнуть такое сложно чтобы прям качественно просканировало. по тех возможностям не догоняют сильно у них это чуть лучше камеры получается обычной faceid же чем хорош - обхитрить нельзя почти я думаю hello сейчас может фоткой и не обхитрить, но скорей всего обойти+ это чтука с большой блямбой :). о языки я верю в swift больше чем в kotlin он прогрессивный - они не начали тащить наследие, а сделали новыйу котлина есть интересные хорошие решения, но наследие джавы сильно видно ну например вот эти всякие arraylist linkedlist - ну зачем оно в современном языке?. чёрт а я наделялся на спор что может я не знаю просто аналогов приблизившихся к face id. в перспективе 10 лет мне кажется должны уже придумать замену смартфонами, вытеснить наврятли но по софту должно начаться понижение спроса - ну должен же рынок когда-нибудь насытиться же но про насыщение это скорее мечта, чем что-то основанное на фактах. посмотрим надеюсь решат - они могутfaceid очень качественная технология без аналогов в мобиле и по сей день. по софту ближайших 5 лет мне кажется мобильная разработка будет дальше деградировать - увеличиваться спрос на продукты, программистов а значит большие зп и меньшие требованияциклы моноприложения/много приложений продолжат быть циклами. по прогнозам многих аналитиков большой шанс в этом году и все сходятся, что не позже 2022 а эти ребята не так часто косячат :). по ближайшим технологиям что-то интересное я больше пока не вижув актуальность гибкого дисплея не верю возможно где-то будет актуален, но точно не массовопочему мне интересны очки? я жду виртуальные мониторы - рано или поздно технологии должны позволить. и они изменять наш ui/ux и думаю намного больше чем появление часовскорей всего спрос на ar технологии вырастет после не только у apple и люди чаще начнут взаимодействовать с миром через ar. первая моя надежда на ближайшие два года - появление iglass и я верю, что apple сделаю то, что нужно рынку возможно захватит мир только 2/3 поколение, но apple не должны накосячить тут. теперь поговорим про прогнозы на 5-10 летначнём с главного - я не пытаюсь делать прогнозы даже на 2 года, слишком всё меняетсяпоэтому этот поток надо назвать мои мечты о будущем чем реальные прогнозы. думаю что мне сейчас будет легко - так-как умею на обычной клавиатуре но обучаться сразу на такой не уверен, что был бы хороший вариантно опыта тут нет, может и обучаться можно было бы сразу с неё. да я рассматривал подобные варианты но тогда я не смогу писать за чужим компом вообще а мне это приходится делать частеньконо иногда думаю, что стоит такую чтуку попробовать :). на этот момент я забросил это дело 250 решил нормальнопосле 2 раза возвращался и поднимал скорость среднюю - вначале до 300, потом до 350 с пиковой 400на 350 остановился - дальше стало уже тяжело поднимать, и меня пока устраивает. по достижению 200+ начал часто играть в режиме без ошибок чтобы снизить процент скорость в этом режиме составляла около 140 при этомно зато в итоге дало скачек - количество ошибок заметно упало (до 3%), и скорость около 250. при этом на работе я печатал как повезёт яб назвал это так два пальца с редко появляющимися соседями где-то к моменту когда я начал 180-200 писать, только тогда я решил и на работе попробовать писать 10 пальцами. где-то до 120 символов я быстро достаточно нагнал скорость но ошибок было 10% почтидальше - задротсво пару и более часов в день тратил на клавагонкигде-то ещё за месяц вернуть себе 180 символов в минуту но с ошибками. из ошибок обучения: я почти не тратил время на каждый палец отдельно, а сразу пошёл в бойв общем вначале моя скорость упала до 40-50 символов печатал я с визуальной клавиатурой которая показывает какой палец и букву нужно нажать сейчас. клавиатура как я считаю помогла сильно - на ней двумя пальцами стало писать не возможно, и начал переучиватьсяруки на ней лежат сразу как надо и пальцы попадают куда надо оставалось освоить. но самый главный шаг, это было купить удобную клавиатуру, и желательно такую, чтобы было сложно писать не правильновыбрал я вот такое чудо: microsoft ergonomic keyboard 4000и по сей день пользуюсь этой серией клавиатур. для переучивания я нашел сайт клавагонки там красивенько, соревновательный момент, ачивки, постоянный онлайн людей в общем можно повеселиться и весело проводить времясайт и по сей день жив. а теперь как я учился поскольку начинал я в гипсе (на левой руке) то клавиатуру я сразу освоил криво и писал около 7 лет по итогу такая двумя пальцами быстро тыкая - 180 символов в минуту но в какой-то момент понял - надо переучиваться, так дело не пойдет. собственно говоря ради этого и нужен 10 пальцевых набор - чтобы максимально быстро и максимально не задумываясь о клавиатуре его записатьэкономия ресурсов мозга получается значительнойps тоже самое и к перемещению по коду/проекту. первый мини поток - 10 пальцевая печатьвначале зачем? я будучи коммерческими разработчиком писал двумя пальцами вначале, и мне не мешало но я решил переучиться всежемотивация одна: пока я напишу код, я уже забуду, что я писал. ну, тут не поспоришь да ленивый программист может и общую логику записать только в метод нажатия и даже вызвать его и может вызвать по другому жесту метод который совсем не подходит по названиюно подобные не совпадения сразу мозолят глаз хотябы :). и чтобы результат опроса, не мучал следующего автора, напишу его сразу вначале днякак вам неделя?. в общем меня это правило спасает от ошибок обидных - когда дописываешь код, часто же не думая это делаешь - не будешь же всю логика класса изучать ради одного метода? и рефакторить не будут ради одной мелочи часто. 1 такое часто2 читаемость - ответственность поделена: метод делает то, что делает - он обрабатывает нажатие/жест он так и называется а внутри действие код читается: по нажатию сделать то-тои найти подписку на жест в коде бывает не тривиально - записей много разных. ну с учётом как мы пишем код, то я бы смело называл всех мобильщиков так. доброе утро/день ого история ооп отогнала армию даже начну сегодня с нескольких вопросов:1 как я осваивал 10 пальцевую печать2 мой прогноз мобилы на 5-10 летдальше:3 история ооп и/или армия4 прощания :). ну можно и сразу повеситьа потом проблема (видел часто) - одно действие начинает выполняться по двум причинам используют этот один методпотом по одному действий добавляют логику присущую только ему но никто не будет создавать новый метод и рефакторить ради мелочи ;). хороший вопрос внизу хорошая ссылка но, я пытаюсь придумать как сделать аналог tagged но без rawvalue или появление чего-то типо typedefа так пока только внимательность - типы сверить можно иногда в структуру оборачиваю если совсем критично. а кто ещё как называет? может в книжке какой было кстати это 🤔. российский мобильный да при этом он ещё и дорогой но всё это не удивительно:1 инженеры не сильно хотят быть в россии2 спрос большой, а тех кто может обеспечить мало как итог зп больше - людей больше я уже видел ситуацию где из-за этого команды сильно разбухали. кстати напомню я начинал в гипсе писать и потом избавиться от привычке набором одним пальцем мне пришлось сложно а слепая печать даже полезнее умения перемещаться по проекту - всеже буквы мы пишем чаще :). о появился в уведомлениях я придерживаюсь того же мнения - колбасить по клавишам и перемещаться по проекту мы должны быстро, и не думая - а то забудем основную мысль. вот так фильмы поменяют понятия. то есть ты только, что сказал, что я крут был 5 лет назад? ну так просто полистай список раз все эти вопросы есть, то по твоё теории я всё это знаю а там на секундочку и все стандартные вопросы на ios есть ;)ну хз, хз спасибо за похвалу. и напоминаю, что завтра тема свободная можете предлагать темыа то мне тут напомнили один вопрос который я так и не задал (вроде) история оопа то решу завтра её ещё рассказать думаю это не то, что вы хотите услышать?. что-то я тут вспомнил одну притчу из фильма опасная игра слоу фильм прикольный, и притча подходит под недавние все споры :). вы просто не предоставляете наскок история ооп интересная и полезнаяно этот вопрос на собеседованиях, я не задавала так мой косяк - я зря думал, что читают последовательно - видят вопросы и сразу писать не прочитав, что же это. ответ хорош прям шикарен тут зачёт надо знать, что умеет твой языкно все же, что делать бедной половине насиления страны у кого нет подобного?. вопрос яндекса (мне задавали) не разу не пригодилось , но ситуацию где это важно представить могу:есть массив float совершенно случайные числакак сложить их так, чтобы была максимальная точность?. золотые слова. 🤔. завтра самый сложный день: надо как-то всё, что я понаписал объединить а так кто что хочет услышать? предлагайте в комментарияха пока всё думают, я воспользуюсь положением кто ещё не поставил звёздочку моей библиотеке?. ну дык тут как с джуном поговоришь так не только в штаны наложишь. не ну это то да лего хорошо а вот подгузники почему-то в том же магазине не изменились за 5 лет. не, они посчитаю сколько ты с какой силой, а ещё и наверное даже авто определение с кем было. лучше я тебе не буду говорить но уже есть штуки которые это за тебя посчитают. инфляция инфляция случайно зашёл в детский отдел для маленьких памперсы как стоили 5 лет назад так и стоят вообще цена не измениласьвот где стабильность так стабильность это я так - а то только технические темы :). ну как так вышло, это не ко мне - это к истории как будто это единственная странность в программировании связано вроде бы как со скоростью сложения и реализацией сложения на процессорах но могу ошибаться. да америку я не открываю :) большая часть описана в разных подобных книжках многие из них в своё время читал. хороший тред я нейминг пытаться раскрывать боюсь это что-то такое абстрактное, но капец какое важноено скажу про язык - я перешёл на swift с obj-c и с++, потому-что тут не надо думать о многой фигне - времени на что-то важное больше в частности на нейминг. да всегда есть ситуации на которых правило ломается иногда действие и без доп имени можно понять без проблем по кодуно если действие делает что-то не шаблонное, то всеже лучше описать что оно делает выделив в методps всегда можно коммент написать :). это становиться актуально например когда кнопка может быть заблокирована по куче разных причин - не введен логин, пароль, нет сети, не прошло верификациии лучше куча флажков на каждую причину с методом update, чем в каждом месте отдельно блочить/разблокировать. 14 странное правило слегка, ну да ладно :) если у вас есть состояние, то сделайте так, чтобы его изменение было только из одного места, ну или из разных, но близко расположенных друг к другу. 13 не бойтесь однострочных методов обычно это касается подписок на нажатие кнопки, событиечаще всего такие методы безымянные или аля taponbuttonне стоит в них делать действиялучше выделить отдельный метод с названием, что он делает, и вызвать его. ну к сожалению нет ios13 уже было на тот момент :) но да было бы круто - ios не поддерживает видео. 12 актуально для swift/kotlin - константа лучше переменной лучше стараться минимизировать количество переменныхвообще у этого правила корни растут из фп - эти языки не имеют проблем с потоками в силу отсутствия состояний :)но избежать совсем переменных сложно. 11 мы не пишем на с98 года, нам не нужно располагать объявления переменных в самом начале функции поэтому и не надо это было в какой-то книжке - куски кода должны быть максимально сцеплены если переменная объявлена, то она должна почти сразу быть использована. вон прошлые разрабы вообще поверили в магию и решили, что ios12 просто не поддерживает видео я как это услышал, у меня был культурный шок главное же заказчики поверили по итогу в это. сам процессор вообще крут - он оба формата поддерживает но заранее сказать какой используется нельзя вроде везде littleendian, но никто не гарантируеткак думаете не зная этого, я бы через скок лет поправил баг?а так заняло пару часов на то, чтобы найти косяк. тупо во всём коде вначале ставлю одно окончание - не работает потом другое - и о чудо работает и на ios12 и на ios13 почему на ios12 этом устройстве было не стандартный порядок я хз, но и apple нигде не гарантирует его. начинаем разбираться такое дебажить крайне сложно - особенно в чужом коде, и когда тебе просто массивы байт идутно я замечаю (по старой памяти/интуиция), что ни где явно не указан порядок ожидаемых байт в числах. но самое интересное то, как мне это говорят: прошлые ios ребята сказали, что ниже ios12 система не поддерживаетнаходим код там available стоит на ios13 и выше убираемпроверяем - о чёрт реально на ios12 единственном устройстве в компании оно не работает. и так прихожу на проект не буду скрывать - tassta тут есть видео звонки понятное дело есть формат обмена данными, и это массив байтно суть в другом в какой-то момент я узнаю: оказывается видео звонки не работают на ios12 я такой? ладно ок посмотрим. ну в общем вы поняли краткий экскурс как это обычно бывает, когда люди не знают азов сталкиваются не с типичным багамиа теперь то что бывает в совсем уж особых случаях история реальная:. вы радостно считываете четыре байта и преобразует в число это у нас делается легкоа потом баги - где-то всё ок, а где-то полная ахинея смотрите в дебаге - а приходит реально не то число идёте ругнуться со второй стороной, та тоже в шоке тем временем багу уже месяц. к чему это приводит? дают тебе блютус устройство, или сокет соединение - или что угодно где массив байт идёт в чистом виде и говорят: мы вам тут отправляем 4 числа uint32 (тут ещё стоит заметить, могут отправить и uint16, но не сказать ). все устройства в этом мире между собой обмениваются массивами байт/бит но вот беда - договориться в каком виде на всех устройства будет запись числа мир ещё не смогв итоге где-то uint16 со значением 15 = 00000000_00001111а где-то = 00001111_0000000вот такое чудо. внутри одного байта все биты всегда идут в одном порядке - справа младший разряд слева старший а вот байты можно переставлять - у кого-то справа старший байт у кого-то слеватак и появляется два типа записи: bigendian и littleendian. и так bigendian и littleendian относиться - о чудо к записи числа как всем известно у нас в памяти идут битики 01001011 :) 8 битиков это один байт (но не везде 8) но число обычно занимает не один байт, а 4 или 8. возвращаемся к этой теме из около 10 проектов где я был в 4 мне понадобилось это знание, и в 3 я правил баг связанный с этимвначале что это такое вообще, а потом одна самая прикольная история на это. получаем в итоге что это уже не ошибка ui, а ошибка бизнес логикиа это уже критичнеевот так за 20 минут было поправлено две разных ошибки - отсутствие обновление ui + косяк в бизнес логикепоследняя возможно в будущем бы стрельнула, а может нета ui просто не приятная. ага, ок как воспроизвести удалось да это всё заняло 5 минутно проблема то по факту оказывается не в том, что кнопка не блочиться (это тоже поправил), а в том - а чего данные то чистятся?. проверяем: вводим не верные данные, получаем ошибку, и ничеготут смотрим логи, там запись ещё - логин пароль почистилсяа у нас есть опциональная функция - не сохранять данные если ты залогинился то есть все данные чиститятся. тестирование пропустило - не заметило да и если запустить, то всё хорошо - ввожу кнопка активно, удаляю не активнаидём в логи: в логах видно, что это всегда второй вход а первый вход отсекается из-за неверных данных. и так срабатывает ассерт: пользователь пробует войти в систему с незаполненными полями логин или парольпочему проблема? ну кнопка должна блокироваться по идее, если нет данныхно не критичная - сервер то проверит. перед этим важная информация в проекте я использую крашлитикс и конечно же логи настроена на неёболее того логи уровня asse и error прилетаю в крашлитикс как nonfatal, и говорят мне - где-то есть проблемы, не приводящие к крашу. я бы хотел написать потоки зачем вам логи? и как пользоваться логами?, но у меня не хватит временипоэтому расскажу просто случай, недавний пока ещё помню:. 3 но инструмент при правильном использовании решает две проблемы:а дебаг в многопоточной среде - бывает, что остановка программы влияет на её исполнениеб дебаг в случае если устройство далеко, а баг только на нём в ковид особенно актуально. 2 логи это не панацея если вы не понимаете зачем они вам, и их ценности, то лучше не надо это инструмент как и дебагер, или профайл - это один из инструментов доступный всем. ну просто из-за того, что половинчатые логи, могут дать ложную информацию - по логам проблема была в одном, а в реальности она была в другом, просто там не было логов. а теперь самое интересное - я считаю, что ассерт должен попадать в логи релиза я считаю, что это важная информация, если у клиента произошел ассертну а дальше про логи1 логирование это привычка - если ей не обладает вся команда, то логи вас не сильно спасут. написание ассертов позволяет избежать будущих проблем, когда ошибка долга остаётся не замеченной пока не выстрелит а выстреливают обычно сильноэто первый звоночек, что стоит проверить код возможно вы не правильно используете функцию. её мы используем, когда мы хотим сообщить себе/другим программистам, что что-то пошло не так - чаще всего какие-то данные отличаются от тех, что планировались но код должен нормально продолжать работать при этом. asse - функция которая нужна для программистов и отсекается в дебаге может иметь ещё названия: precondition, postcondition но суть у них однас ней стоит быть аккуратней - нельзя в ней писать код, который что-то может изменитьа то в дебаге работает, в релизе нет :). и тут я открываю ещё один поток, связанный с хорошим кодом, и дебагом хороший код должно быть легко дебажить - ибо мы точно в наших условиях написания кода допустим баги и не всегда есть доступ к устройствуда тред про логи, но начнём с asse. 10 должно было быть вначале пошло ещё из с++ и null проверять входные аргументы можно и возвращаемые даже :)ну если вы ожидаете год создания машины, то лучше проверить, что число всеже больше 1800 а пункт просто для перехода на другую/продолжение тему - в новом потоке. хз может мне так везёт, но на 3 проектах из порядка 10 из-за не знания этой вещи были баги про баг в тассте я ещё расскажу - ибо там не просто баг/краш, там вообще функционал важный на ios 12 вырезали и убедили всех, что он не работает. 9 правило влияющее на читаемость: не пишем полотна сплошного кода ну 1-2 пустых строки редко навредятно и делить через каждые 5 строк не лучшее решение лучше выделяйте, логические мини блоки возможно суть блока будет понятна только вам, но это лучше полотна :). 8 просто правило которому я следую - написали функцию принимающую completion callback, пересмотри эту функцию на 100 раз и убедись, что во всех даже невозможных случаях callback вызывается а то потом куча мата и часов в дебаге обеспечено. всегда располагаете их максимально близко особенно при вызове мой любимый пример:staactivityindicator()calllongoperation(callback: {  stopactivityindicator()  тут потерять парность почти невозможно а дальше думаю все вспомнят случаи когда парность терялась в коде. 7 парные операции sta/stop begin/end, add/remove subscribe/unsubscribe и тдну во первых всегда стоит задуматься - а не пригодиться ли пара в будущем если есть шанс, лучше завести - чтобы в будущем не паритьсяно не это важное:. зачем? ну во первых никто не знает когда этот тип поменяется - например на uuidво вторых когда у вас в коде одни int как id, можно случайно передать id чужого объекта и не заметить этого :). 6 любому новому типу данных лучше сразу давать имя особенно если он будет использоваться в разных местах даже если этот тип intесть у вас id пользователя лучше сразу завести тип: userid = intтоже самое к ошибкам, callback и тд. так тоже можно но это зависит от вариантов реализацииpresenter будет получать свой кусок экземпляра view и его модифицироватьmapper будет обрабатывать данные, но главный presenter должен будет отвечать за прокидывание данных на вьюможно подходы объединять. есть у вас функция со switch - он на каждое действие что-то делает но где-то case вызывает другие функции, а где-то сразу исполняет это действие в 2-3 строкивот это разные уровни абстракции, и по возможности лучше избегать. 5 сложный пункт функции должны содержать код, только одного уровня абстракции не умею объяснять эту мысль :(пример такой:. главное при таком выделении ни в коем случае не выносить только по техническим признакам если выносим, то выносимой части нужна давать осмысленное имя не стоит: otherpresenter, privatepresenterможно: mapzonespresenter, mapcarafficpresenter. как делить класс? ну вот пишем мы presenter он уже 1к строк - ну реально большой экран с кучей всего в подобных случаях я вспоминаю агрегацию и иерархичность то есть выделяю мелкий функционал и выношу его в отдельный presenter, который используется внутри главного. да так и есть это тоже имел ввидуспасибо за уточнение. 4 тоже самое и с классами - но тут ещё сложнее вообще про функции, классы, модули, есть принцип srp - это всё к немук классами у меня правила простое - если начинает превышать 300+ строчек на swift (на obj-c лимит выше), то возможно начать делить. 3 функции как и переменные должны чётко означать, что они делают если в функции два действия, то и пишем так в названии, а ещё лучше делим функцию на двеправда тут сложнее - не всегда очевидно, когда одно действие, а когда несколько зависит с какой высоты смотреть :). эмм строку нет, а массивы то постоянно и не у всех всю жизнь была функция reverse в языкехотя вытаскивать какие-то данные из строки приходилось часто. 2 не переиспользовать переменную, если планирую туда записать другие по смыслу данные чаще всего это приводит к тому, что переменные нужны редко - чаще константаособенно это актуально с появлением filter, map и тд - лучше после операций не перезаписывать. начнём с банального:1 название переменных/констант должны в первую очередь говорить, что в них лежит у нас строгая типизация, поэтому упоминать тип переменной нам бессмысленно. хорошее описание яндекса мобилы. код может быть написан не читаемо, но он будет хорошим - его писали для разового использования, в ограниченное время, и не планировали даже что его кто-то увидитно это всё полемика мы же мобильные разработчики! - поэтому дальше, что я стараюсь делать в коде. о забыл важны пункт:5 код работает когда и где это нужно а то можно написать отличный код, но пока его напишешь, он уже никому не нужен будет :)то есть при оценке качества кода, стоит ещё знать условия в которых он делался. последний пункт особенно интересен - как бы мы не хотели, при написании кода стоит учитывать возможности ide если у вас нет дебагера в ide, то код напичканный print-ами хоть и менее читаемый (хотя зависит как логи писать), зато можно дебажить. в итоге хорошим кодом я называю код который:1 читаемый2 выполняет поставленную на него задачу3 легко модифицируется (не тоже самое, что читаемый)4 в коде/проекте легко ориентироваться и дебажить. кто-то говорит читаемый код но я считаю, что хороший код это больше чем читаемыйну вот пример: написали вы код он легко читается выдаёте верные результаты даже прошёл ревью но на реальных данных оказалось, что в из-за этого кода лаги у пользователей. изначально поток хотел назвать правила написания кода но решил, что звучит не очень, да и правилами это назвать не всегда можноно перед этим что такое хороший код?. сегодня я ещё обещал рассказать про хороший код буду писать, но медленнои так поток про хороший код:. я ещё пока жив/провожу ;). в этом примере если weak переменную поместить во внутрь цикла, то в autoreleasepool не добавиться - будет nil, nilхотя казалось бы - должно, мы же возвращаем из функции что-то откуда нам знать, где эта функция используется потом 🤔 но факт остаётся фактом - nil, nil. как правильно тут заметили, в некоторых ситуациях и на swift тоже приходится знать про autoreleasepool наследние obj-c приследует нас и по сей день :). да и вправду логично - что собрано сейчас может собраться с использованием новых фич и возможностей что собрано уже давно под obj-c - ну тут уже без вариантов :). так даже лучше ;). возможно поведение obj-c с тем что было раньше стало чуть отличаться помнится давно проверял и не удалялся но в силу давности сего, может быть это иллюзии в моей памяти. ну да - наследники nsobject в каких-то ситуациях будут жить в autorelease пуле но тут я слаб - когда и в каких случаях оно определяет запихнуть его или нет, не понятно с data постоянно же вроде работает, вроде бы nsdata это но чиститься. да если ты о том, что в первом примере за место [c new] написать туже функцию make, то у меня не сканало. первый, простой, я не смог скок не старался вроде и понимаю, что должно быть можно, но не получилось - нужны вложенностивторой (с циклом) при этом легко сделать nil, nil переместив одну всего строчку. почему на obj-c этот факт важен? из-за ситуаций когда на одном цикле, мы сами того не зная выделяем куча памяти и да у меня был случай когда были краши из-за этоготут я пожалуй скину статью - там лучше описано :). что это такое? autorelease добавляет объект в специальный autoreleasepool, из-за чего объект будет захвачен, до момента пока этот pool не почиститьсячиститься pool по достижению его конца в том случае окончанию одно цикла runloop - который где-то за пределами viewdidload. и вот тут и прикол - в реальном коде, почти всегда компилятор добавит autorelease к вашему объекту да когда код совсем простой, компилятор может быть умнее, и просто поставит retain + release - ему нет смысла усложнятьно стоит слегка усложнить код, и появляется autorelease. и теперь то вспоминаем историю obj-c вначале было mrc и было не две как многие могут думать команды: retain/release а еще был autoreleaseи когда obj-c перешло на arc, эти команды не исчезли - компилятор их стал расставлять сам, но они также остались. на всякий случай - если написать такой же цикл на swift - результат не изменится swift всегда остается логичным. а теперь посмотрим на этот вот пример внутри цикла написано тоже самое? создаем объект, делаем ссылку, зануляем его результат должен быть вроде эквивалентен прошлому?и тут мы видим другой ответ почему же так произошло?. теперь пишем код, в чистом виде на obj-c и тут тоже мы получаем тот-же результатпочему тут nil nil? причина в том, что компилятор не совсем глупый, и в простых кейсах умеет правильно расставлять retain/release без autoreleaseпочему же тут отвечают 50/50 ? смотрим ниже. начнем с простого тут у нас есть один объект, и две ссылки на него: слабая и сильнаязануляя сильную ссылку, у нас остается только слабая - то есть счетчик ссылок = ноль это сразу приводит к удалению объекта, что приводит к занулению weak ссылки. а пока про задачку с obj-c, swiftсо swift там все +- норм - большая часть ответили верноа вот мнения про obj-c расползлись сильно и на то есть важные причиныдальше все в ios среде - это не важно, но мы же мобильные разработчики :)на скринах в консоле верный ответ. ладно у всех кипит от вопросов досихпорсупер опрос:bigendian littleendian, что это?. 5 лет назад мобила была еще совсем не та наложим на это мою любовь с++, и получаем список вопросовеще наложим тот факт что я работал там, где у страиваются люди из ит без опыта как проверить студента вуза?а осознание смены компании и направления пришло поздно :(. доброе утро/деньсегодня у нас: про obj-c swift примеры, и что я не до сказалпосле чего-нибудь про хороший код что-нибудь, что в инете редко пишут, а не одну банальщину. как я писал все эти навыки отвечают скорее за твои умения как инженера, а не программиста в мобилеи вуз не знает кем ты будешь например с++ программистам под железо, без этого жить сложнокстати bigendian littleendian - бесполезны?. ну вот я также - раз я могу, значит и другие должны и потом с возрастом и опытом понимаешь - все разные, и второго такого как ты не найти как бы не хотелось. как говориться хочешь жить, умей крутитьсяраз прособеседовать крутого спеца это акция раз в год (а иногда попадаются), а люди нужны то проще уж найти того, кого сможешь обучить, чем искать того самого гения. хорошее замечание верноено нас в универе учили проектированию и шаблонам мы и после вуза это знали тогда я вообще считал это нормойсейчас уже знаю, что вроде программа то одна, но как-то преподают её везде по разному. не ну nil на null всеже стоит заменить когда переписываешь иначе мы совсем в другую метофизику уходим. есть у нас одна контора в нск известная всем от туда никого не берут к себе, кто там пробыл больше годано в других городах её не знают а в резюме: опыта 5 лет завершенный проектов 100+ куча ссылокв общем я перестал на это шибком смотреть - собедование покажет. самое смешное, в тензоре очень полезные знания по итогу оказалисьибо с возникновением c++ мало кто был способен работать одновременно и в с++ и в ios остальным базы не хватилоконечно по прошествию 5 лет я вижу, что вопросы оверкилл, но тогда этого не понимал. чудо твиттер расскажи, покажи мне, и ответь как мне ссылки сохранить на мои записи правильный ответ - ни как теперь понятно зачем нужен поток в воскресенье, с ретвитами всего интересного - ибо всё удобненько. завтра за одно расскажу про эти два вопроса точнее вопрос один, языка два :)верные ответы, и почему так (хотя swift вариант вроде и так большинство знают). приходи на собеседование, будет посложнее ;) выкладывать все козыри в твиттере ну так себепока можешь на второй ответить - тоже самое, но на obj-c чуть позже писал. конечно если человек разбирается как оно работает, он ответит но мало кто помнит уже, что же там было и главное в реальном коде, напороться на эту особенность сложно - то есть тут или читал внимательно доки, или нарвался на проблему случайно, или уже давно в ios. не, не достаточно в swift достаточно - у него нет наследия, всё логично в obj-c надо ещё историю знать ибо там есть некоторые интересные аспекты. но как по мне решать его лучше с арифметической прогрессией и суммой чисел как-то оно понятней xor я сам каждый раз втупляю на попытке доказать, что это работаетно я принимал и решение программерское - словарь или множество использовать. можно голосовать :). ну а тем кто считаем себя гуру ios с опытом теперь вопрос со звездочкой мысленно переписываем код, на аналогичный но теперь obj-c и какой будет верный ответ?. взять мой новосибирск три университета с ит: связи, нгту, нгу тот кто вылетел со второго+ курса нгу закончат с отличием нгтусвязь - не хочу никого обежать, но там ничему не учат и люди не учатся ибо не учатно все три вышки. про опыт: когда к тебе приходят люди с 1 годом знающие больше особенностей и багов ios, чем некоторые с 6+ опытом, ну грусно но шанс, что пригласят на собес у вторых больше :)образование - тут имелось ввиду ит/не итда и россия большая - вышка очень разная. проблема скорее в том, что такие вопросы никак не покажут тебя с точки зрения - можешь ты писать под мобилу или нетпроверить инженер или нет проверята инженеры предпочитаю faang, а не российский мобильной рыноккак итог - бесполезные вопросы, ибо редкость кто может ответить. в faang кстати вроде не спрашивают подобного там априори считают, что человек это знает а если окажется не так, то он на первом же тех собеседовании отвалится - ибо не зная азов, там не пройти на инженера. для студента ит поидее да - всё университетское я и сам то недавно был тогда студентомно для других специальностей им сложноя где-то кстати писал, что смотрел на образование и от этого менял тоже вопросы :). и я только щас понял, насколько сам того не понимая я делал крутоэтож такой офигенный заход был - люди видят вопросы думаю что за пздец, а потом их батц и спрашиваю нормально так - расскажите о своём опыте?жаль я раньше об этом не думал. там кстати по вон тем вопросам, от которых всех разрывает уже который час мало того что они были созданы 5 и более лет назад с оглядкой на с++, так они ещё были приблизительным спискомпо листочку я спрашивал первых 10 собеседований - когда ещё боялся этого дела. верно мыслите первое впечатление может быть обманчивым, и те кто могут себе позволить иногда его портят специальнооткуда вам знать, может то, что вы приняли за говно, оказалось замаскированным шоколадом? в итоге вы можете пропустить нереальный шанс, закрывшись. поздравляю - тебя возьмут в intel скорей всего или в apple возможновидно, что человек хоть учиться в универе, а не штаны просиживаеттак держать а то у всех уже пуканы от этих вопросов разорвало. ух надо было писать красными буквами вопросы 5 летней давности, а то все видят и думают не того, ибо до и после ещё не прочитали и писать: из листочка больше 6 редко задавал. так наймите личного шофёра и механика и денег меньше и хлопот меньшевсему молодеж учить надо, даже деньги тратить не знают как. блин заведи детей ну машину там купите желательно гоночную с расходом 40 литров на сотню и не качественную, чтобы ломалась марусю короче. заведи семью, она поможет в этом сложном деле. ну вот написал hr предположим а дальше - какая-то компаниям не вк, не яндекс - имени в сфере нет я думаю много кто отсечет даже не открыв описание компаниия вот когда мне сбер пишет всегда принципиально не отвечаю - не любовь к нему. складывается впечатление, что в современном мире разработчик вообще ничего не должен знать. может мне не везёт - работаю в компании о которой мало кто знает, как итог сильные ребята не идут собеседоваться 🤔😞. ну я не продалжал 😈 в прочем и не буду, а то все выучат ответы, а мне сиди новые придумывай вопросы потомтам дальше варианты на эту тему + структуру + closure всё в 10 строкособенно замыкания - в них часто ошибки в прочем если до замыканий отвечают верно, то и на них тоже. этому принципу нет равных я так любил его в детстве. чёрт там уже написали оказывается я тормоз. а какже kiss? это же самый важный принцип как ты живёшь без него :). тем временем процент верных ответов поражает - 75% почему на собеседованиях около 60% то выходит стресс? другой контингент?. спасибо и на этом :) и один раз не ну вы поняли не олимпиадник хоть и топлю за них. лайф хак от jonfir как запомнить синтаксис блоков не знаю кому это нужно, но малоли кто-то ещё пишет на obj-c :). не ну блоки obj-c корректно написать на листочке это не совсем базовый синтаксис всеже но читать то уж точно надо уметьхотя если знать с и указатели на функции, то ничего сложного в их синтаксисе не будетps благо я больше не пишу на obj-c - не любил этот язык. 0xff - 0xc0 = 0x3f = 3 * 16 + 15 = 63ну если я совсем не отупел за 5 лет в ios. реактивное программирование мне нравиться идея шикарная но пока от существующих реализаций (комбайн не пробовал), больше проблем чем пользы нужно быть очень дисциплинированным, чтобы не сделать спагетти из кодано некоторые идеи я использую из реактивщины. а тем временем я смотрю на тему завтрашнего дня и думаю кто меня тянул за язык токороче я хз, как я это буду рассказывать у меня тут есть наброски некоторыедаже думаю, чего-нибудь помощнее сморозить, и слинять - дальше вы и сами сможете :d. мне ушло сколько там 6+ лет чтобы осознать важную вещь: если я умею писать код на салфетке в столовой, который еще и потом соберется, это ну вообще не значит, что другие так могут и должны уметьps кстати в цфт был человек умеющий так я не одинок. ну и в качестве затравочки так сказать отвечать имеет смысл только swift разработчикам - java с gb совсем по другим правилам живет :)class c {  var str: string = a}var c: c? = c()weak var wc: c? = cc = nilprint(c?str ?? nil)print(wc?str ?? nil). как пример:человек фанат rxswift я нет ну не сможем мы работать в одной команде, хоть он трижды генийили человек любит все новое, не сидится ему на месте и смысл такого брать на продукт, который один с одними технологиями?. я не смогу объяснить процесс выбора для junior это интуиция которая мне говорит - научу его или нет ни разу не ошиблась, даже когда другие говорили не беридля middle/senior интуиция сработаемся или нет. и если вы думаете, что я дальше напишу, что-то типо: дальше я суммирую плюсики где ответил, а где нет, и если больше 10, то беру, если меньше не беру то огорчу - я не яндекс :)я даже могу в теории не взять человека, который на все ответил. ну я например подобные вопросы люблю не задаю, но если мне на собеседовании зададут, то буду радведь они часто показывают глубину знаний и владения языка да обычно такая глубина не нужна, но мне для библиотеки например нужна была, даже глубже чем эти все puzzlers. смысл задачки? их несколько:1 посмотреть как же человек пишет синтаксис языка2 посмотреть умение понимать требования у нас их тут не на золотом блюдечке приносят3 ну посмотреть всеже решение если с решение проблемы, то идею я подсказываю. последняя - задачка открывает leetcode берем секцию easy, из неё самое простое если человек хорошо идет, то могу дать и medium выше точно неттут я обычно настаиваю на playground-е, чтобы человек писал в родной среде. 2 случая из 300+ я кстати хотел написать, но блинбыл второй - еще до тензора но там человека я уговорил остаться, и он даже хорошо ответил. дальше для сеньор, или если секции предыдущие прошли слишком быстро, то спрашиваю вопросы из тех, что где-то в интернете лежат об iosэто mvc/mvp, solid, жц vc короче, ту теорию которую и так везде спрашиваютесли человек не сморозит ерись, то тут не задерживаемся. для junior наоборот секция иногда упрощается если сразу видно, что не ответит, то я вначале объясняю быстро, что да как, а потом смотрю на ответыконечно рассказать про очереди и async/sync быстро нельзя, но хоть что-то если человек смог это схватить, то круто. ну сказал ты именно так я точно помню человек сказал, что он не сможет ответить на эти вопросы и я уговаривал остаться попробоватьесли это было не так, то возможно всеже не со мной. спрашиваю я не так много - с чем имел дело (если человек работал с nsthread или posix, то это сразу +), и задаю пару примеров с dispatchqueue и async/sync - с ними работали все ну там такие из интернета, их можно даже найтиесли на сеньора, то чуть посложнее, из той же серии. и именно проблемы потоков невозможно отловить легко это плавающие баги они не правятся одной только информацией о его наличиипо этой самой причине на tassta я спрашиваю эту тему если бы у нас было идеальное rest апи выдающее сразу модели на показ, то не спрашивал бы этого. следующим идет многопоточность кто бы что не говорил, на ios постоянно много потоков а если приложение работает с аудио, видео, сокетами, то и вообще сущий адконечно можно жить в концепции двух потоков - главный/не главный, но будет лагать а сокеты и вообще терять данные. почему не сработаемся? эти все кейсы в реальном коде будут возникать, и приводить или к утечкам, или к крашам если я не способен объяснить человеку, значит наши типы мышления разные а значит на код ревью будут повторятся эти ошибки мне этого не нужно ему скорей всего тоже. ну значит поздравляю, да наверное это был я (если я не был в отпуске)поскольку за все время человек ушедший был один, то ну хз посмотрел на листочек, сказал - я не осилю, и ушел это тоже показатель типа личности кстати сдался не попробовав. такими темпами мы потихоньку смотрим на структуры, классы, closure в общем swiftbook первые главыесли человек неправильно отвечает, то я рассказываю причину его ошибки если после объяснений человек дальше делает подобные ошибки, значит мы точно не сработаемся. дальше идут разные варианты изменения кода (ну или если человек хорошо отвечает, то не идут) дабы убедится, что человек понимает работу arcи это же помогает понять - является ли для человека код магией, или же он контролирует ситуацию. извиняюсь за грубый ответ пятница устал. ide за тебя мысли в код преобразует? и код ревью проводит?я не сказал знания api/библиотек, я сказал знание синтаксиса если ты без ide не знаешь как пишется обычный for class struct let var и другие примиты, то я хз. по hh я в конце 17 года ушел из тензоратак что вы могли попасть или на меня, или уже на егора а возможно на виталия, но он другое спрашиваля только в новосибирске собеседовал, если город другой то точно нет. тех кто мыслит в слух собеседовать проще так как не надо париться, и угадывать - случайно от угадал ответ, или же понимает как оно работаетно а кто этого не делает, ну что-ж приходится частенько что-то уточнять. для этого я даю простой пример в 10 где-то строчек конечно он на проверку знаний arc - понять будет nil не nil напечатанно когда я его даю, я еще в голове замеряю время, сколько человек потратил на чтение кода также тут становится понятно - есть мышление в слух или нет. поняв как человек говорит о том, что должен знать, можно отталкиваться - это помогает определить - человек затормозил и нужна помощь, или же он всегда не любит говоритьпоэтому дальше можно начинать задавать вопросыследующее что я проверяю - знание синтаксиса swift. если человек, что-то не до рассказал, то я или спрошу про это, или вообще проигнорирую но забыл человек, что у структуры нельзя писать deinit - какая разница тоно если в рассказе есть серьезная ошибка, то тут все-же надо убедится, что он не оговорился. вначале я спрошу, что такое arc, отличие структур от классов - стандартные вопросыно, что будет отвечать человек не так важно (пока не допустит ошибки), чем как он это будет делатьэти вопросы для разогрева - я понимаю насколько человек умеет рассказывать. но так как люди идут все-же на ios и даже более того на swift, то это и является точкой с которой я начинаю собеседование учить основам языка? не это пожалуйста на курсы, тут все-же работать надо тоже. по этим самым причинам, на собеседования меня перестала интересовать теоретические знания актуальные в ios конечно если человек себя позиционирует как сеньор с кучей опыта, то грех не спросить, но с junior/middle спрашивать отличие mvp/mvc или паттерны - смысл?. на многие эти открытия, повлияло обучение других людей когда лучшие твои ученики оказываются те кто всю жизнь проработал в гуманитарии, и за год уже не хуже сеньора, начинаешь задумываться причем крупно так задумываться. что я осознал:1 знание шаблонов, архитектур, информатики - все это дело легко обучаемое, если человек мыслит верно2 мне не нужны гении - я ищу людей способных на быстрое обучение в направлении ит, в частности ios3 опыт вообще ничего не показывает4 образование не важно. возвращаемся к собеседованиям точнее к текущему формату собеседования, которое провожу якак я сказал - когда начал учить других, много проходил по собеседованиям, понял, что с подобными вопросами я себе никого не найду никогдано и понял, что ищу я не того, кого хочу. а то есть ты был еще на первой итерации да эту я не засталну так исторический факт:xamarinobj-cswiftвсе три разные команды с разными руководителями к swift команде первых 15 года не лезли, и все было хорошо. ну всегда есть студенты которые учатся, и не учатся первых обычно меньше, да еще и из россии уезжает первая категория обычнокак итог - кажется что все студенты ничего не умеют из-за образования, но это не так просто те кто учились идут в соответствующие места. когда вокруг академики, и ты сам ток выпустился с универа, ну как-быкак я написал, контент нужно знать, к чему эти вопросы, когда они были написаны, где применялисьмож я вообще билеты с экзамена скинул. ну как я сказал чистый код у нас был только кому повезло с преподавателем - был один (а потом и его последователи), кто учили писать коммерческий кодвсе остальное было для всех в универе ну например:ооп - годичный курс + ооад полугодичныйно универ не слабый - нгу. просто ты не был в нем первые 15 года развития ios команды когда-то там не было с++, не было директоров по началу ios команда была не зависимой, со своим жизненным циклома потом пошли с++, crud не круд, контроль всего и вся сверху, навязывание тех решений. проектирование, это вообще целый курс аж с теорией, практикой, экзаменомсети тоже целый курспаттерны и ооп тоже курси как я уже писал - люблю людей которые пишут не зная контекста. отличники ит вузов обычно на такое не отвечают ибо не все вопросы на зазубриваниеа из того что вы назвали, ну уж извините конечно - но это именно тому, что учат в вузах :dу нас все кроме чистоты кода преподавали как-быи у части групп была и чистота кода. никакой как я писал выше многие ещё и отвечали даже когда я всем задавал вопросы из первой секции, а не выборочно5 лет назад трава была зеленее как говориться а начинал я даже более 5 лет назад собеседовать. я это к чему у них есть чему поучиться у них все правила написаны чутли аж не кровью да я не говорю, что не используйте динамическую память, там есть такое правило но есть простые правила аля названия переменных, которые помогают избегать глупых ошибок. про космос то ли аполлон, то ли нетодин из них разбился при посадке на луну причина оказалась в коде - модуль приземления, считал единицы не в си, а остальные в си в итоге аппарат просто в лепешкувыводы? - теперь все переменные в названии содержат единицы измерения. текущие нет по желанию кандидата - или в текстовом редакторе без проверок, или playgroundраньше да - на листочке яндекс вообще у доски заставляет писать решения, и что-то не жалуются люди на него :d. представляю, был в аналогичнойда вы конечно правы - там другие процессы, люди другие, сроки другиено за место того чтобы спорить, лучше бы задумались, а что же я могу у них взять, чтобы повысить свое качество, не снизив свою скорость?а поверьте, у них есть чему поучиться. 5 лет назад, джуны на это отвечали также как и сеньоры с тем же процентом и градация была лишь ит образование/тех образование/гуманитарноено и 5 лет назад, людей из ит было больше, чем из других мест. так пока тут у всех пуканы не пригорели окончательно, напомню:1 эти вопросы я задавал 5 лет назад2 я задавал максимум 8 вопросов из всего списка, в зависимости от кандидата3 сейчас я этого больше не задаю4 ит очень динамично 3 года назад, swift никому не нужен был. ну хз как по мне у нас вся сфера такая - аналитика говорит что кнопка должна быть зеленой, но мы будем красить в зеленыйкстати за всю мою карьеру, увольняли всего одного человека - по психологическим фактам то что он писал плохо, было на втором плане. кстати еще поздравлю некоторых людей уже показали свой характер: вначале мы напишем чего-нибудь, а уже потом поймем о чем речь :)скорей всего эти люди, не читают документациюну и не исключаю наличие троллей, в данной ситуации. 2 яб сказал так ну ок ну крашнется программа из-за незнания этого, ну ок поправят рано или поздно, ну не критично, всего-то краш их много у кого-то3 на логику, и чуть-чуть математики и отлично показывает как человек себя ведет когда ему подсовывают странную задачу. кстати по поводу качества есть авио/космическая индустрия есть ваши процессоры в компах - там тоже так-то софтда они тоже ошибаются, но сравним процент/цену ошибки :)а чтобы понимать, что в этой индустрии твориться открываем и читаем misra-c стандарт. intel? космическая индустрия? железячники (не все)представь ios-ка который начнет писать софт под космический аппарат он взорвется же там один шанс, а не поправим в следующей версиив прочем программист не выдержит - там даже чихнуть не дадут лишний раз. то что было 5-8 лет назад, к сожалению сильно отличается от текущего положения деля раньше всегда печатал эти вопросы например на листочке, правда никогда не задавал даже 6 из всего спискасейчас offline собеседование я уже забыл когда последний раз было :d. как я писал уже сейчас я от всего этого отказался не на с++ все-же пишем да и крайне редко, что у нас бывают переполнения (но пару раз видел краши на этом)по теории это еще актуально люди не понимаю, почему на armv7 может работать, а на arm64 нет но больше к obj-c. 1 разминка хотя 10 лет назад приходилось подобное считать в с++2 понимание как хранятся отрицательные числа, и к чему приводит переполнение на swift сейчас к крашу кстати, на c++ же краша не было3 это мало кто знает наизусть, но это простейший анализ логики человека. а если наниматель платит, это не значит, что вы того стоите это наивное мнение это значит, что он готов платить стольков мобиле денег сейчас хоть жопу подтирай зелеными, работы кучаа на оценку кандидата, часто денег жалко и берут скорее тех, кто лучше рекламирует. я давно в сфере ios не видел программист делающего свою работу на 100% ну то есть писал идеальные программы без багов, косяков, соответсвующие тзя даже не буду говорить про инициативностьну ладно 100% ток гений может но обычно и 50% не достигают. ищи лучше стартапы есть бедные стартапы - можно сразу забить и не идти, такие ток с гениями взлетают а есть богатые стартапы там если умеешь заговорить и доказать, что они много стоят, могут и 500+ и даже лям иногда платить причем технически тебя никто проверять не будет :). чуть попозже объясню причины, почему спрашиваю это сейчас и чего я жду в ответе, а я не всегда жду правильного ответа, так-как часто понимаю, что человек не ответит верно. теперь +- выглядит так:1 интерактив про arc, class/struct, closure и теория, а что же это вообще такое2 интерактив по многопоточности и теория, что у нас есть в ios3 solid, жц vc, mvc/mvp - ну все спрашивают, а я чем хуже?4 задачка из easy секции leetcode. в итоге к моменту прихода в tassta, вопросы на собеседовании сильно изменились их стало в разы меньше, я стал повторяться из собеседования в собеседование (раньше постоянно менял что-нибудь), они перестали акцентироваться на то чему учат в ит. на эту дичь раньше отвечало 1/3 кандидатов, и они не требовали миллиардов при этом ну что сказать - раньше сфера была другой, и были люди из ит большинствоподобное только в сто раз сложнее, сейчас спрашивают у с/с++ железячников. после цфт я очень много гулял по собеседования, смотрел, что люди спрашивают (про себя думал как деградировала отрасль ), думал над своим опытом обучения других людейделал некоторые выводы. и задачка. так ладно скину вопросы, в виде трех скриншотовпервых два скриншота, это что я спрашивал в тензоре по началуи еще один вопрос - просто прикольная задачка, которую я тоже спрашивал на собеседованиях в какой-то момент времени. если нужны только деньги советую сбер если ещё больше денег то стартап искать. вопросов много, а экран короткий с компа попробую когда буду у него. а тьфу блин я понял что мне в функции hash не нравиться правильно же писать через combine а на такую запись не понятно, что должно произойти, даже если она предположим синтаксически корректна. дальше цфт из-за моей финансовой проблемы, я ее сильно хотел собеседовать людей, да и был слегка агрессивней чем обычнокороче цфт это дыра где я собеседовал раз 5 наверное всегозато было время подумать. для таких вопросов есть hr не будем лишать их этой радости. видимо попросили это ретвитнуть в канал чесно я с ходу не вижу проблему: меня напрягает pointer value - помойму так нельзя писать, и опциональность у хэшера не знаю что будет если в контейнер ничего не добавитьв общем я бы хэш функцию написал бы по другому. в общем после я такие вопросы не задавал пару раз где-то ещё было, но чисто по фану уже в концеибо я понял - лид ты не лид, но знать ты должен и технически не хуже сеньора хочешь не знать или в менеджерыда и прям лидов больше искать не приходилось. вопросы на управление, это были сценарии по больше части например:1что делать есть дедлайн, но команда не успевает2как оценивать трудозатраты3каким образом будет разделять задачи по проектучто-то ещё спрашивал всегда придумывал какой-то сценарий из текущего положения. что хочу отметить люди совсем офишевшие там попадались чел хотел как-то 500к+, но не знал ничего технически, и на вопросы про управление ничего адекватного ответить не могещё и обиделся, со словами кто я, а кто вы. когда я попал в ту компанию где проект был ужасный, то мне пришлось собеседовать на лида людей около 20-30 провёл таких собеседованийтут я меньше задавал вопросов на знание языка, больше на знание архитектуры и новое было - управление командой. уходя из тензора список приблизительно уже такой:* задачка уровня easy leetcode* интерактив на arc class/struct, иногда closure* mvc/mvp, жизненный цикл vc* многопоточность - потихоньку смещается к интерактиву. но время идёт, и на секцию с интерактивом тоже начинаю отвечать хуже я это списывают на популяризацию swift - вначале его учили сильные только ребята, а потом начали подтягиваться всеgeneric полностью убираю всё остальное упрощается потихоньку. язык вопросы на 5+ спрашивать бесполезно да и теоретически о языке почти не общаемся тут я скопировал идею интерактива - я пишу код собеседник отвечает на то что будет напечатановначале это была достаточно сложная секция где arc, closure, class/struct, generic. теория - ну тут, вы не поверите, но наоборот процент растёт ну или остаётся приблизительно темже правда и я шаблоны начинаю спрашивать реже, а поддаюсь рынку и спрашиваю mvc/mvp/mvvm и позже viper, yarch или что ещё знают. секция алгоритмов упрощается до нельзя сваливаемся на уровень easy на leetcode (но сайта ещё не существует)иногда в безнадёге я начинаю спрашивать задачу найти максимум в массиве любым способом язык swift напомню не все даже знаю о наличии функциино таких не беру. 1 информатику начинают отвечать меньший процент людей скатываемся до 10% причины? всё меньше и меньше людей идут в сферу с ит образованиемпо этим причинам секция задаётся только если человек с ит образованием и недавно закончил - проверяем как учился так сказать. после я попадаю в тензор и копирую часть вопросов у руководителя мобильной разработкии по мере собеседований в тензоре, вопросы начинают меняться:. в общем я собеседовал так около годапотом появился swift в моей жизни, и вопросы чуть изменились, но суть осталась та жевопросы со swift даже сохранились и по сей день в твиттере нельзя файлы приложить к сожалению. если смотреть по соотношению, то как-то так:30% отвечали на алгоритмическую задачку один раз чел рассказал как решить способом который мне на ум не приходил50% знали информатику40% знали теорию60% знали базу языка, 2% могли на 5+ ответить. так я и пишу viper ещё не был. язык:про особенности синтаксиса obj-c, про arc и mrc, жизненный цикл uiviewcontroller стандартный наборно были вопросы на 5+:про статические/динамические библиотеки и bundle. общая теория:шаблоны проектирование (я зря что-ли экзамен сдавал на это?) особенно я любил мост ибо в ios потрахах используетсяmvc/mvp и тд viper не существовало ещёпринципы оопdeadlock/livelockсамый мало отвечаемый принципы ооп - мало кто историю знает :(. первые вопросы состояли из 4 секций:информатика - это всякие хранения float, представление числа в памяти компьютера, системы исчислениязадачки - где-то между medium/hard leetcode в то время сайта ещё и не былообщая теория и язык/платформапро них ниже. надо уточнить - человек который учил меня собеседовать не знал ios, но был селён в чём угодно по любой теме мог найти у собеседника слабое место то есть способен был понять глубину знаний. в итоге я иду в мобильную разработку и где-то через пол года в ней я уже лид мне это казалось ненормальным, несмотря на опыт в с++ в три года до этогостав лидом начал собеседовать вначале под контролем другого человека вопросы были частично взяты от него. спрашивали и сложные алгоритмы, и просили свою хэш-таблицу написать, и вопросы вида: вот код, что в нём ни так в одну компанию спрашивали скалярное и векторное произведениекогда я начал собеседоваться в мобильную разработку вопросы показались слишком лёгкими на фоне с++. начну потихонькупервый раз я начинал проводить интервью будучи ещё студентов в созданную нами компанию но я был молод, не обучен, и спрашивал странные вещипосле я много раз ходил на собеседования, и разнообразность вопросов меня поражала. доброе утро/днём сегодня у нас собеседованиябудет две части:1 история как начал собеседовать, и как менялись вопросы со временем2 что я сейчас спрашиваю, почему это, и что жду в ответах. наскок я знаю я задают далеко не такие задачи от одной их задачи я в шоке по сей деньдано два числа a / b при делении получаем что-то типо: 1,4561(78) вот надо вывести результат в таком виде, и найти циклическую часть30 минут у доски. а это в тему сегодняшнего дня внешние зависимости это тоже архитектурное решение я не писал о них, так как кроме одного проекта во всех остальных местах их было не много да и принятие решения, что тащить, а что нет, это сильно холиварная тема. о нашел:. я так понимаю тот проект где команда боялась и слово сказать, управлялась именно таким лидом как тут описано. где-то в каком-то пакетном менеджере была история когда по какой-то коммуникационной причине удалилась библиотека с подобной функцией говорят 50% всех приложений перестали собираться жалко не помню на чём, но история реальная. интересный момент но иногда бывают и такие приходят говорят я лид, и не буду решать задачиблаго редкостьно у меня на этот случай есть тоже вопросы, про управление командой. ну уж нет вы так легко не отделаетесь это только лиды так могут, а сеньор будь добр код пиши. а вы вкурсе, что в вашей программе закрался багуся?. чёрт ну ладно не очень хотелось а может вам решение в paint-е устроит? хотя не заслужили :). display [(a, 4), (b, 3), (c, 2), (a, 1)] - всё я принят?. так подожди, проверить то легко яж в этом случае раз 10 минимум запущу бинарь с разными данными входными :). ты же обещал ну как так я то надеялся :). в мобиле? и это ещё не потолок а если ещё и москву взять, то ну там совсем звжрались и джуны не все за такую сумму пойдут работать. ненене на браинфак давай. молодец выпендрился спешу огорчить - ты не первый в оригинальной ленте уже один есть. я смотрю задачка зашла всем я уже провел порядка 300+ собеседований (бывали дни по три), и порядка 25% кандидатов не решают подобную задачу ещё учитывайте наличие фильтра по резюмеоколо 8% это люди с опытом более 3 лет в программировании. ну вот же - нужно делать ещё больше, а один высококвалифицированный человек может заменить даже 100 мало квалифицированных в некоторых случаях и бесконечность, если задача сложная в итоге бизнесу надо воевать чтобы хотябы одного себе такого найти. как в том анекдоте: приходит студент на экзамен ничего не знает препод ставит 5 тот спрашивает: почему? препод отвечает - чем больше таких как ты тем более ценен я на рынке труда. как писал в ответе другом - сложность в том, что большой процент не решает подобное сама по себе задача тривиальная, но не для всех даже не для всех сеньоров. а ещё груснее знать, что кто-то из таких ведёт курсы (не буду тыкать) при этом сами не знаю ни языка хорошо, ни задачи не решают, ни теоретической базызато язык подвешен тоже важный навык, но когда подкреплён знаниями. вообще это грустно каждый раз когда я понимаю, что есть программист который не может решить подобную задачу, но получает больше меня (а такой точно есть), я думаю - и смысл было учиться то вообще 😞. вы наивны если думаете, что такое может каждый решить многие программисты не смогут даже описать как вы кто-то может описать как вы, но затык при попытке написать тоже самое в виде кодапри этом у многих кто не может зп под 200/300+. о тут в ленте нашёл такое в тему алгоритмом и завтрашнего днявот такие задачи я считаю должен решать любой программист 25 минут это даже переборподобные мини задачи в коммерческом коде встречаются постоянно. я тоже с подобными согласен но боюсь код который я пишу для компании принадлежит компании и сомневаюсь, что они будут рады его открытию :)поэтому и пишу подобные вещи - чтобы было что-то своё. тут правильно меня правят возможность есть но у меня с ней не заладилось. ну с одной стороны да с другой стороны - я так и не смог подключить и swift и obj-c одновременно в свою либу а там разделить на две части нельзя только перематюкалсяс чисто obj-c что-то тоже не заладилось но тут мож я косяк, и не дорозабрался. завтра у нас собеседованияблаго этот день прошел спокойнопросто расскажу вначале как изменялось мое мнение, к тому, что нужно спрашивать, какие вопросы я сейчас задаю, и что на самом деле меня интерисует в кандидате. вот скриптик извиняюсь за синтаксис я еще тот знаток bash + почему-то у меня перестали видится команды даже находящиеся в bin директории видимо где-то path поломал когда-то у себя. например у нас на проекте mapbox - платный sdk для карты добавление его в swiftpm было тяжкоесейчас для этого есть специальный скрипт, который cahage-ом выкачивает и собирает обычный framework, потом пересобирает его в xcframework, после чего swiftpm модуль использует его. а теперь супер хак, который сложно провернуть - xcframework такая новая/старая фича так вот swiftpm теперь поддерживает их подключение а xcframework может внутри быть даже на obj-cитого на самом деле можно обойти это ограничение. ну и надо понимать что из-за таких чтук как crashlytics, вам в любом случае придется использовать что-то другое как минимум cahage. тут я бы сказал так - использовать для поддержки модульности на текущий момент можно, но из-за косяков xcode крайне геморнодобавление файла только чего стоит - каждый раз копировать/писать копирайтыно зато получаем возможность разложить модули по папкам красивенько. 8 минус swiftpm - xcode в impo предлагает все существующие пакеты, а не только те которые прописаны в зависимостях а потом при сборке весело падает, с дурацкими ошибками. 6 минус swiftpm - при редактировании описания пакета, часто xcode сходит с ума я часто редактирую через сторонний текстовый редактор, с закрытым xcode7 плюс swiftpm - не создает кучи лишних файлов. 5 минус swiftpm - не поддерживает swift flags/define из вашего проекта я как решение пока нашел ток одно - создать объект, хранящий все define и заполнять его в app delegate на cocoapods можно прописать копирование define. 3 минус swiftpm - не удобно добавлять файлы они не поддерживают шаблоны файлы создаются пустыми, и хеадер к нему с copyright надо каждый раз писать кучками4 плюс swiftpm - он является папкой по этим самым причинам забываем о конфликтах в pbxproj файле. 1 плюс swiftpm - поддержка иерархичности когда у вас много своих модулей, смотреть на линейную портянку у cocoapods то еще удовольствие со swiftpm пакеты можно раскидать по папкам2 плюс swiftpm - все тотже язык swift причем полноценная его поддержка. а теперь, по поводу использования его в проекте то есть как его использовать с внутренними модулямивсе также сравниваем с cocoapods:. но это что касается внешних зависимостей в этом плане я бы сказал так - если у вас все внешние зависимости его поддерживают, то cocoapods смело в топку пока crashlytics не поддерживает например, но скоро обещают. 5 минус swiftpm - каждый раз при запуске проекта быстро просматривает версии но это секунд 10 нельзя начать собирать проект6 плюс swiftpm - описание пакетов, на знаком языке, не нужно еще в другом языке разбираться. 1 минус swiftpm - не все поддерживают в частности obj-c либы вообще в пролете2 плюс swiftpm - не модифицирует проектный файл3 плюс swiftpm - удобно встроен в xcode (для внешних зависимостей!)4 минус swiftpm - скачивает в derivereddata не стоит в общем папку удалять. а вот с cocoapods стоит, так как в тензоре мы своим модули внедряли с помощью cocoapods, и могли даже менять код в разных модуляхи так давайте сравнивать cocoapods и swiftpmначнем с простого - с внешних зависимостей. с cahage его сравнивать не имеет смысла, так как cahage собирает модули сразу, а не предоставляет исходный код для сборки и cahage ну так себе подходит, для разделения своего приложения на модули. до недавнего времени, даже ресурсы нельзя было добавлять буквально недавно появилась возможность добавлять ресурсы честно - пока не успел проверить как оно работает. начнем с начала swiftpm это пакетный менеджер от apple для swift, а не для ios, macos и тп в этом его и особенность ничего кроме swift (ну и c конечно же) в swiftpm пакет затащить не получитсязато универсален и работает даже на линухе. вот они современные люди которые netflix ценят больше microsoft. ох ё я забыл про swiftpm же ещё рассказатьладно ща отдохну, и напишу про негокоротко - работу с модулями сильно упрощает, но интеграция в xcode хромает на обе ноги. надо понимать, что я пишу в сообществе мобильных разработчиков которые работают +- в одном режимедавайте еще вахтовый метод работы вспомним ууу сколько же там времени то выходит :d. да все картинки с диаграммами я рисую в astah очень удобный но платный но он того стоит. лучше напиши, что-нибудь более конкретное мне будет интересно :). я думаю если докапываться, то можно даже к print(hello, world) докопаться :). кстати, по этим причинам gateways/dataprovider-ы капец как разбухают они очень много всякой магии делают чтобы api с сервера закрыть, и не было потом так, что на другом новом бэке пришлось бы все переписывать целиком. ну я этим и занимаюсь убиваю себе мозгивот пример в interactor есть понятие - текущий каналвот ток реализация этой чтуки основана не модели каналов, а на модели пользователя :d. хотя как я сказал, в глобальном плане да все суммарно выглядит очень странно reset password на сокете для меня вообще - как он туда попал?но почему все жестко завязано, на пользователей и каналы я понимаю - ибо мы имеем под собой физические рации из 40 годов. а может просто кто-то не пробовал, выстраивать функционал на одной модели данных?да можно тут говорить, о том, что бэкенд могут все разделить, но нетибо есть одна важная фича - мы еще с физическими рациями контактируем, которые на частотах сидят :). понятное дело, все это оборачивается красивенько, и разделяетсяно объектная модели, за всем этим все равно стоит одна это не разные методы rest, а это один в данном случае сокет, с одной моделью :). ты не прав каналы знают о звонках :d ибо звонок это канал со спец типомнастройки ну как тебе сказать настройки знают о блютус устройствах например и настройки знают о настройках внутри каналах и пользователей. под обычно не согласен mvvm имеет четкую историю, и четкое определение, в котором прям присутствует слово bindingmvvm без биндинга, это что угодно но не mvvmа то что ты описал, это называется mvc здоровых людей где модель, это не только структура данных. ну и за одно, у всех теперь есть шанс посмотреть как же я пишу приблизительно коммерческий код. и так юридической силы все равно у funcorp нет на этот код (я ничего не подписывал, код написан мною, идея кода была публичной), да и времени прошло уже многовстречаем: архитектуры из tassta. коммерческого продукта иш че придумал мне вот funcode не разрешил выложить исходники даже хотя уже прошло много времени, думаю стоит наверно их открытьда funcode более старая архитектура, и всеже конкурсная, но много пересечений с текущей имеет. как итог тензор это много мини команд, как и сбер каждая делает что-то простоев тассте/телеге же выделить команды отдельно по фичам очень сложно - они все крайне сильно переплетены это цельный продукт, а не куча мелких из-за чего сделать его независимым намного сложнее. например есть фича экстренный звонок нужна чтобы сообщить, что с пользователем все плохоно для неё нужно создавать канал при этом от настроек пользователя и текущего канала, экстренный звонок работает по разному. tassta:1 намного меньше фич2 всем надо работать с базой: каналы, аудио, пользователи, ptt3 кода около 70к строк swiftно тут важный момент - нет ни одной фичи, которая была бы независимой все фичи это не маленькие продукты, все фичи это усовершенствование функционала. тензор:1 куча разрозненных фич2 одна команда может не знать, что делает другая3 кода 300к+ строк swift, и еще лям с++но тут важное - одна команда почти не зависима от другой если и есть пересечения, то это обычно получение функционала другой команды у себя. а теперь объяснение одной моей фразы: сбер не сложнее телеги, хоть и намного большедавайте сравню tassta и тензор. и взаимодействие внутри одного модуля. ну и на последок вот еще картинка это взаимодействие модулейзамечу, что там tflex/mcx присутствует кое-где в архитектуру сразу заложен тот факт, что в скором будущем будет два разных совершенно backend-а. вон та костыле приблуда: controllers - модуль с классами которые добавляет какое-то поведение программе, которое должно быть постоянным, без участия пользователянапример они шлют пинги на сервер, чтобы соединение не разорвалось. storage - у меня это сейчас обертка над sqlite соответственно информация о том, что это sqlite никак наружу не просачиваетсявообще тут я немного возможно тупанул данных не так много, возможно лучше было сохранять все в файлы как json меньше мапить модели пришлось бы. network - обертки над всеми сетевыми частямиобертка над alamofire для restобертка над alamofire для sseобертка над системными сокетами для tcpобертка над системными сокетами для udpделают максимально простым работу с ними. gateways модуль хранящий dataprovider-ы просто реализует эти протоколы не должны нести в себе логики должны просто получать нужные данные получать или по сети или из бд, или из кэша - не важно, главно предоставить нужные данные. interactor-ы ни о ком ничего не знают они дно в зависимости модулейдля этого каждый interactor выставляет протоколы dataprovider-ы и использует ихтем самым он сообщает системы, что ему для работы нужны вот такие вот данные. usecases это модуль хранящий interactor-ы важное правило - interactor-ы ничего не знают друг о другеinteractor-ы реализуют бизнес логику если бизнес логика - получить данные с сервера и показать их, то они все равно есть, просто очень маленькие. presenter же занимается тем, что связывает двух ребят: view + interactor то есть он реагирует на события от обоих, мапит события, и пробрасывает другомуиногда обработав событие от view, обновляет сразу состояние view. screenpresenter - контактирует с iscreenview, который объявлен в этом же файле iscreenview должен быть максимально абстрактным, и не в коем случае не иметь намека на то, кто его реализует - даже если реализация будет консолью, все должно продолжать работать. screenview - пассивная вьюшка реализует протокол iscreenview объявленный рядом с presenter-омвнутри себя может иметь другие вьюхи, если ui сложный задача показывать поступающие данные, и вызывать события по действиям от пользователяне должна менять своё состояние сама!. для создания экрана, объявляется два класса:{name}screenview{name}screenpresenterи с помощью genericviewcontroller + navigator-а внутри router-а все это связывается и показываетсяда создать и показать экран, это три строчки :). {featurename}router - роутер отвечает за перемещения между экранами в пределах одной фичиесли нужно, перейти к другой фичи, то выставляет событие, на которое подписывается rootrouterчаще всего имеет не больше 3 экранов, а иногда и вообще один. возвращаемся к rootrouter - он создает другие router-ы которые в данные момент нужно показать, и подписывает на события от них по событию от другого роутера, сам решает, что же нужно сделать - показать другой экран, открыть tab в tab bar-е, мож еще чего. забыл про 3:3 event - позаимствовал идею у реактивщины и c# реализует паттерн observable крайне простейшая обертка над callback, добавляющая 1 доп вызов в stack traceя люблю callback, но иногда нужно иметь более одного подписчика, и появляется гемор. 2 genericviewcontroller - специальный vc, который делает всю магию, и позволяет забыть о vc как таковом его обязанность держать presenter, router, view, дабы те существовали пока существует экран. 1 navigator - если описать просто, то это обертка над uinavigationcontroller, но с важным улучшением - оно не держит сильно uinavigationcontrollerнужен для того, чтобы иерархия экранов целиком могла удаляться при полном закрытие+ полностью избавляет от опциональности. по порядкуесть rootrouter - его создает appdelegateэтот в свою очередь знает обо всех роутерах + умеет создавать старые vcтут стоит рассказать про два важный технических решения:. tassta моя архитектура:         view           |router - presenter - usecases - gateways - network/storage+ отдельная костыле приблуда controllers (это не viewcontroller!)самое сложное, было придумать как её натянуть не сломав старый код. никогда не понимал, зачем mvvm (адоптацию mvp под биндинги) тащат туда, где биндингов нет. кстати, поскольку мне это приходилось очень часто дебажить, я не понимаю людей любящих rxswift - там же огромный stack trace получаетсяя каждый раз пока в stack trace разберусь и найду откуда же был вызван метод, перематерюсь на 100 раз. ну а по факту, все это больше похоже на спагетти из-за размытых границ между viewcontroller, viewmodel, manager а также из-за активного общения менеджеров друг с другомплохое обращение с rxswift во всей красе - посылаем все то туда, то сюда. если говорить про userdefault, то к нему обращаются или из viewmodel или из manager-ов. сервисы - ничего не делают это крайне простейшая обертка над api, которая немного мапить модельapi - классы дергающие alamofire который обращается к rest-у. менеджеры друг о друге знают так как они синглетоны все, могут позволить безболезненно это делатьв итоге менеджеры: дергают/подписываются на других менеджеров, или дергают сервисы. ой забыл при рассказе о viewcontroller-ах указать про переходы для переходов есть классы {name}router, которые создаются внутри vc, и которые содержат методы show{name1}они делают что-то типо:vc?navigationcontroller?pushviewcontrollerкороче так себе абстракция. из интересностей существуют менеджеры первого и второго звена первое звено - менеджеры работающие всегда второе звено - менеджеры запускающиеся только при авторизации. manager-ы все менеджеры синглетоны с помощью реактивщины, они хранят и обновляют постоянно данныеиногда берут на себя ответственность, которая вроде бы должна была быть во viewmodel. viewmodel - обрабатывает различные данные от менеджеров и посылает адаптированные события менеджерамну так вроде бы планировалось на практике viewcontroller и viewmodel очень смещенные - и сказать, кто что делает очень сложно. viewcontroller - он настраивает uikit на view, подписывает на него вызывает реактивщину во viewmodel и подписывается на нее. view - почти без претензий это пассивный view но он без инкапсуляции то есть отвечает за хранение uikit элементов, констрейны, начальный вид. tassta архитектура до менякодовое название реактивный синглетон :dсостоит из:viewcontroller-view-viewmodel-manager-service-apiбд полностью отсутствуют как сущность то что есть сохраняется в userdefaultsвсё на rxswift. для того чтобы понимать, что дальше происходило, нужно описать обе архитектуры более подробнопожалуй я это вынесу в отдельный поток, чтобы техническая часть была сразу видна. переписав сетевую часть, и переведя весь старый код на новый (что требовало изрядно попотеть), в этот момент только я начинаю заниматься разворачиванием новой архитектуруда так, чтобы и старый код остался при этом не сломанным. но переписывать сетевую часть я начал не по этой причине просто по крашлитиксу она была на втором месте, после обработки звукаболее того там еще были баги, из-за которых часть данных теряласьну и мне нужно было выделить её в отдельный модуль, для удобства. более того функционал между tcp socket и rest api разделен по неведомой никому логикену например:1 смена пароля это rest или сокет?2 позиция других пользователей на карте это rest или сокет?если вы подумали, что 1=rest а 2=сокет, то спешу вас огорчить :d. многие наверное увидят, что тут что-то лишнее :) первый вопрос - зачем все это?проблема банальная - сервера на самом деле два, и они не общаются друг с другом поэтому некоторые данные надо дублировать по разным протоколам связи. 1 rest api - так как проект старый 8+ лет, формат данных у rest api не всегда совпадает2 protobuf + tcp socket - еще один канал обмена данными3 udp socket - для аудио/видео данных4 sse - чтобы получать события с сервера. дальше обговорив детали с бизнесом, и убедившись, что никаких фич в ближайшее время не планируется, начались процессы рефакторингаи начал я их с сетевой части одна из причин сложности проекта и так сетевая часть на проекте:. после я допинывал ci еще в течении следующего месяца ну как допинывал - я переводил все на fastlane, вырабатывал правила именования веток, настраивал авто сборку по веткам и брендампервую сборку для заказчика пришлось все равно ручками выпускать. на фичу я потратил месяц параллельно запинал ci, с кучей мата - он начал запускаться хотябыа важный факт - на проекте 12 таргетов это все разные бренды у брендов разные картинки и цветовая гаммаглавное их все надо собрать для заказчика. начал решать проблемы по порядку:1 бизнесу нужна была срочно фича2 без ci жить точно не вариант3 текущий код нельзя поддерживать - только работает не трож. в прочем когда я шел, я знал на, что подписываюсь я долго общался, попросил nda, чтобы глянуть кодменя сразу предупредили о ситуации с командой, и о том, что проект сложный. и так компания tassta когда я пришел был уже написанный код на swift + rxswift, но по многим причинам, то, что было написано нельзя было поддерживатьна момент прихода:1 ноль ios разработчиков2 умерший ci3 умершие провизионики4 crashfree 70%5 600+ багов. после того соревнования, я кое-что еще переосмыслил, подправил, устранил неудобствамного еще раз перечитывал статьи и главы из книжки clean architecture в общем старался повернуть свой мозг и осмыслить зачем же все это нужно. и последняя архитектура мояначитавших всяких дядюшек бобов, я решил написать clean architecture и хотел уже swiftpm попробоватьв общем первый раз свою идею, я испытывал на funcode конкурсе, хоть я и не выиграл, но ребятам которые проверяли вроде бы понравилась. короче этот проект показатель того, что не обязательно соблюдать все принципы solid, чтобы продукт был хорошимдостаточно просто в течении 7+ лет, иметь хороших лидов, и разработчиков, и продукт будет постоянно развиваться и улучшаться с приличной скоростью. ещё другой сашка запилил дизайн систему когда её уже закончили я ушел, но успел поучаствовать в её развитиивроде бы получилось круто. 3 какие-то архитектурные проблемы решили что-то связанное с навигацией но я напрочь не помню, что было и что стало помню, что переделывали способ перехода между экранами. за время моей работы в компании кроме развития продукта, мы еще:1 перевели большую часть на swift, у нас были даже графики сколько строчек/файлов на swift и на obj-c :)2 избавились от godobject, по средством перехода на ditranquillity вздохнули с облегчением. был волшебный объект, который хранил все сервисы, апи по работе с бд/сетью, какие-то вспомогательные классы в общем объект имел ссылки на всё и передавался во все места. мне сложно её описать - я её забыл в основе был mvp view была пассивнойчто было в модели не помню - какие-то удобные обертки над сетевым слоем, бд и сервисынаверное единственное, чем были не довольны, это di он то был, но только как один god object. цфт продукту 7 лет продукт работает и развиваетсякоманда 3-5 человекgit, ветки - все как положеногнать на архитектуру с такими показателями, смысла нет да в ней было много нарушений всяких принципов но она работала. а технические причины, их много:1 massive vc2 протоколы как dto модели3 60 cocoapods зависимостей4 лид который зашугал командуи на это наложим тот факт, что команда была достаточно квалифицированная - у многих было по 5+ лет опыта. в общем я сбежал от туда через три месяца вначале хотел стать лидом и начать исправлять ситуацию, но пообщавшись с руководством, это желание напрочь отбилосьболее того, я всей команде рассказал честно, что происходит, и как итог команда тоже разбежалась потихоньку. мне сложно выделить причины провала проекта почему за пол года команда не была способна стабилизировать егоих очень много и не только техническихв какой-то момент выяснилось, что тем кто лицом не удался, не выплачивают последнюю зпне отпускали в отпуск. но самое чудесное было в vc я уже писал, что это царь батюшка но один случай запомнил навсегда:меняем мы значит цвет кнопки - обновление дизайна поменяли и тут нам приходит с 10 новых багов на логикусмотрим код, а там: if buttoncolor == col1 и не в одном месте. но зато какая экономия - не надо модели маппить одна модель на все, и хватит. это тот случай, когда университет вбивший тебе, что передача данных между слоями (dto модели) должны быть данными, и только даннымии тут ты видишь живой пример, что бывает если это не так. почему это важно? да потому-что из-за этих протоколов было две проблемы:1 xcode в дебаге часто отказывался показывать что хранится в модели2 очень часто view, случайно брала и меняла в бд что-то причем из-за протоколов сделать это случайно, было очень легко. и самое интересное models они были двух видов:1 протоколы протокол с описание набора свойств, и информацией можно ли их менять2 объекты в виде структур, которые реализовывали протоколыи теперь важное - storage модели, тоже реализовывали эти протоколы. storage - помойму он был на coredata, не уверен но точно помню, что в коде были модели в виде классов хранящие данные, и если у этой модели поменять поле, то оно сразу-же обновлялось в бд. viewcontroller был всему голова он вам и бизнес логика, он вам и ui, он вам и парсер самый большой был 65к строк и раскидан с помощью extension на 5 файловдля навигации были обычный навигаторы - протокол с набором методов show{name} который передавался vc. архитектуру, я слегка подзабыл, но было что-то типо:appnavigator-ыviewcontroller-ыstorage - база данныхnetwork - помойму без оберток и либ а может и были не помнюmodels - протоколы. теперь по проекту проект был перспективный, на первой стадии должен был быть вход, настройки, чат, который интегрировался с почтойкоманда 5 человек распределеннаяgit, ветки - тут все как принятоci был и работал (вроде бы). когда я пришел на проект, прошлый тим лид уже уволился я пришел как сеньор, и не сильно хотел лидить на тот моментно первое, что меня поразило, это состояние команды - команда просто боялась говорить/высказываться выяснилось, что лид зашугал команду а это удалёнка была. в период между тензор и тензор, я был в двух компаниях: цфт, и что-то не помню чтоначнем с той, что я не помню и так архитектура какого-то проекта, в котором я побывал три месяца, и который завернулся за 15 года из-за невозможности поддержки. сейчас все онлайн я онлайн выступать не хочу - нет вот этой энергии и чувства аудиториида и на мобиус надо качественно готовиться - а это время мне обычно на презентацию столько тратить лень :). основная идея была в уборке, и отвязаться от с++ прямых связейа то они настолько вошли в код, что можно было где-то увидеть как ячейка обращается к с++ методу который лезет в сеть. и есть картинка как и какие модули взаимодействуют, к моменту моего возвращения. не буду расписывать новую архитектуру она очень огромная для описания в твиттере словами но есть картинка, с тем, как и какие модули должны начать взаимодействовать по итогу. о забыл важное за 15 года, что я отсутствовал в компании количество фич почти не выросло :) по факту за 15 года было много переездов модулей фич на с++, и не меньшее количество багофиксов. была предложена концепция что архитектура внутри модуля фичи должна быть однородной на всем проектена самом деле это тоже был прокол ios тим лидов не надо давать такую свободу если у вас нет достаточного количество лидовесли junior пишет архитектуру, будь готов к проблемам. также снова был запущен проект, по оптимизации скорости запуска правда в этот раз от ios почти ничего не требовалось, кроме одного - доказать с матами и криками, что у нас с++ модуль запускается более 20 секунд. назовем это попыткой изменить архитектуру я к сожалению не выдержал, и не довел проект до конца много других факторов меня доканалино что было сделано:1 нарисована, и на 70% переделана архитектура2 с++ научились дебажить ios приложения3 отремонтирован ci. 6 архитектуру никто не попробовал адаптировать к сложившейся ситуации но все понимали, что что-то надо делать7 с++ разработчики не способны дебажить свой код в мобиле - только у себя локально модули и все. к моему возвращению показатели здоровья:1 никто не способен собрать мини апку2 ci в постоянной красной зоне3 официально 30% фактически 50% это багофикс4 циклические баги не редкость5 приложение снова подходит к границе в 20 секунд запуска. где-то в середине всей это истории я увольняюсь но общаюсь, и стараюсь быть вкурсе измененийи где-то я возвращаюсь обратно. скорей всего архитектура бы и по сей день держалась, и давала хорошее соотношение качества/скорости, но она была полностью не готова к:1 с++2 отсутствию контролявторое было проколом ios тим лидов мы не наладили автоматические проверки, того что стоило. где-то посередине была еще одна важная проблема - время запуска приложения оно на старых устройствах перешло черту в 20 секунди если со стороны ios мы перешли быстро на статическую линковку, то вот со стороны с++ все было печальней - так у нас появилась одна большая с++ либа. последнее очень сильно сказалось в тот момент, когда сверху пришло требование: хотим новое приложение, которое должно иметь определенный функционал, который пересекается частично со старымэтому приложению, пришлось втаскивать к себе все модули, иначе все падало. дальше начались увольнения идеологов тех людей которые следили за тем, чтобы идея архитектуры оставалась так как и планировалосьпоэтому следующий пункт который отвалился: опциональность не все понимали зачем париться, и внедряли протоколы из declaration без опционала. первым отвалились мини апки - из-за с++ их стало крайне сложно собирать и никто кроме ведущих не был способен этого сделать и даже им требовался час, чтобы обновить с++ ядро на стороне мобилы. но все это было только в теории ну и первых 15 года развития приложения до момента пока не появились с++ и все ведущие не начали войну и отстаивание фронтав этот то момент все и полетело. это позволяло делать отдельные мини апки - во всех местах использования функционала соседа, был опционал, и в зависимости от наличия соседнего функционала, ui адаптировался. а поддержка опционала нужна была для того, чтобы все протоколы из декларативного слоя внедрялись опционально ведь соседнего модуля может не стать - и программа упадет при попытке внедрить не существующий объект. и отсюда моё желание сделать поддержку опционала внутри моего ditranquillity вначале в тензоре использовался typhoon, после мы перешли на мою библиотеку тот кто участвовал в этом переходе, думаю скажут, что после перехода стало намного лучше :). и вот тут то di контейнеры показывает себя в полной красоте для реализации подобного, нужно в модуле соседа зарегистрировать реализацию по протоколу а дальше эта реализация магическим образом попадает в то место, где используют протокол. суть слоя - каждый раз, когда какой-то функционал понадобился соседу, добавляется протокол, с нужными возможностями и сосед реализует этот протокол у себяа кому был нужен функционал использует его через протокол. но так бывает, что функционал пересекаетсянапример когда пишешь сообщение, хочется добавить файл к нему, или ссылку на задачу а это три разных модуля: communication, disc, tasksи для таких ситуация был придумал declaration слой. команды делились по фичам, и редко пересекались каждая команда работает спокойно в своем модулеиз-за этого же, описать архитектуру внутри модуля фичи невозможно было всё: mvc, mvp, viper, pidor :). что же такое фича? фича тут это полностью независимый модуль, у которого своя бд, свои сетевые запросы, свой ui, своя логика в общем каждый такой модуль, при желании можно выпускать отдельнои да такое даже возможно - были мини апки, содержащие только одну фичу + авторизацию. app - слой настройки и инициализации всегоui/features - слой содержащий много отдельных модулей по фичамdeclaration - слой хранящий куча протоколов протоколы нужны для возможности фич общаться друг с другомcore - базовая работа с бд и сетьюcommon - всякие расширения. после я попадаю в тензор тут архитектура не моя, но я влиял на некоторые аспекты её развития и приложение при этом крупноепоэтому описание лучше начать со слоев:appuideclarationcoreи отдельно common. но общее у всех этих приложений было одно - они были маленький, с небольшим функционаломописанная только-что архитектура, была наверное к самому большому приложениюно ей бы стало плохо, захотев заказчик вставить в нее еще более 20 фич до 20 был запас прочности. было много и других приложений было приложение с временем жизни в 3 года, но маленькое - просто оно постоянно изменялось, модифицировалось и тп в общем заказчик сам не знал чего хочеттам архитектура была так себе, так как переписывалась она раза 3 но код был читабельным. для любого большого приложения есть такой специальный человек! даже наверное должность такая есть — презентер). остальное прошло как по маслу только с рефлексией для оборачивания realm пришлось немного попотетьстоит отметить из плюсов, что rest api у нас был однотипный - это позволяло парсить модели без лишних проблем. из минусов помню только один: router был на самом деле navigator-ом (см доклад то, о чём нельзя говорить - routing/navigation слой под)мы пару раз на этом огребли - были моменты когда было сложно сделать нужный нам переход. transfer позволил работать первое время без rest api, при этом когда появилось rest api другие слои не пострадали. архитектуру считаю удавшейся, так как ios команда смогла завершить проект за 3 месяца, но андройд за 4 при условии, что первых две недели ios мы потратили только на архитектуру - не строчки кодаweb api тесты экономили в неделю часа по 4. были логи логи очень хорошо дополняли тесты, так как не надо было писать куча проверок в тесте - достаточно было проверить успех или нет, а на основе логов уже было понятно, что именно сломалось. был di но без каких либо библиотек servicelocator + объекты пробрасывались ручками через методы инициализациибыли тесты на transfer и webapi тесты спасали, так как rest api начал делаться позже, чем мобила, и постоянно что-то менялось. итого:создание экрана:appdelegate router -передача себя по протоколу {name}viewcontroller -вызов метода у протокола i{name}routerполучение данных:vc -вызов метода с callback service transfer webapi и/или storage. сетевые запросы делались с помощью webapi, который был простенькой оберткой над nsconnection, и лишь добавлял единообразный парсингбд это была маленькая, но сложная обертка над realm (он в тот момент был маленький), которая во всю использовала рефлексию. но реализация transfer была одна, прикрытая разделенными протоколамион был не сильно умным и просто вначале делал запрос по сети, если запрос удался, то записывал данные в бд, если не удался, то получал данные из бд. дальше шли сервисы они отвечали за проверку данных, и получении информации из бд/сетино в них не было реализации получения данных по бд/сети они вызывали у специальных {name}transfer метод, который уже делал запрос в сеть или бд. отмечу не стандартный подход к обработке ошибок:все ошибки которые возникали при обработке запроса, добавлялись в errorservice он, на основе приоритетов, выбирал одну, и уведомлял о нейкаждый экран и роутер были подписаны, и обрабатывали только те ошибки, которые им важны. экран это был vc состоящий из отдельных view, и обрабатывающий разные события нажатия имел свой xib файли вызывал в сервисах нужные методы, которые с помощью callback возвращали результат. роутер на основе authservice создавал и показывал один из двух экрановпри создании экрана/viewcontroller-а ему через конструктор передавались нужные сервисы, и также сам роутер, но как протокол di :)роутер реализовал с 10 разных протоколов с методами аля: show{name}. main - это наш appdelegate, который создавал router, и запускал некоторые сервисывсе сервисы создавались с помощью servicelocator-асервис локатор создавался в appdelegate и передавался в роутер. ну и наконец, мобила в первой компании я не помню всех проектов, и что там было, кроме одногоэто была моя архитектура:mrcvae - mainroutercontrollerservicemodelsрепозиторий git, с ветками команда 4 человека срок разработки 3-4 месяцакак-так :). главный минус был в том, что не было проверки отдельных фич даже фичи, которые еще не были написаны, они уже были в веткерелизы тоже были из этой же веткеэто влияло на качество софтадля показа приложения, был специальный человек который умел тыкать так, чтобы не упало. и последнее one branch svn - я его выделяю, так как тут это было очень плохое архитектурное решение50 разработчиков постоянно вливали свои изменения в одну svn веткудаже размер проекта, не помогал избегать конфликтовно не это главный минус:. а вот math можно считать почти одним модулем физически он был не один, но взаимодействие было через одинэто можно назвать главной сценой - модуль хранящий математическую модель всей сценысам модуль менялся редко. common - это не один модуль, а куча модулей, с различными вспомогательными функциями, или макросами его использует всем кому не лень. каждая фича имела предоставляла информацию о том, как к ней можно попасть из менюимела стартовую/ые точкиесли фича была с настройками, то имела свой экранпосле этого фича взаимодействовала с mathcoreфичи тоже могли что-то рисовать на главной сцене. был отдельный главный модуль он отвечал за создание window, за добавление всяких менюшек за запуск всех других модулей фичну и главное - он рисовал на экране информацию из math. следующий проект аналог autocad более 10миллионов строк кода, и еще библиотеки внешние в виде бинарейцеликом эту архитектуру я не представляю, но приблизительно так:mfcm = mainfeaturescommonmathи one branch svn - важный аспект. после игр, был маленький опыт написания ядра системы для тв приставокописать ту архитектуру я к сожалению не смогу, но помню, что каждый отдельный функционал заворачивал в свой потоки если так случиться, что функционал упадет, то он перезапускался это была доп защита. богаче - это объективный критерий, его можно измерить с успешный - уже сложнее, это субъективный критерий, для разных людей разное значит кому-то и быть лучше большинства в своей области уже признак успешности, даже если это не подкреплено деньгами. как итог не надо реализовывать каждый раз атаку у каждого юнита - надо только выбрать какой тип атаки он будет делать, и настроить еёв большинстве игр, где есть много разных юнитов, но ограниченное количество действий обычно применяется коп. ооп - есть базовый класс юнит от него наследуются разные юниты каждый юнит реализует сам атаку, защиту, способностикоп - есть базовый класс юнит есть компоненты - ближняя атака, дальняя атака, защита, способностиразные юниты - это юнит с набором компонентов. только под конец написания игр, я узнал про коп, и успел оценить насколько он в играх лучше оопкоп - компонентно-ориентированное программированиепроще всего показать отличие двух подходов на примере:. а вот игровые модели (не меню) отличались сильно - много логики было перенесено в них они хранили в себе и физическую модель, и визуальную у них был метод update и был общий абстрактный классно это были ооп модели. как и в прошлом примере, все переходы были из сцены в сцену сцены были активные - нажатия кнопок, обновление ui, физика и тп было в нихтут мало отличий. следующие архитектуры были тоже связаны с играми но они были моимина самом деле описывались они просто:sm - scenemodelправда моделей было много, и разных. так как было это очень давно, то мало уже помнюкогда я пришел, я много чего менял, не помню уже чтоно одно было точно хорошее архитектурное решение: я разделил файл со всеми includeвремя сборки с 10 минут уменьшилось до 2 с половиной. model - немногочисленные модели, хранились отдельными файлами они были пассивными. single - все общие данные хранились в одном месте более того был один файл, который подключал больше полу проекта (это с++ делал include половины файлов). каждый экран был сценой переход между сценами, был внутри сцен - просто созданиесами сцены почти целиком в одном файле была вынесена физика отдельно, и каждая кнопкасцена была активной - обрабатывала нажатия, запускала физику, обновляла ui. начну с далекого прошлого первая архитектура, которую я увидел, была будучи стажеромтам была игра нанофутбол - скрестили чапаев и футбол :)если давать аббревиатуру, то что-то типо:ssm - scenesinglemodel. вот пример - недавняя статья на хабре от додо пиццавроде очевидно, что выпиливать бд из приложения человеко-месяц это много и иметь 3300 вхождений но возможно за три года, эта архитектура сэкономила им человеко-год, по сравнению со всеми другимиps но все-же нет :). и даже когда рассказываешь, про существующий завершенный проект, нельзя сказать, была архитектура хорошей или плохой только предположить, что определенные изменения её улучшили. из этой цели следует, что архитектура это и ваш ci, и правила которые помогают/мешают писать код и даже скорость сборки системыи зависит она от разных факторов: количество людей на проекте, размерности проекта, времени сопровождения, и тд. однозначного определения этого термина не существуетну мне например нравится такое: это гипотеза, которую требуется доказать реализацией и оценкойно цель архитектуры понятна:уменьшить человеческие трудозатраты на создание и сопровождение системы. доброе утро/день сегодня у нас архитектурапостараюсь писать максимально сухобуду описывать с начала карьеры все архитектуры которые я еще не забыл и хоть как-то помнюодин поток одна архитектурав конце про swiftpmно вначале что такое архитектура?. каждый думает в меру своей испорченности. вот учёные некоторые чего-то там доказывают получают копейки отказываются от нобелевскойзачем же они это делают? 🤔моя мотивация та же. мне если честно не к чему а вот семье они нужныскажем так - если бы я жил один, то мне бы 100к где-то хватило. каждому своё я не пью алкогольной продукции вообщедля меня на пианино поиграть - вот удовольствие и отвлечение от всего вокруг главное похмелья нет даже :). и чего у меня эта запись всплыла в уведомлениях мне же сбер лучше не показывать это как красная тряпка для меня 200 !@# разработчиков, над одним мобильным приложением это же жестьладно уже вечер надо отдыхать. кто-то пользуется, кому-то нравится я пользуюсь тожемне нравится простотаа так по своей сути это как snapkit или использовать anchor для констрейнов первый просто чуть красивее. при этом свои фабрики имеют и плюсы:1 никакой магии2 код проверяется при компиляции (ну циклы правда нет)3 работают быстрее, но это можно заметить с трудом где-то с 5к зависимостей. ну вот пару примеров:1 нужно чтобы n разных классов создавались при авторизации, и их экземпляры были доступны в разных местах2 нужно получить все объекты соответствующие некоторому протоколу. как автор библиотеки подобной я должен сейчас рассказать, что весь мир обрушится и тп :dна самом деле ничего написание своих фабрик, хуже только одним: гемора больше в не тривиальных кейсахну и скорей всего не будет однообразия со временем. завтра:. так я уже боюсь это писать но завтра у нас тема архитектура а тема сама по себе то уже холивар вызываетох что завтра будет когда я начну писатькороче готовимся, будет жарко. вот, хоть один человек понял :d и wow еще. интересное явление в первоисточнике написано намного меньше комментариев чем у тебяправда у тебя и подписчиком больше чем у mobileunderhood ^d. последнее особенно интересная возможность модификаторы позволяет дополнить информацию о внедряемом объектенапример many, говорит, что нужно внедрить все объекты соответствующие указанному протоколу. 1 наличие подробных, настраиваемых логов2 возможность получить граф зависимостей для собственных нужд3 проверка графа зависимостей на старте, в частности на неразрешимые циклы4 встроенная поддержка опционала5 модификаторы. но не это основные особенности и отличия от других подобных библиотек библиотека имеет весь стандартный набор возможностей которые есть у других, но также:. мне такой подход нравится тем, что он не требует модификации основного кода, под нужды библиотекиминус его конечно в том, что приходится писать доп кодпоэтому я очень сильно старался, сделать наиболее лаконичный синтаксис. в случае с di контейнером, мы описываем из чего состоят классы то есть пишем такую lite версию api класса: описываем как его создавать, какие протоколы от реализует, какие зависимости имеетпосле чего библиотека магическим образом, создает этот класс и его зависимости. немного о возможностях библиотекибиблиотека является декларативным di контейнеромдекларативный стиль написания кода в наше время относительно популярен стал в uiсмысл его в том, что мы пишем, что у нас есть, а дальше все как-то делается само :). про мотивацию делать библиотеку:1 вначале изучения языка swift и его изменений2 потом интерес к сложной задаче3 после желание визуализировать граф зависимостей4 звёздочки на githubсейчас мотивация развивать иссякла, только поддержка звездочек слишком мало ;). в 2017 году, я выпустил новую статью на хабр и стал рассказывать на конференциях о каких-нибудь частях библиотекиа сложных технических решений в библиотеке много - поэтому рассказывать есть о чем. в середине 2020 года, я выпустил 4 версию, в которой сильно улучшил проверку графа зависимостей и сделал graph api - то есть теперь любой желающий может получить граф зависимостей в своем коде, и как-нибудь его проанализироватьпоэтому синтаксис проверки графа, чуть изменился. третья версия вышла в сентябре 2017 года на ней синтаксис библиотеки остановилсяда с момента выхода добавилось много возможностей, но api библиотеки с 2017 года не менялся, почти:. вот пример с сегодняшнего дня я много отвлекаюсь на твиттер, и поэтому менее внимательныйкак итог когда я забыл зарегистрировать новый класс, библиотека мне это написала сразу при запуске программыswinject упал бы когда я сделал достаточно большую цепочку действий. то есть только к третьей версии я успокоился так сказать я добился того, что так долго хотел:1 сделал удобный, оптимальный синтаксис2 сделал проверку графа зависимостей на старте приложения3 сделал понятные ошибкидобился спокойствия :). и это послужило отправной точкой, переделки всей библиотеки на то, что я хочу вдобавок мои знания swift уже были хорошими, и я знал как оптимизировать кодps кстати одну хорошую оптимизацию swinject потом перенял и себе. что же я такого решил? я смог придумать как подружить библиотеку с опционалами тот кто работал в swift с generic знаю, что у него много проблем картинка с решением, для людей знакомых со swift. и вот как-то раз, ночь, я просыпаюсь без шуток идея как решить одну важную проблему возникла именно такя бегу к кому, проверяю - и о вот оно, оно так на самом деле можно обхитрить компилятор. вторая версия прожила очень долго она потихоньку совершенствовалась, обновлялась, обрастала тестами, функционаломно я понимал - это не то, к чему я стремлюсь я хочу от нее большего и да этого никто не сделал еще но была интуиция, что это можно сделать. во второй версии было много чего сделано, переделано, она стала уже вполне хорошим инструментомда она писала в логи понятные ошибки, но все еще была проблема, что нельзя убедится в корректности до того момента получения объектаи я очень хотел подружить её с опционалами. по мере того как я определяюсь, со второй версией, приходится чинить баги у первой, и поддерживать новые версии swiftно библиотека еще к этому моменту мало известная. статья показала, что меня не закидали тухлыми помидорами, и то хорошовыходит первая версия это все еще 2016 годя начинаю работать над второй версией цели были такие:1 уменьшить количество символов2 определиться с терминами3 убрать исключения - не удобны. на решение выложить её в open source повлияло несколько факторов:1 она работала! :)2 она нравилась тем, кто ей пользовался3 swinject на тот момент все ещё имел кучу багов, и был единственным для swift. на тот момент я написал статью на хабр, назвал версию 095, и был готов уже выпускать первую версиюоткуда взялся хабр? я же не хотел выпускать библиотеку в белый свет. первоначальная идея была основана на исключения - каждое получение объекта могло было кинуть исключение, с понятной ошибкоймного синтаксиса было скопировано со swinjectиз-за хауса в голове, названия были то из typhoon то из swinject, то из autofaq - в общем никакой структуры. вначале я формализовал, чего я хочу от библиотеки:1 синтаксис похожий на autofaq (c# библиотека)2 защиту от крашей в реальном времени как с тайфун3 максимально понятное описание проблем4 интеграцию со storyboard, на тот момент, я еще ими пользовался. до этого я уже успел написать свой sialogger на swift, не помню есть он в гите или нет но с того момента этот логгер сильно улучшился, и современной версии точно нет в гите иногда подумываю выложить. да подход к разработке библиотеки которую не планировал показывать в свет, конечно глобальныйпочему кстати di контейнер? typhoon мне не нравился, а swinject на тот момент был очень сырым поэтому хотелось свойи по сложности не самая тривиальная библиотека. в какой-то момент, не помню уже в какой, было придумано слово спокойствие с лозунгом: пользуйся библиотекой, и будешь спокоен за свои зависимости :)так появилось tranquillity приставку di я добавил от старых привычек добавлять приставку у библиотеки и её классов. вначале я думал о другом виде бедствия - смерчь, ураган, и тп но после понял - так не пойдети решил пойти от отрицанияпочему? в typhoon мне не нравилось одна особенность - неверный граф зависимостей приводил к непонятному крашу в рантайме. был это 2016 год если верить гитуоткуда взялось название над названием я наверное думал дольше, чем над тем что бы сделатьбыло понимание - хочу назвать библиотеку как-то связано с typhoon (популярная библиотека для obj-c). библиотека появилась уже давно писать я её начал или на swift 21 или на swift 22 и цели её выкладывать на обозрение не былоцель была другой - изучить язык, и мне показалось, что подобная библиотека сможет справиться с этой целью. мою жизнь разобрали по косточкам, ну ладно :)надо следовать плана, и все-же рассказать историю появления ditranquillityя обещалпоток про библиотеку. ну и возьмем текущий твиттер я конечно подготовился, и сделал заранее больше работы, но все-же условно за место того, чтобы сделать в 10 раз больше нормы, я сделаю в 3 раза тоже же вроде как не очень. и да и нет да я отличный работник, думаю с этим мало кто поспорит есть конечно минусы - прямолинейныйно я не очень постоянный - график работы случайный, могу уйти если мне что-то перестанет нравитьсяа последнее это риск для начальства как-бы. у нас наоборот как-то чем старше мы становимся, тем ближе друг к другу (это я о семье)а я разве скучный? несу вон какой-то бред, всем весело :) да я высказываю свою позицию, но я же прекрасно понимаю, что она не сходится с другими, и могу не писать подобного. черт а ты прав :d просто у меня это не приоритетная цель, а так бы я старался лучше. на текущий момент да если бы я гнался за деньгами, я бы работал совершенно другом месте я прекрасно знаю, где мне будут платить больше, но меня туда не тянет. нет я живу чтобы умереть как и все люди в текущий момент развития цивилизации :dесли я люблю то чем я занимаюсь на работе, то это не значит, что я живу чтобы работатьесли мне дадут все деньги планеты, то я не перестану работать и писать код мне это нравится. что-то вспомнилось текст не влез целиком, поэтому картинкой. ну какбы да что ужасного? кто-то о бутылке целыми днями думает, а я о кодену надеюсь, вы понимаете, что речь про свободное время? если я нахожусь с семьей, играю на пианино, делаю что-то, что требует мозга, то о коде я не думаю в этот момент :). никогда :d но обдумываю задачу часто. это скорее к другому я уважаю себя, и не трачу время на ничегоработа должна быть рядом с домом, в шаговой доступностиосновные продукты питания/бытовая химия, должны быть по пути от работы до домаа внес я этот пункт, так как у многих вот эта цифра около 3 часов в день. чуть попозже история библиотеки надо работу доделать. просто из этого расчета времени можно подумать, что я сижу с часами в руках и как ток прошло ровно n минут, беру ухожу и больше не общаюсь с семьейтакого нет более того в семье иногда друг от друга устаем, и договариваемся например день отдохнуть друг от друга. что-то даже грустно стало прав написанное мною выглядит не очень красиво по отношению к семьев своё оправдание, могу лишь сказать - все не так плохо, как может показаться на первый взглядв отношении семьи, модель сильно упрощенная и приблизительная. для этого можно рядом с интерактором написать интерфейс/протокол с методом получить данныеа в модуле network реализовать этот самый интерфейс/протоколтем самым interactor будет использовать протокол, но вызывать при этом метод внутри network модуля. ну и если рассматривать наш пример из dip:presenter interactor - network - это зависимостино мы по прежнему хотим, чтобы interactor вызывал метод для получения данныхрассмотрим один из вариантов как это сделать:. ioc, inversion of control - принцип инверсии контроля/управленияна фоне прошлого выглядит даже простымэто ситуация когда контроль идет обратно направлению зависимостейчаще всего достигается паттернами: delegate, callback. вынужден согласиться но в каком-то виде я должен был это учитывать при подсчете временину и уделять время можно по разному например играя с ребенком, и параллельно сидя в телефоне, я не считаю, за время уделенное семье. вообще тут есть моя любимая картинка, которая показывает, что абстракции сильно зависят от наблюдателя то есть физически кошка это один объект, но её абстракция для разного человека разная. и тут вот и затык абстракция, это что-то не реальное view вроде бы реально - во на телефоне рисуется сетевой запрос - ну вроде тоже в какой-то степени реален - вон сервер стоита интерактор что такое? это набор бизнес правил. окей как разворачивать зависимости вроде бы понятно :d но как понять какое направление верное возвращаемся к абстракции и тут я утверждаю - interactor это абстракция, в отличии от network даже если interactor модуль с классамипочему?. а что если мы захотим сделать, чтобы в коде был только impo interactor? то есть будет так:presenter interactor - networkв этом случае одна зависимость была развернута, относительно первоначального варианта как такое сделать чуть попозже. но при этом у меня есть пример берем кусок какой-то архитектуры: presenter interactor networkпользователь тыкает кнопку, presenter что-то делает, передает interactor-у, то посылает запрос в сетьв коде будет impo interactor и impo network присутсвовать. своими словами, так и научился объяснять ибо ну, что такое абстракция? интерфейс/протокол? в общем случае абстракцией может быть даже класс, а интерфейс/протокол может не быть абстракциейух надеюсь сейчас не полетят тухлые помидоры. dip dependency inversion principle - принцип инверсии зависимостей не связан с di на прямую, хоть и созвучен в названиипринцип утверждающий, что сущности не должны зависит друг от друга на прямую, а должны зависеть от абстракций. про реализацию: в этом подходе зависимости выставляются наружу это не плюс и не минуспросто по другомуно некоторые библиотеки позволяют делать так, чтобы зависимости не выставлялись наружу - они внедряют зависимость в приватное поле прям. про экземпляр согласен но и у вас ошибочка: создается экземпляр класса, а не объектано так писать в 256 символов не влезешьможно писать создается объект, что вроде бы правильно, но меня что-то останавливаетесли не вдаваться в полемику создается класс все поймут. в чем минус? нужно создавать всякие специальные классы, которые будут создавать другие классы или использовать библиотеки. в чем профит? 1 проще подменять и контролировать зависимости актуально для тестирования2 srp - ответственность за создание зависимостей уходит за пределы класса что вроде бы хорошо3 не надо искать зависимости по всему классу - они видны сразу. ну или по другому - нечего в классах создавать другие классы, передавайте их через конструкторы/свойства/методы пускай тот кто создает ваш класс, будет думать как создать то, что вашему классу нужно. первый принцип di - dependency injection внедрение зависимостейон утверждает, что зависимости не должны создаваться внутри сущностей, а должны передаваться из вне. контроль: когда одна сущность, вызывает какое-либо действие в другойв ооп можно смело говорить класс, а не сущность а действие это вызов функции в любом его проявлении lambda, closure тоже функции. замечу, что у модулей есть ключевая особенность - они не могут быть зависимы циклически, то есть знать о друг другеклассы же могут быть зависимы циклически, но этого по возможности стоит избегать. зависимость: когда одна сущность, знает о другойесли модули: один модуль подключает другой модуль в языке обычно называется impoесли классы: один класс (a), использует на прямую другой класс (b) обычно это означает, что удалив (b) придется изменить (a). начнем с двух ключевых понятий:зависимость, контроль они присутствуют в этих терминах. как и ожидалось большинство знаю, что это но так как процент не 100%, то надо рассказатьтак как прочитать все термины можно легко в интернете, пересказывать я их не будупостараюсь своими словами объяснить как, я это понимаю. ну не отвечу я на этот вопрос честно не хочу если там вериться всяким исследованиям, которые иногда попадаются на глаза мимоходом про семейные отношения, то мы находимся в нормальной зоне, дай бог чтобы не в частой. не угадал :d ну например пол года назад я решил скульптором заделаться :d вот немного обнаженки в ленту за пол года конечно слегка помялась. 1 где-то на просторах китая есть реклама, что ходить по нужде нужно в душе - чтобы воду экономить :)3 и коллеги рады твоему приходу - надевают прищепки на нос :)4 не знаю где тут экономия возможно я не пью кофе, чтобы понять прикола. это слишком личная тема но в подсчетах время учтено, не беспокойся :d. о, вот это чудо щас было пишу код:let deadline = now() + seconds() тип переменной не указан и мне autocompletion достроил secondsпотом компилятор опомнился, и начал ругаться, что не знает, что такое now() без типачто это было вообще o_o. кто мешал в голове их переставить? посмотрел код, запомнил, лёг спать, на следующий день переставил это же так работает разве нет? ps историю к сожалению не читал. сейчас да но кончится неделя, и меня как след простынет ради интереса еще может недельку позахожу, мало ли вдруг что-то написалиможно конечно телегу считать соц сетью но я бы не сказал, что я в ней сижу - иногда захожу похоливарить это я в подсчет времени включил :). я их в подсчеты включил clash of clans в текущий период жизни там даже про wow есть, что пол года назад играл два месяца :). подобное я могу сказать о тех кто гуляет постоянно и туситсяникогда не понимал счастья в начале кайфовать, а потом жалеть об этомно таких много видимо я чего-то в жизни не понимаю. не ну если я сорвусь, то зная себя будет второй вариант. чую никогдано в период моей финансовой ямы я был в депрессии если меня не сломало 15 года не спать по ночам, три года работать зная что почти все деньги уйдут на погашение кредита, и я в этот период даже занимался библиотекой, то ну какбы. о точно - я же люблю поваляться в ванне ещё вот и два часа забытых которые я в конце написала по поводу снимать куртку в лифте даже более скажу - я ещё и рашнуровываюсь в лифте. перейдём к короткой части теория про di, dip, ioc не знаю зачем это мне кажется в наше время все и так уже знаю об этом всёа пока опрос - знаете что такое di, dip, ioc?. ну и вроде всё итого 16 часов - 2 часа спишем на память мою :)в экстренных (олимпиада, ну или чп) сокращается лень, убираются игры/кино, иногда снижается коммуникация с семьёй последним я не горжусь14 часов на себя чаще всего это кодинг сейчас твиттер ;). как мне тут напомнили - естественные процессы опять же тут сказывается воспитание - не задерживаюсь в туалете но за неделю набегает как бы то не былопускай будет часитого: 17-1 = 16 часов. армейское воспитание там на это дают не так много времени но хорошо ща запишу и это. да программирование спустя 15 лет кодинга осталось хобби и по сей день хобби за которое ещё деньги платят если я не за компом, то вполне способен в голове писать около 200 строчек кода, после чего их восстановить за минуты на компьютере. ленюсь периодами в прочем 30 минут поваляться в кровати не прочь каждый день ну и сюда припишем проблемы со сном - долго не могу уснуть, в силу неспособности перестать думать о коде/планахэто час в день в период надобности сводится к нулюитого: 24 - 7 = 17. хобби/спортиграю на пианино около 2-3 часов в неделю занятия спортом - 3 часа в неделюстрадают чем-то не понятным, но очень захватывающим - 1 час в неделюитого: 31 - 7 = 24. кино и сюда прибавим иногда похоливарить в телегев кинотеатры хожу крайне редко - считаю, что туда только ради картинки крутой идти стоит чаще смотрю дома как и с играми - периодамив среднем за год я смотрю фильмов 20 50 часов в годитого: 32 - 1 = 31. игры сейчас я играю в clash of clans месяц назад не играл до этого 5 месяцев назад поиграл в wow пару месяцев постоянства тут неткогда играю это 1-2 часа в день период игры около полу года в годпоэтому берём среднее: 1 час в деньитого: 39 - 7 = 32 часа. отвлёкся следующая категория перемещения тут я стараюсь экономить как могу, но люблю ходить ногамина работу, с работы, в магазинв будние в среднем выходит час по выходным - это скорее к категории семьяитого: 44-5 = 39 часов остатка. всю жизнь меня воспитали не отдыхать говорят что люди от такого режима срываются, сходят с умаиногда бывает подобные ощущения поэтому раз в полгода 1-2 дня я ленюсь и ничего не делаю. посмотрел да он ближе даггера по api, но не полный аналог в swinject (самая популярная) / ditranqullity, классы программы никак не модифицируются под библиотекуу toothpick есть использование атрибута вот kodein помойму очень похож. и в выходные если семья не занимает всё время иногда пишу код/идеи на салфетке если время есть, а компьютер не под рукойв качестве салфетки сейчас выступает обычно notes в телефоне. следующая важная категория - семья сейчас из-за твиттера уделяю ей меньше временино это около 15-2 часа в будние, и от 4 часов в день в выходные, иногда все выходныеза неделю минимум 20 часов минимум достигается обычно во время олимпиадитого 44 часа осталось. частный дом сегодня я чистил снег минут 30 бывает и 2 часа весной его надо откидать - почти весь деньлетом картошка отнимает 2-3 дня ещё есть теплицы что-то ломается - чинитьв среднем я думаю за неделю набегает часов 5 итого 64 часаи да, я не фанат этого :). ем я чаще всего два раза в сутки - день и вечер но даже если три, то воспитание сказывается - ем по армейскиприблизительно так: 3*7*5 мин + погрешность = 130 минут ceil(130 мин) = 3 часаитого 69 часов в запасе. в недели у нас 24*7 = 168 часовсо сном у меня сложные отношения, но в среднем 8 часов иногда 6 итого остаётся 112работа для простоты считаем 8 часовой день в реальности всё сложнее итого 72 часа осталосьэти 72 часа +- есть у всех. но есть то, что отнимает от саморазвития:1 частный дом зимой снег, летом помощь в огороде и куча другого2 семья есть дочка3 игры/лень/кино - периодами находит на меняну а ниже постараюсь описать +- из чего состоит моя неделя. начнём с нескольких как по мне важных моментов моей жизни, которые добавляют времени на саморазвитие:1 не сижу в соц сетях2 не любитель отдыха - отпуск это 2-4 часа в день времени на кодинг своего3 в кафе/рестораны я чаще хожу поесть. на библиотеку я убил много времени за 4года за последний год я участвовал в telegram конкурсе дважды, в funcode, в russian ai cupпри этом я работаю и не всегда ровно 8 часов в деньу кого-то то возник вопрос - где я нахожу время на это?постараюсь ответить. но это аналоги по тому, чем библиотека занимается существуют разные способы реализации внедрения зависимостей, можно и без библиотекпо api библиотека схожа с swinject и autofaq, но отличается от daggerесли мне подскажут аналог по api в андройде буду благодарен. начну с краткого описания библиотеки ditranqullity, чтобы все понимали о чём вообще речьбиблиотека занимается внедрение зависимостей в языке swiftаналоги есть во многих языках: java - dagger, c# - autofaq, swift - swinject, obj-c - typhoon. доброе утро/день сегодня в программе:1 чем занимается ditranqullity2 мой досуг, и где я нахожу время3 всякая теория близкая по созвучию к библиотеке4 история библиотеки5 что-то ещё, если хватит времени. ой про 5к загнал 15к в отделе разработки. а работает в компании 5к человек в разработке и многих устраивает это удобно - не надо думатьс одной стороны с директором можно всегда поговорить, обсудить, с другой - решение всегда только за ним ни аналитика, ни количество людей не влияют. зависит от директора/ов например в тензоре директор брал и сам иногда лез в код или рисовал ничего хорошего из этого обычно не выходило но это показывает отношение и доверие кстати аналитики там не было - как сказал директор так и верно и да мы пытались это исправить. возможно я java stream api не знаю но решение без сложных чтук занимает около 10 строк с учётом объявленний переменных и даже поддержки направления обхода (влева/вправо). логи были для самооотладки - потоки всеже но устройство односторонне - оно только принимаетвот ток подход у людей другой там - если устройство не работает/сбоит то за вызов мастера платят пользователю, за доставленные неудобства а о вызовах информация доходит до куда надо. скажите где вы работает - я хочу к вам правда в tassta сейчас также почти компания где бизнес говорит о проблеме разработчику для меня нонсенс обычно менеджер аналитик лид а разработчику по итогу сделать, что сказали. не подходит в чистом виде ни одна стандартная функция не умеет в цикличность например 1,2,3,4,5,6 сейчас на 3, доступные 1,3,5 следующий будет 5, а потом 1 тут или массив модифицировать или if писатьи я же не говорил решение ;). там не переписывали код его только писали после принятия mr ситуации изменения кода были редкостью конечно иногда было добавление функционала, но и оно плановое. я такое могу сказать о большинстве разработчиковно это скорее вопрос мотивации - какая мотивация у разработчика понимать бизнес? иногда и по рукам дают за такоевообще tassta первая компания где меня не бьют по рукам за инициативность. в том числе и из-за этого процессоров например тоже там отбирался для устройства чтобы лучше подходил. но там над каждой строчкой думать по дню надо былопомойму что-то около 50к строк суммарно, за 3 года в 10 человек. был в компании до армии но не долго из-за армии всего 3-4 месяцано в плане подходов к разработке, качеству это совершенно другой опытнапример всё держалось на код ревью и профессионализме тестирование во время разработки не было код + самопроверки. софт реальный это была система под американские тв приставки три года разработки, и релиз на 5 миллион устройства меняют раз в 5-7 лет ихкрутилось 7-8 потоков на нём и например задача получить список каналов это целый квест - это вам не rest api :). разные аудитории видимо :). как по мне, ты сегодня затвитился. напоминаю что завтра день спокойныйвначале расскажу немного теории, потом историю появление ditranqullity, что это вообще такое, и про то какие трудности были при её написаниину и видимо по подробней про быт, и где же я беру время на подобное. а так алгоритмы они по всюду для кого-то найти максимум в массиве оказывается уже сложно, а я напишу не заметив и не запомнив но дейкстру на память уже с трудом а это в свою очередь потеря времени, и ресурсов мозга, которые не безграничные. 10 пример с детскими книжками - ну а почему бы и нет? :). 9 и приписать структуры данных тут скорее наоборот - бывает вижу когда код можно написать лаконичней если использовать например set за место array. 8 можно сюда приписать всякие сложные деревья ифов когда логика сильно ветвистая почти как алгоритмы пишешь :). 7 телеграмм конкурс с графиками это притянуто - конкурс но будучи в тензоре мы тоже рисовали графики там кстати использовались алгоритмы интерполяции, для сглаживания графика, без добавления экстремумов. 6 простенько но все-же: есть массив элементов, есть доступные элементы есть текущий элемент надо в массиве найти следующий доступный элемент и его индекс после текущего при поиске массив считается циклическим еще понять, что задачу решать надо так. 5 когда писал игры там много чего: кривые безье, матрицы принятия решений, расчет физики, поиск пути. 4 сделать аналог главного экрана apple, с возможностью менять размеры иконок (не только квадраты) одной коллекцией тут не обойдешься самый главный алгоритм тут - заполнение. основная сложность в количестве отобразить одно сообщение чтобы оно на телефоне показывалось всегда над одной точкой пространства не так сложно когда сообщений много, их надо как-то уместить, но так, чтобы они не сильно отклонялись от своей позиции. 3 когда-то я делал ar задача: есть сообщения с gps координатами сообщений много, координаты могут пересекаться без сторонних либ на iphone4 сделать показ в реальном времени этих сообщений в ar на экране окошки сообщений не должны пересекаться. 2 difference(from:by:) - думаю ios ребята знают, что это и знаю, что только с ios 13 суть функции выдать какие элементы добавились/удалились относительно двух массивов у меня есть похожая и поддерживающая еще обновление. 1 ditranquillity - тут все понятно в ней много всякого связанного с графами и выбора верной структуры для хранения данных. холивар на проф темы зашел слабее надо было высказаться менее нейтрально :)как и обещал 10 алгоритмических задач, которые взяты из коммерческой разработки что-то притянуто за ушичто-то точно не вспомнил. это зачет жалко только должна была :(например школьная литература мне этого не дала, но репетитор по ней за пол года отлично развил подобное - но из школьной программы он ничего не давал. а разве нужны? я то со своими замашками вечно, чего-нибудь новое забабахать и недоделать, и то редко ими пользуюсь ditranquillity единственное открытое и рекламируемое простопсихика в универе развивается у кого-то так, что последствия печальны :(. если про образование холивар не зайдет, то напишу сегодня еще про то, где же мне пригождаются знания алгоритмов просто алгоритмов, уже не связанное с олимпиадами. массовое образование сильно размазано по времени и на это есть куча причин главная - потому что оно массовое и ориентируется на среднестатистического человека, который во всём средний плюс бывают концепции, которые нельзя просто прочитать и понять, они постигаются со временем. для первого лучше сходить в армию :d у нас в универе вообще иерархии как таковой не было преподавать/ученик и даже эта грань часто размывалась2 ну и вроде бы да теория графом мне пригодилось для библиотеки но почти все знания в трубу. а вот это хорошее замечание про софт скилы я забылеще не для всех, но кому-то сдача экзаменов еще развивает качество выкручиваться из любых ситуаций, что полезно в любой сфере :). ну и немного в сторону я слегка преподавал, то там то тут курсы, даже студентам из ит да похвастаться, что я обучил 1000 человек не могу ели как на 50 наскребуно на текущий момент, ученица с 30+ возрастом и гуманитарным образованием лучшая кого я учил. фигня какая: освоить программу ссуза необходимо, чтоб быть отличным проггером вышка нужна далеко не всемпрограммы, что ссуза, что вуза недостаточно, чтоб быть отличным проггеромне везде (во времени и пространстве) преподают достаточно хорошо, даже ту программу, что есть. 10 и все то, что я написал это на 15 года к сожалению тянет из 4 лет при этом 1,7 пункт нельзя получить читая интернет 9 можно, но я не встречал людей которые по собственной воле, берут и учат разные языки и технологи после вышки иногда да, без нее пока нет. 8 иногда может повезти с преподавателем но тут как и с курсами - повезет не повезет9 универсальность - с проф образованием можно например с ios легко перейти в f# разработчики, просто за счет того, что в универе давали всё. 7 если осознанно выбираешь специализацию, то она полезна, и эти знания сложно найти в интернетенапример у меня суперкомпьютеры и параллелизм подобный опыт бесцененна практике только помогает при работе с потоками. 5 float - его там вдалбливают после универа писать floatvar == floatvar2 отпадает на этапе зародыша6 хоть немного, но знание истории ит полезно просто чтобы осознавать, что ит не камнем выбито, а очень динамичная сфера, но при этом ничего нового с 60 годов почти нет. 3 от junior в ит не мобиле, иногда спрашивают университетские знания например от с++4 uml - то, что я не вижу на курсах, но то что помогает если не знаете - советую, помогает коммуницировать при общении о архитектуре/паттернах, иногда даже с заказчиками. какие же плюсы в проф образовании я вижу:1 очевидно корочка которую меня пару раз зарубежные компании просили2 в 17-19 лет человек редко думает о будущем - хоть чем-то себя занять процент людей с моего потока и оставшихся в ит это доказывает - около 25%. и вроде бы на этом моменте я должен сказать ит образование не нужно идите на курсы, и тпно тогда поток быстро стухнет, и сейчас я считаю, что всеже пользу оно дало, но польза на 4 года не тянет. если честно, то корреляции между образованием, и реальными навыками людей я не обнаружил как и между опытом/возрастом и навыками наверное faamg не согласятся тут со мной. и мнение к проф образованию стало меняться - я стал еще больше думать, что что потерял 4 года жизнипервое на что это повлияло - перестал задавать дурацкие бесполезные вопросы про собеседования в другой день. что изменилось со временем? а поменялось две вещи:1 люди которые даже знали это, не всегда могли писать код2 люди которые способны ответить на эти вопросы, стали появляться все реже и режену и возраст/опыт. и первых лет 5 я как добросовестный студент, считал, что зря я закончил универ но не мог себе это признать, поэтому на собеседования любил спрашивать:1 чему будет равно 0xc1 + 0x0b2 представление float в памяти компьютерану последнее еще хоть как-то полезно. а мне то покуда знать, что в нем плохого - мне не рассказывали как писать код, мне про сетевую модель 3 месяца рассказывалина самом деле мне еще повезло - на первом курсе был один преподавать из ит, а не академик, и он нам всеже рассказал но не всем повезло также. ну знаю я эту сетевую модель iso (ой простите osi), или нам рассказывали про отличия risc cisc misc за 8 лет не пригодилось, второе даже на собеседования не спрашивалитем временем на собеседовании, дают кусок кода и говорят: что в нем плохого. дальше про моё мнение а оно у меня крайне не постоянное :)когда я закончил универ, мне казалось, что зачем я вообще его закончил? и вроде фит, но что-то данные знания, не очень пересекались с тем, что хотят работадатели. начну я с наблюдения - все чаще замечаю, что в ios идут люди с экономическим образованием видимо чувствую, где денег больше, а требования ниже :). ну чтож начнем поток про проф образование надо добить этот день окончательно :)но результаты опроса достаточно хорошие - даже если закинуть удочку, что без вышки в ит делать нечего, то в темном углу не поймают но я так не думаю, на всякий. это был эксей? или он последователей взростил 🤔. давайте пока опрос что-ли проведем, пока я работу работаюкакое у вас образование:. для смены интерфейса должны быть резкие причиныкак по мне резкая причина, это поменялись требования но тогда и тесты не актуальными в любом случае станутостальное это рефакторинг а нужен он или нет, это вопрос другой. в моем мировоззрении вот это то как должно быть у всех :) и, да, это сложноps часто переписывать большие куски кода, точно не то к чему надо стремиться но если переписывать, то только так :).  : пока ты сидишь один и лепишь костыли как не в себя — это всё может быть здорово, конечно но как только появляется такая сущность, как команда, эта скорость начинает давать сбой поправить одну строчку за больший срок с тем же результатом — это лучше, чем быстро переписать. чёрт ты мне напомнил - главное забы хоть я и был призером всероссийской сузов, но суммарно в обычных 2 часовых олимпиадах я участвовал раз 30, если учитывать codeforce ну и был курс по решению этих задач в общем я не прям олимпиадник жёсткий. что-то получилось сильно холиварно пожалуй буду поаккуратней в следующих твитах, а то так времени на работу не хватиттему про олимпиады не буду дописывать, чуть попозже начнём про проф образование. сидят разработчики, спорят о читаемости кода пьер безухов: а вот у нас линтер ругается, если функция длиннее 124 строкнаташа ростова: а у нас вчера разработчика уволили за то, что зависимость в конструкторе не проинджектил! александр кучук: clientutilsmega_prefix !. ладно заканчивает эту переписку а то и так много уже написали и про читабельность тоже в субботу можно продолжить будет 😃можно в личке при желании продолжить. открывает стрим, фильтруется по префиксу, ищется первый или не открывает может rx вообщетак: первый элемент начинающий с префикса если это rx, то будет чуть по другомуприблизительно да, но детали типо не важны?но через for понял бы точнее for более читабельный?. ну ты утверждаешь же полностью противоположное - что читабельность это термин но что считать читабельным кодом?ну вот написано 10 строчек на swift берём 10 swift программистов 5 прочли за секунды, остальные прочли более минутукод читабельный?. в твиттере да я не заявлял себя как знаток русского языка но что-то мне кажется, что писатели способны написать 100-200 предложений без ошибок, если у них будет такая задача. ну вот то есть этот код не читабельный для тебя? но для другого читаемыйjava уверен, что о языке что-то ты не знаешь а значит есть код который ты не поймёшьну для меня на java будут не понятны lambda функции когда я его учил их не былодля меня lambda не читаемы. кто сказал, что функция печати в консоль не имеет багов? чтобы такое делать должно быть с самых низов не иметь багов. коммерческая и промышленная для меня разные понятиякоммерческая все на чём делают деньги сюда куча всего входитпромышленная - связанная с промышленность и часто под много устройствчаще всего это написание софта под корректную железку. не ну я бы по другому написал - если программист не может переписать 100-300 строчек кода сохранив функционал и добавив доп возможность, не привнеся косяков, то стоит задуматьсяинтуитивно-переборные программисты - нас так обзывали в таких случаях. ну я так не говорил например: баги с потоками тестирование сможет выловить? 50/50 как и программист не факт что поправит если выпишут багно при определенных подходах программист может отсечь полностью этим проблемы. код читабельный? :) если да - то что тут написано?если нет - а для другого программиста?читабельность это жёсткое определение? ну мне говорили так: код должен быть написан так, чтобы даже младенец смог прочитатьпо эту определению, я пишу не читабельный код но стремлюсь. да этот скилл развивается и олимпиадники тоже учатся ему если им это нужно я помню случай - человек пишет код, но понятный только ему решение - не будем его пускать в команду, пусть пишет одина потом - он не способен работать в команде удивительно. у нас курящих людей не брали в команды олимпиадные поэтому любовь к зож прививают. ну вот я и об этом - если другие это олимпиадники то они смогут прочитать код где переменные называются a,b,c (это как пример, даже олимпиадники так редко называют) без проблемолимпиадный код надо рассматривать как другой язык, который не поймут другие категории. подумаю да конечно это идёт больше к промышленной разработке - там где нет слоёв в виде систем, которые имеют багино я сам не участвовал - был джуном на тот момент, но был в команде где это делали, и видел. подожди, а тесты зачем? они то наоборот не сломаются ну не настолько глобально всеже перепишут, что даже api поменяетсяно суть утверждения твоего понял, и согласен. в коммерческой разработке применяют функциональную парадигму там хороший код не уверен, что понравится человеку с ооп мышлениемно даже внутри ооп сказать код хороший или плохой не всегда очевидно на первый взгляд плохой код, при попытке переписать оказывается хороший. ну не настолько но да я умею вбрасывать не общепринятые мнения :). спасибо ну я и писал - холивар а он удался даже больше чем я хотел 😃правда год ток начался ;). ну для сбера надо было пример посложнее - ну например чат тех поддержки а то тут ответ да вопрос скорее сколько они делали фичу, а не когда появилась я вот телегу с точки зрения звонков досихпор не рассматриваювозможно поэтому и не было - не требовалось. жалко, что на этих олимпиадах не учат разговаривать большинство виденных мною олимпиадников плохо умели в коммуникации бекенд придумал неудобный api? они будут сидеть и превозмогать трудности вместо того, чтобы пойти договариваться. я с тобой полностью согласен мне кажется, что степень расслабления в таких условиях как раз и зависит от личных и профессиональных качеств разработчиков я думаю agile хорош тем, что на долгой дистанции он менее способствует выгоранию команды не ставя под угрозу бизнес. у меня на проекте как-то коллега скриптом прошёлся по файлу проекта а после обновления xcode падал каждый раз когда добавляли новый файл пока чинили это досконально выучил структуру проекта, что б добавлять файлы через vim. если я скажу, что видел как программу доказывают - её корректность, то это будет как фантастика, даже несмотря на правду проще сказать пример близкий к понятию без багов, чем рассказать как же можно доказать корректность программы 😞. смешно если я могу прочитать например математическую формулу, не напрягаясь, то она от этого стала понятной? простой? легко читаемой?для меня да, для соседа который не может сдать экзамен нетэто сильно не чёткие понятия. ну это же тоже баги - просто не в твоей программе, а в системея не утверждаю, что в андройд/ios можно написать программу без багов я даже в это не верюя говорю, что программа без багов может быть в том примере там программа сразу над процессором идёт. согласен но объём кодовой базы у них приличный всеже и у них сильно связанный функционал, а это сложнее чем много отдельных фич. методология при которой очень удобно откладывать на будущее и баги и фичисама методология хорошая, но расслабляет. ну любая программа имеет баг - крашнет если вся вселенная схлопнется. а с чем? с whatsapp?главное приложение сбер хороший пример противоположности:больше функционала, намного больше людей, но меньше нового а вот сложнее ли он? я так не считаю - телеграмм это много связанного функционала сбер много не связанного в этом и суть сравнения была. возможно тут конечно стоит уточнить, что и бывших/текущих олимпиадников я вижу редко не считая чата, где мы общаемся но там чуть другой тип олимпиад - месячные и там код не хуже коммерческого, что я видел. открой чат телеги с изменениями :)с утверждением согласен, правда пропорции 1/2 кажется сильно заниженным возможно тут они лишь условность. я написал условно к сожалению хороший код и его правила нельзя назвать ни одним словом, ни одним предложением собственно в субботу будет об этом как противоположность теме про олимпиады :). тесты писать яб сказал с олимпиадным опытом намного проще, чем без него в силу наличия навыков декомпозиции любой задачиа вот гибкость тут да с другой стороны они перепишут класс, быстрее чем обычный программист поправит одну строчку в нём. а вот программ без багов не бывает это ложное утверждение если отбросить баги обусловленные физическими процессами (радиацией) то программы без багов бываютнапример софт: 5миллионов устройств 5 лет работы - ни одного сбоя отсутствие бага это не доказывает, но всеже. смотри если я напишу программу на другом языке в парадигме не знакомой тебя, то для тебя этот код будет плохим но те кто знакомы с парадигмой его смогут читать без проблемесли код написан в олимпиадном/математическом стиле он будет кому-то понятен кому-то нет. там ещё возникает проблема в том, что и область сложная даже более - если алгоритм напишут в самом читабельном варианте, скорей всего обычный парень всеравно его не поймётпросто из-за того, что это алгоритм, который оперирует математическими понятиями. олимпиады прямого отношения к продуктовой разработке не имеют но принятое мнение раз олимпиадник, значит будет писать быстро, и не красиво не верное они очень быстро адаптируются конечно если есть смысл - если его посадить одного, то адаптировать некуда будет. никто не мешает сохранять уровень команды одним зависит от бизнесано как я писал выше лид должен учитывать способности команды, в том числе и будущей если код не читабельный, а нужно 10 джунов, то ну какбы ничего не получится. я людей без олимпиадного образования с таким отношение вижу чаще чем с олимпиадным это скорее характеристика человека и его отношения к продуктуя не видел такого места где программистов наказывали за баги не наказан - не вор, очень хорошо работает :). посмотри код телеги solid, kiss, dry и всё остальное там ну почти не соблюдаются на ios их там двое вроде сейчас а фич в телеге делается сбер со своими 200 программистами и рядом не стоял. но вот главное чтобы работало это не верное утверждение там другое правило программа должна работать в указанных условиях в коммерческом коде программа тоже работает в определённых условиях, а не в вакуумено и олимпиады можно писать по разному :). да не спорю - там упор на скорость, нежели на красоту кодано красота кода понятие относительноеесли команда состоит из олимпиадников - то несмотря на полный ужас в коде, продукт будет работать и развиваться, и не имеет багов. а я писал - как лид я должен быть мотивирован делать продукт, и оптимизировать работу команды значит и свою тожено важнее это воспитать у команды, а как показывает практика - редко ученик превосходит учителя :). чтобы избегать подобное нужно воспитать в себе самотестированиеи современные agile плохо способствую этому качествуесли я не пишу олимпиады вообще, то я начинаю замечать, как моё самотестирование падает - это проводит к багам, к рефакторингу потери времени. итог:1 пользователю пришлось скачать много раз приложение2 пункт 7 != 3 - код забывается, это влияет на время правки3 пункт 3,7 != 1 - код будет хуже, так как будет добавляться, а не учитывать всё сразу4 иногда это приводит к переписыванию фичи целиком. пример:1 написали фичу, сразу в тестировании2 тестирование нашло n багов3 поправили4 повторили 2,35 выпустили6 позже нашёлся ещё баг7 поправили8 выпустили9 повторили 6-8. чаще всего так происходит в угоду скорости и если тестирование не увидело, то и пользователей не коснётся да и поправить можно же будет ещёно тут и кроется ловушка - суммарно скорость разработки падает, а пользователи испытывают дискомфорт, а иногда теряет 96лямов :). начнём с 1 я все чаще замечаю перекладывание ответственности на тестированиеи с точки зрения качества это плохо и вот почему:хороший программист по коду видит все пути развития программы - способен проверить все кейсытестирование проверит то, что проверит, но не всё. и эти правила очень важны, так как воспитывают правильное отношение к написанию кода:1 прежде чем зарелизить фичу убедись, что она работает во всех кейсах2 если в программе баги, то программиста не погладят3 делаешь больше - ценят большеps на зп прямо не влияет :). это правила сдачи задачи:1 задача считается решённой, тогда и только тогда, когда прошла все тесты2 за неправильное решение штраф/кнут3 чем быстрее решил, тем больше пряниккстати школьные олимпиады имеют другие правила - там баллы считают от количества прошедших тестов. самый распространенный формат это двух часовойты запираешься от всего мира на два часа, и пытаешься решить 5 задач есть второй вариант, но командой из 3 человек там задач и времени побольше но у этих олимпиад есть одна общая черта:. но помимо прямой выгоды - ты можешь написать/оценить алгоритм есть и не прямая/скрытая часть, у олимпиади я не о показать себя и повысить/понизить свою самооценку, хотя это тоже польза, а о более глубокомдля этого вспомним, как выглядят олимпиады в программировании:. и возникает вопрос - и что? алгоритмы/олимпиады нужны только чтобы собес пройти? и то в яндекси вроде ответ очевиден - не используем, значит не нужнода раз в год и палка стреляет - но google спасёти данных на мобиле обычно мало в общем поток можно закрыть, или?. так а кто умеет оценивать сложность алгоритма?тут я уже не могу предсказать распределение заранее :). в чистом виде на работе все алгоритмы сводятся к выбору - использовать массив/словарь/множествохотя кое-что полезное я всеравно использую из алгоритмов - это о-большое, ну или точнее оценку сложности алгоритма но и то даже если во всех местах будет o(e^n) это не заметят. интересно - много кто не из россии оказывается 🤔. скорей всего преобладать будет последних два вариантаи так по любому базовому алгоритму если я напишу а* или алгоритм бойера-мура, то результаты будут ещё нижеда и что лукавить - на работе мне не приходится использовать алгоритмы ну почти. когда вы последний раз писали сами ну скажем алгоритм сортировки? а не использовали встроенную функцию сортировки?. основа почему говорят, что олимпиадное программирование, ну и алгоритмы, не нужны, это то, что в коммерческой разработке уже всё написано, и самому писать ничего не надо. начнём мы с менее холиварной темы - олимпиадное программированиевначале я накидаю, а вы подхватывайтев общем это поток будет о олимпиадном программировании, их пользе вообще и в коммерческой разработке в общем. доброе утро/день :)сегодня нас ждёт дискуссии о олимпиадах и проф образованиюя сейчас все дела утренние закончу, и начнём. во всём виноват мой финансовый кризис 😃. ох помойму если собрать проект, оно вообще умирает ну точнее во время запуска проекта, у меня стабильно нет подсветки, и переходы не находитв общем я смирился - выучил весь синтаксис наизусть, и никаких проблем. у меня нет 6 лямов на тёрку а обученные в максималке не спасают не слегка спасают, но это +10 секунд кода на каждые 50к цены. мне ничего не помогает я даже проект xcode из одного файла убиваю, как ток начинаю писать код правда он очухивается быстро на одном файле а на реальном проект - ток перезагрузить и подождать с минутупроект почти только swift, и разбит на swiftpm модули. в xcode со swift я уже понял в чем проблема - во мне я слишком быстро меняю код, и он вечно глючит на постоянных обновлениях индекса ну и размер проекта влияет ещё. это не баги, а мелкие неудобства вот то что дебаг падал ровно через 5 секунд, вот это да - баг так был :). в xcode вообще не подсвечиваются переменные, не то что при наведении в дебаге, а даже просто в ide то не всегда. багов у xamarin было много, когда все пользовались крякнутой версии когда они сделали сначала доступную инди-подписку, потом сделали его бесплатным (после покупки ms), проблемы ушлибольшинство косяков связаны с неудачным чьим-то портом сторонней нативной библиотеки на c#. но никто их не будет выкладывать если не дай бог, какой-то бот станет популярный, то он может повлиять на рынок - много людей используют если а это уже всякие проблемы и суды. с ботами всё на самом деле просто пишешь любой индикатор сигнальный - уже что-то работает находишь пару акций на которых он работает часто - уже профит а дальше прикручиваем учёт истории и анализ всех акций и уже норм проценты. максимум что можно найти простые скриптовые боты под quik и то они помойму не покупают/продают, а какую-то информацию выдают дополнительнуюа если и найдёшь, то или старое, или доверять не стоит. завтра будет про олимпиады и проф образование надеюсь на активное участие подписчиков темы холиварные :)у меня уже 10 вечера - надо готовиться к отдыху :). статью я так и не написал, но хотел и в свое время не нашел есть отдельно про апи брокеров, есть алгоритмы описывающие определенные теоретические стратегииминусы очевидно - никаких гарантий за пол года 3-5% в месяц, не гарантирует, что в будущем будет также. о вспомнил просто смешную историю на эту тему в свое время до слез :). ты можешь взять акцию в лонг или в шорт лонг - это просто покупка акции шорт - это ты продал по текущей цене акции, которые одолжил у брокера и ожидаешь, что цена акции упадет если цена акции растет, ты теряешь деньги. но вот самая любимая история на эту тему. о да когда это произошло, мой финансовый мир окончательно сломался :d я сток статей перечитал, чтобы понять как такое вообще возможно - цена на товар отрицательная, и как работают фьючерсы. ой не осилю но было сложно :d ломка была сильная да и досихпор есть небольшая но я понимаю, что есть другие дела, которые в перспективе мне дадут больше, чем игрыи я не прям бросил - я играю, но очень мало, и периодами. нет на то есть важная причина - кто-то решит им воспользоваться, потеряет например деньги, и виноват буду я мне такая головная боль не нужна :). но ночью прошла новость - компания почти банкрот в итоге при открытии цена на акцию падает на 50%брокер на такое не может отреагировать успеть - он тоже живет в рынке, и просто не успевает продать акции итого твой минус -20рублей + -100рублей по итогу ты должен 20 рублей. пример у тебя было 100 рублей ты воспользовался плечём 1к2 то есть купил акций на 200 рублейв течении дня цена на акцию упала на 10% итого твой убыток минус 20 рублей волатильность акции в среднем 20% например брокер предполагает - потери не больше 40 рублей у тебя. по факту брокерские системы всегда предполагают наихудший сценарий, и закрывают сделки с использованием плеча заранее - тогда когда вся сумма денег может стать нулевойно если вдруг акция после закрытия торгов изменила свое значение очень сильно, то возможен уход в минус. начиная с 2008 года, потерять больше чем у тебя есть денег, почти не возможно брокеры обязаны за этим следить и закрывать сделкино потеря больших сумм возникает из-за маржинальной торговли/плеча - это когда ты берешь аналог кредита у брокера. ш и самое частое - раннее вступление на эту должность я понимаю почему это явление частое, и не всегда лид в этом виноват, но чаще всего все пункты выше, являются следствием этого. д tech lead не адаптирует код/ci/git под размер команды и структуру компаниие лиды не занимаются развитием команды лекции, занятия и тпф расстрельный пункт: лиды сами не мотивированы делать продукт г лиды сами не пишут код это понижает их авторитетность. 6 какие проблемы я чаще всего наблюдаю:а совмещение этих должностей в этом нет ничего плохого, кроме как большой разной нагрузки на 1 человекаб team lead не следит за мотивацией командыс лиды соглашается на все, что говорит менеджер, не отстаивая даже сроки. tech lead - ему не так важно, что там с мотивацией людей, ему больше важны технические результаты команды его ответственность сделать так, чтобы писать код было комфортно, быстро, качественно. 5 но у них разная внутренняя роль team lead - следит больше за состоянием команды - за их мотивацией делать продукт этот тот кто знает у кого умерла кошечка, и дает отпуск человеку по этим причинам в его круг общения входят hr-ы. 4 если в команде оба типа лидов, то они обязаны коммуницировать tech lead должен замечать, что программист хуже/лучше пишет код по вторникам, а team lead должен знать почему так происходит. 3 оба типа лидом могут выступать на конференциях скорей всего у них будут разные по содержанию доклады, но tech lead это не полный интроверт сидящий в углу и говорящий - тут не соблюден паттерн такой-то. и на последок: team lead / tech lead1 для меня оба типа лидов ориентированы в команду - их задача отстаивать интересы команды, а не менеджера2 при этом оба типа лидов должны общаться с менеджерами - давать оценки, понимать план развития продукта. смотрю большинство играющих :) напишу список любимых игр: starcraft 1/2, dota 2, wow игры из прошлого, но в которые я и сейчас не прочь поигратьсам пересел на телефон: clash of clans, among usа вот в настолки почти нет, зато есть это :). видел локальный гит в состоянии проще удалить чем починить при коммите комп упал в bsod, перезагрузка, и приехали. ну и на конец - я больше не играю на рынкахно при этом я не утверждаю, что на них нельзя заработать на них можно заработать, но не всемсейчас я слежу за новостями слегка и основными индексамивозможно через какое-то время вернусь как инвестор, но точно не спекулянт. а сейчас кстати есть прикольная история связанная с рынком и пользователями reddit которая показывает логичность рынка :). да почти так и есть только последний пункт слегка не так я прекрасно понимаю куда делись деньги :d. но эта история повлияла на мое отношение к деньгам если раньше мне было глубо по барабану сколько я получаю, главное чтобы работа была интересной, то после этой историинет я не сломался, и досих пор деньги не преобладают, но теперь они стали влиять на решения. сейчас я рассматриваю это, как очень дорогой урокя стал лучше понимать рынок/экономику/политикумне пришлось просить повышение зп, благо повышали мне её без проблем до и после этой истории обычно зп мне повышали без моего участия. некоторые выводы из этой истории:1 когда дело касается денег, даже логичный человек может вести себя не логично2 спекуляции на рынке возможны, и на этом можно зарабатывать3 спекулировать надо используя свои деньги4 лучшая тактика - следовать одному плану. в итоге начал играть в игры даже не так - я начал играть в wow, чтобы забыть о бирже, и не потерять все остальные деньгичерез небольшой промежуток времени вывел остатки, около 30% от начальной суммыну а wow через три месяца спокойно бросил - уже умею. я стал лезть в работу бота не давал ему до конца отработатьк тому моменту (прошел где-то год), я уже сильно выгорел, от ночной торговли, бота, потерянных денегпонял, что я еще и зависим от игры на бирже. собственно говоря бота то я написал после всех комиссий, и учета плохих сценариев поучилось среднее около 3-5% в месяця даже его запустил он даже начал работать и приносить какую-то прибыльно все это не про меня. пришлось научится учитывать этот факт - что покупка/продажа должна учитывать, что другие люди тоже продают/покупают, и твое желание покупки/продажи, не всегда может даже сбыться, если покупать по текущей цене. к тому моменту я уже потерял половину первоначальной суммы да я упертыйбота я писал долго, самое важное что я написал - это умение прогонять бота и сделки используя историю то есть тестирование это кажется легко, но в реальности сделка не делается по шелчку пальца. понятное дело, сыграли большие суммы с которыми я оперировалрешение было банальным - раз я программист, то и решать буду задачу с этой стороныперешел на finam, разобрался с api для ботовк слову сказать api так себе. со временем, я понял, что не такая у меня крепкая психика и жесткая логика, чтобы играть на бирже но когда я это понял, было уже поздноватоно я решил попробовать зайти с другой стороны. мои все неудачные сделки доходили до нереального абсурда: я мог в чате трейдеров написать план когда акцию купить, когда продать, по сколько и с 80% вероятностью прогноз сбывалсяно мои действия почти всегда шли в разрез плану. и тут то все и началось я очень много раз совершал сделки с большим дневным профитом но и не меньшее количество раз ошибалсявы думаете не повезло? 50/50 и тдкак бы не так:. через три месяца частично на эмоциях, частично из самоуверенности я взял кредит большой кредит да конечно я посчитал что в худшем случае я смогу его погасить, но почти не есть не пить придетсянарушил главное правило инвестиций - использовать только свои средства. хотел бы я написать - был молод и глуп, но мне было 25 и решил я поиграть на фондовом рынкеначал я с тинькофф инвестиций, и с маленькой суммы (моя месячная зп)и тут у меня все было хорошо - успешно спекулировал. поток про мою финансовую безграмотностьна самом деле история крайне печальная и глупая, но время не вернуть, а когда все закончилось, можно и поделитьсяможет кого-нибудь спасет от ошибки. про ditranquillity позже, но частично нижепро досуг: 1 жена с дочкой мне придумывают2 иногда я играю на пианино для себя3 пишу код да 15 лет его пишу, и все равно свободное время трачу на него недавно писал на kotline russian ai cup4 игры на телефоне pc редко. ну если отбросить git, то самый распространенный это конечно же конфликты в pbxproj файле которые или решают не верно, или автомерж иногда даже ломает. каждый раз ломали по разному, и версия xcode меняет варианты сейчас можно сломать проект, если неудачно derivereddata почистить, а на проекте swiftpmиногда система/юзер случайно *o файл ломает, и проект перестает собиратьсяну и шалавливые ручки любящие скрипты из инета. это был краткий пересказ моей историио технических особенностях разных проектов, я еще расскажу в день архитектурыа сегодня нас еще ждёт:1 история, как не надо зарабатывать деньги2 team lead vs tech lead - отличия должностей3 по желанию, могу что-нибудь рассказать. 😃 к сожалению лично, я с ним ни разу не встречался, но в чате часто читал его да возможно его так можно назвать - с его опыты, и с учетом, что он ведет курсы разные, может претендовать на такое звание ps а разве не эксей как правильно? :). ну и третий пункт - я чувствую свою нужность проектусейчас я тут на должности team/tech lead team lead назвать себя сложно - команда маленькая покано как tech lead на проекте уже много чего поднято из руин. и наконец, где же я работаю сейчас я работаю в tassta да у компании есть нюансы, которые мне не нравятся, но есть два важных момента перекрывающих всё:1 можно влиять на продукт в целом2 при разработке ios приложения вся ответственность за него, на разработчике. ушел я в тензор пробыл там пол года и снова ушел за пол года успел рассказать курс и один (или два) раза выступить в общем не стоит возвращаться в компании, в надежде, что что-то изменилось тем более в большие. почему же я ушел из цфт? мне не нравились две вещи:1 халявка моя скорость разработки, обычно мешала, так как я хотел сделать больше чем надо, и мне приходилось себя замедлять2 я понял, что продукты связанные с банками не моёна самом деле не знаю частично жалею о уходе. как итог после 30 минут дискуссии сделали вывод - апостол так как презентация была внутренняя, то я не постеснялся и написал на слайде апостол программированияпосле меня долго обрабатывали, что я должен так начать писать везде сам бы я не решился публично себя так назвать. я делал презентацию на главный слайд поставил картинку где человек возносит руки к небу один из разработчиков это увидел, и сказал, что-то аля ты смотрю богом заделался, кабинет такое пропустить не мог, и началась дискуссия бог, священник, пропагандист. многие думают, что я прозвал себя так из-за того, что я очень люблю пропагандировать хороший код, философствовать на разные теоретические темы, ну и очень быстро пишу код (спасибо олимпиадам и играм)но на самом деле было так:. после этого я искал место поспокойней, и где должно быть хорошо и такое место я нашёл цфт о этой компании могу писать только в позитивном ключев цфт я вел курсы, участвовал в конференциях, писал хороший продукт и стал апостолом. был случай, когда поменяв цвет кнопки, появилось 10 новых багов в логике так как в коде логики были проверки - если цвет топосле моего ухода еще пол года проект не могли стабилизировать людей не отпускали в отпуски по итогу вся команда ушла. проект состоял из: входа, переписки, настроек этот функционал уже писали год в проекте было 60 внешних зависимостей бывали случаи когда на вьюху доходили модели бд, и там изменялись но все было скрыто протоколами - сразу и не поймешь. так я отошел пригорает и по сей день, а прошло 3 года :)из-за подобных казусов я ушел из тензора ушел в неизвестную компанию, с полным nda проработал там три месяца и сейчас вкратце опишу почему. это касается не только c++, это касается любой кросс-платформы сразу идут повышенные требования к архитектуре проекта и квалификации разработчиков говнокодить при кроссплатформенность больнее и это минус любой кроссплатформы. именно так а ещё с++ под одну платформу, и кроссплатформенный с++ требует разного уровня для второго стоит читать документацию я там как-то ржал с того, как они сортировку открыли для себя - оказалось есть правила к оператору сравнения которое ub даёт если не соблюдать. функционал входа ios джун написал 15 года назадс++ переписали этот функционал влили по тихому - никто даже не знал, до вливания итог - пол года не было возможности войти в приложение пол года! с++ сеньоры, не могли сделать то что сделал ios джун за месяц. ну а дальше вторая ошибка - использовать существующих с++ программистовя просто опишу случай, чтобы никого не оскорблять, и не наезжать прошло много времени, но эмоции досихпор зашкаливают от этого:. с++ я люблю этот язык но то, что произошло в тензоре, это ужас намерения понятны - нужна общая логика на ios и android решений много, но руководство хочет с++и тут совершается ошибка, которая технически испортила проект - берется с++ ядро с бэка 4гига. тензор чудесное время пока не появился с++ :) проект дал мне многое - хороший опыт в swift частично из-за необходимости заменить тайфун в проекте, я вывел свою библиотеку в обществоопыт управления командой из 7 человекя бы и дальше работал, если бы не с++. библиотеке будет посвящен целый день почему swift? я очень люблю строгую типизацию мне нравится, что многие ошибки можно обнаружить сразу мне зашёл синтаксис языка ну и он быстрый - не хуже с++ в производительность особенно с unsafe api. и так что происходит в это время:1 я начинаю писать свою библиотеку ditranqullity цель которой лучше понять язык2 я устраиваюсь в тензор, где swift 22 версии, и где есть опытные разработчики3 окончательно решаю, что не хочу быть с++ так как влюбляюсь в swift. причин ухода было две:1 команда не хотела даже смотреть в сторону swift - их всё устраивало2 проектов снова не было, и на работе протирали штаныи когда начал искать работу, то быстро появилась третья - оказалось я стою минимум в 15 раза больше. начинал я в компании как джун, через 2 года ушёл как team lead меня это досихпор печалит - 3 года в ios и ты лид какой лид? за такой срок даже кодить то ещё не научиться, не то что программировать, а уже лиди несмотря на суммарный опыт уже около 8 лет, снова смена компании. и тут я выбрал компанию где работал бывший преподаватель мой я решил, что с точки зрения развития это лучший вариант - главное его уговорить заходить в отдел ios иногда. думал я не долго - три месяца пошёл искать работу не хочу никого обидеть, но тут как с чиновниками - люди которые ничего не умеют идут в ios это шутка, но в каждой шутке доля правды я искал с++ или ios работу, и офферы я получил только от ios. компания занималась написание аналога autocad было много математики, и мало программирования продукт конечно интересный, но когда 50 программистов пишут в одну svn ветку, и релизы создаются из этой же ветки, начинаешь задумываться. в общем работу я не нашёл стал репетировать, чтобы хоть как-то подзаработать на жизнь и читать книжки, статьино чуть позже мне повезло, и мне предложили пройти собеседованиене зря в универе давали математику - скалярное и векторное произведения я не забыл. вот вернулся я из армии, не прошло недели, как я начал искать работу ну чтож моё самомнение быстро упало ниже плинтусаоказывается если тебя год бьют автоматом по голове, и не дают писать код, то всё забывается :). моя история, том3 :)после своей компании где мы писали игры, до армии я успел немного поработать как с++ программист, и меня забралипоток будет о времени после армии ну или как я стал ios программистом и апостолом. по активности людей, явно стоит писать часов с 8 утра по мск :). а этого я не знал/забыл :). пользуемся но в рамках данного вопроса это равносильно пересоздать проект - всеже откатываются измененияда и в случае с xcode есть способы сломать проект локально на компе, но так что в git не будет изменений :). пока отдохнём и мне интересно кто откуда я например из сибири, и скорей всего большая часть людей ещё спит, пока я пишу :) опросы тут ограниченные, поэтому будет слегка в шуточной форме. немного фактов по универу: диплом со средним балом ниже 4оценки: 5 - связанное с ит, 3 всё остальноеиз-за физики я кучу раз чуть не вылетбыл преподаватель-троль, но именно он научил писать коммерческий код, за что я благодарен емув универе я бросил wow :). краткая выжимка:сломал руку = стал программистомумный друг = соревнование/развитиеслучайная олимпиада = универслучай+риск = своя компанияслишком много случайностей как по мне, и это только значимые. баг конечно нашли - но воспроизвести никто кроме этого человека так и не смогбаг был на потоки, и там шанс наверное один на миллион, что именно так все сложитсяникак кроме как аурой, я это объяснить не могупосле этого случая я стал верить в ауру :). история был баг - воспроизводился у тестера в 100% случаев как и положено - никогда у программистапробуем по видео - повторить не можемприезжает в офис, даём устройство - повторяется тыкаем сами - не повторяетсяперепробовали всё - у него всегда краш, у других никогда. а в ауру вы вы верите? ну там у одних людей в руках всё ломается, у других чинится?. кто был внимательным заметил - компания 25 года началась на 3 курсе зимой учились уже 4 годада я год косил от армии поступил в магистратуру, но отчислился сам - было скучно в итоге компания закрылась, я поработал в другом месте, и армия. в общем просуществовали 25 года написали 7 игр, выпустили три за это время я чудом закончил универ к слову сказать на 3-4 курсе в универе началось программирование и специализация у меня была супер компьютеры и архитектура процессоров. писали мы игры под ios на obj-c/c++ библиотека для графики cocos2d (на тот момент даже без х) вообще про написание игры я могу много чего рассказать много было прикольных решенийхорошее время было - работали у друга дома, на хаккинтош я приходил в 8 утра уходил в 12 вечера. я вот пошёл к слову сказать на экзамене крупно повезло, и я сдал на 4 но главное, что по итогу зимней школы, мы с приятелем создаём свою команду/компанию у нас есть договор с игровой студией, на написание игры. вот третий курс был запоминающимсятеперь представим ситуацию: у вас последняя пересдача, деканат точно не даст повторку, к вам подходят и предлагают пошли на зимнюю школу программирования - которая будет две недели и пересекается с пересдачей вы бы пошли?. после первого курса я стажировался, и поработал пол года в резюме это не указываю как опыт - там были в основном такие же студенты как и я, поэтому коммерческой разработкой назвать сложновторой курс пролетел, к концу второго я уже совсем стал забивать на пары. и второе, что я понял к концу первого курса факультет информационных технологий, не такой уж и информационный за первый курс занятий физкультурой было больше чем написание кодаа самым важным видимо была математика - коих было много разных видов. после сессии моё отношение к учебе слегка изменилось я стал ходить только на то, что интересно раз упорство на экзамены не влияет, то и смысл тратить время? :). так можно о любой технологии сказать у нас джуны и xcode проекты ломают, так, что только 1 из 100 сеньоров способен починить, не пересоздавая :) но не буду спорить, что у xamarin много багов. я начал усердно учиться, ходил на все пары, получал отличные оценки и тут случилась она - сессия и тут я совершил второе открытие - чтобы сдать экзамен, нужно уметь это делать, а не практические навыкив общем сдал я её ели как на тройки. попав в универ, я понял главное: моя школа не дала мне знаний многое, что преподаватели относили к категории это вы уже знаете, у меня относилось к категории впервые слышу но я такой был почти один. переходим к университету этот поток будет коротким, и связан с универом ну и судьбой/совпадением :). и мы переходим с кроссплатформы/ flutter в натив этот высказывание многие поняли не так как я хотел поэтому уточню - тут имелось ввиду, что прошлый автор недели писал о flutter, а не действие моей команды :). ну а для меня самое важное, что я получил по итогу это возможность поступить на бюджет в универдальше учеба в универе было сложно - я со своей театральной школой и рядом не стоял с теми кто поступилпожалуй для универа новый поток заведу 🤔. а теперь возвращаюсь к трём мальчикам эти три мальчика заняли 1,2,3 место на олимпиаде совпадение? ;). в следующих два дня была сама олимпиада олимпиада как олимпиада, правда среди сузов занял я в ней третье место, почти второе надавали всяких призов, я ещё и самый младший участник был. что там я про совпадения писал? :) теперь самое интересное в первый день очного этапа все собрались в столовой три мальчика сели случайно за один стол пообщались, послушали наставления ничего примечательного но запомним этот факт. каково было моё удивление через неделю когда мне говорят: ты тут в очный этап прошёл, тебе в уфу ехать теперь я даже вначале не понял о чём речь то был заочный этап и отбирались 30 первыхчтож ехать так ехать. ну я соглашаюсь не зная даже, что за олимпиада садят в компьютерный класс, я спокойно пишу два часая не был в этом направлении селён, хоть и показывал хорошие результаты поэтому по окончанию пошёл домой и забыл. тут важны детали иду я вечером по колледжу 5 вечера не помню чего я так поздно там делал подбегает, в коридоре, ко мне преподавать и говорит - тут через пол часа олимпиада, хочешь поучаствовать?уточню: я в колледже занимался олимпиадным программированием. колледж прошёл весело учеба, программы, олимпиады, игры но надо думать над универом уточню - платно я бы не смог учиться, так-как это дорого было быно и тут судьба/совпадение/удача. ваше отношение к играм?. в общем если бы не wow и starcraft я бы сейчас не умел пользоваться мышкой нормально даже ну и клавиатурой правда 10 пальцевых набор познал намного позже. а понял я две вещи:1 игры хорошо развивают реакцию и умении работать с компьютером2 игры стали той зависимостью которую я могу контролироватьклин клином вышибают - если у меня появляется зависимость, я её перевожу в игру, а потом отказываюсь уже от игры. и тут wow сколько же я убил на него времени иногда мне кажется, что в тот период 12 часов я писал код, и 12 я играл в wow на остальное времени не былобыл период когда я желел о потраченно времени на игры, но кое, что понял. все играли в warcraft 3? так вот на тот момент я смог дойти до 7 миссии за людей и думал, что это конец - так как не был способен её пройти всё, что нужно знать о моих игровых способностях на тот момент. и вроде история успешного человека - все время пишет код, удачные стечения обстоятельств но где-то в это же время я узнал о wow и был человек, нет человека :) или же?. и почему мне кажется, что я что-то делаю не так в плане ретвитов вроде поток есть, но привязка твитов друг к другу, а не к первомупостараюсь исправиться чесно, честно. а, что для вас является мотиваторов на работе или при саморазвитии?. и тут снова судьба/случайность нашёлся друг тоже помешанный на программировании не знаю у кого как, а у меня соперничество один из важных мотиваторов развития а мы с ним соревновались во всём это дало огромный скачок в росте. это был 9 класс, и преподаватель по pascal настоял, чтобы меня отдали в высший колледж информатикии небольшой факт о первых трёх лет программирования - в тот момент я был так увлечён, что от меня родители прятали компьютерный шнур - мог по 12 часов в сутки писать код. но увлекло благо гипс сняли и нашлись курсы снова pascal, но писали уже игры как же я в те времена хотел умеет две вещи: научиться двигать экран, и иметь больше 16 цветов библиотеку на 256 цветов, я так и не осилил подключить. дальше относительно всё стандартно: pascal, преподаватель который явно считал меня средним, и я гипсе не способный нажать одновременно две клавиши в общем все условия, чтобы бросить это дело. тут стоит упомянуть родителей - они к моим постоянным сменам интереса относились нормально, и нашли репетитора по программированию а до этого чем я ток не занимался: танцы, паял, делал самолёты, пение, боевые искусства главное всё в среднем по пол года :). но это запустило череду событий из-за гипса я стал чаще ходить к в гости, и один друг показал мне игру, которую он написал сам в тот момент я не знал, чем себя занять и решил тоже попробовать. и последнее важный факт именно из-за него, я стал программистомв жизни не бывает хороших и плохих моментов - всё зависит от точки зрения так вот я сломал руку вроде бы плохо? ну да в гипсе ходил три месяца но. как и любой подросток в то время, я бегал по горожам и недостроям и ни о каком программировании не думал правда был опыт в паянии - пол года занимался и на тот момент я любил скейтборд. ой кажется я написал не удачно я имел ввиду, что автор прошлой недели писал про flutterно немного про кроссплатформу будет по желанию могу буду описывать опыт с с++ который был не самый как мне кажется удачный, но оно работает. ну, начнём под этим твитом будет о том как же я попал в эту сферу, и первые шаги в нейи было это в 2004 году тогда мне было 13 лет, и познание компьютера заканчивались умение запустить игру на нём. если честно, то я не любитель кроссплатформы не верю в то, что есть но был опыт и с xamarin (считаю на текущий момент лучшим решением в этом плане, люблю с#) и с с++, и с javascript вариантами. и сразу вопрос: а вы верите в судьбу?. и первый день будет посвящен моей истории, под эгидой судьба или совпадение?сама история условно будет поделена на три части: как стал программистом, кусочек до армии, после армиида, да я был в армии но про неё возможно в воскресенье. писать буду много я ещё тот графоман :) но не являюсь активным пользователем твиттера, поэтому всё в новинку пока. четверг: архитектура как без неё? :) будет больше про опыт, отношение, текущая на проектепятница: собеседования буду много ныть, что трава была зеленей, и небо будет и по делу суббота: правила написания кода, логирование, тесты надеюсь на холивар. более детально:понедельник: история жизни, карьеры, апостола поверьте тут много интересностейвторник: моё отношение к олимпиадному программированию и проф образованию среда: di, ioc, dip, ditranqullity раз уж я автор этой либы, то я не могу пройти эту тему стороной. краткий план:понедельник: моя историявторник: олимпиадысреда: di, ioc, dip, ditranqullityчетверг: архитектура/структурапятница: собеседованиясуббота: хороший кодвоскресенье: опционально. всем привет меня зовут ивлев александр если не скромничать то апостол программирования верю в swift и ios по званию team/tech lead и мы переходим с кроссплатформы/ flutter в натив. ну и огромное спасибо , что позвал!. если вдруг будут вопросы пишите)так же я постоянно обитаю в телеграмме(r3tam). что ж, пора прощатьсяэто была очень крутая неделя, по факту я первый раз вел твиттер настолько активно огромное спасибо всем кто отвечал, накидывал!вы всегда сможете найти меня здесь стараться делать интересно у себя. вопрос на самом деле открытыймы помогали собеседовать людей, когда передавали те или иные проекты в инхаус после своей разработкино думаю можно попросить знакомых, или нанять на одно собеседование крутого эксперта варианты можно найти, чтобы не брать вслепую. вообще, я буду потихоньку закруглятьсяи перед тем как уйти, как вам неделя:. 7 тред воскресенья. настолки(лучший тред). 6 субботний чилл. 5 переход в руководство. 4 команда. 3 как развивается мобилка. 2 flutter. подтред с интересными за неделю1 о себе. примерно так, без конкретики , но на ощущениях:1 больше андроид/веб айос есть, но мало ещё часто - вообще иные стеки2 да сейчас особенно много джунов и есть те, для которых это первый раз3 у нас процентов 60-70 отдела, конвертация с андроид отдела внутри. да, наверное такое есть но в целом, это скорее больше говорит о компании). действительно нет пока условного даггера, который пользуют всето же самое с архитекторами и тд. я частично касался этого, но вообще можно ещё разокдля меня лично: флаттер также был возможностью залететь в либы, пакеты и стать авторитетом в сообществеэто гораздо проще чем в нативе. хм, тут могу только на свой личный опыт и на свою компанию ориентироваться мы смотрим не на код, на знания, опыт в совокупности. я за скорее при всех описанных скиллах, но не понимании целевого фреймворка, ты вряд ли можешь считаться сеньором по нему. но если этот сеньор взял и разобрался, то почему бы и не считаться). но, честно, не думаю что стоит надеятся на то, что сеньор андроид по умолчанию будет сеньором в другом фреймворке. но при этом, я пока не вижу проблемы прийти на собес и показать свои знания показать, что разобрался сам у меня были такие прецеденты. допустим, можно до полугода использовать стандартные простые компоненты флаттер весьма обманчив этим, у него лёгкий порог входа, чтобы писать из коробки без навыкано в реальных проектах понадобятся и сливеры и понимание, что есть три дерева и работа с renderobjects. да, давайте про этов целом, я считаю, что все отлично решается на собесе и важно все же понимать фреймворк, а не надеятся на старый опыт. 4 асинхронность это тоже ломает, если привык к потокам видел у всех, кто приходил с андроида. 3 отсутствие бест практис(сейчас с этим получше)любой андроидер знает, что relative медленнее linear layout , а frame вообще быстрс виджетами не все так однозначно. 2 следующая штука: флаттер непривычно делает просчет макета здесь если ты поставил контейнеру определенные размеры, то не факт, что они такими и будутвлияют ограничения от родителяconstraints go down, sizes go up, parent sets position основная мысль здесь. 1 верстка все есть виджет и это будет иногда ломать потому что паддинг - это тоже виджет и подобные вещи также. 0 скобки проходит быстро, но поначалу глаз крайне не хочет это все восприниматьно хотя ладно, это даже не камень. мы пройдемся по основным моментам не всегда из можно назвать трудностями, но подводным камнем, вполне и в основном из личного опыта. начнем, пожалуйситуация: нативный(ios или android) разработчик с опытом, желает перейти на flutter, чтобы писать сразу под всечто его ждёт?. ну и поофтопим. точно попробуем в подводные камни при переходе: натив флаттер. сегодня воскресенье! а значит я завершаю свою неделю)постараюсь провести с пользой и закрыть некоторые вопросы, которые поднимались по ходу. честно, занимался только ушу(рано кунг-фу) и по факту считаю что почти весь профессиональный спорт - трата здоровья большинство знакомых имеют травмы ввиду тех или иных нагрузок. ну корпоратив это крайне неплохо:d. вот без шуток, я переписывал андроид приложение на делфи на натив. но это же не киберспорт ). я, честно, когда то активно следил за спортом но чё т потом все это разочаровало наверное, потому что закончил свою спортивную карьеру. кстати, следит ли здесь кто-нибудь за mma?как вам бой конора с порье?. меня сегодня не отпускает киберпанк кто ты?. к сожалению, я из воронежа:)но если буду в столице, учту). кстати, ещё мне зашла за бортом мы вот в компании гоняем в нее. да, те кто советовали эволюцию - лайк, она давненько есть). завтра будет свободный деньсегодня я играю в настолки и пью вино)завтра день свободный есть несколько вариантов, с утра постараюсь дораскрыть нераскрытые темы. кажись, мне придется молчать). количество в целом до 8 человек в идеале. детективные или на поговорить вот в эту сторону было бы интересно. оооо, вот это интересно. во, кстати, она есть довольно неплоха. а тут есть любители настолок?посоветуйте какие-нибудь, плиз в идеале не сильно длинные, с большой степенью реиграбельности. он вне конкуренции. я кстати не совсем честен оказался последнее время я за все но главное, чтобы выбрать интересный и правильный вкус ну или бодрящий эффект(от чая лучше). не, ну бывают принципиальные люди). я лично на стороне китайского чая. кстати, вчера проводил опрос про кофе, но не спросил главногокофе или чай?. можем завтра попробовать замутить подобный тредик. зато с удовольствием). так, я видимо зафиналил киберпанквот смотрю титры, и что в итоге произошло?. и поэтому сегодняшний день все же вылился в добивание киберпанка до концовки). и это иногда будет стрелять потому что ложится они не будут. ну, я бы сказал, что тут хоть и одно пространство(фронт и формошлепство), но все технологии разные да это не займет годы, но месяца три четыре покопаться надо будетопыт несмомненно поможет но и по личному опыту, сыграет злую шуткубудет попытка переложить знакомые подходы. а это довольно хороший вариант. не только это опыт в сочетании с глубокими техническими знаниямичувак, что заботал технологию без опыта не будет помидоромно и мега опытный в плюсах инженер, не будет сеньором в веб разработке. а вот кино/книги/видеоигры это ленивые способы погрузится, испытать другие эмоции, внедрится в чужой и выйти из своего контекста пропуская через себя чувства и ощущения других персонажей, на выходе ощущаешь лёгкость и готовность к новому. до творчества я пока не дошел, хотя очень хочу например, дома стоит синтезатор и я прям бывает думаю как будет круто клацать на клавиши, искать мелодию и вот это все хотя это конечно больше похоже на созидание чего то нового. последние два иногда не помогают, так как для вовлечения в процесс, тебе надо самому приложить допусилияно они весьма хороши и эффективны. отсюда возникли несколько направлений(для себя):1 кино/книги2 видеоигры3 творчество4 уборка5 занятия спортом. ну и важное ещё: погружение на психическом и эмоциональном уровне. в целом, тут как с освоением любой новой технологией до уровня эксперта будучи экспертом в другой, ты новую узнаешь быстрее, но не прям в максимально короткий срок. я не уверен в том, что хватит этого времени чтобы прокопать фреймворкэто будет очень опытный мидл, который станет сеньором в скором времени флаттер лёгок на вход, чтобы начать на нем работать но там много чего под капотом. обычная ps4. это навело на мысль: нас разгружает продолжительная смена контекста, с полным погружением в процесс. по пути размышлений, когда то сидел то ли у родитен, то ли в друзей и смотрели какой-то фильмпосле просмотра, я почувствовал как дико разгрузил мозг хотя до просмотра был очень сильно перегружен. сегодня тред будет не регулярный и в основном основанный на внезапных мысляхначнем мы вот с чего: недавно я понял, что чёт все вечера после работы стали одинаковыми и вот начала думать , как все разнообразить, и вообще, как лучше отдыхать от основной работы. я в свою очередь сегодня буду совмещать уборку, немного кодинга(для личного проекта), и вечером поиграю в настолки с друзьямину а день начал все таки с кофе, а не счая хотя до чая мы сегодня дойдем. сегодня суббота, а это значит, что мы все вероятно отложим свои любимые ide а вот куда мы направим этот день?что делаю в сб?. эээх, решил пройти за вечер третий акт киберпанка но в итоге отвлекся и не прошел. вообще примитиво - это довольно интересно именно этот не пробовалу меня последнее время в топе был пино нуар. ой ну зачем же так) мы ее у себя потрогали, пока не понравилось) но идеи про обёртку тоже есть. само собой. я сегодня по вину по крайней мере пока). вообще кстати, если вино, то. вот мой ответ на вопрос, что делать вечером в пятницу: сегодня настрой посидеть дома и попить вкусного красного винапод, конечно, прохождение киберпанка. эээх, было б в опросах твиттера больше вариантов. мб завтра или в вс продолжим только напомните). 2 другой принцип лейаутинга по другому идет просчет размеров элементов и вообще построения uiconstraints go down, sizes go up, parent sets position уже не будет работать. 1 во-первых, сразу придется перестраиваться под многопоточность это немного отличается от того, что есть во флаттер. хм, интересный вопрос надо поразмышлять. да, сегодня без опроса по темебудет суббота , а это время для досуга, творчества, релакса и свободы). дянь хун - вкусно). о, завтра кстати буду про него говорить по крайней мере про китайский). я про него забыл). вообще далее мы будем плавно перетекать в субботнюю тему ведь пятница это прекрасный день, когда можно заняться личными делами и отдохнуть от всего этого кода. ну чтож, всех с вечером пятницы!вопрос для киберпанкеров:. не, ну вполне подходит:). вечер все ближе и ближекак настроение?. ну и самое интересное: мне даже стало не так важно flutter у меня в отделе, или это может быть любая другая технология я стал достаточно равнодушен к конкретным технологиям, и выбирать между ними исходя из условий на данный момент. ну и конечно кроме мнеджерства осталось техническая сторона на высоком уровне: архитектура , выбор тех стека, какая то помощь разработчикам с вопросами. а, выше был пункт про кодинг: кстати даже в рабочее время вполне можно развиваться правда скорее в ширь вообще за руководство я успел влезть в : bash, groovy, js, python, objc, swiftда понемногу, но для общего понимания было достаточно. собственно, в итоге, главное найти себя в новой ролии в какой-то момент я даже свыкся с тем, что на работе я больше менеджер, точнее практически полностью менеджери мне даже стало это нравится. думаю для этого руководители так любят всякие дэшборды, цифры, планы, факты, опросникис помощью дэшбордов, они могут смотреть как соотносится план/факт по тем или иным ожиданиям от действий и получать фидбек причем получать его довольно часто. и вот здесь важно найти способ видеть фидбек в более мелких вещах. что уж говорить про руководителя?особенно если ты руководитель не на продукте, а в целом на отделе твои решения и действия могут дать фидбек через не то что недели, но и месяца, а то и больше. а вот когда ты тимлид - цепь становится длиннееу тебя уже перестает быть четкой обозначенной задачи, фидбек от деятельности приходит запоздалои думаю часто тимлиды думаю: а что я вообще сделал за день?. когда ты разраб, ты видеть результат быстро - сборка, код ревью, таска, что перенеслась в другой статус это все даёт инстант фидбек и к нам приходит счастье. а забыл ещё одну штуку, которой при переходе начинает не хватать точне она начинает менятьсяобратная связь фидбек от своих действий это один из тех важных пунктов, из-за которых разработчикам тяжело стать лидам, руководителями. вообще, это очень занятная тема: найти в новой сфере то, что будет для тебя драйвером и приносить кайф. и если вернутся к пункту про поток, то уже при переходе в руководители, а через некоторый период времени тем более, кайф от ощущения потока при кодинге заменился на кучу других я нашел новые источники. учитывая что мы хотим достаточно неслабо вырасти вопрос будет интереснымну как минимум по джуна проблем точно не будет: их полно на рынке, плюс, у нас есть свои курсы(с которых тоже можно забирать подготовленных джунов). я тут пошел за кофе и возник вопросесли кофе, то. да, сейчас всем надо здесь и сразу). что с этим делать - вопрос пока открытый и нам в компании только предстоит его решитьно в целом пока компании кажется пытаются предложить условия лучше чем у других насчёт получается или нет: не знаю но судя по одинаковым компаниям на своей почте - видимо нет). и готовность к последствиям. честно, стать руководителем было уже не так больнода, было горячо и стрессово пока не начал приоритезироватьда, надо было понять, что теперь ответственности куда большеда, надо было понять, что правильного ответа почти никогда нет, есть ответственность за принятие решение. второй пункт навёл на другую мысль: нужен сайд проект домашний проект, на котором можно воплощать технические амбициии это на самом деле просто отдушина для бывшего разработчика в руководстве. в виду первого пункта возник новый инструмент: приоритезациямаксимально важная штука, без которой легко утонуть в количестве задач, неверном распределении времени и других ресурсов. здесь я сразу усвоил фразы:1задач будет всегда больше чем доступного времени2 в рабочее время ты больше не сможешь развиваться технически(хотя 2ой пункт обойти возможно). но счастье длилось на прям долго я не очень много времени был именно лидом и достаточно быстро пришлось возглавить отдел. в итоге, я смог сделать так, чтобы находить время на поток. собственно этот основной драйвер также привел к тому, что я начал распределять время, делегировать, следить за оптимизацией своей работы, автоматизировать рутину и тд. да, у нас тимлиды ещё и код пишут (особенно на небольших командах). но как я понял позже: месяц для меня - период адаптации к условиям и, что интересно, кажется дальше моим основным драйвером стало желание вернуть себе утерянный кайф, а значит распределить свои обязанности на членов команды, чтобы выделить время на кодинг. забыл) ну и твиттер не даёт больше 4х вариантов, вроде:(. главное: у меня отняли мою прелесть(кажись сказывается марафон по средиземью) у меня отняли ощущение работы в потоке над своей задачейя не мог больше включить музло и уйти в транс. горение одной части тела , стресс, непонимание как оно вообще должно работать и сны о работе - это ощущения первого месяцаи это даже не самое жуткое. но вот ко мне пришли с вопросом: ну что будешь тимлидом так как это было отчасти признание тех или иных заслуг, а также гордая лычка тимлид - я решил попробовать а почему бы и нет?). 2 поток настоящий кайф разраба: наушники в ушах, музычка и работа над задачей ты теряешь ощущение времени, ты сливается с кодом, задачей, информацией это мегоакрутое ощущениедаже сейчас пока писал пошли мурашки от воспоминаний. 1 это творчество особенно когда ты не тупо переписываешь тз в форму кода придумывать новое - это на самом деле основное что привлекало другой вопрос: а много ли нового мы пишем?. вообще, и до этого и после я мыслил себя как разработчика в будущем развитие было в целом понятно: джун, мидл, сеньор(об этом думал как о чем то недостижимом)разработка мне нравилась и вот почему:. ещё одна тема этого дня: личный опыт из разработчика в руководителяну что ж, началось все с того что я был стажёром в андроид отделе. если я не ошибаюсь, на нем ещё и скайп(мобильный) или былкстати, тут случайно выяснили что флаттер можно под икс бокс собрать:). и вот , что кажется: свободных мидлов и выше на рынке нет или практически нетмоя гипотеза: все они осели уже в компаниях, которые залетели во флаттер ранее. а ещё лучше сеньоры и лиды, которые организуют у них отделы и команды. умеет просто не стал писать:). сделаем позже. подразумеваю что сеньор понимает в глубину фреймворка понимает как все устроено под капотом и достаточно хорошо в целом, конечно сеньор по любой плтф станет сеньором в другой гораздо быстрее + опыт. кто победит для кросспдатформенного десктопа? варианты хз какие ещё, не силен в десктоп:). итак, на небольшой период времени мобильный разработчик превращается в десктопногов треде опрос:). а именно: на рынке полно джунов этому способствовал интерес, курсы от различных компаний, хайп, ощущение лёгкости входано компаниям нужны уже хорошие разработчики, как минимум мидлы. по нашим наблюдениям, за два года спрос возрос достаточно сильно это видно по основному чату с вакансиями в телеге (да, флаттеристов почему то сидят только там) при этом, предложение в виде разработчиков хоть и возросло, но интересным образом. да после котлина также. это было полтора года назад, остальное время мы росли за счёт внутренних ресурсови вот недавно опять открылись миру: что же поменялось на рынке?. короче, тогда мы набрали несколько человек извне следом ещё несколько и достаточно крутых уровень в среднем был очень слабенький у кандидатов. маленько отступление, я конечно буду использовать определенные грейды в этой теме, но как по мне: грейды у каждого свои поэтому для понимания: мидл - имеет опыт, понимает как работает технология, может работать автономно. два года назад вакансий на флаттер почти не было да и разработчики туда особо не стремились найти было можно, но сразу надо было понимать: это максимум условные миддлы среднего уровня разрабы, которые при удаче, покопали фреймворк и пришли из другого стека. окей давайте начинатьнайм как много в этом звуке:)вообще, за флаттеристами интересно наблюдать прям видно как развивается технология и интерес к ней. дело прекрасное! надо нести знания в массы! особенно если на на подкасте один из разработчиков дарт vm. тема полезная:)кстати, чё там, киберпанк все прошли?. возможно коснусь ещё прошлых тем, либо придумаю новые:). ну а пока у нас ещё рабочий день и вечер будет только послевчера я обещал немного добить часть тем поэтому сегодня:1 коснемся найма флаттеристов чё там по рынку2 расскажу опять о том как переходил между ролями от разраба до руководителя3ну и конечно оффтоп). всех с пятницей! это же такой прекрасный день, сегодня после рабочего дня все пойдут отдыхатьа что будешь делать ты?. я что-то забыл сегодня про тему с наймом думаю ещё немного коснемся ее завтра ну и мб побольше расскажу про наш опенсорс(если будет интересно, лайки там поставьте чтоль). пока нет, в основном мы в компании исторически по мобильному стеку но прецеденты на веб точно видел в коммьюнити на десктоп пока нет, хотя в целом если клиент прям тонкий - то без проблем там пока основные косяки во взаимодействии с плтф. да андроид та ещё ос:) особенно с количеством разных вендоров, оберток и тд. но это касается именно области навигации камеры и дырки норм обрабатывает. в остальном, все то же что и у натива по факту он ж в активити(если про андроид) запускается. а вот айфона под рукой нет:(. в айос если память не изменяет будет ок автоматом на андроид - ручками можно сделать по-моему флагом решается из коробки сейчас прошёлся по парам: не будет. фича дарта, одна из нововведенных у них наконец появились nullable и non-nullable типы. в целом, за время существования отдела, у нас не было ни одного похожего проекта это в целом довольно приятно для разработчиков не даёт заскучать. в итоге, оказалось, что все это вполне неплохо работает и с этим вполне нормально работать причем, мы даже особо не лезли в натив(если помню правильно) только подкрутили несколько узких мест. но на самом деле не только за это по факту там планировались все фичи из кейса 2* касты, picture in picture, касты на другие платформы. ну что это я, давайте дальше расскажу про крутые проектыодним из самых больших челленджей(а на самом деле неожиданностью) стал для нас the hole приложение типа мини ютюба мы сильно боялись за возможность работы с видео. а вот и опрос по теме следующего дняпо плану должно было быть: разраб тимлид руководитель и эмоции от всего этого но, честно, есть ощущение, что тема немногословная хотя завтра будет довольно плотный день. вообще сама команда - это мега-крутые творческие и скилловые люди заряженные и технологиями и желанием делится с коммьюнитисобственно если бы не они, на было ни опенсорса ни статей. сам курс естественно занял несколько месяцев и огромное спасибо команде за вклад в него и за поддержку далее, так как вся наша команда участвует в код-ревью текущих студентов курса. вообще, курсы это достаточно специфичный и непривычный для разработчиков проект особенно, когда стараешься сделать все практически своими руками например, ставить свет и фон на это у нас ушло недели три:). ещё один крупный проект, который мы реализовали в отделе: коммерческий курс по флаттеру 48 часов видео, несколько месяцев производства было интересно и сейчас его уже проходит первый поток будущих джунов. всегда проще писать о чем то новом. но не этим единым живёт отдел за пределами коммерческой разработкив 2020 мы гораздо активнее выложились в маркетинг и статьи прокачали хабр статьями по флаттер я уже упоминал об этом, но все же, это стало во много возможным из-за духа авантюризма). в целом, процесс развития этого направления в отделе идёт полным ходом серфгир пережил уже несколько этапов и сейчас идёт на новый виток в ближайшем будущем мы планируем его сильно улучшить, наконец то навести порядок в issues, pr templates и тд. да, видел вчера просьбу инструмента под рукой не могу предложить :(но безопасники вроде пропускают). или кто что видит в лого?. в целом идея проста: набор для серфинга по флаттеру набор компонентов, кирпичиков для создания приложениятакже в лого присутствует идея шестерёнок, образующих общий механизм. в концепции хотелось объединить дух surf и что-то типа набора компонентов для единой цели так родился surfgear (это не реклама). да нет, оно по факту так и получается просто почти все с той или иной скоростью покрывается плагинами особенно какие то стандартные манипуляции с платформой. 8 давайте продолжим кейсыerp-система для крупного бизнеса допустим производителя молоканужны разные роли в приложении, работа в офлайне, сокеты дизайн особо не важен, но должно быть приятно работать. было понимание как минимум того, что нужна идея, концепция, лого, брендинг этой истории. ну и наверно пока прервемся про проекты на самом деле дальше началась тема опенсорсадо определенного момента мы просто сделали кучу библиотек и пользовали их внутри да репо был открыт, но о нем никто не знал. думаю об этом скоро выйдет статья, так что спойлерить не будуединственное , что скажу: на андроиде сделали до нас какие то гениальные обертки над хранилищами и это крайне усложнило работу а вот на айос все было прекрасно и стандартно. кстати, тут была прикольная фича: мы по факту мигрировали с натива на флаттер и нам необходимо было сделать бесшовную авторизацию при обновлениипри этом исходники от старых подрядчиков у нас были не все. в нашей практики нет только миграция бд со старого на новое ие в сторах это не новые приложения, или не всегда новые. и вот мы взяли банк для бизнеса для нас это был вызов себе и возможность показать , что и это можно писатьгипотеза подтвердилась все проблемы, что были, далеко не всегда были связаны с фреймворком хотя разок мы по-моему поймали баг со шрифтами. со стороны банка не знаю как устроено просто иногда компании не любят , что кто сторонний присутствует в их бренде, как кажется. а, сорян, про другой подумал:). в целом, дальше все пошло достаточно спокойно мы работали над проектами и допиливали фичи для опенсорса идея ворваться в коммьюнити и задавать тренды не давала покоя и не даёт до сих пор. но уже был виден интерес к фреймворку даже со стороны бывших реактеров. где то в этом районе мы проводили первый найм извне: это было прям интересно на тот момент сеньоров по флаттеру в принципе не существовало да и мидлов надо было поискать о том изменилось ли это - будет отдельный тред. с графиками, работой в офлайне и всякими такими фичами. собственно, и придумали и сделали сделали весьма успешно(от них потом ещё один проект пришел) дальше мы взялись за проект покрупнее(а оказалось гораздо крупнее) это тоже было приложение для сотрудников, но уже для ресторанного бизнеса(и довольно крупного). перед этим стояла ещё задача свыше: сразу придумать архитектуру, на которой будем писать проекты отсюда пошел surfgear - весь наш опенсорс. окей, захлестнулдальше мы решили взять проект к для эксперимента: это было приложение для сотрудников одного из ритейлеров маленькое такое, но был сканер штрих-кодов. не уверен, что могу сказать названиевообще есть ещё вроде бразильский банк на флаттер: nubank или чёт подобное. у нас был бизнес банк и через некоторое время будет клиентский. собственно, отчасти и этот факт(да даже не отчасти) захлестнул умы мыслью о создании отдела и не поймите меня неправильно: более дешёвая разработка конечно стоит на первом месте(это же бизнес). и да, это все потому, что флаттер молод и у него нет 10 лет багажа за спиной. вообще, один из плюсов флаттера для разработчика - здесь вообще на данный момент гораздо проще стать лидером мнений чем в нативе гораздо проще писать статьи, доклады, делать вклад в коммьюнити. собственно, флаттер в свое время стал глотком свежего воздуха и возможностью в рамках своей компании и этого бизнеса залететь и похайпится. немного о том, с чего все началосьне секрет: отдел отпочковался от андроид отдела тут кстати был вопрос почему? почему андроиды так хотят сбежать?так вот: далеко не все хотят сбежать просто есть те, кому хочется нового, а не разбираться в огромной известной всем технологии. flutter-отдел существует в surf уже почти два года за это время успели и проекты сделать, и статьи пописать, и неплохо вырасти, и курс по флаттеру придумать и конечно же залететь в опенсорсбуду рассказывать обо всем, но если что, накидывайте. ладн, погнали про командутред четверга. всех пугает сам c++;). ну я как раз про трудно сделать но как верно подметил один из читателей: дъявол кроется в деталях и где то что-то может возникнуть а может и нет:). тут просто скажу: поживем увидим:)пока наверное бы назвал натив. интересное мнение сообщества но я тоже склонился к кросс с точки зрения бизнеса фичу с видеосвязь в целом можно реализовать особенно если она стоит обособленно от основного аппа. это все личное мнение потому что я скорее всего даже знаю людей, которые пилят подобный проект на кплтф. я имею ввиду траты на те или иные доп вычисления, передачу данных между платформой и фреймворком да и часто здесь надо оптимизироваться близко к железякеэ. тут я однозначно скажу , что нужно нативном решение как минимум потому, что потоки этих данных надо оптимизировать, иначе они убивают батарею девайса в ноль у нас был подобного рода проект и это было не тривиально даже на нативечто уж говорить о кплтф с ее накладными тратами. солидарен с опросником. да ладно вам почему все единогласно за натив? что тут такого сложного, что не поддается другим решениям?. касты не проблема для кроссплатформы да и продукт(именно продукт) по смыслу уже должен быть кроссплатформенным вопрос только есть ли подходящий инструмент?. тут интереснее в целом при такой постановке задачи: вполне залетает кроссплатформа видео норм, редактировать тоже можно попробовать. ну тут однозначно любая кроссплатформа думаю даже объяснять смысла нет. и поэтому согласен с : на котлине можно написать все, что написано в кейсах вопрос только будет ли это оптимально для бизнеса?. собственно с этих пунктов и буду писать ответы. конечно, там иногда нужно привлекать знания натива, но в идеальном мире очень мало. почему это не кроссплатформа?2 кроссплатформа - высокоуровневый фреймворк , который позволяет написать все на одной технологии, пересобрать под целевые платформы просто выбрав таргет вещь в себе по большей части. в будущем, как кажется, натив в чистом виде(две разделенные команды) в целом не будет существовать а вот вариант с кмм вполне себе. ну и перед тем как начать тред дня я конечно напишу свое мнение под каждым из пунктовно для начала немного мыслей:1 кмм == натив по факту я считаю, что это именно так кмм просто позволяет шарить двум нативным командам библиотеки между собой но это просто нативный апп. смотрю интерактивчики с кейсами вызвали довольно неплохую активность) возможно, мы их продолжим. сегодня я немного припозднился долго бежал до зарядки для телефонасобственно тема сегодня по плану: буду рассказывать о своей команде. позволяет остальное дело рук разработчиков причем сделать довольно просто, если память не изменяет прям из коробки можно поставить пдецсхолдер на загрузку. 7 приложение для такси:). 6 екоммерц с программой лояльности похоже было выше, но тут со звёздочкой - есть техподдержка, клиент хочет чтобы была видеосвязь и чат все остальное, как в п1а хотя есть важное условие: ограниченный бюджет. 5 финтех особенность : очень много данных приходит на девайс в единицу времени соединение по grpc эти данные надо обрабатывать и на их основе строить графики, показывать стаканы и прочее. кстати, очень круто, если ещё проголовавшие напишут аргументы:). 4 тиндер приложение для поиска пары для себя анимашки, все дела, все такое милоеесть небольшой чат с весьма скудным функционалом есть возможность отослать/сделать фото. 3 клиентский банк референсы: сбербанк, тинькофф, и все подобные набор возможных фич - такой же конечно очень критичная фича - безопасность. 2* все то же самое но в развитии клиент сразу видит приложение как онлайн-кинотеатр точно будут касты на тв, приложения под другие платформы, кроме мобайла. 2 приложение с лентой видео есть много анимаций, много кастомный элементов дизайн брендированный и одинаковый для всех платформ. ох, по моему на какой-то конфе даже воркшоп делал но на самом деле там получается небольшое дублирование при пробросе через натив пока как-то сомнительно смотрю. 1 для разминкимобильная версия интернет-магазина взаимодействие с сервером по rest, без локального хранения данных дизайн достаточно прост, усреднённый между материалом/купертино есть пуш уведомления. давайте сделаем интерактивчикибуду описывать приложение(набор фич, высокоуровнево) а вы говорить: натив/кроссплатформаопросы в треде. опрос по теме следующего дняплановая: как flutter живёт в surfрасскажу о команде, о рынке найма(сейчас активно проводим, поэтому мысли будут по ходу), про интересные проекты и опенсорс. причем в данном случае, я не особо настаиваю что это будет именно флаттер или кмм или что-то ещё просто некоторое решение может что-то появится ещё и более крутое. собственно, на данный момент опрос подтверждает мнение вышекроссплатформа легко покрывает достаточно широкий скоуп болей и желаний бизнеса и наверное это логичное развитие событий. целом вот так. и в целом сюда же : примеры можно ещё и здесь поискать. the hole(с зелёным глазом) , но тут могут места кончится - пока в бетечасть яндекс go(вроде драйв, в моей глуши его нет)из рф сегмента чего то крупного не назову я довольно ограничено пользуюсь приложениямив остальном, есть скорее всего что-то ещё но не все пиарят. да , каждый раз этого боюсь. кстати, вспомнил, что как раз по этому до флаттера мы немного приглядывались к кмм. вот что происходит, когда работаешь из дома. также вот по наблюдениям ребята пилят на том же флаттер: аналоги слека, финтехи, платформы для стриминга скоуп достаточно интересный. мое мнение было в одном из вчерашних тредов. тут мне кстати интересно мнение читателей: а что по вашему мнению простое приложение? опросник замутить кажется сложновато, надеюсь на дискуссию:). да, это вполне так. да такой фактор тоже есть:). ну тут уже был тред про то, что любой инструмент имеет область применимости. полностью согласен с этим. опять таки, зависит от типа проекта и покрытости готовыми решениями не всем проектам в итоге придется писать кастомные решение на уровне платформв некоторые проекты до этого момента и не доживают. да, тут согласен про compose/swiftui скорее просто как вёрстку имел ввиду уметь ее писать все равно надо на двух платформах. да кстати, напомню, сегодня очень субъективный взгляд чисто личное мнение и наблюдения. да и в целом, я считаю, что кмм это по факту нативные приложения с завернутой в одну либу(или несколько) безнесс логикой, переиспользуемой между платформами. такой дорогой массмаркет в мире авто, наверное. да и в команде для простых стеков все равно нужен и тот кто умеет в айос и тот , кто умеет в андроидв целом, по цене и трудозатратам на команду получается чуть дешевле натива но дороже других решений. выучить скорее всего и свифт и котлин (для связи ui и бизнес логики)получается немного накладно. вот тут недавно мысль возникла следующая кмм неплох, даже частенько думал про него но давайте возьмём условного одного человека, который хочет запилить сам свой стартам в виде мп для использования кмм ему нужно научиться в swiftui и compose(либо просто верстать в нативе). об эпловой документации я в принципе слышал не лестные отзывы:). вполне вполне возможно. да, при этом, как по мне, натив не денется никуда была ещё аналогия с авто:натив - это люксовые, не массовые тачкикроссплтф - массмаркет среднего класса. а что думаете вы?. так вот: а не случится ли этого же с нативом на дистанции?мое личное мнение: это вполне вероятно натив будет нужен там, где он действительно нужен в других местах его заменить более удобный и дешёвый для бизнеса вариант, который позволяет получить оптимальный результат. плюсы на дистанции своего существования никуда не исчезли, верно? но используются они в тех местах, где без них прям совсем никуда в тех стеках, где это это было возможно, их заменили более высокоуровневые, удобные, приятные фреймворки и языки даже при учёте накладных расходов. так же наверное не стоит забывать, что какое то время назад, нативом часто считали c++, блико к железу и тд мы часто подразумеваем под нативом платформенные сдк. в целом , это во многом очевидно, можно получить оптимально и за меньше денег(касались этого в прошлые дни). так вот по личным ощущениям и наблюдениям, бизнес как то активнее начал заказывать кроссплатформу и ее начали даже больше пиарить, тот же кмм прям довольно неплохо да и даже в compose есть мысли про кроссплатформу. мм, возможно но правда как минимум показатель , что на том же мобиусе появляется больше flutterа но бенчмарков оцифрованных нет, тут только на ощущениях в айос тусовке, по ощущениям, флаттер очень активно шеймят:). тут не могу ничего конкретно сказать xamarin я обошел стороной но если я не ошибаюсь, они пытались и с юай поработать, а не только с шарингом библиотек?. да, ну он вроде как не прям чтобы на слуху и вроде там все не прям чтобы хорошоединственное что слышал, что делают его следующую реинкарнацию в виде maui, или нечто подобное. либо она может экономить бабки заходя с другого конца(с шаринга бизнес логики между платформами) тут конечно же на ум приходит кмм, хотя по факту это же самое проворачивали в яндексе на плюсах. кроссплатформа в мобайле показала , что она в целом может в адекватное качество. собственно, в этом плане пару лет назад действительно произошел небольшой гейм ченджер, который заставил нас всех так или иначе говорить о кроссплатформе на протяжении уже пары лет. ведь почему бы не экономить на разработке? бизнес всегда хочет получить адекватный результат за меньшие деньги. долгое время кроссплатформа была таким себе хотя конечно же была явно выгодна бизнесу. небольшой оффтоп: на досуге смотрим женой в который раз властелин колец и в который раз я не перестаю удивляться тому, насколько он круто смотрится. хотя пользователи во многом далеко не так критичны. с точки зрения разработчика - это прям критикал как минимум потому, что у разработчиков есть профдеформация: через некоторое время начинаешь в любом мобильном аппе видеть проблемы тут верстка слегка минимально незаметно поехала, тут нет реакции на нажатие. окей, почему смотрят косо:1 плохая производительность тут точно можно молчать про любые решения на вебвью но и говорят у rn с этим тоже проблемы иногда(накладные на бридж)2 проблемы с ux. да, я буду часто сравнивать именно натив и кроссплатформу(не только флаттер, о нем сегодня по минимуму) и это лишь потому, что сам в прошлом нативщик и думал точно также. тред третьего дняначнем с того, что нативным android/ios sdk уже порядка 10 лет они отлично справляются со своей задачей, на них с достатком разработчиков и готовых решенийи все это время они очень косо смотрят на любую кроссплатформу. как круто! вчера эти же слова мы в целом говорили про более технические фреймворкиэто такая высокоуровневый мысль : все есть инструмент, у инструмента есть ограничения по применимости, и надо думать головой:). темы найма мы тоже вероятно всего коснемся возможно сегодня, но скорее завтра. сегодня среда, а значит мы будем говорить про мобильную разработку в целом она собственно и победила во вчерашнем опросеещё вероятно будет какой-то оффтоп по прошлым темам, куда без этого:). а это вот новость для меня, не зналдавайте подробности:). вроде нет там был принят скорее к brand first дизайнуно вообще я хз насчёт подробностей. хм, возможно коснемся этого завтра. ещё проблема связанная с флаттером(и которая достойна отдельного дня) - наймконечно, стало с одной стороны получше, чем 2 года назад но с другой стало потяжелее найти уже хороших инженеровно это лучше в отдельный день. ну и конечно(есть в статье), но очень полезно что он опенсорсный в их репе прям роадмапы даже доступны. он просто был слишком долго в застое и флаттер дал ему новый толчок. в целом, спустя время понимаешь, что дарт обычный такой язык, которому просто не хватает сахара он позволяет все то же самое, а то чего ещё нет, со временем появляется. все таки в другой тред. в целом, в продолжение этой темы есть немного старая, но в целом не совсем растерявшая актуальности статья. 2 da умеет в aot/jit тут не готов сейчас закопаться, но по факту именно благодаря этому нам доступен хот релоад и если не изменяет память поэтому его нет в compose. почему все таки da?(субъективно) 1 ну самый очевидный и вероятно верный ответ - потому что гуглкак ни крути, а это довольно важно как минимум из-за этого команда флаттера довольно сильно влияет на язык и в нем появляются фичи для фреймворка(spread оператор например). фичи достойны отдельного треда. ооох, это будет несколько постов продолжу ими тред. в дарте же из коробки с этим явно похужено в плюс дарту: это все набирается постепенно и есть набор фич , из-за которых именно дарт используется для флаттера. да, собственно именно огромное количество сахара - это плюс котла из-за него из коробки можно писать, не задумываясь ни о чем и это сильно ускоряет. показательный момент для меня: надо было отсортировать элементы списка по признаку я полчаса искал подходящий метод у дарта оказалась его нет и надо писать логику в ручнуюбольно осознавать было, что в котлине это был встроенный сахар. с утра по мск гляну и на основе этого определим тему следующего дня. так, время опроса видимо смещается оно будет в 19 с этого дняо чём поговорим завтра:. ну ч ручную все же рисовать редко приходится в целом если сравнивать из коробки андроид и флаттер, то с точки зрения написания кода(верстки) последний поприятнее. кнопки? не, не слышал:)ide достаточно умны чтобы ставить их автоматомно конечно поначалу кол-во скобок пугало не на шутку. да со сторонней отбой, вполне что у нативных разработчиков есть и не отнять - это 10 лет развития и куча библиотек на любой вкус:). не, неверно выразился имел ввиду, что они отдельны. не мешает, можно и в нативе но местами во флаттер удобнеек примеру, был кейс с кастомный лоадером вместо стандартного при свайпрефреше в нативном андроиде немного заморочно поставить на его место что-то кастомное про айос не скажу. вообще я реально долгое время думал, что дарт это обёртка над джс узнал обратное и очень удивился. тред про дарттак как котлин был моей любовью и очень мне нравился, то странная jsподобная вещь меня крайне не вдохновляла часто витала мысль: пока пишешь на flutter(верстаешь) чувствуешь кайф пишешь логику - боль. какая ещё есть проблеману на первых порах болью был da и вот этому я посвящу отдельный тред. кстати, другая сторона медали - кастомный рендер добавляет гибкости в том что нарисовать на экране иногда бывает полезно для тех или иных фич, и их реально иногда проще сделать чем в нативено конечно же, везде есть свои +/- и надо думать перед выбором инструмента :). ага, вполне можно все. тянуть нативные вьюхи конечно потяжелее по ресурсам(янювно пишут даже в доке), но на практике не проваливают по крайней мере сходу не назову примеры где прям был заметный косяк с перфомансом. многомодульное флаттер приложение? или флаттер отдельным модулем к существующему?. да, можно интегрироваться в обе стороны конечно, не без написания кода:)если речь про апдейты мимо стороны(как у rn), то нет. продолжимвчера был вброс про джанки на ios да, есть такая тема если особо не углубляться, то есть проблемы с некоторыми анимация и, особенно векторными на айос. вообще по поводу будущего и развития мы ещё поговорим завтра. так как он в любом случае накладывает дополнительные расходы на ресурсы. а вот то, где надо работать и обрабатывать высокую нагрузку, данные в реальном времени, оптимизировать производительность , чтобы телефон не разряжался за пять минут, где все крутиться вокруг одной платформенной фичи - вот все вот это мимо флаттера. в целом, там где не нужно мегаоптимизаций на низком уровне, не надо следить жёстко за зарядом батареи, нет высокой нагрузки это все поддается фреймворку. 3 вполне банкинг можно расширить до финтеха добавятся только графики, с ними вроде можно жить. пункты выше, уже проверены на опытедалее мысли. хм, надо будет почитать. согласен про связку вообще не люблю споры натив vs флаттер: по факту спора нет у флаттера есть ограничения и он никогда не заменит натив, в тех или иных кейсах(но это тема для завтра) они вполне шикарно живут рядом и даже скорее должны жить рядом. у них на сайте по моему также было или есть. видимо так задумано. ну судя по опыту не фреймворка:). 2 в целом, банкинг он тоже вполне поддается были опасения с безопасностью когда за них брались, но опасения были слишком сильны. итак, что точно можно писать на флаттер и с достаточной лёгкостью:1екоммы интернет-магазины с лояльностью типа всяких сетевых здесь минимум взаимодействия с платформой, чаще они уходят в brand first(см перекресток, пятерочки). тут я думаю вопрос у разработчикам навигацию устраивают они:). да, думаю там не особо задумывались о вёрстке про планшеты и она тупо в режиме совместимости. но сейчас типичные взаимодействия покрылись достаточно и необходимость лезть в натив в определенном скоупе проектов практически минимальнапро скоуп далее. когда меня спрашивали об этом года два назад, ответ был примерно следующий:у вас будет меньше 20% взаимодействия с платформой? берите флаттер. обещал небольшой оффтоп тред про ограничения и что писать на флаттер чисто субъективные мысли в треде. в целом, я смотрю тут и без меня тусовочка:). я тут немного пропал, но скоро вернусь. замечательно в целом, я мало отличий заметил при переходе из натива в плане туллинга здесь все достаточно неплохо. kotlin multiplatform а ещё в мире андроид пилят jetpack compose декларативный инструментарий для верстки. скорее потому что гугл ну и флаттер решает некоторые боли в андроиде. судя по реакции , надо вспомнить про одну вещьflutter - это определенный инструмент и у каждого инструмента есть свои ограничения и конечно, не каждый проект имеет смысл делать на флюттере:) но мб это тема отдельного треда. качество, конечно, зависит от выбранного инструмента но и от рук самих разрабовможно и на нативных сдк намутить нечто ужасное. так это же и прекрасно особенно для бизнеса получить оптимальный результат, за меньшие деньги. кстати, интересный момент в целом, можно сказать что там почти все идентично из-за того, что сделать ооооочень похожий комплект виджетов, которые подчиняются material и hig(также вроде на айос)но ещё более интересно: а не чаще ли сейчас начал встречаться brand-first design?. о, кстати, забыл про интерактивчикflutter - это?. но если говорить по факту: меня очень вдохновило , то как можно на нем писатьа самый крутой момент: не зная фреймворка, виджетов, языка , я просто брал и писал название, которое считал наиболее подходящим, и оно оказывается было хочешь круглый аватар? держи circleavatar. итак, flutterнапомню, что в прошлом я нативный андроид разраб и даже для меня было удивлением, что мне понравился flutter. да, там вопрос был онли про дарт приложения во флаттер мирроров нет. итак примерный план на сегодня:1 flutter как с ним жить?2 da - это боль?ну и фоном скорее всего сравним языки, фреймворки. всем привет! начинаем второй деньсмотрю по опросу лидируют ios разработчики, а флаттеристов менее 10% на данный момент раз мы сегодня коснемся флаттера, то вполне возможно будет небольшой холиварчик. jetpack вроде вообще был достаточно похож, даже именованием сущностей)но тут буду надеяться на помощь коммьюнити. на данный момент нет не было необходимости в миррорах пока по крайней мере. вот это и будет одним из критериев:). честно, интересная тема но боюсь тут будет нужна помощь сообщества, а то мне не хватит опыта в свифт) завтра мб раскрутим. да, в случае флаттера, да про реакт не могу сказать точно. ну нееее, все не настолько плохо. ну и я на сегодня уже пропадузавтра придется поговорить про флаттер вероятнее всего и посравнивать дарт и котлинвроде других кандидатов в темы пока видно не было. а, кстати, всех татьян в подписчикам с татьяниным днём!:). вообще, не смотря на переход на da и flutter, я все равно достаточно люблю kotlindaу до него не хватает тех или иных вещей завтра думаю можно их обсудить. перейти из разработки в менеджмент - было достаточно болезненно об этом в пятницу скорее всего. и начать flutter отдел в surf об этом я подробнее расскажу в четверг. например, завести вот такого замечательного кота. вообще, для меня 19 год пока самый топовый уж очень много всего получилось сделать. акт 3 flutter и руководстводальше понеслась: мы решили залететь в хайп трейн в январе 19 года мы с сделали пилот flutter dev подкаста. собственно, летом 18го года я впервые увидел flutter и очень расстроился, что kotlin multiplatform не был в релизе. так же где то в это время, пришлось поучаствовать в разработке андроид курса вообще, образовательная деятельность - тема отдельная могу рассказать в один из дней, если будет интересно. и тут во время разработки на котлин, я узнаю, что есть multiplatform кроссплатфоома опять взыграла во мне правда на тот момент она была максимально сырая, на дворе был далёкий 2017(начало 2018) тогда были какие-то проблемы со сборкой на маки, если помню верно. здесь все же надо подождать пока проект соберётся:). да, кстати, вспомнил ещё одну вещь когда то я подумал, а почему вообще меня привлекал фронтэнд почему не бек, к примеру?в общем-то ответ я нашел: разработка на фронте позволяет получать мгновенный фидбек о том , что ты делаешь кстати , это небольшой минус мобилок. но когда я написал несколько строк кода, поработал с коллекциямикотлин забрал мое сердечко котлин one love 💕. тут небольшое отступлениевообще , с первого взгляда котлин мне вообще не понравился особенно после родной javaбыли какие-то непонятные конструкции, как то все аляписто. и через некоторое время мы решили взять первый проект на котлиня уже на тот момент успел его посмотреть, перепройти по несколько раз kotlin koans. в целом, мне тогда все нравилосьэто было новое, архитектуры, мы начали выделять surfandroidstandard, и много чего ещё я познавал андроид пытался понять даггер. акт 2 итак, я вступил на путь android разработчика этому способствовало две причины:1 я уже мог в java(и смотрел на котлин, об этом позднее)2 у меня не было айфонавторая причина естественно весомее:). раз мысль мелькнула, почему бы не сделатьэто было мое первое андроид приложение , в котором я месяц делал viewpager из одинаковых фрагментов с ним я пришел на курсы от surfи с этого момента где-то глубоко засела мысль о кроссплатформе. к сожалению, тут была шутейка:). я думаю, об этом поговорим завтра напомните, если что). когда начали использовать, мелькнула мысль: так у меня есть джава, а она вроде кроссплатформена чё б не сделать андроид приложуху? просто упакую код в либу и выведу на ui результат. во многом, я самоучка и собственно мой первый проект на джаве я нашел как раз там, где тренировался у нас был спортивный турнир и я сделал калькулятор очков для негоупоролся по архитектуре, хотя даже не подозревал, что существуют mv-паттерны. параллельно с этим, начал искать себя в айти прошел через js, c#, javaсобственно на джаве остановился детальнее. да, к слову, занимался я ушу это то, что обычно показывают в китайских фильмах веселое было время. акт 1 короткийвообще до профессионального айти     я успел побыть спортсменом, выучить физику, побыть тренером у детей в бытность спортсмена показался по разным странам, в том числе залетел в китай и побывал у шаолинских монахов. да, она старовата уже есть в ней косяки, которые из-за времени не было возможности пофиксить. есть the hole тот , что с зелёным глазом но я не уверен, что там есть свободные места он в бететак же есть приложение для сети аптек ригла, но на данный момент там по идее все грустно из-за проблем с серваком. ну и все языки, фреймворки , что я пробовал(ну почти все) я пропускал через мелкие игры возможно, когда нибудь я все таки доберусь до полноценного геймдева но это будет другая история). напрашивается вопрос, а почему тогда не геймдев? и почему у меня нет ни одной полной игры за спиной?собственно, идеи у меня были, но я понимал, что для реализации мне нужен как минимум художник а то у меня руки из одного места в плане рисования. вообще игры - это драйвер моего вступления в айти. прелюдияпервый раз я задумался о программировании, когда у меня появился первый комп увидел в каком то журнале, что можно делать игры и рисовал рисунки, думая, что так все и должно работать в школе увидел делфи и пробовал писать те или иные игры. да кстати напоминаю:)это к вопросам почему в опросе был флаттер. структура рассказа будет в трёх актах:1 до мобильной разработки2 разработчик мобильных приложений3 руководство отделом. начинаем тред первой темысегодня я по большей части расскажу о себе и предлагаю вам стать этаким коллективным дудемя начну рассказывать, а вы будете накидывать вопросы и расспрашивать меня обо всем. запишу вынесу на обсуждение. ооох, отложим до завтра). твиттер не дал мне сделать больше 4х пунктов так что другое пишите в комментах. мне идеалогия не позволяет) а вообще твиттер не дал мне больше четырех пунктов указать:(. и перед тем как начать, давайте сделаем перекличкуна какой стороне ты?. итак, примерное расписание:пн: знакомимся буду рассказывать о себевт: flutter а как оно вообще?ср: мобильная разработка: куда мы катимся?чт: как живёт flutter в surf?пт: от разработчика до руководителя эмоции и что делатьсб: досуг, отдых, творчествовс: свободный день. 4 все что буду писать - чисто субъективные мысли основанные на личном опыте и наблюдениях5 кроме расписания буду часов в 18 по мск проводить голосовалку за тему следующего дня(если будут кандидаты)6 ну и кроме основной темы в день будет конечно ещё оффтоп. немного общих принципов этой недели: 1 несмотря на события в рф - без политоты2 неделя будет достаточно лайтовая в техническом плане3 изначально не хотел много говорить про флаттер, но денёк выделить скорее придется(далее в треде). чуть позже закину расписание на неделю оно будет примерное, об этом чуть позже. я очень слабо веду свой твиттер, поэтому буду пытаться раскачать этот не пинайте строго. всем привет!меня зовут артем, я руковожу flutter разработчиками в surf всю эту неделю я буду здесь делится мыслями, опытом и в принципе стараться круто провести время)спасибо предыдущим ораторам()! из амстердама мы возвращаемся в россию). вторую неделю посвятим алгоритмам разберемся, нужно ли их знать, где в работе они могут пригодиться и как подготовиться к алгоритмическим собесам будет и наш любимый формат: собеседование в прямом эфиребилеты и подробности на сайте👉. 1 февраля стартует новый сезон podlodka android crew, в формате двухнедельного интенсива и немного о темах недельпервая неделя – про ui обсудим ui и анимации под капотом, затронем дизайн-системы не обойдется без compose, constraintlayout и recyclerview, куда же без него :). как-то так моя неделя тут и заканчивается спасибо всем, кто участвовал в обсуждениях на сегодня у меня темы нет но до конца дня могу поотвечать на вопросы, если есть а так пишите в личку: всем добра!. повторюсь - это маркетинг эппла, не более я слово парадигма ни разу не использовал мне кажется что протоколы в свифте - не более чем большое месиво разных фич языка (включая интерфейсы) под одной крышей. я целый тред этому посвятил: или это уже после треда вопрос?. прежде всего в маркетинге ;-) но вообще, разница в том, что протокол стал сильно больше чем просто интерфейс (каковым, например, был протокол в objc). такая штука ещё называется protocol witness типа ты не реализовываешь протокол а предъявляешь «свидетеля» реализации. думаю тут использовался. про vwt (value witness table) и прочую подкапотщину протоколов и дженериков в свифте есть замечательная презентация от разработчиков свифта:. динамика в рантайме вообще дорогая, медленная и плохо оптимизируемая компилятором но без неё было бы совсем грустно ;-). и под протоколами он имел в виду интерфейсы, так как протоколы - не единственный способ абстрагировать реализацию более того протоколы кажутся мне несколько устаревшими, мы на проекте используем клиенты и они отлично себя показывают. не так давно я писал об этом в бложике (там больше текста об этом всём), если интересно: (там несколько разных постов). как мы уже говорили о протоколо-ориентированном программировании, многозначность порождает различные трактовки а это в свою очередь может завести мысль не туда, это мешает пониманию. и если в обычном языке или искусстве образность может быть на руку (не важно что я имел в виду, главное - что подумал и увидел тут ты), то в программировании едва ли этому есть применение. и я тут не о том, что какие-то фичи лишние, а какие-то - нет а про то, что было бы гораздо удобнее, если бы эти фичи лучше были разделены в языке так было бы проще и читать и понимать. мне кажется если у нас разработчиков есть возможность напортачить, кто-нибудь ей обязательно воспользуется (по не опытности, по запаре, по невнимательности). но это чёрт возьми очень сложно я и в своём-то коде не помню что к чему через пару месяцев, а уж про чтение чужого и говорить не стоит приходится каждый раз проверять, что это за протокол и как он вообще используется (а в большом проекте это могут быть сотни случаев). единственный способ не наступать на эти заложенные в протоколах мины - это не мешать разные юзкейсы, и использовать каждый конкретный протокол только в одной роли. мне кажется, протокол, каков он сейчас в свифте нарушает принцип единой ответственности (srp), слишком много на себя берёт разных языковых фич и как и в случае нарушения этого принципа в коде, это черевато сайд-эффектами, которые я упомянул выше. и у тебя либо вылезут ошибки компиляции либо начнётся лажа в рантайме (например что-то может пойти не так если ты поправил сигнатуру функции либо в интерфейсе либо в дефолтной имплементации, но не в обоих местах сразу тут компилятор не сможет выловить все проблемы). хуже всего, когда это и то и другое и третье в одном флаконе ты видишь одно значение, начинаешь использовать протокол согласно ему, но потом выясняется, что не всё так просто. главная проблема - это ухудшение читаемости и понимания кода когда ты видишь протокол ты не можешь с первого взгляда разобрать что это: динамический интерфейс или ограничение компилятора а может где-то ещё припрятаны какие-то экстеншны с дополнительным функционалом. причём эта сложность не видима, пока не присмотришься использовать протоколы действительно просто и приятно но проблемы начинаются после. в результате протокол как языковая фича превращается в монстра - мощная, многофункциональная языковая конструкция, наверное действительно главная фича свифта (the feature), которая становится слишком тяжёлой и сложной в использовании. а функционал сам подтянется через дефолтную реализацию в экстеншне. и вот на собеседованиях уже говорят что это композиция+ (next generation), когда вообще ничего не надо делать для добавления нового функционала к имеющемуся типу кроме добавления имени протокола в определение этого типа данных. прежде всего у нас появилась возможность поставлять дефолтную имплементацию к методам протокола и вот перед нами уже не протоколы а самые настоящие mixins (даже и не знаю, как по-русски назвать). но вот к протоколам добавляют ещё и экстеншны фича без сомнений очень мощная и дающая огромные возможности (при этом имеющая несколько подводных камней) но тут меня волнует, что она добавила ещё несколько новых юзкейсов к протоколам. здорово же!. но и тут разработчики языка не остановились а давайте мы ещё сделаем кодогенерацию на основе протоколов! и вот в языке появляются encodable, decodable, equatable - протоколы, которые нужны для динамического полиморфизма, но компилятор ещё и генерирует дефолтную имплементацию. и вот из-за, казалось бы, небольшого изменения в коде уже вылезают странные ошибки компилятора типа protocol ‘yourprotocol’ can only be used as a generic constraint because it has self or associated type requirements. но вот появляются ассоциативные типы в протоколе такой протокол тоже используется прежде всего как ограничение компилятора но теперь он не может быть одновременно использован и для динамического полиморфизма (без ассоциативных типов мог). и вот тут сразу начинается каша, потому что часто сложно уловить эту разницу, а на деле её понимание просто необходимо. прежде всего изначально помимо динамического полиморфизма (подмена интерфейса имплементацией в рантайме) в свифте протоколы используются и так ограничения для компилятора (compile-time constraints). и всё бы было хорошо, если бы только интерфейсами протоколы и оставили но нет разработчики свифта решили поднакидать туда ещё разных фич. протокол - это что-то что ты открываешь в коде, а не изобретаешь сам заранее при создании протокола идти нужно от частного к общему, а не наоборот ты видишь общий интерфейс у разных типов данных и тогда выделяешь его в протокол. главная функция протоколов - это предоставление интерфейса, что используется прежде всего для переиспользования кода и композиции, но так же очень удобно при тестировании (композиция vs наследование для создания моков - это отдельная тема). разработчики свифта пытались разработать стоящую альтернативу наследованию, при этом не хотели убирать наследование из языка, как это сделано например в го (а есть, кстати, ещё какие-то языки без наследования?). правильнее бы называть свифт generic-oriented programming language, а протоколы - это лишь один из способов использовать эту генерализацию (слово обобщение тут кажется не подходит). в том же разговоре с сенделлом дэйв говорит, что с протоколо-ориентированным он вообще-то погорячился. под dont sta with the class, sta with the protocol он имел ввиду when you need polymorphism, sta with the protocol те используй протоколы везде, где тебе нужны разные имплементации одного интерфейса, но не более того. собственно композитизм - это как раз то, что дэйв и имел изначально ввиду в апреле 2020 в подкасте у санделла ( он так и сказал, что многие не правильно трактовали ту его презентацию. это более умеренное и обдуманное течение например уважаемый мной paul hudson придерживается такой позиции. 2 композитизм адепты этого течения яро топят за отказ от наследования и использование композиции через протоколы и экстеншны везде где можно (в абсолютизме на экстеншнах особо внимание не концентрируется, но тут они чуть ли не во главе религии). в результате ухудшает читаемость кода и повышается когнитивная нагрузка при работе с ним каждый раз между одной структурой данных и зависимой от неё другой структурой стоит протокол так что в голове приходится держать больше сущностей и по коду передвигаться сложнее. я повидал немало протоколов, у которых есть только один тип данных, который этот протокол имплементирует. так же мы начинаем наблюдать premature generalisation (преждевременное обобщение), впихивание лишних абстракций там где это не нужно. 1 абсолютизм абсолютно каждый дата-тип нужно прикрывать протоколом сразу на этапе проектирования мы получаем минимальную связность и максимальную тестируемость минусом конечно идёт удвоение кол-ва типов в проекте. условно можно выделить два основных течения этой протокольной религии. тут как в религии: общие фразы порождают различные трактования, и вот разные люди начинают видеть разное в понятии протоколо-ориентированное программирование. в середине презентации (на 15-й минуте) дэйв вбрасывает we have a saying in swift: dont sta with the class, sta with the protocol и после этого тысячи разработчиков начинают считать, что их программы на свифте должны быть построены исключительно вокруг протоколов. затем дэйв рассказывает какие же преимущества имеет композиция с использованием протоколов по сравнению с наследованием и в конце говорит про экстеншны и то, как они ещё больше расширяют возможности для композиции. один из них это злоупотребление наследованием и вообще использование подкласса вместо суперкласса (привет барбара лисков). в кратце, что же именно сказал тогда дэйв: структуры (и другие вэлью-типы) это здорово; классы - это тоже здорово (classes are awesome), но у них свои недостатки. именно там dave abrahams назвал свифт протоколо-ориентированным языком программирования. не помню уже были ли протоколы в первой версии языка или нет, но в 2015г с выходом swift 2 на wwdc состоялась это знаменательная презентация: protocol-oriented programming in swift. поговорим сегодня про протоколы и экстеншны в свифте. ну кэш в такой ситуации тоже может сыграть злую шутку, потому что он в основном на версию модуля сориентирован, так что твои незарелизенные изменения могут не подтянуться или не отобразиться (надо немного с бубном попрыгать, чтоб отогнать бесов). это болезненно, когда нужно менять что-то в коде интеграции модуля, когда изменения делаешь в модуле, а дебажить нужно в хосте. дебажить-то в проекте приложения не проблема (исходники модулей там есть), но вот изменения не сохранятся так что нужно править в отдельном проекте модуля и подтягивать в хост-приложение оттуда. в минусах (а точнее недоработках) ещё то, что не можем никак допилить картаж и настроить гит так, чтоб можно было при желании править код модуля прямо в основном проекте. в самом худшем случае нужно почистить всё причём для всех проектов (иногда неверная зависимость может подтянуться из соседнего проекта, потому что картаж их шарит, чтоб не дублировать) а собрать проект после полной очистки занимает примерно полчаса. иногда ты узнаёшь об этом на этапе компиляции, иногда в рантайме тогда идёшь и начинаешь чистить кэш с самого безболезненного уровня (derived data) до самого глубокого. периодически из-за переключений с ветки на ветку или при апдейте модуля с версии на версию подтягивается какой-то невалидный кэш. про инвалидацию кэша я уже упоминал модули кэшируются в бинарном виде, причём есть несколько уровней кэша: 2 уровня в картаже плюс derived data, иногда что-то кэшируется ещё и на девайсе (ресурсы например). в общем бардак, требующий много координированных усилий благо такое тоже нечасто. и эти новые релизы фиче-модулей не могут быть интегрированы в приложение, пока все модули не поднимут минимальную версию. а главное, что какие-то фиче-модули вполне себе совместимы с этой версией кор-модуля, и они уже в своих новых релизах ссылаются но неё так что приходится и их версии менять вручную. из-за минорного апдейта картаж теперь везде подтягивает эту версию (так как формально это совместимое изменение) и приходится вручную править версии модулей иначе проект не скомпилируется. итак-то процесс неприятный, а если кто-то напортачит, то ещё хуже как раз сейчас такая ситуация кое-кто поднял минимальную ios версию в одном из базовых модулей (те надо обновляться всем модулям), и при этом зарелизил это минорным апдейтом. отдельный маленький ад во всей этой системе проапдейтить все модули на новый свифт или поднять minimum deployment target приходится обновлять все модули, причём довольно быстро, причём в строгом порядке (либо от кор-модулей к приложению, либо наоборот). разруливание зависимостей периодически подкидывает какой-то головняк то кто-то напортачил с версионностью, то cahage ведёт себя не по-человечески. такое бывает не часто, и в общем к такому процессу привыкаешь ппривыкаешь, что хот-фиксы успевают подостыть в пути. пайплайн в модуле занимает 10-30 минут (в зависимости от модуля), в основном приложении - 1-2 часа так что даже на однострочный хот-фикс в модуле может уйти полдня. учитываем, что и у приложения и у модуля - отдельные ci-пайплайны те на каждый пулл-реквест (а их мимимум 3 получается) прогоняется свой пайплайн с билдом, тестами, статическим анализом и прочей лабудой. долгий переход от фича сделана до фича вмёрджена в приложение сначала делается изменение в модуле, потом релизится новая версия модуля (и не после каждой фичи), потом эта версия интегрируется в приложение. теперь о минусах нашего подхода. всё будет =). те, кто работает над основным приложением, в такие моменты страдают кто работает в модуле - радуется и ловит лучи зависти от коллег. закоммитить пару строчек чтоб проскочить авторизацию тоже не получится - без живой сетевой сессии запросы не будут ходить. у нас постоянно какие-то проблемы с тестовым бэком для основного приложения из-за многослойности, которую я уже упоминал, постоянно где-то что-то ломается и долго чинится если слетела авторизация на бэке, то в приложение не попадёшь. думаю каждый, кто работал над какими-то большими фичами, в больших проектах, оценит подобный бонус особенно если фича не изолированная и в этих же классах работает кто-то другой параллельно синхронизация изменений в таком случае - это боль. работаешь, тестируешь у себя в модуле, а как-готово - мерджишь, релизишь и интегрируешь (если нет изменений в интерфейсе модуля, то интеграция - это просто инкремент версии модуля в проекте). другое важное преимущество - это независимая разработка фич нет нужды прикрываться фиче-флагами или интеграционными бранчами в процессе разработки. если модуль имеет дело с сетью, то запросы-ответы лежат в модуле в виде моков это и разработку упрощает, и для end-to-end ui тестов удобно обычно к реальному бэку ты и не подключишься из модуля. это же очень помогает при онбордниге нового разработчика очень здорово иметь ограниченный контекст когда только начинаешь знакомится с проектом. как я уже говорил, модуль - это ограниченный контекст когда ты работаешь в модуле, тебя вообще не интересуют все остальные части приложения. в общем случае модули в основном приложении уже скомпилированные, так что не приходится пересобирать весь код при каждом чихе (с этим, конечно, не всегда всё гладко про сложность инвалидации кэша все знают). весь цикл разработки заметно ускоряется по сравнению с большим монолитом: изменение в коде, компиляция, отладка, прогонка тестов. в основном приложении надо ещё до них дощёлкать, или временно поменять какую-то логику, чтоб отобразить экран, который в обычной жизни только при каких-то хитрых условиях вылезает а тут всё в один-два клика. в-третьих, это даёт возможность вообще не выходить за пределы модуля при разработке (или изменении) фичи showcase app маленький, лёгкий, собирается быстро, фичи сразу же на виду. у каждого фиче-модуля есть своё приложение-витрина (showcase app), где во-первых представлен весь функционал модуля, во-вторых показано, как этот функционал правильно интегрировать в host app. модулями просто делить функционал между командами: одна команда работает над одним модулем, другая - над другим. большому количеству людей удобнее работать в нескольких маленьких проектах нежели в одном большом меньше пересекающегося функционала, меньше конфликтов. какие есть плюсы помимо декомпозиции и шаринга функционала между разными приложениями?. модули разные: это и фиче-модули, и интеграция сторонних сервисов, и кор-компоненты (дизайн-система, основные структуры данных). модули релизятся под семантическим версионированием в качестве менеджера зависимостей используем cahage (слегка допиленный). каждый модуль живёт в отдельном репозитории у него отдельное покрытие тестами, отдельные пайплайны на ci. у нас уже несколько лет как основной функционал вынесен в отдельные модули новые фичи (если они достаточно изолированы, имеют свой бэкэнд сервис и сложнее пары экранов) обычно тоже начинаются в отдельных модулях. так, от общего к частному расскажу, про модульность в ing. сурово! и как оно? хочется верить, что у нас этими 3 неделями и ограничится. в принципе с обучением ассоциируется пожалуй когда большая тема разбивается на части и шаг за шагом изучается и постепенно складывается в единое. у нас тоже один душ на всё здание был (9 этажей, по 4 блока на этаж что-то под 300 комнат), записи не было, но была живая очередь и хитрые эвристики, когда она покорочек - комфорт =). о как обоснуй. микросервисы - это этажом выше, модульность на уровне сервиса, где каждый модуль есть независимый проект. то ли похвалил, то ли сказал, что антинаучную ересь несу ;-). ко всем уже принятым мерам нидерладны вводят комендантский час с завтрашнего дня и до 10 февраля, после 9 вечера на улицу ни-ни сегодня последний шанс попить пива с друзьями (у кого-то в гостях бары то уже 2 месяца как закрыты). только мне кажется, это всё-таки принципы, а не архитектурная модель я описал одни принципы, ты - другие принципы - штука более общая и на их основе можно очень разные приложения построить это кажется не противоречит тезису о невозможности прийти к какой-то общей модели.  : о модульности конечно же а когда помоложе был,то о бабах (ну я всегда о них тогда думал). об мкс 🛰. теперь понял, о чём ты однонаправленные архитектуры и декларативные интерфейсы - это наше будущее, просто где-то оно уже настало, а где-то ещё нет =). естественно каждый подход имеет плюсы и минусы. сепарируя код ещё дальше, мы создаём отдельные проекты (возможно даже в отдельных репозиториях) и подключаем их зависимостями к основному. следующий вариант - создать отдельные таргеты и распределить код по ним тут у нас появляются уже отдельные фрэймворки и библиотеки для модулей. можно просто разбить код по папочкам в проекте. и тут встаёт вопрос о конкретной реализации. в общем по моему скромному мнению, после какого-то порога сложности любому проекту нужна модульность. у вас может быть общий домен (модели), общая дизайн-система (ui), общая логика обработки ошибок (сетевой слой), всё что угодно в уже имеющихся приложениях и если какая-то логика шарится между приложениями удобнее иметь её в отдельном модуле. переиспользуемость - это тоже сюда же. насколько я понимаю, на галерах, там где производство новых приложение поставлено на поток часто начинают именно с уже готовых блоков. в случае разработки приложения, если у нас уже есть готовые модули (базовые типы и структуры данных, сетевой слой, модуль авторизации, дизайн-система, ), мы относительно быстро можем собрать из них новое приложение. модули - это наши строительные блоки из которых мы собираем что-то большее. другая сторона модульности - это масштабируемость когда у нас уже есть оформленные функциональные модули мы можем объединять их в системы. актуально как для софтварной разработки, так и для управления командами, для оценки сроков проекта и тд. тут как раз разделяй и властвуй во всей красе небольшими изолированными компонентами управлять (и прогнозировать) гораздо проще, чем одной большой спагетти-системой где всё неявно взаимосвязано между собой. это как раз та проблема, которую можно и нужно решать введением очередного уровня абстракции. когда модуль становится слишком жирным и уже и он не умещается без проблем в голове при работе, мы делим его на ещё меньшие модули и начинаем работать с ними по отдельности. в единицу времени в голове может хранится весьма ограниченный контекст да, все мы разные, да, этот размер можно прокачать и постепенно добавлять по одному мячику во время наших занятий по жонглированию но предел есть у всех. с чем бы вы не работали, когда система растёт и усложняется, деление её на модули и работа с этими модулями по-отдельности - это главное что вам нужно делать, чтоб ваша голова не разлетелась в клочья. а деление на части - это ничто иное как выделение и формирование модулей. на мой взгляд, главное в модульности - это декомпозиция декомпозиция, или разделение целого на части, - это один из основных инструментов сдерживания усложнения системы. для чего вообще оно?. по мне, модульность - это такая базовая штука в нашей области, что знание и понимание её полезнее всего солида вместе взятого. будучи на месте соискателя, если речь заходит о модулях, я сам либо разворачиваю эту свою телегу ах сколько разных красок в этом мире есть! либо сразу спрашиваю, а в каком контексте сей термин вас собственно интересует?. конечно, это всё про модульность но мне сразу начинает казаться, что человек не видит этих разных уровней абстракции. или про то, как он делит своё приложение на слои по дядюшке бобу или про то как он аккуратно группирует файлики по папкам model, view, controller в своём проекте. меня немного расстраивает, когда на ios-собеседовании я прошу человека рассказать о модульности и он сразу начинает рассказывать про фреймворки (это самый частый случай). к чему это всё? во-первых, слово очень общее и соответственно многозначное во-вторых (что нам интереснее) даже в рамках одного контекста, модульность можно воспринимать на разных уровнях абстракции (район, квартал, здание, часть здания). но вообще всё что угодно можно декомпозировать и говорить про модульность в этом контексте. у меня в студенчестве общага была модульного типа, например там модулем назывался блок из 8 комнат, расположенных вокруг общих кухни и туалета. модульность - это и то как застраиваются районы внутри города (район - это модуль), и то как распределяется пространство внутри района (квартал - это модуль), и то как распределены жилые и нежилые постройки внутри квартала (здание - это модуль), и то что внутри этих построек. но потом мысль уносится в область архитектуры (той, где люди имеют дело с постройками). у меня, конечно, первые мысли профессиональные - программные модули, но если сделать над собой усилие и направить мозг в сторону от работы, сначала возникают какие-то неясные геометрические ассоциации: фигуры и формы, разделение целого на части. о чём вы думаете, когда видите слово модульность?. тебе как минимум сложнее будет тестировать этот код ну и неявные зависимости осложняют понимание и поддержку кода. конечно не нужно всё подряд инджектить но если выбор между неявным вызовом какой-то зависимости внутри объекта через какие-то статические константы или синглтоны и иньекцией этой же зависимости снаружи сомневаюсь, что в какой-то ситуации первое оправдано. я более или менее конктретный случай описал (видимо непонятно): тебе нужно использовать синглтон, у тебя 2 варианта - вызывать его внутри класса или прикрыть каким-то протоколом и заинджектить снаружи речи про создание чего-либо ин плейс тут не идёт. конечно не противоположные речь о том, что даже если у тебя синглтон, его лучше инджектить, чем неявно вызывать внутри класса с этим готов поспорить?. а это, прости, что значит?. но вряд ли сможем что-то общее вывести за пределами этого. тут мы вспомним мы вспомним best practices, про dry, и про kiss; согласимся что dependency injection обычно лучше использования синглтона; попеняем на модульность, чистые интерфейсы и понятный не слишком запутанный граф зависимостей. если в плане низкоуровневых паттернов (singleton, factory, adapter, observer,) и логики построения экранов (mvc, mvvm,) задачи у всех примерно одинаковые, то построение приложения из этих экранов-модулей уже сильно отличается от приложения к приложению. мне кажется, не особо. можем мы предложить какие-то типовые модели для решения этих проблем?. какие-нибудь независимые от экранов фоновые демоны (причём какие-то привязаны к циклу всего приложения, а другие к сетевой-сессии, например). допустим у нас какое-то взаимодействие с локальной бд, сетевой слой, какие-нибудь сервисы для внешних bluetooth-девайсов, авторизация, кэширование изображений. тут кто-то вспомнит про координаторы (презентеры, интеракторы) хорошо, тут как-то порешали а что делать с остальным? с сервисами, например. а дальше что? как мы переключаемся между экранами или сценами? как переходим из одного юзер-флоу в другой?. главная претензия к основным архитектурным паттернам в ios - это их ограниченность одним экраном тот или иной паттерн обычно говорит лишь, как мы распилим view controller, чтоб он у нас не был massive. в итоге существуют сотни вариации какого-нибудь mvvm, потому что у каждого он немножко свой и часто люди говорят об одном паттерне, имея ввиду совсем не одно и то же. ты гуглишь, как другие решают похожие проблемы, спрашиваешь коллег (если есть у кого спросить) и в итоге как-то приспосабливаешь выбранную архитектуру под свои нужды. как бы классно всё ни было в теории, на практике появляются миллион деталей, которые сложно уложить в стройную теорию и даже если по началу уложили, в течение дальнейшего развития проекта местами это делать всё сложнее. модели, паттерны, аббревиатуры мы выбираем ту или иную модель и начинаем воплощать её в проекте. архитектура должна решать какую-то задачу, что-то более частное, чем создать мобильное приложение пока нет чего-то более определённого и говорить толком не о чем. за архитектуру любит потрещать подобающее большинство разработчиков, и я не исключение правда смысла обсуждать что-то без конкретного проекта немного. мы строили, строили и наконец построили об архитектуре много не будем, но пару мыслей накину. затронули да, но поверхностно у ing есть большая прослойка контракторов, котоым можно либо не перепродлить контракт (в нашем отделе такие только кейсы были), либо безболезненно сократить. а что у джетбрэйнс в плане мобильной разработки? а именно в амстере?. имхо это очень крайний кейс один на миллион, когда именно разница между двумя структурами данных - это затык в приложении, и когда разработчик эту разницу не понимает. не расспрашивал, честно говоря. ну ооочень зависит от специфики твоей работы не все же занимаются оптимизацией компиляции гигантского проекта ;-). конечно не всегда такие кардинальные смены направления это удачная идея есть примеры и неудачных переходов но здорово, когда компания даёт тебе шанс. в соседней ios команде есть джун-разработчица, которая до этого работал в отделении банка, просто общалась с клиентами никакого айти опыта или образования у неё нет и довольно быстро прогрессирует девушка. я приставлен к нему личным ментором половину рабочего времени он занимается изучением айоса (вторую половину - делает какие-то простенькие задачи) я думаю, что было бы со мной, если джуном я бы развивался в таких же тепличных условиях хз, но белая зависть иногда накатывает. знаний ios (как и ооп, например) у него примерно 0 с такого уровня джунами мне ещё не доводилось работать - новый челлендж опять таки). в мою команду с начала этого года поступил джун, который полгода до этого писал другое приложение на react native внутри ing а год до этого вообще был дата-аналитиком. если есть желание, можно попробовать перейти в другую команду (если тебе там будут рады) или даже на другой проект бывает, что человек меняет кардинально род деятельности. в больших компаниях обычно больше свободы выбора у нас, конечно, не фб, но в разумных границах ты сам решаешь чем заниматься внутри команды. свобода. команда у нас подобралась очень классная все разные и честное слово нет ни одного плохого или просто ленивого разработчика. тут тупо теория вероятности: если в команде 30 разработчиков (и какая-то фильтрация есть на входе), как ни крути а будут люди с интересным опытом, отличающимися взглядами и новыми для тебя знаниями. мне чертовски не хватало этого в маленьких командах когда ты самый опытный, очень трудно учиться у других (всегда есть чему, но мало) начинаешь глубже копать в бэкэнд или соседнюю платформу но вот чтоб увидеть/услышать что-то новое про родной айос - вот этого не хватает. вот этот твит очень хорошо выражает то, что я ценю на своей текущей работе:. команда. на больших проектах появляются такие задачи, которых просто не может быть на проектах поменьше можно сказать, что большие команды создают себе проблемы, которые потом сами и решают и это может быть очень интересный и полезный опыт. вообще большая часть моей работы состоит в поддержке старых и создании новых модулей для приложений в разных странах тут тоже и организационные вызовы и технические о модулях мы отдельно поговорим в один из следующих дней. (чувствую себя, как будто на собеседовании о своём опыте рассказываю =) ). тут интересен был сам процесс: проектирование апи сразу с несколькими слоями бэкэнда, взаимодействие с коллегами из других стран (вряд ли вы можете представить, насколько отличается, например голландский и бельгийский менталитеты я точно не мог). разработка нового модуля инвестиций модуль для нескольких приложений в разных странах, а соответственно много стэйкхолдеров, разное законодательство и регулирование. копание в ci (развлечение на любителя, понимаю) сначала копался в кишках нашего гитлаба (обильно обмазанного скриптами) потом участвовал в переводе всего ci с gitlab на ms azure. разработка компонентов для базовых фреймфорков тут интересно то, что компонент толжен быть общим, употребимым в различных юзкейсах, кастомизируемым, все эджкейсы должны быть хорошо протестированы иначе к тебе придут, и придётся дорабатывать, а то и переделывать. немного конкретики по задачам; в чём мне довелось принять участие за время работы в ing (и что мне кажется интересным):. и задачи выполнять не быстро а правильно, если надо попробовать разные решения и выбрать более оптимальное - пробуешь, разбираешься в нюансах, пилишь mvp, сравниваешь. только когда у тебя устоявшийся продукт, большая команда и ощутимый ресурс, ты можешь позволить и платформенную команду содержать (чью бизнесс-вэлью не так-то просто обосновать далёким от технологии менеджерам), и рефакторинги проводить где и когда нужно. это такое себе стартап - это не про качество кода и правильную архитектуру, а про гибкость, драйв, азарт, надежду и фичи, фичи, фичи. многие наслышаны историй про сеньоров, которые приходят в стартапы и начинают всё перепиливать, рефакторить и доводить до ума останавливая весь фиче-девелопмент, само собой. задачи. чем больше команда, тем больше правил, формализации и туллинга вокруг разработки это иногда замедляет разработку (если что-то ломается), но в целом без этого никак. процессы организации работы 30 разработчиков над одним проектом - это тоже ново и интересно, если до этого ты работал только в маленьких командах. какой-то план роста разработчика, понимание, что тебе необходимо для повышения (не то чтобы мне конкретно этого не хватало, но знаю людей, для которых это принципиальный момент). чёткие периодические релизы (release trains) - это требует и технической организации, и особой организации работы персонала. в ing никакой оценки ты не даёшь пока все основные моменты не ясны, дизайн не продуман и все галочки не поставлены в dor. отдельная боль - это оценка задачи, которую в стартапе нужно дать быстро и не имея чёткого тз естественно потом тебе за эту оценку и отвечать. definition of ready (dor) - когда можно сказать, что задача готова к разработке) и definition of done (dod) - что именно должно быть реализовано, чтоб фича считалась законченной. даже банальное обсуждение нового апи между фронтом и бэком есть не везде. чёткая постановка тз на выходе. чёткий процесс работы над задачей: ux/ui-проектирование, обсуждение между стейкхолдерами, дизаинерами и разработчиками на начальных стадиях, тщательная проработка механики и переходов между состояниями. какая-то рефлексия, ретро, работа над ошибками какие-то меры, чтобы не наступать на старые грабли. следование поставленным планам, работа над тем, что было оговорено стартапу нужно быть гибким и постоянно подстраиваться то к чему рвались вчера уже не ориентир, то над чем работали последний месяц можно выкинуть: планы быстро меняются. настройка и поддержка развесистого ci с тестами, интеграциями и системами статического анализа (согласитесь, на небольших проектах это особо и не нужно). чего мне не хватало по части процессов в подобных компаниях:. какие-то вещи работая в стартапе не реализовать потому что нужно пилить продукт, быстро и много и это нормально, это специфика стартапов часто компания уже вроде заматерела, и темп развития подсбросила, а процессы налаживать не хочет, в этом отношении так и осталась стартапом. процессы. какого же хрена в таком кровавом энтерпрайзе работать! - воскликнет читатель после всего что я понаписал про работу в банке да даже на галере лучше! давайте поговорим про положительные моменты. кажется мы достигли баланса и проценты уже не меняются особо мне тоже кажется, что даже для сеньора в нашем деле это не определяющий навык. согласен, если можешь себе позволить использовать алгоритмы как один из входных фильтров (и при этом иметь на выходе адекватное количество кандидатов), то почему бы и нет тут всё упирается в количество заявок на входе воронки в faang это всё мне не кажется диким ;-). это, конечно, всё крайние случаи но всё же суть в том, что в большой организации даже решение самого тривиального вопроса порой может занять очень много времени. а любые вопросы так или иначе связанные с секурностью и приватностью сразу блочат все намечающиеся изменения, дабы чего не вышло в итоге все пользователи независимо от языка на девайсе продолжают получают пуши на голландском. а потом ещё внезапно появятся ребята из секьюрити, которые скажут, что не стоит вообще прокидывать локаль между этими сервисами, потому что где-то что-то торчит во внешнюю сеть и это попахивает возможной утечкой личных данных. и по какому-то стечению архитектурно-исторических обстоятельств, эти два айди не удаётся связать между собой. но вот незадача локаль прокидывают с одним айди пользователя, а ожидают с другим (в смысле, что разные сервисы основываются на разных системах идентификации пользователя упрощённо: айди человека против айди его аккаунта). в итоге после долгих переговоров бэкенд соглашается на то, что это какая-то ересь и нужно всё-таки прокидывать локаль между слоями бэкенда начинают работать в этом направлении и даже что-то выкатывают. в общем фронтенд против, и начинаются долгие раунды переговоров с привлечением архитекторов и вышестоящих менеджеров. мы в мобилках саркастически предлагаем добавлять туда все метаданные пользователя, девайса и положение звёзд в момент отправки запроса ну мало ли кому пригодится. но нет, по какой-то никому не ведомой причине локаль не представляется возможным прокинуть с одного бэкэнд сервиса на другой поэтому все бэкэндеры дружно просят нас совать её в хэдер каждого запроса. или вот ещё случай из жизни какому-то из сервисов нужно знать локаль пользователя, чтоб возвращать локализованный текст, например всё кажется тривильно, мы же засылаем локаль с клиента на сервер при каждой авторизации. но иногда общий босс - это председатель ing group, и интеграции модуля в айос приложении - не его уровень компетенции тут уж какие-то менеджеры из середины цепи будут договариваться, вытогровывая друг у друга какие-то уступки, не особо разбираясь в технических деталях. обычно это решается поиском общего начальника где-то вверх по иерархии и надавливанием на него с обеих сторон (кто глубже продавит или у кого связи и авторитет). и вот 2 эти команды решают одну задачу (например интеграция модуля в хост-приложение), но видят решение по разному и даже после нескольких раундов обсуждений не могут прийти к консенсусу. на самом деле сильно разнесённые команды - это не только дихотомия фронта и бэка вполне могут быть 2 мобильные команды работающие над одним продуктом, но одна из них находится в брюсселе или мадриде, а другая в амстердаме или дюссельдорфе. чем дальше бэк (тот сервис, который тебе нужен) и фронт разнесены по структуре организации, тем больше это похоже на разные компании со всеми вытекающими в смысле, что сложнее достучаться и добиться помощи. ходишь от одной команды к другой, пытаясь понять, какой именно слой лажает каждая бэкненд команда будет прикрываться своим бэклогом, зелёными тестами и тотальной занятостью разработчиков. в итоге, когда возникает какая-то проблема с запросами-ответами (а ты, допустим не копался ещё в этом всём), ты сначала тратишь полдня, разбираясь что же на самом деле уходит в сеть и почему а потом, если выясняется что на фронте всё чисто, пытаешься нащупать проблему на бэке. ну и пару проксей для секурности воткнуть тоже просто необходимо куда без этого!. на бэке слои - (очень упрощённо) это расстояние от конкретного сервиса с базой данных до апи, который дёргает мобилка часто нужны какие-то аггрегированные данные из разных сервисов, так что есть какие-то промежуточные слои. фичи (а каждый сетевой слой, например - отдельная фича) - это отдельные модули, контролируются отдельными командами и живут в отдельных репозиториях (о модулях поговорим подробнее). на мобильном фронт-энде это например 2 сетевых слоя (общий для всех стран, и один nl-специфичный поверх первого) или отдельная дизайн-система для ui-компонентов. упомяну адовую многослойность (а соответственно и сложность), что на фронте, что на бэке. ещё о специфики работы (есть подозрения, что многое применимо к большой компании в принципе). ждал, кто первый спросит а что есть алгоритм в данном контексте? но давайте всё-таки более специфично подходить к вопросу алгоритмы в том понимании, в котором они идут в одноимённом университетском курсе и включаются в алгоритмическую секцию интервью. главное находить проблемы, а не создавать их ;-) а так, пинту эля за чёткость формулировки, господину в регбийке!. вот это респектнул нашему брату!. разговоры про алгоритмы навели на вопрос: до какого-то уровня наверняка можно без алгоритмов обходиться, но может ли программист в мобильной разработке считаться сеньором без знания алгоритмов?. кажется, это то о чём я и говорил: приятный бонус. и вот разработчик сам определяет для себя задачи, черпая их из обоих бэк-логов и балансируя между ними. технический вклад - это качество кода, техдолг, технические улучшения и миграции, переход на новую версию сетевого слоя или ui-компоненту, код-ревью, собеседования (если разработчик привлекается), какие-то дополнительные технические проекты по сути тут есть свой отдельный бэклог. продукт - это непосредственно фичи и баги тут есть скрам, бэклог, спринты всё как везде. со своей стороны разработчик ответственен перед командой за вклад в продукт (за каждой командой закреплён какой-то функционал, какие-то фичи), а перед чаптером - за технический вклад в проект. но он понимает, какое место этот разработчик занимает в чаптере, насколько он значим для проекта, как много технических вопросов он закрывает и какие технические компетенции имеет. чаптер-лид может понятия не иметь, чем разработчик занимается в команде, над какими задачами работает и насколько он эффективен в этой связи. получается, у разработчика нет никакого прямого начальства, контролирующего все аспекты его работы официально - это чаптер-лид, но он занимается только техническим развитием разработчика и помогает ему в решении технических вопросов. по технической разработчик является частью чаптера, чаптер - часть айти-зоны и тд по продуктовой, разработчик - часть своей фиче-команды, команда - часть трайба и тд. суть модели - это две пересекающиеся на конкретном работнике иерархии: техническая и продуктовая. как у нас всё устроено огранизационно мы работаем по так называемой модели спотифая с командами (squads) и чаптерами (chapters). cчитаю что знание алгоритмов - это приятный бонус, а не необходимый навык. в бельгии особенная ситуация с ing только в прошлом году запустили нормальное нативное приложение сейчас оно активно развивается applepay скоро должен появиться. алгоритмы (как и тестовое) - это кажется везде предмет спора =) мы решили не включать их я лично из лагеря противников алгоритмов на собеседованиях. фидбек кандидату даёт чаптер лид (через рекрутера, если он привёл кандидата) на следующий день. по сути 2 этапа получается: тестовое задание + само интервью (~2 часа) тестовое стараемся в течение недели проверить, если человек проходит в течение следующей недели стараемся назначить интервью. оба собеседования идут друг за другом (в одной переговорке раньше, сейчас - в одном канале) на каждом по 2 интервьюера сразу после блока все вчетвером собираются и принимают решение по кандидату. после этого 30-40 минут с кандидатом говорят чаптер-лиды, проверяют общую мотивацию, насколько человек подходит нам по общим характеристикам (всё остальное, исключая технические навыки софт-скилы). техническое собеседование - это 1 час, где мы обсуждаем тестовое (если есть вопросы), ну и говорим за ios (общие знания, платформа, наши языки). естественно были обычные споры включать/не включать тестовое но я отстоял, чтоб оно было (да, я за тестовые). сейчас это:- отсмотр резюме чаптер-лидом- тестовое задание- техническое собеседование + собеседование с чаптер-лидом. в нашем ios чаптере до последнего времени было несколько беспорядочно у меня как раз в прошлом году была цель (про цели тоже расскажу ещё) наладить процесс найма, так что только к прошлой осени удалось выстроить что-то более или менее чёткое. каких-то общих стандартов по всей компании нет всё отдано на откуп отдельным чаптерам (о чаптерах и скводах расскажу сегодня) так что везде по-разному. всё так, не врут банки, интернет-провайдеры и мобильные операторы. ну в рф сходи на любую мобильную конфу и парни из сбера, тинькофф и альфы много всего интересного расскажут что интересного у нас, расскажу дальше. со сбером не сравнить, но всё равно народу немало ;-). мобильных разработчиков - человек 30 на каждую платформу, плюс по, ui/ux-специалисьы, несколько разработчиков апи, девопсов, дата-аналитики, спецы по accessibility ну человек 200-300 наберётся. мобильного отдела как такового нет то подразделение, где работаю я, включает в себя несколько фиче-тимов работающих над мобильным приложением для голландии и бельгии несколько - это порядка 2х-3х десятков, включая команды из недерландов, бельгии, испании и румынии. но процесс движется и очень много масштабных и интересных проектов создаётся на основе (и для продвижения) этих изменений. уже не первый год ведётся масштабная работа по объединению всех и вся, но там очень много подковёрной борьбы, интриг и политики, налаживание общих инфраструктуры и контрактов для бэкэндов и прочей работы, которая занимает годы. в каждой стране своё мобильное приложение, в некоторых странах не по одному (отдельное для бизнеса, отдельное для инвестиций, и тд). даже в рф, украине и казахстане какой-то бизнес есть (но как понимаю немного и только b2b). ing - крупнейший голландский банк; в топ 10 банков по европе с отделениями во многих странах (в основном европа, но что-то есть и в австралии, сингапуре, индии, японии, турции и тд). на айосных митапах больше половины народа - это ребята из финтеха. стоит отметить, что в голландии финтех вообще очень активен в плане мобильной разработки от криптокошельков, биржевых торгов, всяческих аггрегаторов подписок до кучи каких-то b2b решений, которые вообще непонятно чем занимаются (но судя по всему неплохо живут). ещё до ковида (а с ковидом это лишь ускорилось) банки в голландии начали активно резать косты и сварачивать свои отделения по стране в замен этого они предлагают интернет-банкинг и мобильные приложения так что теперь это - одно из основных полей конкурентной битвы. основные банковские бэк-энд сервисы чрезвычайно зарегулированы, обмазаны секурностью и ломятся под легаси-кодом десятилетней давности, являясь главными представителями того самого кровавого энтерпрайза с мобильными приложениями дела обстоят гораздо лучше. нынче многие банки (и финтех вцелом) на передовой айти - это факт (как минимум в мобилках). как и в рф банки тут варятся в весьма конкурентной среде не знаю, что именно движет технических прогрессом в российских банках и как так получилось, что лет 5 назад банки стали чуть ли не главными айти компаниями в стране (есть мысли, но сейчас не об этом). но тут нам на помощь приходят банки. говоря о крупных айти конторах в амстердами в голову приходят uber, booking ну atlassian (но у них насколько я знаю какой-то обширной мобильной разработки нет) ну epam который нынче везде (но их масштабов тут я не знаю и не продукт это) в принципе и всё. всего этого я получил и продолжаю с удовольствием получать наверное в какой-то момент будет достаточно и надо будет идти обратно в стартапы (или просто переходить на контракты, как тут делают все состоявшиеся разработчики) но пока всё путём. хотелось пощупать серьёзный ci и позаниматься платформенной разработкой, хотелось других масштабов. начну с того, почему ing мне очень хотелось поработать в большой компании, в большом мобильном отделе, в большой айосной команде хотелось посмотреть на более или менее отстроенные рабочие и технические процессы и поучаствовать в их дальнейшем налаживании. сегодня расскажу про ing и немного уже начнём копать внутрь наших ios проектов. работа и семья - как два главных потребителей времени, являются ещё и главными поставщиками друзей =). как всегда - какие-то кружки по интересам, митапы (их тут много и на любую тему) но больше всего знакомых - это конечно работа (в том числе и прошлая) и ребята, с которыми мы познакомились на почве родительства. с полей сообщают что в uk не всё так сладко с переработками (как минимум в разных конторах по-разному). в каком смысле жёстче?. на двух моих работах в голландии в сумме человек 7 знакомых были на бёрн-ауте в тот или иной момент (в кардио в один момент выгоревшими были 3 человека из офиса в 30-40 человек), и ещё человек 5 знакомых вне работы. так что конечно многие этим пользуются а трудовое законодательство таково, что всем проще закрывать на это глаза и просто оплачивать всем реабилитацию (реабилитация - это режим отдыха от работы, с периодическими сессиями с психологом). главная проблема тут, что это не перелом ноги, а ментальное состояние, и отличить реально выгоревшего человека от симулянта очень сложно даже будучи профессионалом. в голландии (как и много где в развитых странах) это официальный диагноз со сроком реабилитации и возвращения к работе до 2-х лет, в течении которых работодатель или государство будут выплачивать тебе 70%-100% твоего оклада. бёрн-аут это реальная проблема, человек впадает в апатию (или иногда даже в депрессию) на почве работы и его без помощи специалиста очень сложно оттуда вытянуть. а собственно, что откладывать бёрн-ауты опять же много чего уже было сказано, кажется, даже тут кто-то уже вёл отдельный тред. а то ведь поработаю так выходные, а потом в бёрн-аут, плавали - знаем! (о бёрнаутах ещё поговорим). я вызвался поработать суперменом (естественно с условием, что отгуляю эти выходные потом на неделе) меня 3 разных начальника разного уровня спросили приватно, не просил ли меня кто об этом, и действительно ли это не окажет негативного влияния на мою жизнь. недавно горел проект, в какой-то момент можно было поднажать на выходных, чтоб закончить в срок естественно никто о таком не попросит тебя. у нас в целом то же самое. тут (как и в среднем в западной европе) чтят work-life balance в соседнем аккаунте буквально вчера обсуждали то же самое про uk:. тут свободно говорят по-английски почти все по моему скромному опыту амстердам - самый англоговорящий город из тех, где английский не является национальным языком (может стокгольм поспорит, но вряд ли слишком уж тут близкие культурно-исторические связи с uk). тут очень много экспатов (прежде всего в больших городах, особенно в амстердаме), причём не только в айти. ещё немного отдельных мыслей про нидерланды. у нас же был на эту тему доклад от hrов в штатах на прошлом. плюсую. а им конкретные названия не так важны тут важно, чтоб ты мог грамотно описать, что ты делал, над какими проектами работал, какими навыками обладаешь написать в cv и в последствии рассказать на собесе (углубившись, где нужно). про ing ещё расскажу. тут никакой особой специфики рассылаешь свои резюме, активизируешься в linkedin, можно какие-то другие площадки тоже использовать (monsterboard для голландии) ищешь вакансии, где работодатель обеспечивает тебе визу при хорошем резюме, рекрутеры быстро возьмут тебя в оборот. да, в киеве работы будет больше, чем в берлине и я молчу про штутгарт. тут уже продолжают дискуссии начатые, полгода назад, когда так же обсуждали релокацию (достаточно много интересного тогда наобсуждали). это аспект, который мне вообще не приходил в голову, и который приятно удивил постфактум. поездка в гость к друзьям - это 10-40 минут, в магазин за едой - полчаса (туда-обратно), на работу 15-40 минут начинаешь искренне со всеми жалеть бедолагу-коллегу, которому приходится 2 дня в неделю ездить в офис из соседнего города (и тратить 50 минут на дорогу!). после жизни в рф у меня было когнитивное искажение: что город либо огромный (как мск или спб), либо с недоразвитой инфраструктурой (как родная вологда и все города-немилионники) а тут оказывается всё есть, и при этом до всего ты доберёшься максимум за полчаса на велосипеде. * бонусы приятным бонусом стал амстердам как среда обитания город мне кажется ощутимо красивее и удобнее питера самое главное, что при размере в 7 раз меньше, кажется, что в городе есть всё что нужно для комфортной жизни тут всего хватает. появление друзей - процесс долгий и тут (как и в отношениях) от тебя зависит далеко не всё, сложно что-то форсировать велика доля везения/невезения. конечно появились и новые приятели, в том числе и весьма близкие, в том числе и русскоязычные (те и языкового барьера нет, и менталитет один) так что этот аспект тоже понемногу налаживается когда есть с кем поговорить по душам, жить легче. * друзья их конечно очень не хватает особенно сейчас, когда уже год авиасообщение и путешествия весьма затруднены переписки и перезвоны с ними помогают, но на 100% не замещают (да и не со всеми работает удалённый формат в принципе). постоянную прокачку не отменяю и по сей день. * язык тут всё обернулось лучше, чем я ожидал для работы моего уровня без проблем хватило мой уровень оказался примерно средним для понаехавшего для общения с друзьями за пивом в целом тоже стало хватать в последнее время, но тут всегда есть куда расти. * жене действительно трудно (труднее чем в рф) найти тут работу, особенно ту, которая бы радовала. без семьи (или когда оба получают зарплату уровня айти) картинка совсем другая =). * деньги их тут меньше (имею ввиду после вычета всех расходов), и меньше ощутимо я был готов с рождением ребёнка трат прибавилось и пришлось уже прилагать усилия, чтоб сводить ежемесячный баланс в ноль и не выходить в минус. привыкаешь что в детских садах нет понятия сменной обуви, привыкаешь к более крепкому пиву в меньшей таре так привыкаешь, что потом на родине всё начинает казаться не так (то, что раньше было нормой и обыденностью). привыкаешь ездить на велосипеде, привыкаешь заполнять налоговые декларации, привыкаешь к оставленным на пороге посылкам, привыкаешь к индивидуальному бойлеру в квартире, привыкаешь к парацетамолу как универсальному лекарству, привыкаешь здороваться с незнакомыми встречными. * жизнь она другая да, но тк культурные различия между европой и нами не столь велики, привыкаешь довольно быстро. особняком стоит лондон где-где, а там с рынком мобильной разработки всё хорошо (и не только из-за офиса фб ;-), возможно даже лучше чем в крупных городах россии в остальной британии, кажется, всё как и в остальной европе. в городах поменьше (или поюжнее) ситуация с вакансиями похуже. мне кажется, даже в минске или киеве вариантов побольше (отпишитесь, кто может сравнить). рынок труда в европе очень неоднородный в больших городах типа амстера, берлина или варшавы по мобильной разработке варианты есть, но ассортимент ощутимо меньше чем в москве или питере. * работа айти в европе плюс/минус то же самое разница между большой компанией, стартапом и галерой в рамках одной страны существеннее, чем разница между двумя компаниями схожего типа в разных странах. что оказалось на деле по истечении периода адаптации:. так-так вот это что-то новенькое, надо изучить вопрос (за рефералом дело не должно стать, спасибо). мне кажется, это отрезвляет главное работать над тем, что это переставало тебя пугать/расстраивать, а наоборот мотивировало сложно, но можно. сейчас уже очень сложно куда-то отсюда переехать, даже когда очень хочется, даже когда есть какие-то интересные возможности по работе (ребята из фб, намекните там уже своим, что пора открывать офис в амстере ;-). как я уже упоминал на окончательное решение повлияла поездка в амстердам, когда город как-то влюбил меня в себя понимаю, что так же мог бы влюбиться в какой-то другой город по прошествии нескольких лет я очень рад этому стечению обстоятельств. ну и бонусом, хотелось жить в красивом и удобном но немаленьком городе так что выбирал в итоге между британией/ирландией, скандинавией, голландией и германией. внутри европы мне были более интересны северные и западные страны тут и климатическая близость, и экономическая ситуация, и рынок труда и отношение к порядку и законам. локацию я выбирал следующим образом: европа мне была всегда была ближе по духу и образу жизни ни в штатах, ни в азии, ни в арабских странах мне жить особо не хотелось. уже в процессе =). ну ипотеку никто не отменял (ипотека? а что это? подумают те самые страдальцы с 400к/мес). отмечу, что я никогда не ставил целью свалить из страны цель была поехать пожить годик-другой, а там видно будет (прошло почти 5 лет живу, смотрю). last but not least, жена, которой скорее всего будет сложно найти работу в другой стране. экономический аспект (упомянем деньги ещё разок) я не до конца представлял каково будет соотношение зп/траты в моём случае зарубежом были опасения, что денег будет оставаться сильно меньше. отдаление от друзей невозможность посидеть за пивом или провести вечер за настолками в компании близких людей тоже заставляла серьёзно задуматься мне это было важно. английский был на уровне понимаю 50% речи, когда смотрю фильмы, сам говорю только на бытовые темы опять же спасибо w&amp;t я трезво представлял свой уровень (который без практики с тех пор ещё и подупал), что я могу, а что - не очень. сложность и неизведанность жизни в другой стране те это и манит и пугает одновременно в 2010 я по workandtravel провёл лето в штатах, так что представлял, что такое жить в чужой стране, где свои правила, свой ритм жизни, свои обычаи и устои, своя культура. что меня демотивировало:. и ещё фоном, я постоянно думал, что раз уж занесло меня в айти, и раз работу в этой сфере можно без труда найти зарубежом - то надо не упустить возможность попробовать. ну и про деньги иллюзий не строил и про цены ситуацию примерно понимал, и про налоги так что в деньгах готов был и потерять. про то, что рынок труда в сфере айти в рф хорош я знал как с этим обстоит зарубежом понятия не имел. на втором месте было нарастающее беспокойство по поводу политико-экономической ситуации в стране (то что в опросе я назвал там жизнь приятнее/спокойнее). для меня на первом месте было любопытство очень было интересно, каково оно жить и работать зарубежом, насколько оно отличается от привычной россии ещё со школы было любопытно. что меня мотивировало на переезд:. расскажу про себя, раз уж стою на сцене с микрофоном. в общем, картинка про релокацию у большинства адекватная (недаром килотонны статей и тредов написаны) приоритеты у каждого свои, но какие-то общие позиции проглядываются всё-таки наше комьюнити тут довольно однородно. по сути ты прав, но в частности тайская медицина вполне себе хороша (и по своему опыту, и по опыту живших там знакомых) правда она и стоит как европейская (рядовому тайцу не по карману) у них там кажется тоже есть платная и бесплатная медицины, отличающиеся очень сильно. это как с инвестициями: либо доходность и риски, либо стабильность и низкий доход совпадение? ;-). подход чуть более структурированный обычно, собеседования короче, отношение к соискателю чуть более уважительное но в массе те же яйца, только в профиль. по-этому и написал к сожалению) у меня такие же вопросы были 2 года назад после получения своих первых 300 долларов понял, что на 2-м курсе универа, я получаю столько же, сколько и мама, которая в больнице лечит людей уже 20 лет. и вот это вот тоже. и плевать, что это с одного из прошлых обсуждений ;-). дружище, вариант любопытство я старался втиснуть в опрос, но от не вошёл =). да, тема релокации поднимается в этом (да и не только) аккаунте раз в несколько месяцев жаль у меня нет данных с предыдущих опросов интересно, есть ли какая-то динамика ответов?. если что-то другое, пишите в комментах сложно вместить всё в 4 возможных варианта опроса (кажется, люди как-то больше вариантов умудряются делать). какая главная причина не уезжать, в случае, если такие мысли возникают (или если вы уже пережили или переживаете переезд):. какова на ваш взгляд главная (их всегда несколько) причина релокации (реальной или потенциальной):. сегодня поговорим немного про релокацию и жизнь в новой стране начну с пары опросов. в-третьих, были-таки места, куда я хотел и не подходил по разным причинам где-то не достаточно убедительно разворачивал деревья, где-то не вписывался в команду, где-то просил слишком много денег. во-вторых, текущая работы была не так плоха, и условия были довольно хорошие; так что потребовалось время (и кажется перебор всех возможных работодателей в городе), чтоб найти что-то как минимум не хуже. во первых, процесс действительно небыстрый в принципе: и на старой работе отрабатываешь минимум месяц после увольнения (а обычно больше), и ступеней тут кажется в среднем больше и вариантов поменьше. почитал про язык ( и что-то мне он не показался каким-то упрощённым или адаптированным под непрограммиста кажется и порог входа там не меньше, чем в любом другом языке так что останусь при своём, что в этом отношении 1с всё-таки нечто новое. мусье толком не слышал про такое если вы в двух словах можете рассказать про язык и среду разработки сего продукта, мусье будет признателен за интересную информацию =). спасибо гляну в 1с, мне кажется, усечённый язык и упрощённая система разработки (конфигурировния) - это как раз то, что в первую очередь повлияло на распространение. вот тут не соглашусь кажется и нескольких хэллоуворлдов (в купе с горящими глазами и общей адекватностью) достаточно, чтоб начинать искать какую-то джуновскую работу (а там тебе уже и цель приложат, и возможностей развития подкинут). там тоже какой-то свой усечённый язык программирования и среда разработки/отладки прямо внутри продукта? я просто не имел дела с этим. иметь цель или даже какую-то идею проекта - это я бы сказал luxury =) когда есть - конечно это здорово, но можно начинать и без цели. ответил в общий тред =) про текущую работу расскажу в следующий раз. в ing я и работаю на текущий момент, о чём планирую рассказать подробнее завтра-послезавтра. мини-тред про 1с тут:. ну и лично для меня это сработало очень классно для облегчение вхождения в настоящее программирование классно что можно туда попасть с улицы, без какого-либо профильного образования и через несколько недель уже что-то реальное программировать. мне почему-то кажется, только у нас на постсоветском пространстве (с нашим менталитетом и образованием) могла образоваться такая прослойка программистов-конфигураторов. порог вхождение - 1-2 недели и вот ты уже орудуешь регистрами (бд), документами (файлами) и проводками (командами по трансформации данных). программистов пишущих сам 1с десятки (ну может сотня-другая) 1с-программистов работающих над конфигурациями тысячи (если не десятки тысяч) по всему снг в какой-то момент казалось, что в каждой уважающей себя конторе где пользуют 1с должен быть минимум 1 штатный 1с-программист. те одна из особенностей 1с в том, что так называемые 1с-программисты - это на самом деле конфигураторы, бесконечно допиливающие какую-то 1с-софтину (или даже конфигурирующие что-то новое с нуля). однако ты не программируешь, а конфигурируешь программу те сломать в коде ты ничего не можешь, но вот похерить данные, что-то нетуда перенаправить или затереть - это легко. там есть объекты, функции, циклы есть свой язык запросов к бд (очень похожий на sql, но естественно кириллический) всё вроде бы серьёзно. изюминка этого допиливания в том, что делать это можно было не особо разбираясь в программировании делалось это путём редактирования конфигов, которые были написаны на собственном 1с-языке программирования (том самом, где можно по-русски писать если тогда ). если же тебе стандартные системы от 1с не подходят, ты можешь либо собирать из тех строительных блоков свои программные продукты для учёта либо допиливать эти стандартные продукты под свои нужды. ими же из этих блоков собраны основные программные продукты (1с-бухгалтерия, 1с-предприятие,) которые можно купить, установить а потом платить за поддержку а поддержки там немало ибо постоянно что-то меняется в законодательстве, что требует изменений в процессах. база (строительные блоки) всего 1с по написана и поддерживается небольшой командой профессиональных программистов (то ли на плюсах, то ли на шарпе). 1с - очень интересная, я бы сказал революционная идея, которая могла взлететь только на постсоветском пространстве конструктор для автоматизации бизнесс-процессов. ок, пара слов об 1с, как и обещал. эпизод 10 март 2019 я устал от аврал-дривен-девелопмента и других неприятных моментов и после полутора лет поиска альтернативы (и 3х лет работы на qardio) наконец нашёл то, что искал я перешёл в ing. всё хорошо но бардачина в управлении и принятии решений страшный я как могу вместе с лидом бэкэнда пытаюсь направить это в продуктивное русло, сто кивает, соглашается но делает по-своему потому что так сейчас правильнее. классный коллектив (мне кажется с этим везёт) и даже руководство (прежде всего мой непосредственный бос сто компании) - адекватные, увлечённые делом люди, с которыми и за работу поговорить приятно, и в баре под пиво посидеть интересно. компания развивается, имеет офисы в амстере (разработка), лондоне (маркетинг, продажи и логистика) и сан-фране (дизайн и продажи), имеет производство на тайвани, дружит с эпплом (как айосный лид, я даже общался с кем-то из яблочных представителей в их офисе) всё вроде шоколадно. через год я и тут тимлид по той же самой необходимости что и в прошлый раз. компания называется qardio выпускает свои смарт-девайсы по теме здоровья девайсы замеряют показатели тела (экг, давление, температура, вес,) и общаются с мобильным приложением, информация хранится в облаке. интерлюдия в один из первых рабочих дней я узнаю, что мой замечательный тимлид, к которому я с таким желанием сюда ехал, через месяцок отваливает из компании я немножко в ахуе. ну началось может ещё переодеться в оранжевое и спеть гимн страны? ;-). эпизод 9 02062016 с утра прямо из аэропорта схипхол я приезжаю с чемоданом в офис (заселение во временное жильё ближе к вечеру) ребят я уже знаю, 1,5 месяца работал удалённо из рф пока оформлялись бумаги. эпизод 8 февраль 2016 ещё в декабре я съездил на он-сайт в booking (не взяли), погулял по городу и решил, что амстердам - это там, где я бы хотел жить, так что я концентрируюсь на переезде в нидерланды наконец получаю оффер от стартапа в амстердаме и начинаю оформлять переезд. но вот меня тянет на приключения, всё любопытнее какого оно жить и работать забугром, всё меньше и меньше устраивает ситуация в рф и вот я налегаю на английский и начинаю подаваться на заграничные вакансии рассматриваю в основном европу. эпизод 7 лето 2015 я больше 2х лет уже айосник и волей случая уже тим-лид не потому что достаточно опытный для этого, а тупо потому что команда осталась без лида (3-4 человека) и я оказался самым опытным (и не боящимся ответственности). у кого-то ещё есть отдельный (всё ещё живой!) слак с коллегами с прошлой работы? ;-) посоны, прошедшие со мной через тф, всем привет!!!. эпизод 6 март 2013г я устроился айос-джуном в дэйтинг-сервис topface про компанию тут уже говорили мои бывшие коллеги кажется, большинство, из наших (из мобильщиков), кто сейчас вспоминает topface согласно, что было очень здорово. в целом так же как и во всё другое: ищешь базовый учебник, мануалы и начинаешь тыкаться в свободное от работы время, пишешь хэллоуворлды. совсем с нулевым навыком меня туда брать были не готовы, так что я раздобыл себе на время старый макбук, купил книжку ios для начинающих, и начал смотреть стэндфордский курс от пола хоггарти. причём люди нужны и в айос и в андроид надо было определиться, чем я буду заниматься так как сам этот мой товарищ был айосником (а значит было у кого спросить совета в случае затыков или проблем) я выбрал именно эту платформу. в это же время, один мой близкий товарищ, работавший в мобильном отделе некоего дейтинг-сервиса, стал активно зазывать меня в команду, заманивая модным офисом, бесплатным кофе, плюшками и джуниорской зарплатой в 30к-40к. от кого-то из коллег, я узнаю что есть какое-то настоящее объектно-ориентированное программирование, где можно не только манипулировать уже имеющимися типами объектов (как это было в 1с), но и создавать свои. метапрограммирование, как оно есть если интересно, плюсуйте этот твит и я с удовольствием расскажу чуть подробнее, об 1с-программировании позже. кажется даже в трудовой было записано, что-то типа 1с-программист, хотя программирование там было весьма кастрированное 1с-программирование - это изменение конфиг-файлов без доступа к исходному коду продукта но возможности этих конфигов позволяют тебе сделать очень много. эпизод 5 конец 2012г питер я уже год как занимаюсь доработкой 1с-конфигурации бит: отель солидный специались, на неплохом счету в отделе, получил недавно повышение и получаю уже 25к рублей. по моему опыту, всё-таки чаще тут говорят нидерланды, но и голландия периодически попадается. спасибо, дружище, после 4х лет жизни тут данным знанием и я обладаю =) всё так, но голландия, как народное название страны здесь тоже в ходу, несмотря на официальное. в этот момент мне попадается объявление о наборе людей для внедрения и доработки 1с с месячным подготовительным курсом. эпизод 4 2011г на последнем курсе универа начал искать какую-то более или менее постоянную работу в лазерной физике я уже разочаровался так что выбирал между проведением оптоволокна в жилых домах и продажей компьютеров. предмет ненавидели все, так что кажется списывали даже те, кто мог бы и сам сделать препод был наидичайший, мой интерес к программированию начал превращаться в неприятие как будто бы и к лучшему, что программирование на первом курсе и закончилось. эпизод 3 2007г я учусь на инженерно-физическом факультете, лазерная физика первый курс мы кажется всей группой списываем лабы по си со старшекурсника. а есть принципиальная разница? мне голландия больше нравится нидерланды (а то и королевство нидерланды) - как-то чересчур официально, имхо. интерлюдия разговор с родителями куда поступать после школы мать эмоционально восклицает: да забудь ты про программирование! к моменту твоего окончания программистов будет как собак нерезаных, так что не найдёшь работу мама боялась повторения своего опыта бухгалтера. интернет тогда дома уже был и возможность сделать что-то, что работает в браузере и выглядит как сайт (пусть и примитивный) просто сносила башню. эпизод 2 старшая школа, год 2005-й, уроки информатики, паскаль и html на паскале делали что-то не сильно сложнее моих программ по вычислению площади, а вот html меня поразил сильно. потом я начал злоупотреблять компьютерными играми, и компьютер из дома исчез, не простояв, кажется и года интерес к программированию пропал, не успев толком начаться. главное достижения на том этапе - это программки вычисляющие площади геометрических фигур и объёмы тел по введённым пользователем параметрам. эпизод 1 родной город вологда первый опыт программирования - класс 5-й, год 99-й, когда в доме появился первый комп и отец притащил какую-то книжку про basic изучали вдвоём с отцом (который от программирования сам был очень далёк). тред ты чьих будешь?. но это всё неточно посмотрим как пойдёт. под конец, может дам себе волю и поговорю про что-то несвязанное с разработкой: книги, музыка, фильмы, спорт игра в шахматы, в го, в покер плетение из бересты сон, образ жизни, мировоззрение, философия, квантовая физика vs теория струн, вращайте рулетку. - про мобильную архитектуру (ну а как? немножко можно)- про модульность (вцелом и в ios в частности)- про протоколы и экстеншны в ios. чёткого плана по дням нет, но вот примерный список тем, на которые мне есть что написать:- про себя- про голландию в которой живу и работаю (про релокацию тоже поговорим, куда уж без неё)- про ing (компания, особенности). первую половину недели планирую не уходить в платформенную специфику (постараюсь, чтоб всем было интересно), но в последствии придётся от своей айосной сущности никуда не спрячешься. темы, кажется, были примерно все (а некоторые и понескольку раз), так что с точки зрения тем уникального ничего не ждите буду стараться выезжать на опыте (не в смысле, я дохрена опытный, а в смысле, что рассказывать буду про себя и про то, с чем в основном имею дело). каждому следующему автору сложнее и сложнее создавать контент, ибо его уже было много: и тематического, и обыденного, и с нестандартной подачей, и порой даже фрикового. ооочень много годноты понаписали тут за всё это время (сколько уже, года полтора-два?), лестно оказаться в такой хорошей компании. прежде всего хочу респектануть предыдущим авторам сего коллективного твиттера (ну почти всем ;-). привет всем! меня зовут дима и я ios-разрабочкик (сочувствующие кивки в аудитории) буду с вами эту неделю из локдаунного лондона (спасибо за отличную неделю) мы переносимся в практически такой же перекрытый амстердам. минутка рекламы 🤔6 февраля стартует курс про цифровую доступность, где миша рубанов и другие лекторы, в том числе с инвалидностью, прочитают теорию в программе также практическое задание, которое протестируют незрячие пользователи. помните, вы можете сделать много хорошего на те самые 400k. всем спасибо! на этой неделе с вами был сергей рыбалкин меня за это время подписалось много интересных людей, а в начале недели я обещал поддержать фонд. хотелось бы иметь headless линтеры и сигналы idea, чтобы встраивать их куда-то на свое усмотрение. в такой ситуации нужно постоянно саппортить разработчика релевантными подсказками ide отлично умеет это дела, но. breaking никто не будет читать книги по kotlin, если ему нужно уже сегодня на нем решить проблему. про образование рассказать уже не успеваю напишу тред уже в своем твиттере через некоторое время. я могу сказать, но не могу. у kohttp есть свои клиенты, проблемы и задачи если кто-то ищет себе kotlin проект, я с удовольствием помогу влиться в нашу команду разработки у меня, к сожалению, далеко не каждую неделю есть время им заниматься. если вы не поняли, сегодня я буду твитить пока на меня не подпишется. есть еще много других проблем, я сейчас обкатываю доклад the dark side of kotlin dsl, следите за обновлениями. удивительно быстро вырос из какого-то pet-project в рабочий инструмент проект отлично себя проявил как инструмент для написания faas, рассказывал про это чуть раньше. у меня, к сожалению, не так много времени осталосьkohttp - это dsl http клиент для kotlin используется в проде alibaba (по крайней мере при мне использовался). совсем забыл! на базе курса по java мы пробовали запустить курс kotlin boot camp к сожалению, сразу после первого прогона заказчик решил отказаться от внедрения kotlin в компании материалы тоже в открытом доступе, но они сырые. спасибо, в любое удобное время. я использовал в универе в последний раз js отображается в любом браузере + быстрый рендер, его может писать и читать любой у latex выше порог входа и тяжеловесные инструменты разработки. совет 4 просите у студентов фидбек! после каждой лекции воспринимайте преподавание как проект, в нем есть свои метрики, а ваша задача их улучшать. совет 3 powerpoint/keynote чрезвычайно плохой инструмент для коллаборации над слайдами мы использовали инструменты для преобразования кода в слайды сначала gitpitch , а потом перешли на голый. совет 2 очищайте историю браузера (используйте отдельный) перед каждой лекцией не повторяйте ошибок коллег. cовет 1 первая лекция - самая главная, не ней вы теряете до половины аудитории ваша задачу потерять только ту аудиторию, которой вы не интересны. если есть что сказать, тоже welcome. мы с мгновенно выбежали с какого-то рабочего митинга и понеслись в мгу какие-то изменения в репозиторий курса вносили уже в метро, стиль и шрифты поменять забыликачество первой лекции могло быть в разы лучше, а мы серьезно уронили конверсию. давайте расскажу что-нибудь прикольное про курсы! курс записывался на 4-ом прогоне, материал мы знали но совершенно забыли о дате первой лекции примерно за 30 минут до начала нам позвонил куратор и спросил: всё ли хорошо с аудиторией. хотели бы вы иметь в поставке kotlin компиляторный плагин, такой как parcelize или all-open для решения проблем оверхеда data классов?. а вот из-за лишних hashcode, equals и tostring переживайте! оптимизаторы не умеют в общем случае узнавать используете ли вы переопределенные методы класса object (any). data классы очень полезная фича, которая избавляет от тонн бойлерплейт кода одно слово и вам сгенерят десяток методов оптимизаторы отлично справятся с удалением неиспользуемых, за это отвечает deadcodeelimination не переживайте из-за лишних copy или componentn. мне было бы интересно сделать еще более агрессивные оптимизации, дайте знать, если кто-то еще готов в это вписаться. делегирование делегаты - это отличный инструмент, но порождает очень много мусорного кода в 14 проблему частично закрыли. лямбда выражения если не использовать inline функции, то наблюдается серьезная регрессия, а чем плохи inline функции написал чуть выше для нейтрализации оверхеда оптимизатору приходится делать агрессивный инлайнинг самостоятельно inlinepass. в этом году с моим paner in crime сашей помосовым мы сделали курс java as a second language для - это уже более advance материалего можно пройти онлайн без преподавателя. если вы, вдруг, хотите нести добро в сообщество и преподавать, все материалы курса находятся в открытом доступе и распространяются по лицензии mit. моя неделя в mobileunderhood заканчивается, так что буду рад фидбеку в личку. многие писали, что знают меня по курсам “разработка на java”, которые читались в техносфере и техноатоме ретвитните, пожалуйста, если вы смотрели или проходили их! очень хочу получить обратную связь. центральный лондон сегодня - это кадры из картины 28 дней спустя вспоминаю как 7 лет назад, впервые приехав сюда, толкался с туристами у всех достопримечательностей, аж мурашки. kotlin/android, как не трудно догадаться, очень похож на java, а java мы пытаемся оптимизировать уже долгие годы самые большие проблемы возникают там, где kotlin значительно отличается от java, где уровень сахара достигает предельных значений. сегодня великолепный солнечный день, самое время расчехлить велосипед и отправиться на essential spo exercise, единственную активность, которую разрешает правительство во время локдауна, кроме походов за продуктами. 2 reified generics - попытка побороть java type erasure в ограниченном множестве ситуаций это своеобразный бунт молодого языка, стоящего на плечах гигантов. kotдin inline функции - это великолепный костыль на котором держатся две конструкции:1 функции высшего порядка, лямбды - вместо создания анонимных классов получают возможность встраивать тело метода там есть нюансы с захватом контекста. в свою очередь kotlin дал разработчикам inline методы и классы и инженеры точно в некоторых случаях будут применять их совершенно без причины, возможно даже мешая оптимизаторам. еще есть оптимизации, которые делают inline или outline методов заинлайниться всё может так, что половину своих методов и даже целые классы вы в результирующем apk не найдете. я видел сам никогда не пробовал. есть оптимизационные проходы, которые убирают недостижимые или неиспользуемые поля, аргументы и целые классы они хорошо избавляются от dead code. одна из самых простых оптимизаций redex - bridge removal pass bridge method - это такая синтетическая штука, которая создается javac для некоторых generic методов на этапе type erasure на самом деле, вам такие методы не нужны!. классический трейдофф скорость vs память решение довольно простое - ускоряем то, что часто используем остальное оптимизирует по памятиназывается такая штука pgo (profile guided optimization). каждый раз, когда слышу спор о том что лучше i++ или ++i, я быстро покидаю помещение. компиляторы или оптимизаторы, делают несколько (десятки/сотни) оптимизационных проходов пытаясь улучшить код по определенным параметрам - в android это размер приложения и скорость выполнения в runtime ваш код меняется до неузнаваемости. ладно, давайте разберемся что же можно оптимизировать в dex коде, а потом поймем как это применимо к kotlin и какие там проблемы. а еще, замечательный выпуск про redex и оптимизация в целом (40 min). посмотрите доклад chris sarbora про redex с droidcon’17 (30 min) chris, в числе прочего, рассказывает про то как оптимизировать загрузку приложения, особенно на старых девайсах. я работаю где-то на стыке redex, kotlinc и kotlin compiler plugins, так что r8 затрагивать дальше не буду. про r8 хорошо рассказывает вот это парень  если у вас есть время прочитать одну статью - выбирайте вот эту. каждый из оптимизаторов предлагается использовать как black box до окончания интеграции в ваше приложение понять какой будет лучше работать довольно сложно а еще можно два сразу прикрутить, но это двойной выстрел в ногу. решая применить оптимизатор в вашей android pipeline хорошо взвесьте все за и против, а лучше обратитесь за помощью к экспертам. тут вам на помощь спешат - proguard - умеет сжимать java bytecode- r8 - оптимизатор от google- redex - оптимизатор от facebook. apk состоит из dex (dalvik executable) файлов, ресурсов и кое-чего другого когда все ресурсы пожаты, а apk всё еще огромное пора браться за оптимизацию dex #apkfatshaming. apk size мало кто хочет скачивать приложения размером в 200+ mb, да еще и интернет не всегда стабильный исследования показывают, что уменьшение размера приложения на 10mb увеличивает вероятность его успешной загрузки на 6%. этим летом разрабатывать facebook было особенно сложно, лондоне накрыла жара +32 мой коллега даже обкладывался льдом. промышленная разработка всё больше уходит в language server protocol и remote build execution если re можно сделать без какой-то привязки к ide, то lsp должен быть ее частью, а это совершенно другой уровень инвестиций хорошая поддержка lsp делает vs code серьезным конкурентом. коллеги совсем недавно записали подкаста про kotlin adoption у нас 50 минут, почти без воды, рекомендую. справедливости ради отмечу, что idea community у меня работает без нареканий с личными проектами на мак2012 даже индексирование быстрое. экосистема kotlin становится сложнее с каждым годом: jvm, js, native, script, multiplatform каждая платформа значительно усложняет код ide в идеале, мне бы хотелось видеть разные билды ide под каждую платформу чтобы гарантированно тратить cpu на важные задачи. мой любимый источник фризов это того, что топовый мак нельзя купить без touch bar, так тут тебе и второй сюрпризможно ли выпустить версию ide, где весь код для поддержки touch bar был бы убран?. а можешь фотку твитнуть? я сделаю ретвит. некоторые ide плагины, даже очень популярные, грешат тем, что ждут чего-то в main thread такие фризы обычно просто поймать удаляем плагин, пишем багрепорт, а там как пойдет. большое количество фризов исчезает при переходе на kotlin ide plugin на базе kotlin 14 14 - очень хороший релиз, на мой взгляд - своевременное решение притормозить выпуск новых фичей и заняться техническими проблемами. ide android studio - это, пожалуй, первое приложение, которое заставило мой мак эмитировать звук взлетающего самолеталучший тревел экспириенс этого года 🛫. возможности оптимизации компиляции в kotlin сильно усложняют inline-функции любое их изменение, даже не затрагивающее сигнатуру, приведет к необходимости повторной компиляции abi-зависимостей вот такая бесплатная абстракция. что же делать 3? искусственно дробить приложение на модули для ускорения билдов при этом разработать roadmap с планом как же эту модулярность побороть, когда внутри kotlin всё улучшат. что же делать 2? следить за релизами gradle версия 68 обещает существенные улучшения для kts скриптов, особенно, если у вас нет abi-изменений. что же делать 1? ждать новый компилятор с поддержкой ir очень хочется посмотреть как в цифрах будет выглядеть “really fast”. чем крупнее компания, тем больше она вкладывала денег в ускорение сборки своих android/java приложений а это значит, что kotlinc соревнуется вовсе не с javac, а с javaс на стероидах. на небольших проектах вам будет комфортно, но как только речь заходит о 100+ модулях проблема уже дает о себе знать. время сборки очень хорошо про трудности с которыми можно столкнуться написал. что важно понимать? чем легче вам писать код на языке программирования, тем сложнее его разрабатывать синтаксический сахар - это ночной кошмар компиляторщиков. давайте теперь пройдемся по каждой. 3 размер поставляемого apk серьезно увеличивается при росте доли kotlin кода в проекте4 образование, kotlin сложно стандартизировать внутри компании, объяснить как именно компания пишите на нем непросто найти баланс между jotlin и идиоматическим языком. у kotlin/android 4 главные проблемы:1 время сборки, на больших проектах ощущается как медленно или очень медленно2 ide количество фризов при использование проектов с kotlin значительно больше. выходные нужны для отдыха, так что большая часть треда появится уже вечером вопросы welcome!. сегодня углубляемся в проблемы kotlin/android, разбираемся отчего растет dex, и что с этим делатьленивый субботний тред, поехали.  : лучше нюдсочетверга может быть только #мненестыдно пятница хочу такое на постоянку, как профилактика того-самого-синдромамне не стыдно просить ревьюить код моих котлин-дев-адвокатских хеллоу-ворлдов и мне не стыдно, что каждый раз он находит, что откомментить. мне не стыдно красить кнопки* #мненестыдно*данный твит предоставлен автору сообществом. мне не стыдно, что не могу перечислить все порождающие паттерны проектированияпочему?-почему? на mobile собеседованиях это такой популярный вопрос?#мненестыдно. мне не стыдно долго и итеративно торговаться на этапе оффера в компанию#мненестыдно. мне не стыдно писать на java try { foo() } catch(exception ignored) { } #мненестыдносоздатели сами виноваты. мне не стыдно не пойти/отменить митинг, если я не буду на нем полезен #мненестыдно. мне не стыдно провалить собеседование #мненестыдно это чаще всего обидно и досадно, но происходит с каждым. мне не стыдно что garbage collector за мной убирает #мненестыдно. мне не стыдно делать синтаксические ошибки в yaml файлах #мненестыдно. мне не стыдно понимать статьи не с первого раза #мненестыдно. мне не стыдно через год уволиться из компании если наши цели разошлись #мненестыдно. мне не стыдно просить у работодателя много денег за работу которую я делаю #мненестыдно. мне не стыдно тратить часть рабочего времени на самообразование, вместо доставки новых фич #мненестыдно. раз уж такие дела, подписывайтесь на меня за эту неделю я вряд ли успею сказать все что хотел. так, пристегнитесь! мне не стыдно иногда не придерживаться solid. мне не стыдно, что не помню все уровни изоляции транзакций. мне не стыдно!. думал об этом, но знаю. xyz - худшая технология, терпеть не могу. мне не стыдно, когда junior во время pair programming видит баг, а я нет. не забывайте, что у меня, как и у любого человека есть bias!. мне не стыдно, что не умею вращать деревья в уме. мне не стыдно взять day-off если я устал, а проект горит. мне не стыдно повторно задавать вопросы коллегам, если чего-то не понял. в facebook никому не стыдно не работать с git. хочу только спросить: а senior коллега вам когда-нибудь говорил да ты чего, не умеешь xyz? в его голове это могло звучать как challenge или какой-то призыв к росту но менее опытный коллега мог воспринять это совсем иначе. а вот и нет, знаю некоторые хоткеи! не стыдно 😃. всё верно! еще не успели выучить главные горячие клавиши, не развили мышечной памяти. мне не стыдно нажимать зелёный треугольничек в ide вместо консольной команды для запуска приложения. мне не стыдно работать с git в визуальном редакторе или ide. мне не стыдно не давать эстимейтов выполнения задачи, если я не понимаю сколько она займет времени. мне не стыдно посредственно/плохо/не разбираться в технологиях, с которыми я не работаю каждый день. мне не стыдно шипить посредственный код, который решает актуальную проблему. мне не стыдно не знать того, что происходит на каждом уровне модели osi. мне не стыдно не знать многих консольных команд, от sed у меня до сих пор мурашки. мне не стыдно каждый раз гуглить как пользоваться io в java и kotlin - прочитать файл, записать в файл, угх!. всё знать невозможно, мозг как lru кэш вытесняет лишнюю информацию меня до невозможности бесит токсичность с которой junior разработчикам инкриминируются необходимые знанияизбавляемся от синдрома самозванца тред 1 лайк = 1 факт от том чего мне не стыдно не знать или делать. я спрашивал у своих друзей из jetbrains, они говорят что лучшие еще говорят очень удобна подписка на все продукты а я что? - пошел купил, отношения нужно строить на доверии. vim, vscode. приветик! сегодня утро на самом деле доброе. пока kotlin одерживает уверенную победу в калифорнии, техас ожидаемо проголосовал за java, ждем результатов из колеблющихся штатов. inclusive workplace. поисковики и соцсети тоже никто не запрещает создавать. jetbrains производит лучшие ide, поставляет их практически для каждого языка, своего рода монополия как думаете может ли однажды к ним заявиться ftc (federal trade commission) c антимонопольным иском (antitrust complaint)? и заставить разделить продукты на отдельные компании?. ребята из jetbrains, я вас очень люблю если что. да, согласен тут важно понимать вот что, если компания может себе позволить содержать свою версию jdk, то она может себе позволить и велосипед, хороший, дорогой, для решения задач статического анализа. они в 2019 появились, насколько помню я уже был на пути в fb в тот моменточень внимательно следили за работой konrad kamiński. самый распространенный способ, свой статический анализ и снабжение кода метаинформацией - это очень дорого для компании тут мы выходим на тонкий лед, но я поделюсь вот этой ссылкой. прошелся сейчас по своим вопросам c so того времени вспомнил, что потратили существенное время на различные кейсы sb test. еще одним источником вдохновений был вот этот крутой документ, да и вообще материалы cncf. worst community ever. кстати, очень много идей мы взяли из проекта spring fu  for a great project!. большой проблемой было уговорить reactor работать вместе корутинами было огромное количество threadlocal оптимизаций которые пришлось переделывать апгрейд на 5x произошел через 2 года после начала проекта. для меня причина ровно одна: delivery velocity в обозримой перспективе распишу подробнее в треде. видимо, твиттер/медиа в годовщину успешных твитов поднимают их в выдаче. тут важно понимать, что у меня двойной bias: большой корпорации и того, что kotlin мой любимый язык. я часть подниму в треде сегодня самый большой - зачем? второй - зачем, если компания уже решила вопрос nullability в своей кодовой базе?. напоминалка последователям! я замьютил все #flateah треды которые нашел теперь хотя бы могу видеть релевантные реплаи подписчиков. всё время забываю что интерекшн с пользователем должен быть максимально простым, а не эти вот мои вопросывы попали на необитаемый остров backend разаработки с собой можно взять только один язык что берем?. java 17 вообще в порядке! у меня сейчас большие вопросы к развитию kotlin/jvm стоит ли его выбирать бэкендерам?. семья, дети, возможно он ведет подкаст. как думаете, какая из этих проблем накрыла нас первой?. 4 потребуется масштабный образовательный процесс5 будут сложности интеграции в ci/cd пайплайны6 сборка будет медленной. принимая решение об онбординге kotlin мы знали, что будут серьезные проблемы ожидали следующего:1 ide будет тормозить2 будут проблемы с корутинами3 потребуется серьезные изменения в spring framework. масштабирование предполагалось по двум измерениям - количеству lambda внутри одной jvm, и группировки lambda в зависимости от телеметрии не буду углубляться в кишки, спрашивайте если интересно. почему interop 95%?1 platform types, очень сложно побороть 20-летний легаси2 поддержка. предполагалось, что lambda мы будем запускать внутри jvm выбирая язык для написания lambda остановились на kotlin на картинке приведена часть критериев ожидалось что mobile, back и front разработчики смогут относительно легко втянуться сейчас в графу interop я бы поставил 95%. внедрение faas(lambda) позволило бы нам отказаться от микросервисов примерно в половине usecase’ов: mobile backend as a service (да-да, мобайл), оркестрацию сервисов, map-reduce преобразование, фасады, а еще значительно сократить парк машин. типичный график утилизации cpu выглядел так не буду говорить сколько у нас было таких машин, но это был весомый и бесполезный вклад в глобальное потепление есть идеи откуда на графике спайки?. в любой ситуации создавался новый микросервис, было множество практически идентичных объем бизнес кода в поставляемых контейнерах зачастую был меньше 01% мы не использовали k8s, масштабироваться был тяжеловато. а уже в 2016 ali задыхался от микросервисов гранулярность выходила из-под контроля, мы очень плохо утилизировали железо у разработчиков был слишком большой оверхед на доставку business value. еще до моего прихода деплоймент ali задыхался от монолитных приложений переход на микросервисы был осуществлен до массового микросервисного помешательства в индустрии. выступление на конференциях, кстати, - это хороший лайфхак для избежания проблем с nda. alibaba это самый крупный в мире jvm деплоймент* сначала в aliexpress, а затем в alicloud мы разрабатывали function as a service(faas) платформу для облака ali cамый известный faas провайдер - aws lambda*честно пытался найти пруй, но не смог за разумное время. большую часть своего опыта я постараюсь донести именно через этот кейс, потому что меня не ограничивает nda про alibaba можно задавать любые вопросы - kotlin, китай, деньги, офисная политика, “объединение” с mailru, постараюсь ответить по максимуму. немного контекста на протяжении всей карьеры я работаю с java и всем что крутится на jvm в 2016 пришел первым инженером в только что открывшийся офис alibaba group в москве кулл сотри про работу в китайской компании будут в пятницу. долго думал как сформулировать то, чем я занимаюсь в одном твите я стараюсь сделать так, чтобы не происходило такого крутая история про swift в uber. если, вдруг, вам надоел твиттер, то этот тред вы можете посмотреть на youtube highload’18 или kotlin everywhere moscow’19. сегодня разбираемся что же такое kotlin adoption, как мы несли добро в alibaba groupтред, в котором даже упоминается мобильная разработка. доброе утро! локдаун здорово ограничил нашу жизнь, путешествие до магазина теперь ощущается как хороший хайк сегодня развлекаемся поиском мест из любимых фильмов. пользуясь случаем пропиарю swift reflection proposal от моего сокомандника. твой карьерный рост - это в первую очередь твоя проблема и ответственность перекладывать ее на другого человека чревато он может не всегда учитывать двои интересы, или просто забыть. самое время расчехлить совой хейт 😃 пожалуйста, накидайте в реплаи почему вы не любите kotlin, какие проблемы у вас с ним случались можно с эмоциями, можно всего пару слов, можно ссылки - что угодно. вот уже несколько месяцев я пытаюсь собраться с силами и сделать доклад на тему“почему kotlin плохой язык” зачем? - переходя на kotlin у многих инженеров начинается honeymoon период им всё нравится и они перестают замечать проблемы это очень опасное состояние. память тимлида обратно пропорционально количеству людей в команде узнали? согласны?другая проблема кроется в том, знает ли тимлид что вы решили какие-то системные задачи взваливая на себя большую ответственность (уменьшили maintenance cost, ускорили билды, искоренили npe). у меня вопрос к ответившим не трачу как ваш менеджер узнает о том когда вас нужно повысить или поднять зарплату? как вы ищете точки роста своего проекта?. да, но есть много того о чем могу рассказать уже скоро. какую часть своего рабочего времени вы тратите на рассказ о своих достижениях?. в очередной раз начал задаваться вопросом, зачем это всё нужно и стоит ли тратить столько времени на рассказы о своих достижениях, работа то уже сделана?может лучше еще кода написать?. сегодня писал большой пост о достижениях нашей команды за последние полгода у меня ушло на это примерно 4 часа чистого времени (1500 слов). доброе утро! лондон с прошлого февраля изменился до неузнаваемости лучшим другом стал велосипед, а в метро даже не помню когда был в последний раз нас планировали вернуть в офис к августу, но уже, кажется, мало кто в это верит. я не предлагал нанимать инженера из эфиопии идея в том, что diverse команда будет иметь более широкий взгляд на проблему к моменту принятия решения, нежели гомогенная. в моем представлении широта кругозора команды и diversity имеют очень высокую корреляциюпродолжая твою аналогию - в какой цвет красить кнопку like, если ты поставляешь приложение в эфиопию?. 😕. c угрозами не сталкивался в идеальной россии компании пришлось бы придумать адекватный критерий того, что сотрудник не справляется со своими обязанностями. для меня это история из далекого прошлого, я ее пережил и гнева уже не испытываю хотел поделиться исключительно советами. скорее всего были, я точно не помню спрашивали про причины ухода, а дальше я просто рассказывал историю. после cto было еще полтора года работы в другой компании, позиционировал себя как ведущий разработчик, чтобы вызывать меньше вопросов. мне очень жаль, что подобное вас или кого-то еще обидело уместнее было бы выбрать другой хештег. было очень волнительно проходить испытательный срок на новом месте стресс ушел когда заделиверил первую крутую фичу в новом проекте, было важно снова поверить в себя. конкретно эти мысли я сформулировал вчера, но думаю мне понадобилось несколько лет опыта, чтобы грамотно порефлексировать над событиями тех дней. не готов за них ответить, но чтобы лучше прочувствовать контекст рекомендую прочитать  и. я старался не приводить оценок, деление на хорошо/плохо в сложных ситуациях весьма не однозначно безусловно, переживать подобное событие после переезда было значительно тяжелее. вряд ли когда-то читал ее полностью возможно какие-то выдержки, либо материалы на которых паттерсон опирался. на новую работу я вышел через 2 месяца, возможно, стоило отдохнуть немного дольше вернуться к продуктивно работе без каких-то признаков паники удалось только через 4 месяца. что мне помогло? общение с близкими, регулярный спорт, принятие и осознание того, что карьера еще только начинается и делать ошибки это нормальновы не одни и просить о помощи это тоже нормально. длительное время я пребывал в довольно плачевном состоянии задаваясь вопросами “а что если я плохой программист?” и “кто же меня теперь наймет?” искать новую работу не было никакого желания. что нужно было сделать? дать компании меня уволить или уйти по соглашению сторончто сделал я? уволился по собственному желанию. причину hr сформулировал мне как в связи с утратой доверия” между строк это читалось как: мы тут подумали и, кажется, не готовы релоцировать вас ребята. чуда не произошло и через 10 дней меня уволили к сожалению, за это время вразумительный фидбек по своей работе я так и не получил. за месяц работы в компании я общался со своим менеджером 1 раз, это был обычный welcome talk без каких-то технических деталей. что нужно было сделать 2? выяснить чего от меня ждут, как измеряется мой успех, в чем заключаются цели проекта и как я могу быть на нем максимально полезен. что нужно было сделать? пойти к менеджеру, проговорить ситуацию, понять причины произошедшегочто сделал я? решил, что нужно лучше работать, поставлять более качественный код, помогать на ревью. это был совсем не тревожный звоночек, а самая настоящая сирена в тот момент я ощутил жуткую смесь эмпатии и подавленности, осознавая, что для меня таймер уже запущен. я постепенно втягивался в работу, пилил какие-то фичи, изучал проект всё выглядело обычно, до тех пор пока солнечным январским утром мой друг не позвонил со словами: “прикинь, меня только что уволили!”. что нужно было сделать? заранее проговорить все условия контракта и, обязательно, релокацию возможно обратиться к юристучто сделал я? ¯\_(ツ)_/¯. 2 серая зарплата приходила на карту иностранного банка, в отделение которого в москве можно было попасть только по приглашению3 купить железо пришлось за свои деньги, которые потом должны были возместить. во время оформления контракта начались очень странные дела: 1 трудовой договор оказался срочным, условия релокации в нем не прописали. весь месяц своей работы в xored я занимался jvm-based тулами для корпоративных сетей это был абсолютно рядовой проект, не могу сказать ничего плохого. что нужно было сделать 3? узнать умеет ли компания работать удаленно, понять есть ли у них опыт удаленного онбордингачто сделал я? подумал что всё будет хорошо. что нужно было сделать 2? обсуждать оффер, в 90% случаев вы можете увеличить свой доход или пакет бонусов в этот момент, никогда не стесняйтесь просить много/больше денегчто сделал я? ¯\_(ツ)_/¯. что нужно было сделать 1? определиться с тем, насколько я доверяю компании узнать как она устроена, неформально пообщаться с потенциальным коллегой узнать кто ей руководит, наконецчто сделал я? ¯\_(ツ)_/¯. прошел интервью, договорился о первом рабочем дне компания предложила поработать удаленно пока они открывают/обустраивают офис и идет оформление моей визы. к моменту истории я уже некоторое время рассматривал возможные пути эмиграции через network узнал о том, что компания xored вот-вот откроет офис в праге и уже ищет сотрудников на релокейт мой друг совсем недавно подписал с ними оффер и готовился выходить на работу. возможно, если бы я вовремя поделился своей историей, дело было в 2015, вы бы никогда не прочитали , а карьера хотя бы одного инженера сложилась, чуточку лучше. у меня нет цели унизить кого-то или объяснить вам почему одни хорошие, а другие плохие хочется поделиться опытом, рассказать о том, что могло бы предотвратить подобное, и помогло мне пережить эту ситуацию. истории успеха у всех на виду, они нас мотивируют из провальных же историй можно извлечь совершенно другие уроки итак, тред про то как меня уволили #metooмоя история начинается с этого письма. без практики эти навыки очень сложно развить самый правильный способ, на мой взгляд, internship в крупной компании универу сложно давать актуальные прикладные знания, в этом случае он должен выступать как networking, площадка для связи студентов и компаний. вся моя жизнь с тех пор такой девелопмент. тайна раскрыта! вчера исполнился ровно год вот этому треду 🌎🌍🌏. разнообразный уникальный опыт команды в целом способны неплохо решать так называемые known unknowns проблемы, решение же unknown unknowns проблем требует максимально широкого взгляда на них в гомогенных командах широта взгляда ограничена. хорошо что у этого сообщества есть свои традиции. - иди работать в команды у которых есть чему учиться- создавай diverse команды в которых у людей есть перспективы роста. кроме перечисленного вот какие советы я бы дал молодому себе:- много читай- пройди internship в крупной компании- при выборе первой работы оценивай процессы в компании именно процессы будут способствовать или мешать самой интенсивной фазе профессионального роста. я уходил из компании с весьма странным набором навыков - средненьким hard, product design и прокаченными soft skills не самый хорошо продаваемый на российском рынке skillset, как оказалось старайтесь управлять своим профессиональным ростом, он может быстро выйти из-под контроля. в 2013 команда завершила сочинские проекты, горжусь тем, что они помогли сделать олимпиаду более безопасной и удобной я же через несколько месяцев ушел из компании. пришлось учиться основам продуктового дизайна категорически советую каждому разработчику, позволяет выйти на качественно новый уровень понимания мира вокруг. на самом деле, это очень правильный вопрос в любой ситуации основной проблемой того периода было отсутствие грамотного продакт менеджера, четкого позиционирования продукта и понимания точек роста, вместо этого мы хаотично росли и превращались во что-то бесформенное. серёжа, а не говно ли мы делаем?. я не смог присутствовать на exit interview но, судя по всему небо оказалось далеко не таким ясным через несколько дней после этого мы обсуждали с ceo сложившуюся ситуацию и он задал мне один очень важный вопрос:. вы бы уволились в этот момент? или подождали бы еще несколько твитов?. разработка начинала набирать обороты, команда раз за разом достигала промежуточных целей мне даже удалось слетать в отпуск (были же времена) и тут, посреди ясного неба увольняется один из разработчиков. конечно же глупо винить в нашей ситуации только систему образования, но я до сих пор считаю, что выпускать software engineer’ов без понимания процессов промышленной разработки - как минимум безответственно. будь хоть у кого-то из нас опыт выстраивания процессов и коллаборации над кодом такой проблемы бы не возникло а в тот момент пришлось с нуля разобраться с тем что такое git, maven, code review, ci/cd. с некоторыми оговорками идея сработала, команда хорошо решала алгоритмические задачи для продукта, писала неплохой java код (по моим стандартам 2012) но мы не понимали как строить и масштабировать процесс разработки на несколько человек. как вам такая идея?. на бегу прочитал книги о том как собирать команду, пасти котов и создавать хорошую атмосферу в коллективе в тот момент мне показалось, что было бы здорово нанять однокурсников скиллы которых не вызывают у меня сомнения, junior специалисты хорошо вписывались в наш бюджет. мне очень жаль, что в тот момент мы не рассматривали выдачу опционов сотрудникам, эта схема позволила бы привлечь в команду экспертов которых так не хватало почему не рассматривали? - я не знал что так бывает! стоит ли говорить, что опыта найма у меня не было?. несмотря на весомые контракты, основную фазу роста компания вынуждена была проходить с весьма скромным бюджетом на разработку максимум мы могли позволить себе нанять двух senior enginner’ов, которые скорее всего бы не пошли работать в ноунэйм фирму. заранее хочу сказать большое спасибо команде, вместе с которой мы всё это делали, вы крутые! сейчас это успешные в своих областях люди из reddit, jetbrains, yandex, avito и других компаний. глава 2, в которой автор учится управлять стартапом и что-то идет не так. доброе утро! вчера весь день ушел на написание psc фидбека коллегам, постов с итогами полугодия, и проведение user research interviews сегодня должно быть больше времени на общение, а пока немного лондона. не одобряю любой буллинг, но мне это не мешает в современном мире сложно представить продукт у которого нет хейтеров, особенно если им пользуется больше 2х миллиардов человек. это достаточно хорошее упражнение, заставляет рефлексировать на регулярной основе кроме того, на наших масштабах это один из немного transparent инструментов оценки. сейчас работаю с android, но дольше работал в backend и cloud, буду рассказывать в части про alibaba там много мест, которые болят одинаково, но есть и значительные отличия еще расскажу как и зачем мы тогда сделали. у всех, я думаю сравнивают только в отдельных группах, было бы странно сравнивать успехи дизайнеров и инженеров. это интересная история :) мы не сматчились с командой android tools в google и я пошел работать в fb и совершенно случайно в буткампе уже узнал о существовании команды android language foundation. делаем первый вывод! повышение из junior developer в сto, как и любое преждевременное повышение опасно как для сотрудника так и для работодателя сказать что в первые полгода я охерел, это ничего не сказать. подписывая договор с компанией, вдруг, неожиданно даже для себя осознал свою новую должность - технический директор следующие несколько месяцев мне пришлось заниматься чем угодно, кроме создания крутых алгоритмов и развития нашей платформы. через месяц два моих начальника, я и еще пара коллег ушли делать среду для моделировать тех самых пешеходов в стартап я понятия не имел как нам удалось влезть в эти контракты, но был очень взволнован масштабами происходящего. звезды сошлись и именно в тот момент организаторы sochi 2014 захотели потратить большое количество денег на обеспечение безопасности стадионов и пешеходных зон олимпиады. мы моделировали всё: поезда, автотранспорт, склады, пешеходов через некоторое время пришло осознание, что кроме нас в тот момент на рынке никто не способен построить модель перемещения 10 тысяч пешеходов в пространстве. не поленился и нашел на youtube видео самой крутой нашей некоммерческой модели  за кадром собственный алгоритм перемещения людей и система визуального программирования для инженеров(не software) на которой можно собрать всю модель. двигаясь по течению, я охотно согласился на работу junior java dev в нии наша команда в 2 с половиной человека разрабатывала имитационные модели на базе eclipse rcp одного российского вендор уже вскоре из 25 человек на проекте остался только я. к четвертому курсу универ отнимал уже меньше времени, чем раньше а фундаментальное образование перестало быть таким интересным и захватывающим как раз в тот момент мой знакомый из нии при ржд искал программиста для разработки систем имитационного моделирования. вжух, 2012 год нефть стоит 100$, доллар 30₽ российский бюджет в небывалом профиците. глава 1, в которой студент четвертого курса становится cto стартапа рефлексируем. подробно поговорим об этом позже, а пока давайте перенесемся в прошлое и разберемся как я ничего не зная об android и мобильной разработке оказался тут с вами. adoption любой технологии это довольно сложный процесс он начинается с вопросов: зачем? как? сколько это будет стоить? - ответы на них будут значительно отличаться в зависимости от профиля и размера компании. последние 4 года, сначала в alibaba group, а теперь уже в facebook я занимаюсь kotlin adoption мне приходится искать и решать проблемы c kotlin, которые возникают или когда-то возникнут у инженеров, команд и проектов. если коротко, то ходишь и смотришь что мешает инженерам использовать kotlin, а проектам его онбордить ищешь существующие и потенциальные проблемы, решаешь что и когда критично починить/сделать а уже потом берешь палку. да, если студенту дать дополнительный день на подготовку, то у него будет вдвое больше времени!. а чтобы вы не скучали по утрам, пока я увлеченно занимаюсь psc, буду скидывать вам фотографии лондона в локдаун. вам, уверен, тоже непросто возвращаться с длинных новогодних каникул так что в начале недели будем страдать вместе, а ближе к концу уже разогреемся и обсудим что-нибудь сложное. на этой неделе в facebook проходит performance summary cycle (psc) - это довольно напряженное время сотрудники пишут большие отчеты о проделанной за полгода работе, дают фидбек своим коллегам и менеджерам, а вот на код уже времени не остается. да, это я постараюсь рассказать как мы их готовили сталкивался с технотреком?. - android: оптимизация dex кода - как и зачем сжимать ваше приложение- kohttp: зачем понадобился dsl http клиент для kotlin- как выжить в москве на 400k+- иное. - alibaba: как работать в китайской компании и не потерять рассудок- facebook- kotlin: adoption at scale, как пересадить 10000+ инженеров на новый язык. точного расписания на неделю не будет, но вот о чем мы поговорим:- моя карьера: как побывать cto, пережить увольнение, переехать в лондон- it образование: зачем преподавать, как сделать свои курс и сколько это стоит. дисклэймер я не настоящий мобильный разработчик и никогда не писал под android но надеюсь это не помешает нам весело провести время. работать в facebook интересно, так что если вам нужен реферал - не стесняйтесь, напишите мне. меня можно читать в твиттере и в tg-канале: а чтобы вам было чуть интереснее на меня подписываться, в конце недели переведу сумму пропорциональную количеству новых подписчиков в фонд “старость в радость”. всем привет! на этой неделе с вами сергей рыбалкин я работаю в лондонском офисе facebook над kotlin adoption, проблемами kotlinc и redex. бывший яндекс ios разработчик, с августа, успешно переехал с девушкой в торонто, канаду работать по приглашению компаний если тоже хотите так сделать то можно найти его в telegram по username удачи. как буду у компа, открою на pr. на сколько важен idfa для вашей компаний?. хахаха. у меня точное произношения можем по 20 минут в день по балакать). точно кстати, игра worldbox - god sandbox это сделало прикольный эффект. spritekit движок рендерит 14,400 (120x120) skspritenode объектов чуть больше и fps начинает падать при pan gesture на iphone xs max culling используется (помогает когда камера zoomed in) анимаций/skaction или paicle effect могут fps еще больше подавить. какие планы на будущие для проекта? какие os хотите поддержать? какие способы/библиотеке использовали для помощи?. кто нибудь успешно выложил среднего/большого размера проект в appstore (под ios, ipados, macos и tvos) построенный полностью с swiftui?. у нас значительно расширится количество проектов в будощем подсчитаем если long term имеет смысл свое развернуть. круто хочу своим предложить также сделать. как долго это пилили? сколько разработчиков работали над системой? что было самое гиморное реализовать?. insider digest: lokalise нам обходится $230 в месяц $23 за слот (у нас их 10) 1 из слотов имеет +10,000 ключей 1 ключ содержит текст для 11 разных языков поддерживается plurals пользуемся больше года для мобильных прил + backend меняешь текст а новый билд не нужен. cathtemer servos епты. а какое количество языков?и как переводите?. ребя, если выбрали other, напишите название сервиса здесь плиз 👊. какую платформу используйте для локализаций ваших приложений?. временная пауза скоро back to work. это специально добавлю экстра функционал завтра. ответ на вопрос: частично?. пытался мини проекты с нуля на пример отобразить полученный json в таблицы то что я думал компания будет требовать знать как минимум пилил 2d игры на spritekit после работы много всякого после работы делал хотел быстрей научится. последние пол года активно сидим над youth сделали overhaul верстки/анимаций + куча нового функционала вот ссылка если интересно:. да, оба говорили и всегда готовили русскую еду - пельмени и борщ (можно чередовать) ну и традиций почитали + много друзей таких же как я обсуждали разницу между русскими и канадцами потом футбол). нужно читать, писать и говорить и много. теперь в первые 2 минуты не понять разницы между мной и местными но чем дольше буду говорить чем станет понятней - я либо дурак, либо не местный мне приходится предупреждать. все благодаря родителям английский авто-учил в самой среде/школе но для русского отправляли по воскресением в русскую православную церковь отбило веру + помогло пару слов не забыть в 21 приехал в москву и началось 6 лет спустя улучшил произношение и словарный запас набрал. вот кастомный text view если у кого дизайнер такой “попросит”:. сроки проектов заставляют приоритизировать, быстро думать и учится + читал разные книги про темы которые не знал (всегда из какого нибудь top 10 списка). после этого отправлял резюме везде за супер минимум ставку (на дорогу и чай) name of the game “практика” нужно быстрей выйти и начать набивать руку только через стресс и страдание настоящих проектов ты будешь расти со скоростью ракеты. я самоучка когда начинал, 1 месяц выделил основом: смотрел objective-c видео туториал от simon allardice он покрыл что такое oop, фундаментальности objective-c и core data. красавчики). нашел баг - нужно что бы font size был половину lineheight иначе не четко попадает/равняется типо lineheight = 64 а font size 32 потом починю. интересная проблема сделал пуш - скажи что думаешьпробовал через override func drawtext(in rect: cgrect) но коряво выходило сделал через baselineoffset чуть потестил подозрение где то может быть косяк если что, есть библа “bonmot” - там очень круто сделали. английский). ага, inspector генерирует код но не которые параметры не удобно настраивать - получаются не четкости. познакомился через tinder, ржали весь вечер - трезвые , понял моя половинка, завели котов. кто чем пользуется для реализаций дизайна?. в нашей компаний дизайнеры используют figma для реализаций точных лейблов как в дизайне, написали свой класс если кому интересно:. расписание на всю неделю:- не скажу. всем привет меня зовут никита в компаний из 15 человек, я и двоя других ios разработчиков пилим приложения для релаксации и фитнесапроработал 5 лет в москве, 1 год в канаде, потом снова вернулся в москву ради девушки*извиняюсь за корявую грамматику - русский мой второй язык. а по идее должны бы ну мне так кажется. ну и кстати я не уверен, что невозможность - правильное слово в данном контексте. да кто ж их знает. часа по 4 в день на показ слайдов и лайв кодинг с внешним hdmi проектором держал на ура. пиксельбук по заявлениям производителя держит 10 но надо понимать, что эти 10-11 часов получаются, имхо, только при выключенных линуксах/андроидах, и уж тем более без всяких андроид студий. а если не секрет, rdp чей? родной от майков?. на реддите его тоже можно найти, ник кажется kentexcitebot не реклама. для тех, кто интересуется хромосью, не могу не порекомендовать одного из авторов android police, кента дюка парень делает шикарные обзоры значимых изменений в новых версиях оси, а также отдельно обзоры самых интересных/полезных флагов. побочный недостаток - встроенная шкурка дебиана достаточно сильно тюнингована, поэтому некоторые линукс приложения могут отображаться некорректно как пример, smagit. линукс подсистема в хромоси не имеет адекватной поддержки аппаратного ускорения графики, поэтому для любых более-менее связанных с ней задач - не подходит. интересная, согласен не будь пиксельбука, возможно всерьез бы рассмотрел вариант приобретения. и по этой же причине не надо даже задумываться о приобретении pixel slate, это кажется самый неудачный девайс из хромбуков. по этой же причине в режиме планшета пиксельбук как минимум бесполезен - работать невозможно, система начинает себя вести медленно и не особо стабильно. андроид приложения отвратительно масштабируются под большой экран тянется это с тех самых пор, когда гугл забил на планшеты. о недостатках хромоси недостатки чисто браузерного окружения, я думаю, понятны, остановлюсь больше на андроиде/линуксе. так тоже можно, да. актуальный сейчас 11, да. да, плясать надо от потребностей. уже давно на 9. это девиз хромоси, по-моему - хорошо, но пока еще сыровато. сбрасывать надо для выключения девелоперских плюшек для включения сбрасывать ничего не надо. а пиксельбук есть даже на i7. с облаками по идее проблем быть вообще не должно. насколько я слышал, для энтерпрайза сейчас анонсирован parallels с windows если/когда доберется до обычных пользователей - будем посмотреть там под капотом и так сплошная виртуализация, все эти андроиды/линуксы суть есть виртуальные машины. вариант №2: vs code ставится и работает опять же нормально, за то недолгое время, что я тестировал, багов не замечено vs codium тоже чувствует себя хорошо, если вдруг этот вариант вам ближе. и еще маленький нюанс - чтобы эту настройку выключить, хромбук придется сбросить к заводским. правда, это требует включения специальной настройки, и потом на экране логина появляется надпись, что не все приложения на этом устройстве были проверены гуглом, но это мелочь, я считаю. а в последней на данный момент версии хромоси появилась поддержка своей же андроид подсистемы в качестве устройства для деплоя теперь, ура-ура, можно писать код и отлаживать его на самом хромбуке, без внешних факторов. постепенно гугл начал добавлять функционал, который облегчает нам жизнь сначала в линукс подсистеме появилась поддержка usb наконец-то стало можно воткнуть телефон и деплоить на него не вершина счастья конечно, но уже что-то. зато на фоне сплошных макбуков выглядит свежо и оригинально. что гарантированно не заводится на хромоси - эмулятор, его можно даже не ставить достаточно долгое время это выглядело странно - мы можем писать код, но как его запускать и отлаживать, было решительно неясно. вариант №1: android studio да-да, на оф сайте есть даже специальный пакет для хромоси, хотя по факту это обычный deb устанавливается и работает нормально, только крайне желательно включить power save mode. теперь про разработку предположим, вы решились на отчаянный шаг и начали использовать в качестве рабочего инструмента девайс на хромоси какие есть варианты?. orly. дойдем до кода. кстати, есть умельцы, которые заменяют на своих устройствах debian на arch я даже где-то методичку видел, что для этого нужно делать. на выходе получается, что chrome os - этакий jack of all trades умеет все, но ни в чем не блещет. как минимум, линукс подсистема долго стартует ткнул в терминал - и ждешь пока оно там заведется в последних версиях хотя бы добавили индикатор прогресса. в-третьих, в хромось постепенно добавили еще и специально тюнингованный debian он тоже с претензией на нативность, но тут уже видны шероховатости. как раз в начале 2019-го появился баг: включенная андроид подсистема отъедала строго 100% процессора пришлось временно выключить до отмашки, что все починили. во-вторых, хромось умеет в андроид, причем опять же с претензией на нативность по умолчанию из коробки поддержка андроида сразу включена, есть маркет, можно ставить приложеньки. синхронизация через учетку, само собой, на месте, как на пк или телефонах включая установленные расширения это приятно. для вызова гугл ассистента есть даже отдельная кнопка, но в русской локали работать напрочь отказывается это можно считать как плюсом, так и минусом. так что умеет хромось? во-первых, разумеется, это браузер хром веб-приложения можно устанавливать локально, ярлыки для пользователя ничем не отличаются от любых других приложений можно открывать в отдельном окне для ощущения нативности. с тех пор прошло два года, пиксельбук до сих пор является верным и надежным travel companion. эппл не презирается, просто банально не заходит не интересно, не мое. мне еще далеко до взрослого, всего 35 годиков. тяга к экспериментам перевесила, и так я стал гордым владельцем google pixelbook топовой конфигурации. как минимум, нужно было с чего-то показывать слайды + немного лайв кодинга выбор на тот момент был следующий: брать знакомую вдоль и поперек win10, или поэкспериментировать макбук не рассматривался по идейным соображениям. в конце 2018-го (были же времена) у меня появилась перспектива поездки в польшу на заработки а поскольку ноута у меня на тот момент не было, пришлось срочно озаботиться этим вопросом. всем привет! сегодня выскажусь про опыт общения с chrome os как так вышло, для чего пригодилось/не пригодилось, есть ли польза разработчику. слышал такие истории, но сам не сталкивался. я смотрю, времена смс прям затрагивают струны души. или позвонить пораньше, пока еще все работает. осознал. ну уже не в таких масштабах наверное? мессенджеры все-таки появились, еще что-то. за это 1 января я уже провел больше времени в видео звонках, чем за весь декабрь. не, лет 15 назад. во, всегда было интересно послушать людей с другой стороны баррикад. у меня такого не было, я страдал. а помните времена, когда поздравляли друг друга смсками в районе полуночи, и сотовые операторы не успевали обработать такое количество сообщений?. ну что, все живы?. мне лично очень не хватает оффлайна очень хотелось бы его возвращения в следующем году да, я оптимист, но когда еще загадывать желания, как не сейчас?. ну что, с наступающим новым годом, уважаемые коллеги всем здоровья, в первую и в главную очередь. не поспоришь. поначалу вообще не придавал значения, потом начал задумываться потом наметил временные отрезки просто когда из года в год в апреле какая-то беда с продуктивностью, на это начинаешь обращать внимание если оно случайно и формализации не поддается, может быть и игры. а теперь я временно поотсутствую, тк салатики ждут. когда-то давно я пробовал продолжать себя гнать в том же темпе, потом пришло понимание, что вот это как раз прямая дорога к выгоранию. то есть средний уровень по больнице мы держим, просто конкретно мой вклад как разработчика в такие периоды сильно ниже. ну и подход к управлению задачами тоже меняется - я больше перехожу к роли менеджера/ментора, раздаю другим таски, которые в другое время делал бы сам, активно помогаю их делать. в эти периоды всегда стараюсь брать по неделе отпуска, причем оповещаю об этом заранее, чтобы лучше планировать мобильную разработку. еще бывают сезонные спады у меня они, к счастью, прогнозируемые - вторую половину апреля и вторую половину октября с точки зрения продуктивности я овощ. шок начинается потом, когда понимаешь, что пользователи так делать не будут. не задумывался насчет старше, очень возможно. я все равно стараюсь соблюдать график, потому что на дистанции полезнее держать плюс-минус один и тот же уровень, чем работать всплесками. да, вы всем щас покажете но ценой последующего спада, который при таком подходе неминуем если можно договориться именно на такой график, и всех все устраивает - пожалуйста, ваше право. есть еще одна сторона медали - бывают моменты в работе, когда прям прет, все получается, щас я им всем покажу и тогда человек начинает пахать, не обращая внимание на время, сон, еду и тд. если получается так натренировать, это отлично. приходит осознание, что наверное не все я делаю неправильно. лишний уровень сложности при работе - надо всегда иметь в виду ограничения мобилки но может быть когда-нибудь. дает мощный заряд оптимизма, возвращает веру в человечество и вот это вот все. еще, поскольку есть какой-никакой менторский скилл, мне очень нравится видеть, как мои разработчики растут, прокачиваются и добиваются каких-то успехов. именно так. хотя казалось бы, те же яйца, только в профиль. то есть еще раз, иногда вечером я закрываю android studio, открываю unity и vs code, и мои мозги от этого начинают отдыхать. у меня есть еще одно хобби, которое может показаться странным - я разрабатываю тактическую пошаговую игру на unity что важно, для десктопа. то же самое применимо к играм с боевыми пропусками и ежедневными испытаниями - они именно заставляют каждый день заходить и играть как только хобби становится обязаловкой, лучше подыскать что-нибудь другое. в онлайн не лезу именно потому, что игра должна приносить удовольствие например, если настроения играть нет, но вы уже договорились командой идти в рейд, это тоже не особо способствует отдыху и расслаблению. у меня таких занятий несколько, я их чередую в произвольном порядке люблю читать зарубежную фантастику (сейчас в процессе чтения дюны, например), люблю иногда поиграть, но исключительно на компе и против искусственного интеллекта. еще очень помогает иметь хобби я сейчас не говорю про совсем очевидные вещи, семью, друзей и тд должно быть какое-то занятие, которое помогает отвлечься. еще раз подчеркну основную мысль - я совершенно не сторонник жизни по расписанию но именно для организации рабочего процесса штука практически незаменимая. да-да, именно так. разумеется, сигнал об окончании работы не означает, что я сразу же отодвинул клавиатуру и пошел заниматься своими делами обычно еще продолжаю работать до следующего коммита но поскольку коммиты стараюсь практиковать небольшие, много времени не занимает. для начала, особенно на удаленной работе, очень важен четкий график для этого у меня на умных колонках выставлено 4 будильника на рабочие дни: подъем, начало рабочего дня, обед, окончание рабочего дня. доброе утро! сегодня будет полдня тезисов, которые можно прочитать в любой книжке по управлению временем поделюсь своими привычками, которые помогают не выгорать на истину в последней инстанции, разумеется, не претендую. либо так, либо имеют некоторые проблемы со стабильностью это по личным ощущениям исключительно. в смысле?. все остальное было легкой иронией. ладно, раз пошли домыслы, лучше сразу поясню фичу мы действительно делаем сейчас она подразумевает интеграцию со сторонним софтом поэтому нашу часть мы делаем сейчас, а деплоить будем уже в следующем году, после отмашки с другой стороны и тестов. хотя вот например есть copperheados, но там немного другие задачи - ребята себя позиционируют как разработчики андроида с повышенным уровнем безопасности насколько я знаю, команда там тоже очень сильная. во-вторых, и я уже об этом говорил вчера, со сцены ушли талантливые разрабы не все, разумеется но в итоге получилось, что тащить проект масштаба кастомного андроида в свободное время банально некому. во-первых, оно стало не очень-то и надо андроид все-таки растет и становится лучше уже не требуется поверх накручивать 85 разных фишечек для облегчения использования. возможно где-то еще жив lineageos, но даже у него список поддерживаемых телефонов просел в разы по сравнению с днями расцвета. и вот тут стало совершенно очевидно, что дни кастомов сочтены окончательно их просто нет кто-то еще по старой привычке что-то пытается собирать под пиксели. не так давно, в качестве одного из вариантов решения поставленной задачи, рассматривали в тч разработку кастомного андроида под какой-либо из существующих телефонов. лично я - шучу. сегодня день зарплаты сегодня спорить нельзя. о да, про этих я уже забыл. чтобы было, наверное. деплоить вроде никто ничего не собирается. прошу прощения, у нас тут в самом разгаре мероприятие под названием а давайте еще вот эту фичу сделаем до нг временно не очень активен. разработчики кастомных прошивок тоже бывало этим грешили, но им простить можно - они от незнания нашли классный коммит, в котором написано ускорение системы, сделали cherry-pick, попробовали - а вроде и правда быстрее. а самое плохое решение по якобы оптимизации оболочек - это выкинуть все системные логи уровнем ниже info это победа с большим отрывом. не, это софт xiaomi на основе андроида. вот ведь какая оптимизация замечательная. в нашем случае как раз отключение все чинило. те пока оптимизация miui включена, нельзя программно инициировать установку приложения если отключить, все прекрасно работает. искренне не понимаю каким образом, но она умудряется ломать даже packageinstaller. к оболочке miui у меня например одна большая претензия она находится в настройках разработчика, представляет собой переключатель и называется оптимизация miui. судя по всему, победил apple. понимаю. какой неожиданный вариант. оболочка какого вендора доставляла вам больше всего проблем при разработке?. всем доброе утро! сегодня предлагаю еще немного поделиться болью, но на этот раз касаемо оболочек и прошивок разных вендоров наверняка каждый андроид разработчик сталкивался с разным поведением приложения на разных телефонах. а знаете что, в топку серьезные темы 31 декабря лучше про какой-нибудь work-life balance поговорим. а потом предлагают на нее перейти. предвосхищая вопросы, а) совсем не выкачивать эти приложения нельзя, они бывает друг на друга ссылаются; и б) ручной подход не рассматривался именно из-за принципа минимального вмешательства в исходники платформы. таким образом, сборщик добавлял это stub приложение в прошивку и выкидывал все те, которые оно якобы должно собой заменить на выходе получаем прошивку именно в том виде, который нужен нам. из всех возможных вариантов разгрузить прошивку, я выбрал самый анекдотичный я добавил минимальный репозиторий, по сути из одного манифеста и мэйкфайла, и ему в local_overrides_packages дописал все ненужные приложения. поскольку прошивка общего назначения, то там разумеется из коробки было множество приложений, которые в конечном варианте не нужны совершенно: звонилка, музыкальный проигрыватель, еще что-то от qualcomm, какие-то сервисы china telecom, вот это все. все равно было удивительно. еще есть забавный пример из жизни, про исходники платформы надо трогать по минимуму хотя я при этом прекрасно понимал, что и зачем я делаю. я кстати очень удивился, когда увидел dagger в нескольких приложениях aosp, например, звонилке. в общем, платформенная разработка резко повышает уровень креативина в крови. главное еще было сделать gradle clean при пересборке. в итоге запускали gradle wrapper из сборщика прошивки по факту получался prebuilt, конечно. словосочетание вроде бы в данном контексте - огонь. поэтому наши приложения должны сами стартовать/останавливаться, сами перезапускаться в случае чего, автоматически получать все необходимые права и доступы, которые принято раздавать вручную, и все такое подход к разработке немного меняется. одно лицо. третья проблема платформенной разработки - это особенности логики работы конкретного девайса например, мы делаем видеорегистратор у него нет экрана. народ жаждет подробностей!. у нас наоборот, одна из серьезных проблем решилась бинарной библиотекой от китайцев - собранное из исходников не работало. в общем пришлось писать самому, подгоняя решение под ответ. я вот думаю, что на этом твите начал широко улыбаться. китайцы честно прислали пример работы с gpio для 7-го андроида у нас, напомню, 9-й. тоже живой пример - нужно было поддержку световых индикаторов добавить идет запись - лампочка горит, не идет запись - не горит. уважение ну и сочувствие. один тикет уже третий месяц в работе. наверное, у меня других случаев не было. так вот в какой-то момент я просто понял, что из присылаемых примеров нужно брать идею, что должно получиться в итоге а конкретную реализацию писать самому. проблема номер два при платформенной разработке - это китайцы, да простят меня эти замечательные люди с ними так или иначе приходится общаться, спрашивать у них доки, примеры и тд. образы, если угодно. помучавшись немного сам, я попросил помощи у одного из разработчиков candyroms, и оказалось, что виноват сборщик одна небольшая правка - все заработало но без посторонней помощи я бы разбирался очень долго. есть живой пример - когда я делал подпись прошивки сертификатами, строго по методичке гугла, процесс валился на завершающем этапе, когда надо было заново паковать уже подписанные партиции. и тут не могу не поблагодарить команду slimroms сам проект уже года 3 как мертв, но ребята до сих пор на связи и всегда готовы подсказать и вообще, опыт, полученный в той команде, очень многое мне добавил в профессиональном плане. поэтому особую ценность приобретают знакомства иметь возможность задать вопросы или подсмотреть в код другого разработчика, который занимается платформой - это очень круто. xda-developers есть конечно, я там несколько лет активно общался но последние годы произошел массовый отток хороших разрабов, сейчас там очень глухо все. я готов абсолютно честно признать - если бы мы заходили в платформенную разработку с нуля, вообще не имея о ней представления, мы бы не вывезли. у гугла есть базовая документация по сборке aosp, которая чаще всего бесполезна за пределами тн happy path приходится долго выискивать блоги и статьи, где такие же энтузиасты работали с чем-то похожим статьи эти могут быть датированы даже 2009 годом, приходится адаптировать. проблема номер один при платформенной разработке - информацию буквально приходится искать по крупицам если вы занимаетесь железом, и у вас что-то не работает, поздравляю, youre on your own. хотим навороченный видеорегистратор. от китайцев получили просто плату на snapdragon с некоторым набором плюшек (радиомодуль, sd карты, камеры) и кастомный андроид 9, который все это поддерживает но он именно общего назначения, обычный caf. если кому интересно/актуально про сборку котлин приложений - маякните, разверну мысль. кто-то возможно помнит, я несколько лет назад на митапчике в мэйле громко поинтересовался, а можно ли собирать приложения на котлине вместе с прошивкой так вот - можно, причем в 10+ вроде как есть даже нативная поддержка у нас тут андроид 9, поэтому пришлось пошаманить. плюс к этому, наши собственные приложения, которые должны быть предустановлены в прошивку они разрабатываются как обычно, на котлине, в отдельных репозиториях, на современном стеке конфиги в вендор репозитории отвечают за включение/выключение их из сборки. за год работы над продуктом я внес всего 3 правки в исходники платформы, и то просто потому, что без них было не обойтись такие правки обязательно документируются, дока тоже должна лежать в вендор репозитории. первое, что обязательно нужно сделать - отдельный тн вендорский репозиторий всякие политики безопасности, скрипты для запуска вместе с системой, какие-либо бинарники, сертификаты для подписи - все туда чем меньше вы правите напрямую в платформе, тем меньше боли при апгрейде. изначально мы вышли на китайскую компанию, которая производит непосредственно железо, они нам прислали несколько инженерных образцов и полный исходный код платформы дальше надо заточить платформу под себя. у нас в адвантуме сейчас есть один такой проект, пилим его уже чуть больше года, так что впечатлений много. ну что, про железо платформенная разработка - это вообще другой мир. ага, все там были. на моей памяти всего один раз пришлось сорцами втаскивать. а вообще говоря, очень здорово, когда есть большой выбор и можно похоливарить про rx vs корутины и тому подобное завтра поговорим про железо, поделюсь болью. но если версия библиотеки ниже 1, то нужно сразу закладывать будущие изменения api. а вот уже после этого, если библиотека действительно сильно упрощает жизнь, можно попробовать запустить ее в прод. следующий этап - ее надо обязательно опробовать, для этих целей у меня всегда есть 1-2 пета разной степени активности в процессе тренировки на кошках я обычно успеваю поймать самые типовые грабли. если я сам нахожу какую-то полезную библиотеку, или мне показывает ее кто-то из коллег, первым делом надо внимательно изучить доки цель данного этапа - внятно ответить на вопрос зачем?. подводим итоги опроса - победили умеренные распишу свою логику знакомства с новыми библиотеками и фреймворками. а про flowable вообще помолчим кстати хороший вопрос для определения сложности логики - а понадобится ли мне observable?. или jetpack compose. это хороший подход. использование в подобном кейсе даггера, на мой взгляд, сильно переусложняет модель. и вот тут как раз идельно зашел койн, потому что он а) работает в runtime; и б) работает отложенно (lazy init) мы можем сначала выбрать нужный хост, а потом поднять ретрофит уже с правильным base url. предлагать - могут, а вот принятие решений, как правило, без участия руководства не обходится если наш условный software engineer уйдет в самоволку и будет что-то тихонько усердно рефакторить - это не очень хорошо, как по мне. на тему dagger/koin есть пример из жизни одно из наших приложений в debug варианте позволяет выбрать хост, с которым будет общаться есть dev площадка, test и prod. fatality. сказать могу за себя исключительно, я обычно смотрю на задачи, которые потребуется стеком решать например, если пишем тонкий клиент без особых изысков, то можно брать корутины, а если предполагается сложная логика, то вполне может подойти рх. вы разумеется правы, я это и называю продать идею - объясняем бизнесу ближайшую и не очень перспективу и убеждаем в необходимости рефакторинга основная мысль в том, что такие решения принимают не технари с горящими глазами и не рекрутеры. спасибо, что упомянули koin всей душой к нему прикипел. кандидатами хорошо обосновывать, когда ваша компания долго и со скрипом ищет новых разработчиков и не может никого нанять из-за стека а если есть условная команда, умеющая в rx (продолжая аналогию), ее еще и переучивать придется, кпд упадет опять убыток. ну смотрите, это суть есть масштабный рефакторинг он требует людских и временных ресурсов людям понадобится перевести в конце месяца оклад на карточку а с точки зрения новых фич не поменялось вообще ничего, приложение будет работать точно так же сплошной убыток. это надо отлить в бронзе и повесить у входа в офис, я считаю. где-то в уголке безутешно рыдает бизнес, для которого эта эволюция - сплошные затраты без видимой пользы идею эволюции тоже надо продавать. о да, rxpermissions. я тут чуть-чуть разожгу, можно? мне всегда казалось, что рх просто использовался не по назначению, микроскоп для забивания гвоздей поэтому так прекрасно зашли корутины - они решают ту же самую проблему, но быстрее и проще. а вообще, определение стека под конкретный проект считаю одной из своих обязанностей как лида. кстати забавно, что я постепенно прихожу к противоположному мнению - типовые задачи мобильного разработчика лучше/проще/быстрее вывозят корутины. а если проблемы нет, ее надо выдумать и решить без всякого сарказма, так рождаются pet проекты. разумеется. ну что, лопаты и вентиляторы готовы, начинаем набрасывать как вы обычно действуете при виде новой красивой и модной-молодежной библиотеки под ваш стек?. это кстати очень ок. но можно попробовать сравнить в режиме диалога, если у кого-нибудь есть опыт работы с dex. dex ни разу руками не щупал, сравнить не получится. пока что планирую поделиться впечатлениями от самой оси после двух лет использования, со стороны обычного юзера и со стороны разработчика. примерное расписание тем на неделю:пн: разработка приложенийвт-ср: железо, разработка прошивокчт: безопасностьпт: общениесб: chrome osвс: что останетсяесли вдруг жизнь внесет коррективы, сделаю тут тред с изменениями. всем привет! меня зовут виктор (можно просто витя, все свои), я по мере сил и навыков рулю мобильной разработкой в компании адвантум компания небольшая, занимаемся по большей части продуктовой разработкой постараюсь не сильно грузить в новогоднюю неделю. когда протокол большой, то неудобно хранить его рядом с имплементацией а если в каких-то случаях создавать отдельный файл, а в каких-то нет, то увеличивается когнитивная нагрузка при чтении кода. mvc, mvp, viper, mvvm, redux. вот как раз 5 шагов нам показалось избыточным и теперь шага 3 v i p v вьюха без участия роутера показывает алерт. а еще пара шаблонов, которые пригодятся всем: шаблон uiview + xib (как для ячеек) и шаблон проктол + имплементация последний - вообще гейм ченджер для меня меня всегда ломало 2 файла создавать и я объявлял протокол в файле с имплементацией. зато нативненько кроме шаблона для генерации vip-модуля, мы используем шаблон для генерации менеджера (у него тоже много вложенных сущностей), шаблон для теста на quick&amp;nime, шаблон для теста на интерактор. но минусы у шаблонов тоже есть, они не умеют создавать группы с вложенными группами только folder reference приходится создавать модуль, потом удалять его из проекта и добавлять снова. для генерации модуля мы решили использовать шаблоны xcode показалось удобнее чем generamba, в основном из-за многомодульности приложения. разумеется, у нас не все экраны сейчас на этой архитектуре есть совсем легаси экраны на obj-c, есть поновее, где только вьюха и презентер но мы активно приводим проект к этому новому виду. либо разрешить роутеру локализовывать сроки, чего мы делать совсем не хотели в итоге остановились на втором варианте: интерактор командует презентеру чтоб локализовывал строки, презентер командует вьюхе чтоб показала алерт с этими строками. но проблема в том, что роутером командует интерактор, а обратной связи от презентера к нему нет получается что либо надо создавать обратную связь от презентера к интерактору, либо передать отображение алерта во вью, по команде от презентер. еще один интересный кейс - как отображать алерты интересен он тем, что нужно решить кто занимается локализацией строк, а кто отображением алертов в идеальном мире, строками занимается презентер, а отображает роутер с помощью слабой ссылки на вью. если нужно прокинуть данные наружу, то создаем протокол moduleoutput, который реализует внешний интерактор. интересный момент возникает когда нужно передавать данные между vip модулями для этого мы делаем связь интеактор - интерактор, закрываем ее протоколом если надо докинуть данные внутрь можуля, то создаем протокол moduleinput, который реализует наш интерактор. для того чтобы создать билдер с внешними зависимостями используем assembly он с помощью swinject резолвит все что нужно и прокидывает билдеру мы сдклали так на случай если решим сменить swinject на что-то другое, тогда менять придется меньше кода. для того чтобы собрать всех этих чуваков мы используем билдер билдер на вход получает все необходимые внешние зависимости, создает все внутренние сущности и связи между ними. возвращаемся в интерактор для перехода на другой экран мы используем router если роутер умеет отобразить новый экран, то делает это сам если нет - проксирует до координатора координатор - это грубо говоря тот же роутер, только обладающим большим контекстом. repository - это чувак, который знает откуда какие данные брать он может взять их из локального хранилища, может попросить manager’а сходить в сеть иногда полезно подписываться на изменения в repository, чтобы получить актуальные данные этот механизм у нас тоже реализован. для обработки всех состояний при загрузке данных мы используем стейт машину специальная сущность, с помощью которой мы привели к единому виду работу с загрузкой данных на всех экранах для самих запросов - repository. интерактор - главный чувак он хранит состояние и принимает решения какие решения он может принять? запросить данные из источника, скомандовать о переходе на другой экран, скомандовать о том что нужно готовить данные для отображения. ответственность презентера - подготовить данные то есть перевести их из моделек для бизнес логики во вьюмодели если презентер разрастается, то создается вспомогательная сущность: mapper, в которую уходит часть логики. ответственность вьюхи - отображать данные из тупых viewmodel это структуры с подготовленными для отображения данными так же вьюха сообщает интерактору о действиях пользователя. вьюху держит uikit, она держит интерактор, который в свою очередь держит презентер у презентера слабая ссылка на вью. однонаправленный, потому что вьюха сообщает интерактору о действиях пользователя, интерактор говорит презентеру какие данные подготовить, презентер говорит вьюхе что отобразить на экране в обратную сторону связей нет. ну, давайте с основ презентационный слой: вокруг каждого uiviewcontroller есть однонаправленный треугольник, состоящий из него самого, interactor, и presenter. вспомнил, что не успел рассказать про архитектуру нашего ios приложения, давайте сейчас исправлюсь она называется vip и это по сути компоненты из viper, только перемешены немножко по-другому. харизма - важное качество для лидера. мне нравится твой подход. давайте закончим тему опросом сколько времени в среднем в день вы реально пишете код? (тимлидов просьба вспомнить старые добрые деньки, когда вы были разработчиками). сейчас в моей команде другой подход мы для вычисления капасити сперва вычитаем все запланированные встречи а потом оставшиеся часы умножаем на фокус-фактор 0,8 кстати, в среднем, получается примерно столько же. фокус-фактор - это коэффициент перевода реал ных часов в эффективные часы разработки, в которых ведется оценка в одной команде у меня был фокус-фактор 0,5 и это означало что ядолжен взять в двухнедельный спринт задач на 40 часов. в случае оценки в часах, появляется термин фокус-фактор кажется, что разработчик не пишет код по 8 часов в день, хотя его рабочий день именно таков но какое-то время он тратит на встречи, какое-то на переключение контекста, а какое-то на мемасы. раз мы затронули спринты, то давайте разберемся как посчитать capacity, то есть емкость спринта в случае со стори поинтами у нас есть средняя скорость спринта и к ней нужно внести коррективы в зависимости от больных, отпусков и тд. мне подход со стори поинтами значительно больше импонирует, и когда я работаю в команде где оценка в часах, я на самом деле маскирую оценку в сторипоинтах часами то есть я оцениваю задачи путем сравнения их сложности, стараюсь выбирать из ограниченного количества вариантов. но один вопрос остается открытым как узнать, не ошибся ли ты с оценкой? возможно стоит анализировать флуктуации (спринты, когда выполнилось либо сильно меньше чем обычно, либо сильно больше). есть еще одна интересная особенность оценки задач в сторипоинтах вариантов оценок существует ограниченное количество по классике - числа фибоначчи 1 2 3 5 8 13 21 и тд это логично, чем сложнее задача, тем больше разброс в точности оценки. способ есть эмпирический нужно поработать несколько спринтов (стори поинтами меряют задачи в agile) замерить сколько стори поинтов выполняется за спринт и можно предположить, что и за следующий спринт выполнится столько же. что мне нравится в этом подходе - независимость от исполнителя это метрика именно задачи но возникает резонный вопрос, как спрогнозировать срок, который важен заказчику? как исполнителю понять, успевает ли он?. теперь перейдем ко второму способу оценка в стори поинтах стори поинт - относительная мера сложности задачи это значит что нужна некая эталонная задача, ей присваивается один стори поинт а дальше все остальные задачи сравниваются с эталонной и другими оцененными задачами. зато у оценки в часах есть существенное преимущество можно сравнить оценку с реальными затратами и понять, попал или нет возможно, даже можно улучшить свой навык оценки задач благодаря таким регулярным проверкам и анализу. получается, что оценка в часах зависит от конкретного исполнителя? либо для конкретного исполнителя добавлять множитель: джуну х2, синьору х0,5? а что если есть 2 синьора, но с разным опытом в предметной области?. вторая проблема возникает, когда вы оцениваете задачи всей командой напомню, что у нас в команде джун, мидл и синьор допустим команда оценила задачу на 4 часа разработки вопрос, за сколько эту задачу в итоге выполнит джун, а за сколько синьор?. итак, сформировалась первая проблема: как оценить задачу? как понять сколько же она займет времени в часах? вопрос сложный и ответа у меня нет помогает опыт, помогает обсуждение с командой. это я говорю как человек, копавший канавы на даче). мы не землекопы, которые копают с постоянной скоростью прямую траншею заданной длины поэтому абсолютно точной оценки не может дать никто и никогда да и если бы мы были землекопами, никогда не знаешь сколько на пути траншеи ты всетишь корней, кирпичей и прочих неожиданностей. оценка в часах это единица времени, которую необходимо потратить на разработку конкретной задачи давайте оставим за скобками сторонние процессы вроде код ревью и будем считать что разработчик пушит в мастер без тестирования. а теперь давайте рассмотрим две классических единицы оценки задач на примере небольшой ios команды, где есть, к примеру, один джун, один мидл и один синьор. а исполнителю нужна оценка для того чтобы понимать, успевает он или нет да и в принципе для того чтобы понимать скорость своей работы. я думаю, оценка задач нужна и заказчику и исполнителю заказчик заинтересован в том, чтобы знать хотя бы примерный срок выполнения задачи скорее всего заказчик ведет не одну задачу, а для составления планов, родмапов, диаграм ганта и всего такого надо от чего-то отталкиваться. вообще в аутсорсе с оценкой все строже, ведь на основании оценок договариваются о сроках и стоимости проектов но в аутсорсе я не работал, давайте установим контекст для продолжения рассуждения: продуктовая команда с собственной разработкой. давайте разбираться зачем вообще оценивать задачи? у любой задачи есть заказчик и исполнитель в нашем контексте, исполнитель - это ios разработчик заказчиком может быть кто угодно: тимлид, продакт, клиент (если вы - аутсорс компания). по традиции начну с вопроса без контекста в чем оценивать задачи?. долго я думал над темой этого треда и наконец определился оценка задач, планирование и все что с этим связано. разумеется все пойдут к более профессиональному тилиду, вопрос как это узнать? а если ты раньше видел выступления потенциального тимлида на конференциях и тебе понравилось что он говорил, чем не фактор для принятия решения?. помните я писал что хотел посмотреть матч nets - warriors? в воинах я конечно разочаровался, а вот nets вообще в порядке по первым матчам. на последок дам напутствие всем не бойтесь рассказывать людям то что думаете наверняка ваши мысли кому-то покажутся полезными ну, а если нет - что в этом плохого? самое ужасное что может случиться - это уснувший зритель/слушатель так что действуйте!. а теперь еще один пример допустим появляется новое направление бизнеса, нужно собрать команду какого тимлида взять? ноунейма или того, чья фамилия на слуху? ко второму охотнее пойдут работать опять же, упрощается найм. а вот вам еще одно подтверждение того, что личный тех бренд приносит пользу для компаний, которым это важно полезны и такие сотрудники. для того чтобы всем этим заниматься, нужны активные сотрудники, которым подобные мероприятия интересны и в этот момент рождается синергия между сотрудником, развивающим личный тех бренд и компанией, развивающей свой тех бренд. как компания может прокачать свой тех бренд? рассказывать о себе на всевозможных ресурсах статьи, выступления, нужно себя рекламировать можно организовывать мероприятия, собирать людей, проводить экскурсии по офису можно контрибьютить в open source. теперь разберемся с тех брендом компании он нужен для того чтобы люди хотели в этой компании работать найм - довольно трудозатратное мероприятие и упрощать его полезно любой компании. на самом деле любой тех бренд сопровождается аудиторией а для того чтобы набрать аудиотрию в 2020 нужно развивать соцсети а этого я не делаю заметили что в профиле нет ни одной ссылки на что-то мое?. а вы до этой недели где-то меня видели?. теперь я провожу интенсивы по ios разработке для skillbox, скоро выйдет пилот на youtube канале технострим, где я буду писать код, ну и вот, в твиттере засветился нужно вам это или нет - решать вам но возможностей становится больше и они разнообразнее. вот я, например в этом году я занялся своим техническим брендом первое что я сделал - выступил в первом сезоне podlodka ios crew мне кстати за это заплатили потом выступил во втором сезоне. личный тех бренд разработчика, зачем он нужен? думаю, все сводится к одному проще устроиться на работу речь не только о работе программистом, но и о любой медийной деятельности. технический бренд - некая мера известности среди разработчиков бывает личный тех бренд, например, мой а бывает тех бренд компании, например, delivery club. давайте разберемся что такое технический бренд, на что он влияет и почему полезно его качать. хочу собрать обратную связь о нас я понимаю что продукт delivery club известен всем, а как обстоят дела с техническим брендом? помимо того что я рассказывал на этой неделе, слышали ли вы про разработку в delivery club?. доброе утро, мои дорогие сегодня я чуть раньше выхожу в эфир, потому что жена укладывает сына спать дома и мне не нужно с ним гулять сегодня мы поговорим про технический бренд. а вы какие задачи больше любите, продуктовые или технические?. кстати, по опыту продуктовых команд, которые изредка делают технические спринты, может стоит для платформенной команды иногда делать продуктовый спринт, чтобы держать разработчиков в тонусе). в следующем году мы планируем выделить платформенную команду, которая будет фуллтайм заниматься техническими задачами туда будут стекаться самые важные проекты и задачи кажется что работа станет более прогнозируемой. кроме этого, платформа занимается рефакторингом легаси и выпиливанием остатков objective-c большое спасибо ребятам за эту работу. платформаосновной фокус этого стрима - система мониторинга о стабильности приложения с помощью связки mytracker и grafana мы научились мониторить сценарий авторизации пользователя если количество ошибок превышает некое значение, то в телеграм приходит алерт и мы реагируем. дизайн системаздесь мы прям в самом начале пути сделали отдельный модуль, назвали дизайн системой, добавили цвета и шрифты потихоньку обогащаем ее общими компонентами: кнопками, алертами и прочим. по результатам ночного прогона об упавших тестах оповещаются все заинтересованные команды решение о том, насколько срочно чинить тест и нужно ли его вообще чинить принимается внутри команды может чинить тест дороже чем каждый раз тестировать руками. по результатам прогона во время регресса составляется список прошедших успешно тестов эти сценарии руками тестировать уже не нужно все красные тесты нужно проверить руками зато нет требования обязательного прохождения всех тестов. продумали когда будем гонять тесты и как будем реагировать на их результаты решили не гонять их на pr, чтобы не тормозить разработку из-за моргающих тестов гоняем по ночам и на регрессе. синканулись с андроидом, выработали единые подходы к тестированию, сделали даже похожий синтаксис (благо kotlin и swift схожи) будем подключать qa-инженеров к написанию тестов. ui-тестыеще одна наша боль - это регресс его проводят раз в неделю qa-инженеры всех продуктовых команд, занимающихся мобильной разработкой мероприятие на день-полтора очень хочется сократить и автоматизировать решили покрывать сценарии регресса ui-тестами. теперь бэклог этого стрима содержит задачи на оптимизацию пайплайнов, автоматизацию рутинных задач и прочие приятные мелочи. подробнее про каждый из нихci/cdу нас было 2 основных проблемы мы собирали сборки для релиза руками и не гоняли тесты на prах мы это исправили, теперь у нас все красиво релизный пайплайн с выгрузкой в firebase и testflight, unit тесты на каждом pr наконец-то). эти направления мы назвали - стримы получились вот такие: - ci/cd - ui-тесты - дизайн система - платформау каждого стрима есть родмап и бэклог есть техлид, который отвечает за стрим есть 2-3 разработчика есть регулярные синки, раз в 2 недели. чтобы понять что делать в рамках техдолга, нужно иметь некий бэклог и приоритеты мы решили это так: собрались, обсудили главные боли и выделили 4 направления, в рамках которых будем улучшать наш проект. с ответом на вопрос «когда?» разобрались теперь поговорим про «что?». и кстати, это дает простор для маневра и в обратную сторону если есть архиважная задача по техдолгу, то можно договориться с тимлидом и продактом о том, чтобы взять под техдолг больше времени опять же, все в ваших руках. иногда продуктовые задачи настолько важны, что время на техдолг в спринте не выделяется это редкость, но бывает можно договориться о том, чтобы в следующем спринте вернуть должок все в ваших руках. я уже говорил, что у нас есть бакет техдолга в каждом спринте - посоедние 3 дня некоторые команды экспериментируют и пробуют делать несколько полностью продуктовых спринтов, а затем технический спринт тоже валидная опция. но, пока меня не отвлекли по работе, расскажу про то, как мы в delivery club работаем с тех долгом точнее, в ios команде. вчера я словил хейта за твит, мне понравилось, чувствую себя звездой). доброе утро всем! вот когда у меня точно есть время на твиты - так это по утрам я каждый день встаю в 7:00, потому что у сына режим и его надо разбудить потом мы тусим, гуляем и где-то в 10 я передаю его жене и начинаю работать ну а на этой неделе - твитить. не согласен если задуматься об этимологии слова «ребята», то можно обратить внимание на то, что это форма слова «ребенок» а ребенком может быть как девочка, так и мальчик. ребятки-ребятушки, сегодня день выдался еще хлеще вчерашнего, давайте с вами завтра утром поболтаем, тема - работа с техдолгом. это отдельный xcode project, в котором таргет framework. ладно, время принять душ и бежать на стендап встречу днем не обещаю (наученный вчерашним опытом) до встречи вечером хотя всякое бывает. внимательные вспомнят, что есть еще стендап ios разработчиков на мой взгляд - это геймченджер я когда пришел и услышал что айосеры встречаются каждый день, я очень удивился но именно общение приводит к единству команды а оно ощущается даже на удаленке. ретроспектива в теории - топовое мероприятие позволяет улучшать процессы, продвигать свои идеи, менять повседневную рутину в лучшую сторону на практике - поныли, потерпели, разошлись очень мало было на моем опыте ретроспектив, по итогам которых что-то менялось и это грустно. демо - тоже классная штука, люблю выступать, люблю слушать других приятный способ провести время и узнать чем занимаются другие команды. а вот что мне не очень нравится - так это то что на техдолг (3 последних дня спринта) приходится чересчур много встреч, подготовка спринта, демо, ретро зачастую времени на разработку очень мало а для меня техдолг - это возможность влиять на свои же будни и будни коллег. планирование - тоже норм тратишь час, а получаешь понимание и спокойствие на 2 недели вперед объем работ понятен, импакт понятен, приоритеты ясны, голову можно выключать. стендапы - отличная штука держит тебя в тонусе, не позволяет неделями заниматься непонятно чем на работе оставляет тебя «в струе» так сказать. что-то на философию потянуло а если вернуться на землю, то давайте обсудим плюсы и минусы нашего процесса, я описывал его вчера. подытоживая - я за наличие процесса и против его отсутствия я против слепого следования правилам, но я за то чтобы начинать по правилам и менять их итеративно и осознанно. но если каждая команда будет начинать с изобретения велосипеда (будет придумывать какой-то свой, идеальный процесс), то она никогда не начнет работать потому что поиск идеала бесконечен а скрам, со своими минусами, закрывает из коробки большинство потребностей. еще я время от времени слышу мнение, что в скраме слишком много встреч и он не подходит именно вашей команде, ее специфике согласен, но. попав в окружение коллег, делающих совместно одно дело я стал развиваться в своей профессии мне стало это интересно работа перестала для меня быть «просто работой» хотя я еще женился в то время, может это тоже связано). поэтому я считаю что agile способствует мотивации и желанию работать когда я работал в соло, я большую часть рабочего времени тратил на просмотр баскетбола и развитие себя в качестве покерного игрока. а потом я перехожу в большую команию, где команда и agile встречи каждый день, иногда несколько раз в день и сразу так стало приятно чувствуется плечо товарища, чувствуется важность того что ты делаешь. в начале карьеры я работал 3 года соло ios разработчиком и у меня в принципе не было никаких процессов, даже вотерфолла но самое гоавное - не было команды, не было общения с людьми. я люблю agile, и возможно, что это неосознанное мнение, связанное с кое чем из моего прошлого знаете, как психологи говорят, многие взрослые поступки, точки зрения, строятся на основе моментов из дества. и еще один опрос скрам (ну или agile) - это хорошо или плохо?. давайте начнем с настроения общественности что лучше, кроссфункциональные продуктовые команды или по направлениям (ios команда, к примеру). всем доброе утро, я снова на связи, снова из ванной на этот раз сделал воду попрохладнее, а то вчера налил горячую и вскоре стало как в бане сегодня поговорим про процессы и архитектуру. ну наконец-то, человек в теме) я - глор карри, хочу на него смотреть и надеюсь их новый центровой перспективный играть будет ну а нетс мне кажется будут очень интересными, главное чтоб без травм. из 18 опрошенных никто не собирается смотреть матч gsw - nets, что вы за люди я ради этого матча подписку купил на год. мы периодически шаффлим нашу лесенку, учитываем тех кто в отпуске я написал скрипт на свифте, который это делает, оказалось нетривиальная задача если интересно - могу поподробнее описать, но попозже. зачем это? психологический фактор когда видишь prы, где кроме тебя несколько ревьюеров, думаешь: кто-то другой посмотрит а когда ты один - ты блокер дополнительный бонус - несколько ревьюеров не кидают одновременно одинаковые комменты. кстати, не из банального у нас есть лесенка ревьюеров это табличка, где перечислены все разрабы, и каждому присвоен первый ревьюер, второй ревьюер и третий при создании pr нужно добавлять только первого первый, после ревью добавляет второго и тд ну или ставит nw конечно. у нас есть правила по оформление prов там есть пункт - добавить скриншот, а лучше гифку с записанным функционалом в коммент к своему pr так делают не все и не всегда, но когда делают - ревьюить ну очень приятно всем советую. у нас одна ветка - develop стараемся делать маленькие prы, по максимум все закрывать фича тогглами, чтобы можно было лить prы по недоделанной фиче в develop если никак - то longterm ветка, но у нас такое - редкость. с тех пор как мы это сделали, разговоры о том что нам нужен код стайл подутихли, но не уверен что им кто-то пользуется по крайней мере prов в него было очень мало. у нас есть кодстайл мы взяли за основу airbnb, положили в readme и решили делать в него pr если какое-то правило не нравится или хочется внести новое голосованием галками будем решать принимать ли pr. окей, с этим разобрались как же нужно писать код? у нас есть линтер, который подскажет (у всех наверное есть) у нас остались выключенными некоторые правила, которые очень хотелось бы включить, но тысячи ворнингов в легаси пока откладывают это действие. правильно, repositories и managers надо поменять местами, косякнули. тест на внимательность где тут ошибка?. - libs абстракции над сторонними библиотеками, наша дизайн система и модуль для экспериментов и фиче тогглов- helpers думаю комментарии не нужны, у всех есть- logger умеем логировать в крашлитику с релизных сборок. - repositories эти ребята - фасады над менеджерами могут иметь много менеджеров для агрегации разных данных, могут хранить кеши один интерактор - один репозиторий- models тут свалка моделек для бизнес логики. - vip это отдельные экраны, переиспользуемые в фичах название такое в честь архитектуры (о ней завтра), а не из-за важности- managers вы размажете меня по стенке, но у нас сущность которая ходит в сеть называется manager. слои сверху вниз:- основная аппка это остатки монолита, мы продолжаем вырезать из нее куски- flows их два это основные сценарии нашего приложения: рестораны и продукты- features тут собраны модули для отдельных фич, переиспользуемых в аппке или во флоу. наше приложение разбито на модули с помощью фреймворков cocoapods используем только для сторонних зависимостей модули разбиты по слоям, разрешено импортить только модули из нижних слоев из своего слоя или слоя выше - нельзя. ладно, к делу с чем же приходится знакомиться новичку на старте работы у нас в компании? для начала - с проектом у нас монорепа, но не монолит дальше - подробнее. этой ночью стартует сезон в nba, какой матч будете смотреть?. уфф, ну и денек, включили наконец ci на prах, дженкинс разорвало) кажется что твитить по 3 раза в день было авантюрой, хотя может быть дальше будет посвободнее. в каждой продуктовой команде по одному ios и одному андроид разрабу. вот это топовый вопрос, я забыл упомянуть нас сейчас 10, ищем еще. ничем, просто чем ближе к спринту, тем больше информации. так, вроде все рассказал, скоро стендап, пора вылезать из ванны вернусь к вам днем, поговорим подробнее про все что предстоит узнать новичку именно об ios специфике. договаривать о том что делать в каждом из этих бакетов нужно с тимлидом следить за тем чтобы продуктовый бакет не вырос на целый спринт придется следить вам самим каждый разработчик заинтересован в выделении времени под техдолг. спринты разбиты на бакеты:- продуктовый бакет, самый большой, первая неделя спринта и понедельник следующей недели, пилим продукт- саппорт бакет, вторник второй недели, фиксим баги, новые или накопившиеся- бакет техдолга, последние 3 дня спринта, пилим технические задачи. у нас релизный поезд обновления в мобилках уезжают раз в неделю в среду отводим релизную веточку, проводим регресс, в четверг стараемся релизить. - груминг (первая пятница спринта)- демо (второй четверг спринта)- ретроспектива (вторая пятница спринта). - стендап с продуктовой командой (ежедневно)- стендап с ios командой (ежедневно, понедельник и пятница - по желанию)- встречи по проработке эпиков на следующий спринт (со среды по пятницу, перед спринтом, сколько необходимо)- планирование (понедельник, первый день спринта). итак, курьер привез вам ноутбук, вы подписали документы, админы выдали необходимые доступы, пора приступать к работе у нас скрам, 2-недельные спринты вот типичный календарь ios разработчика в delivery club:. разумеется, большинство информации вы найдете в confluence, но общаться с живым человеком всегда приятно. для того чтобы помочь вникнуть в специфику нашего проекта, познакомить с архитектурой, принятыми решениями и объяснить как мы делаем prы, вам выделят buddy это ios разработчик, который будет вам помогать. процессом онбординга руководит тимлид он должен погрузить вас в процессы, познакомить со всеми коллегами, с кем придется взаимодействовать, ответить на все вопросы но тимлид - не айосер, как быть?. кроме того, вы попадаете в команду ios разработки я специально выбрал именно это слово, а не гильдия или сообщество ios разработчики у нас - это одна команда мы общаемся ежедневно, у нас очень живой чатик и каждый готов прийти на помощь своему соратнику. ваш непосредственный руководитель - тимлид продуктовой команды он решит для вас все необходимые административные вопросы. ваша команда укомплектована бэкендерами (их у нас много), андроид разработчиком, qa-инженером и тимлидом за вашей командой закреплены продакт и дизайнер. итак, к теме дня! если вы приняты в delivery club на должность ios разработчика, то вы попадаете в одну из продуктовых кроссфункциональных команд. я веду прямой эфир из теплой ванны, расслабляюсь после утренних занятий с сыном и набираюсь сил перед рабочим днем а вы любите принимать ванну?. доброе утро, уважаемые читатели сегодня мы поговорим про онбординг а если конкретнее, то про все, что происходит с тем, кто прошел все круги отбора и согласился связать свою профессиональную карьеру с нами. я уже говорил, что я за все форматы обратной связи) можешь хейтить, постараюсь найти конструктив, может что-то даже изменится. интересный вопрос, возможно но хочется верить, что понял правила игры). как относитесь к тому, чтобы писать код на собесе? не на бумажке, это жесть, но, например, в плейграунде?. любите ли вы задачи на алгоритмы?. какие вы больше любите вопросы?. ладно, я иссяк, надеюсь было интересно завтра поговорим про онбординг а пока еще пара опросов. сложно объяснить почему это для меня сигнал вообще это интуиция, но мне кажется что люди говорят такие фразы когда хотят объяснить что-то в чем разбираются или хотят разобраться. кстати, знаете какой у меня основной критерий при выборе из кандидатов? я выбираю того, кто на собесе хоть раз сказал мне перед тем как что-то объяснить: «так, ну, смотри». я кстати люблю в процессе интервью открыть плейграунд, чтобы проверить что-то неочевидное, что обсудили бывает обидно, когда при этом общаешься со вторым интервьюером, а кандидат не включается в обсуждение это же интересно!. не бойтесь спорить с интервьюеров и отстаивать свою точку зрения аргументированно, разумеется. и пара советов интервьюентам старайтесь отвечать подробно, развернуто самое ужасное - это односложные ответы никакой информации не дают помните, идеальный собес - это диалог. я люблю рассказывать кандидатам правильный ответ, если в процессе диалога мы до него все же не добрались (если конечно сам знаю (: ) и вам советую так делать. доводите интервью до конца, даже если думаете что кандидат не вывозит пусть тренируется и следите за таймингами сказать что время на задачку вышло и перейти к следующей теме - норм через 15 минут после начала собеса сказать «я услышал достаточно, до свидания» - не норм. обязательно нужно заранее озвучить план интервью представьте это чувство, когда уже час вас мурыжат какими-то вопросами, вы выжаты как лимон, ответили только на половину а сколько еще это будет продолжаться? неизвестно нет, кандидата надо предупредить обо всем. банальщина, но не нужно сразу бомбить техническими вопросами, лучше спросить как дела, поговорить о погоде что-то нейтральное, чтобы растопить лед любое интервью - стресс, давайте его минимизировать. а теперь перейдем к советам сперва для интервьюеров мне когда-то сказали, что хороший тон - это начать на «вы» и спросить можно ли перейти на «ты» теперь стараюсь так делать и вам советую. после этого выдыхаем, расслабляемся отвечаем на вопросы кандидата и предлагаем ему презентацию с конфы о нашей архитектуре, в качестве визитки проекта. рисуем схемы, обсуждаем после того как схема нарисована - даем практическое задание, реализацию которого нужно «натянуть» на нарисованную схему как по мне - тоже очень интересный подход когда я проходил собес, мне очень понравилось. финалочка - архитектура мы не требуем знаний конкретных архитектур и паттернов, интересно насколько кандидат понимает архитектуру на текущем проекте либо любую другую архитектуру, которая ему нравится больше. solid - тоже на практике мы не просим расшифровывать буквы и давать определения даем не самый качественный код и предлагаем внести в него изменения, поревьюить моя любимая секция, всем за нее ставлю пятерки. дальше ui даем практические задания на верстку в ксибах, спрашиваем теорию тоже зависит от интервьюера, кто-то любит спросить одно, кто-то другое. я вообще считаю, что хорошее интервью - это диалог ну и разумеется, главное же не то, правильно ли кандидат отвечает на вопросы, а как он мыслит (:. следующая секция - swift и тут мы спрашиваем исключительно теорию хотя у меня был хороший опыт на старом месте работы давать сниппеты кода, наводящие на теоретическте вопросы работало хорошо, кажется, что кандидаты охотнее шли в диалог. помню я собесился в hh и мне дали код прочитать я облажался, код был на свифте с дженериками, я тогда только-только щупал свифт, многого не знал но мне очень понравился формат я попросил ребят скинуть мне тот код, чтобы разобраться оказалось - это были исходники alamofire. когда я устраивался в delivery club я прошел такое же интервью и секция с задачей на легаси obj-c код мне очень понравилась она раскрыла все мои лучшие стороны но не каждому кандидату такой формат заходит, к сожалению. - проверяем как кандидат ведет себя в стрессовой ситуации;- проверяем как он разбирается в чужом коде;- оцениваем как он умеет доводить дела до конца;- попутно обсуждаем obj-c;- затрагиваем многопоточку на конкретном примере. мы не спрашиваем теорию по obj-c мы даем практическую задачу взять кусок легаси кода, старого, страшного и внести в него продуктовую правку убиваем сразу кучу зайцев:. итак, obj-c зачем спрашивать это в 2020 году? и правда, мы пишем весь новый код на swift, 90% времени читаем его но obj-c все-таки встречается к тому же мы его выпиливаем чтобы выпилить кусок на obj-c, нужно его понять. наше ти (устал печатать целиком) разбито на несколько секций: objective-c, swift, ui, solid, архитектура где многопоточность, спросите вы? на нее мы обращаем внимание в рамках практической задачи (о ней расскажу позже) ну и на усмотрение интервьюера, можно поспрашивать и теорию. попробую рассказать о том как проходят технические интервью у нас и дать полезные советы тем, кто как и я раньше, справляется с ними со скрипом. как я уже говорил, я люблю технические интервью для меня это возможность показать себя со всех сторон, произвести впечатление но так было не всегда еще года 3-4 назад, я ужасно заваливался на таких собесах. продолжу в этом треде тема беседы - техническое интервью для начала давайте узнаем, что думает публика двухчасовое техническое интервью - хорошо это или плохо?. так, мне пора бежать, укладывать сына спать ему год и у него есть ритуал перед сном, в котором я каждый день принимаю участие я расскажу подробнее про техническое интервью вечером, ждите новый контент!. по итогам отчета тимлид принимает решение, звать ли кандидата на финал финал - встреча с тимлидом и его руководителем длится полчаса, смотрят на софты, culture fit и так далее по итогам встречи тимлид со своим руководителем принимают решение о том делать ли оффер. если вы хотите показать исчерпывающие знания - рассказывайте подробно сами, не ждите что вас попросят углубиться в какую-то тему если что, интервьюер наоборот остановит и перейдет к следующей теме. по итогам технического интервью мы, разработчики, составляем подробный отчет с оценками по все темам по такой шкале:0 - нет знаний;1 - плохо;2 - недостаточно;3 - достаточно;4 - подробно;5 - исчерпывающе;? - не обсудили. в общем реалии такие, что хоть как-то оценить кандидата надо 2 часа болтовни на общую тему - не самый худший способ а вот тесты перед техническими интервью я не люблю человеческого фактора не хватает. для меня это либо ценный опыт, либо обратная связь, либо возможность показать себя, либо узнать что-то новое кстати хорошо проходить технические интервью я стал только после того, как начал сам их проводить. есть мнение, что техническое собеседование не дает объективное оценки уровня кандидата согласен и тем не менее, очень люблю технические интервью, как проводить, так и проходить даже когда не мог пройти ни одного, все равно любил. техническое интервью - двухчасовой марафон, подробнее раскажу сегодня вечером кстати можно почитать на хабре хорошую статью от уже к сожалению бывшего коллеги. по итогам интервью hr пишет подробный отчет - все что получилось узнать потом тимлид еоманды, куда открыта вакансия принимает решение, приглашать ли кандидата на техническое интервью. другое дело, если по какой-то причине именно эта вакансия тебе очень-очень интересна думаю, тогда стоит это озвучить и назвать пару причин почему никого не отпугнет фраза «всю жизнь хотел работать именно у вас» но при этом на вопросы все же стоит отвечать честно. думаю, что никому не будет лучше от того, что кандидат скажет не то что думает, а то что от него хотят услышать к тому же это самый первый этап, а значит ты (некий абстрактный «ты» - кандидат на вакансию) не затратил еще сил и энергии и не страшно, если дальше не позовут. нам этом этапе у людей бывает неосознанное (или осознанное) желание не рассказать чего именно хочется, а показать что хочется именно на эту вакансию по крайней мере у меня такое желание возникает зачастую я борюсь с ним. поподробнее про hr-интервью оно занимает (не соврать бы) минут 15 цель - узнать чего хочет кандидат, синкануть это с нашими ожиданиями от кандидата. внимание, вопрос как считаете, 3 этапа - это много или мало?. в delivery club процесс отбора кандидатов такой:1 hr-интервью;2 техническое интервью;3 финальное интервьюраньше был еще скрининг между 1 и 2 этапом, но мы от него отказались. я немножко поработал и вернулся к вам! давайте поговорим про собеседования сначала кратко о том, как у нас, потом подробнее и порассуждаем. не разрешает рекламу). давай организуем?. расписание тем на неделю:пн: собеседования;вт: онбординг;ср: архитектура;чт: технический долг;пт: технический бренд;сб и вс: что-то легкое, чтобы отдохнуть от работы, пока не решил что именно. темы, которые я хочу обсудить будут тоже в специальном порядке, кто догадается в каком - поставлю лайк (:. я постараюсь твитить по 3 раза в день по утрам будем обсуждать процессные вопросы, в середине дня будем погружаться в рутину написания кода, а по вечерам постараюсь накидывать что-нибудь легкое. недавно прошла оценка 360, получил комментарий, что у меня инженерный подход к решению задач вот и к подготовке к этой неделе я подошел системно. так, тренировка окончена, вроде все ясно теперь расскажу о планах на неделю. а теперь проверяем цитирование егор, спасибо за ответ, я потренировался. так, проверка ретвита удалась. тоже мне ). вот, спасибо!. стоп в твиттере нет дизлайков?!. не стесняйтесь дизлайкать, я за любую форму обратной связи можно заминусовать этот твит, например. ага кажется получилось теперь давайте разберемся с взаимодействием с вами накиньте лайков, ретвитов, комментов, всего что только можно. проверка цепочки тест раз-два раз-два. я в твиттере впервые, поэтому давайте разбираться как тут что с редактированием профиля я справился, с первым твитом тоже давайте попробуем сделать цепочку твитов. всем привет! меня зовут саша, эту неделю мы проведем вместе я собираюсь рассказать немножко о себе и немножко о том, как работается в delivery club. #рекламаитак, на сегодня у меня полезная инфа — кто из моих читателей подумывает стать тимлидом? ребята из agima и geekbrains сделали как раз такой курс впереди новогодние праздники — время прокачаться все подробности тут:. оставь себе лучше поверь, оно тебе пригодиться да и иначе получится, что я отдам тебе на аутсорс а так только можно:). я, увы написать туда уже ничего не успею - слишком скоро превращусь в тыкву да и тема не моя но тред создать могу:) готов наполнить его контентом?. согласен, мне кажется она в итоге отожрет свою нишу на рынке. да, но dahlia вроде поддерживает как фуксию так и линукс так в чем же преимущество фуксии над линуксом?. интересно похоже на то, что они подо что-то конкретное эту тулузу придумали и, зная гугл, наверняка есть какие-то другие компоненты в этой системе. гугл все помнит - у него бекапы. в общем, тут уже довольно поздно, пора закругляться и сдавать пост следующему автору надеюсь, что вам было интересно, и всем удачи в следующем году. если только для фуксии брать собирался - то правильно задавила :). по результатам недели - тема о мотивации получила гораздо больший отклик, чем любая техническая и это на канале о мобильной разработке переквалифицироваться что ли в мотивационные спикеры. результат, как мотиватор - это когда ты гордишься тем, что сделал а когда мне сказали - я сделал это как раз низкая мотивация или я не правильно понял?. now i am become death, the destroyer of worlds. большинство школьников и с этим не особо справляется. те, кто верит в будущее фуксии, напишите как вы его видите а то пока ваша точка зрения как-то не представлена. ну, программирование у нас преподают в школах и вузах по идее, есть возможность попробовать и понять - нравится или нет. а вы верите в будущее фуксии?. я такого не слышал, но все может быть:) хотя я сомневаюсь, что все в гугле так считают возможно некоторые:). но скорее всего это какая-то комбинация данных мотивов, и гугл еще сам до конца не решил, как в итоге новую ос спозиционировать. а возможно фуксия- это просто такой полигон испытания различных идей, самые удачные из которых будут потом перетянуты в андроид. возможно, фуксия - это замена самому андроиду, кода он пользователям почему-то надоест. возможно, обжегшись на dalvik, google теперь дует на linux, чтобы заменить его ядро в андроиде в пользу этого говорит тот факт, что a можно запустить поверх фуксии. возможно fucsia - это и правда просто желание сделать ещё одну ос, просто, чтоб была. при этом google фуксию вроде-бы активно разрабатывает недавно он даже открыл её для public contribution то есть, видимо какую-то цель google в этом всем видит, но с нами пока не делится. у android things хотя бы было понятно, на какой маркет они ориентируются а fuchsia - это просто ос, типа линукса но чем она принципиально будет лучше линукса - пока не ясно. во-вторых не очень понятно, на какой сегмент устройств нацелена данная ос если читать документацию, то получается, что это вообще такая система на все устройства, которая за все хорошее и против всего плохого. во-первых, функционал fuchsia os пока очень ограничен во всяком случае, на начало года в системе мало что можно было сделать. мы её в начале этого года покрутили немного из интереса: пособирали код, позапускали на том железе, что было, и на эмуляторе и как-то не впечатлило. так, как обещал, про фуксию ( кто не в курсе -это нова ос от гугла) если коротко - пока хрен знает зачем она нужна. мне кажется, что для многих фрилансеров (да и аутсорсеров) результат - это полученные с клиента деньги качество кода или довольные пользователи их могут заботить, но не благодаря модели фриланса, а скорее вопреки. может так и сделаю сегодня с подъемников уже все раскатано было правда сейчас вроде небольшой снежок посыпал. да, на intel nuc запускали если честно, не впечатлила. ну, все три варианта я попытался сначала пояснить но вероятно не все эти пояснения увидели оказывается 256 символов не всегда достаточно, чтобы все понятно объяснить :). на этой неделе гугл забил еще несколько гвоздей в крышку гроба android things  кто не в курсе, это была попытка приткнуть android в iot возможно, на смену придет fuchsia os про нее сегодня поговорим. вообще, в продолжение вчерашней темы можно было бы написать про выгорание и work/life balance но я всю неделю в отпуске сижу в твиттере и пишу про андроид. в общем, отличное место - всем рекомендую. самое замечательное, что есть в геше - это снег он искупает все недостатки: его много, он мягкий, пушистый это идеальный пухляк и его здесь довольно легко застать. чего в геше не хватает, так это уклона гора довольно плоская крутые места есть, но их не так много, и после них как правило длинный пологий выкат для продвинутых это немного скучновато, но для большинства такой уклон будет в самый раз. леса в геше полно -он покрывает всю гору в нем красиво и полно снега и он выкатывается почти весь - через два дня после снегопада найти нераскатаный пухляк уже проблема. так что если вы катаетесь только по трассам, то в геше вам будет тяжело возможно местные просто считают, что кататься по трассам здесь глупо ведь здесь есть лес. трассы в геше под стать погоде готовят их весьма расслаблено на красной трассе посреди вельвета вполне может оказаться яма или здоровенный камень, которые не будут ничем обозначены кроме того, по ним легко могут подниматься снегоходы, оставляя за собой глубокие борозды. вообще, погода в декабре весьма здесь суровая солнце бывает нечасто, ветер, холодно. подъемников, в принципе, хватает особых толп, как в поляне, я не заметил правда их частенько закрывают из-за ветра и много старых подъемников зачастую это кресла без купола и подогрева при местной погоде это не всегда комфортно. во-первых, добраться из москвы сюда довольно просто рейсов до новокузнецка хватает а оттуда на такси за 2-3 часа и вы уже на месте. давайте расскажу мои впечатления от шерегеша возможно кому-то это поможет решить, стоит сюда ехать или нет. итак, воскресенье, моя вахта на подходит к концу сегодня будем говорить обо всем подряд и подводить итоги если есть интересная тема - пишите, обсудим. да, это тоже сейчас спрос на кодеров такой, что есть огромный стимул как-то автоматизировать их работу можно предположить, что спрос на высококвалифицированные кадры будет только выше а вот штамповать формочки нужно будет уже меньше. насчет уровня зарплат согласен полностью - таков баланс спроса и предложения на рынке труда сейчас но вот насчет перспектив его развития все не так однозначно во-первых не все могут кодить во-вторых, ai/ml в перспективе может сильно сократить потребность в слабых кодерах. напрямую он связан, только если вы работаете на себя большинство все-же получают зарплату. не понял коммент, если честно. да, наверное выгорает тот, кто горит. что интересно, меньше всего людей выбрали результат, как главный мотиватор но с точки зрения бизнеса такие работники наиболее ценные - они и за продукт душой болеют, и работу неинтересную делают и денег не просят постоянно. согласен со всем, кроме слова часто:). вот и получается, что при наличии, qa, юнит тестов, линтера, статического анализатора и пр код ревью как инструмент становится полностью избыточным. ну, разработчикам об этом не сказали они все-равно хотят творчества. ну и напишу очевидное, что и по опросам видно люди все разные и мотивация у них разная кому-то нужно баблище, кому-то сделать марсоход, кому-то самый модный фреймворк заюзать и это нормально главное понимать что в первую очередь нужно вам и выбирать работу по себе. согласен, что должны я говорю про свой опыт:). смотрите, для большинства здесь основным мотиватором является интерес для довольно творческой профессии кодера это ожидаемо проблема в том, что зачастую бизнесу нужно не интересно, а быстро и дешево. если ошибка сложная, в логике, на код ревью её вряд ли отловят а легкие ошибки можно юнит тестами отловить, например по моему опыту код ревью это на 90% проверка кодинг стайла и соблюдение процесса. еще один интересный момент из опроса про качество кода практически никого на это не мотивирует код ревью а ведь это один из самых распространенных инструментов и нафига он тогда нужен получается?. врач, ученый, телеоператор, дилер кита ричардса во всех этих профессиях постоянный рост тоже нужен и приветствуется но с основным посылом я согласен - зарплата это далеко не все. разные есть компании, некоторые и пачками берут правда уже некоторые на этом обожглись а к марсоходу каждого не подпустят, это правда но оно и хорошо, наверное :). жизненно:). баблище нужно чтобы создать комфорт если его нет - как то не комфортно жми 1, короче:). программистов мало - это вам любой рекрутер скажет да и велосипед может быть не менее интересным, если на нем будет миллион человек ездить. я не читал, к моему стыду возможно поэтому мой вариант мне нравится больше :). конечно, столько человек под нею спились. давайте еще один вопрос задам что для вас важнее в работе?. у был отличный доклад, про то, что результат может быть даже важнее, чем интерес-. результат - это то, насколько круто и важно то, что вы делаете рисовать кнопки гораздо прикольнее, если они будут управлять марсоходом. интерес - это и сложные задачи, и креатив, и модные технологии причем у разных людей интересы разные кто-то любит дизайн, а кто-то багфикс. комфорт это и зарплата, и хорошая команда, и удобное кресло и адекватный менеджмент, и много еще всего и одно может компенсировать другое, до определенной степени. на мой взгляд есть 3 главных мотиватора в работе:1 комфорт 2 интерес3 результат. много людей профессию вообще не выбирают они выбирают вуз, куда проходной бал пониже в том возрасте, когда происходит выбор профессии большинство еще плывет по течению, как мне кажется. первый промежуточный результат опроса: за деньгами в кодеры идут менее 20% людей для остальных деньги, как минимум, не были основной мотивацией при этом зарплаты в it всем на зависть видимо, гнаться за деньгами и правда не стоит. модель в компании как-то не прижилась даже не знаю почему. у всех компетенций, кстати, был одинаковый вес то есть участие в развлекательных мероприятиях и общительность ценились одинаково с выполнением задач грамотно и в срок предлагалось эту модель использовать для оценки и премирования сотрудников. пару лет назад у нас в компании hr придумал что-то типа портрета компетенций идеального разработчика там было все, вплоть до активности на тимбилдингах и посещения курсов по английскому качество кода, правда, отсутствовало. он говорил, что ему важно, чтобы в ядро коммитили те люди, у которых есть этот вкус что делать с остальными он не уточнил:). да, мне удивительно, что игры пока на последнем месте все-таки очень многие в детстве рвутся к компу, чтобы играть и идея написать свою игру, где можно грабить корованы, должна приходить многим. в ютубе есть tedtalks торвальдса он там это называет вкусом если у тебя есть вкус, то ты понимаешь, что один код хороший, а другой не очень в такой парадигме код - это искусство. собственно, есть две причины, почему тема мотивации кажется мне интересной:1 многие менеджеры не совсем понимают зачем их сотрудники пишут код2 многие разработчики теряют мотивацию из-за того, что их ожидания оказываются обманутыми. именно так, ничто не мешает, и поддержка его там будет. это на самом деле здорово!. у меня такого не было хотя спектрум в руках держал в детстве - у родственников. то есть деньги вообще не учитывались? просто, у многих людей, как мне кажется была основная причина, более важная, чем остальные. второй вопрос такой: почему вам важно писать хороший код?. если быть абсолютно честным, то мой вариант это 4 если у вас свой вариант - пишите в комментах. для начала, давайте устроим пару опросов первый такой: как так получилось, что вы стали кодить? выбирайте самую важную причину. всех, кто еще не в отпуске, поздравляю с выходными сегодня будем философствовать на позитивную тему: зачем оно все ваще?. не, это не хели просто живу в гостинице с вертолетами прогулочный полет в 10 минут с высадкой в 15к за троих вышел а хели надо группой брать, и там ценник другой совсем. не махнуть ли в горы. многозначительно :). конкретно этот шаг в англии выглядит больше как популизм это еще не закон, а объявление и к 2030 те кто его делают, уже не будут у власти а там уж пусть новые люди выкручиваются я согласен что электрика двс вытеснит но не к 2030. идея connected car витает в воздухе уже довольно давно и уже имеет свои реализации вспомним ту же теслу и обновления автопилота если закрыть все полностью на низком уровне лишишься многих фич. ну, слухи о смерти двс все же пока сильно преувеличены все-таки сейчас на дорогах 2 миллиарда машин чтобы их всех заменить потребуются десятилетия а на рынке побеждать нужно сейчас скорее электрокары прочто лучше для бренда - футуристичнее и чище. да, я сегодня пару раз на мустаг подымался правда на подъемнике. а где и когда был ратрак?. пока выходит, что я в меньшинстве лыжники, где вы?. похоже на то. да не писал еще сегодня про шерегеш погода испортилась завтра беру гида - пойдем искать снег. обе машинки, кстати, электрические не знаю, совпадение это, или гугл целенаправленно смотрит в сторону именно этого сегмента рынка. давайте еще, для привлечения внимания, 2 картиночки с машинками на которых android automotive уже работает:. тогда скорее всего что-то не так с твоим приложением надо смотреть, что оно делает там есть не очень хорошо документированы моменты, насколько я знаю но что конкретно у тебя не так я вряд ли скажу:). но вообще в automotive еще очень много всего перефигачили относительно обычной мобильной версии: power management совсем по-другому устроен, multi-zone audio, поддержка внешних камер, итдесли про это все писать, то недели не хватит. тогда надо разбираться :) а с предыдущей версией эмулятора это работало, кстати?. а вот имел ли разработчик право помаркать активити как optimized будет решаться на playstore review так что в теории, если вы не будете выкладывать ваше приложение в маркет, то можете смело помаркать все активити как optimized и они будут работать но вообще так низя. когда на машине передача поменятется с pаrked на что-то другое система врубит рестрикшены и только те активити, что помарканы distraction optimized смогут работать остальных система убьет. ux restrictions это, например: no video или limit string lenght активити должны на эти рестрикшены подписаться и реагировать на их изменения если они это делают правильно, то их в манифесте разрешается помаркать как distraction optimized. ux restrictions можно кратко описать такой картинкой:. более детально это выражается в новых рекомендациях для дизайнеров ( и в том, что называется ux restrictions. driver distraction guidelines это то, что обязательно нужно изучить, прежде чем начинать писать под android automotive основная идея очень простая: приложение не должно отвлекать водителя от дороги. android auto предполагает 2 девайса - хед юнит и телефон твое приложение будет крутиться на втором у тебя телефон с приложением не может подключится к эмулятору. смотря что вы имеете ввиду под тот самый :) гугл в курсе этих спецификаций и в курсе сильных сторон андроида и он очень хочет пролезть в первые не пожертвовав вторыми. ну, в теории, выставление настроек подвески с экрана хэд юнита или показ хитрой аналитики по расходу топлива - это вполне интересные фичи и у automtovie есть под это интерфейсы вопрос только в том, будут производители машин ими пользоваться или нет. а вот второй недостаток исчезнет - устройства на automotive гугл будет сертифицировать и playstore там появится но на приложения будет наложены дополнительные ограничения в виде driver distraction guidelines. первый недостаток у automotive отчасти сохраняется сама система позволяет производителям машин интегрировать андроид с внутренними подсистемами но не факт, что все будут готовы это сделать. вообще, автомобильных ivi систем на андроиде уже хватает однако у них есть пара важных недостатков: 1 oни очень ограниченно интегрируются с машиной 2 там нет play store и набор приложений оответсвенно ограничен. обновления как раз будут работать ночью, пока машина в гараже, она будет подтягивать обновления tesla уже давно так умеет. одно другого не отменяет automtoive os, будет поддерживать android auto да и car play тоже будет, если на то пошло automotive не с ними конкурирует, а с agl, qnx итп а вот их он в плане gui кроет как бык овцу. fuchsia вообще интересная тема я её хотел в выходные обсудить поподробнее зачем гугл её пилит мне до конца не ясно - несколько причин может быть. так что гугл в automоtive очень заморочился по поводу того, как сделать систему безопасной для водителя во всех смыслах отличий от мобильного андроида в новой os гораздо больше, чем в android tv или в wearos. да и злобные русские хакеры не дремлют если в системе будет дыра - пролезут и выключат у машины тормоза или печку включат - а в калифорнии неизвестно, что хуже. а американская судебная система может их сделать печальными еще и для гугла- подавать в суд на корпорации там любят. одна из возможных причин, почему гугл раньше не заточил андроид под машинки - это безопасность глюк приложения на 100км/ч может иметь весьма печальные последствия. auto крутится на телефоне, как часть google play services телефон подключен к машине по проводу automotive это независимая os и крутится прямо на машине. так что перспективы новой ос мне кажутся весьма радужными а это значит, что скоро будет большой спрос на допиливание приложений под новую ос так что если есть желание и время поизучать что-то новое, то automotive будет неплохой строчкой в резюме. да и опыт выхода на новые рынки у андроида есть android tv отожрал огромную долю на рынке sma tv, при том , что отличий от мобильной версии андроида там совсем немного. плюс, вся automotive индустрия, на самом деле, очень богатая общая стоимость машины такова, что 100-200 баксов за новый продвинутый девайс с андроидом легко в ней растворятся зато красивый, знакомы пользователю ui это отличный selling point. вся суть android automotive в том, что крутиться он будет не на телефоне, а на машине а машин в мире много - по 90млн в год новых штампуют и живут они подольше, чем телефончики. а вы знали про то что autmotive это не auto?. раз у гугла такие проблемы с креативом, давайте попробуем придумать оригинальное название для android automotive os мой вариант - cardroid пишите ваши в комментариях. в документации андроида, даже есть специальный пункт, объясняющий отличия одного и другого:. я обычно тут рассказываю про то, что automotive то не auto, а совсем другая система почему гугл решил назвать их столь похоже я не в курсе какой-то кризис креатива. сегодня по плану у нас была мотивация но был запрос на то, чтобы рассказать про андроид на автомобилях пораньше поэтому давайте немного переиграем и сегодня поговорим про android automtotive и про android auto. мне такой достался за выступление на gdg meetup этим летом не знаю, остались ли у них еще такиетак что более верный вариант это поисакть мой в районах отмеченных крестиком:. кстати, в шерегеше, по моим ощущениям, бордеров гораздо больше, чем лыжников на большинстве курортов ситуация обратная давайте посчитаемся: вы на чем катаете?. сегодня познакомился с отчаянным бордером вот он быстро от меня уезжает в лесу его инстаграмм. в какой-то мере, как мне кажется, эти принципы могут быть применимы и в разработке приложений хотя, вероятно, многие найдут их уж слишком ограничивающими. третий принцип требует пояснения понятия стабильности оно сводится к отсутствию неструктурированных типов данных и к обратной совместимости более побробно можно почитать здесь:. второй принцип говорит про cts, а это, в основном, юнит тесты, которые обязан пройти каждый android телефон таким образом модуль может быть уверен в своих внешних зависимостях. первый принцип вполне понятен если при обновлении поменяется api модуля, то вещи, использующие данный api перестанут работать. это не такая простая задача, и они её решили приняв всего 3 принципа:1 модульные апдейты не меняют api модуля2 модули используют только api, которые покрыты cts3 модули используют только стабильные интерфейсы. но гугл тут со своими модулями конечно всех превзошел все-таки им нужно модули шарить не только внутри одного приложения и даже не внутри одной компании модули андроида должны быть совместимы друг с другом, с остальной ос и со всем тем, что потенциально могут придумать вендоры. вообще модульность и как её правильно готовить сейчас популярная тема и неудивительно. только вчера говорили про treble и тут такая новость я статью прочитал, но понял только то, что куалкомму сделали зашибись как конкретно они сделали зашибись и будет ли зашибись другим soc вендорам в статье не уточняется.  : 📈 project treble is making os updates faster and easier to deployqualcomm mobile platforms will now offer an extended period of os and security updates, allowing customers to lower the costs of upgrades and launcheslearn more ↓. но это все мои спекуляции я в гугле не работаю если тут есть гуглеры, поделитесь инсайдом :). возможно часть этих изменений гугл даже затащит в базовый код андроида но только от самых крупных вендоров остальные наверняка пойдут лесом. объяснение, которое кажется мне возможным такое: гугл планировал сделать runtime модулем еще с 10го андроида однако вендоры этому сильно воспротивились видимо, гугл согласился дать им отсрочку на 2 года к 12й версии все должны будут свои изменения из runtime убрать. но фишка в том, что в официальной документации runtime является модулем еще с 10го андроида я по этому поводу даже общался с по его словам runtime не является обязательным для вендоров и в реальности существует только на пикселях так это или нет - я не проверял. если лень читать, там один чувак заметил такой коммент в код ревью андроида: in android s, a becomes an updatable mainline module на основании этого идет куча рассуждений на тему, что все это значит. из-за этого, кстати случаются новости типа вот этой, которую много кто перепечатал. кроме того, runtime почему-то не фигурирует в официальных пресс-релизах гугла хотя казалось бы, что может быть важнее?. кризис, приходится подрабатывать. то есть модуль есть, но апдейтить его отдельно нельзя зачем же, спрашивается, он тогда нужен?. кроме того, это единственный модуль, про который в документации написано: unlike other modules, the runtime module isnt updatable and doesnt receive updates to functionality outside of the normal android release cycle. из всех модулей самый интересный - это безусловно runtime в него входит a и много всего другого, критичного для работы системы по-сути, этот модуль - самое важное, что есть в android os. кто практически точно в выигрыше - так это разработчики приложений чем дальше, тем меньше нужно будет телефонов для тестирования. означает ли это, что в скором времени телефоны друг от друга будут отличаться только лончером и характеристиками железа? скорее всего нет - гугл все-же оставляет вендорам некоторые возможности кастомизации но возможности эти все более четко расписаны. и эти самые модули - это такой заборчик, за который вендоры заходить не должны, чтобы грядки гугла не потоптать и этих заборчиков в андроиде будет становиться только больше. по сути, гугл пытается пройти по тонкой грани, между стандартизацией и гибкостью системы им нравится, когда вендоры придумывают что-то новое но придумывать они должны правильно. consistency - это в первую очередь developer consistency идея в том, чтобы самые критичные вещи работали одинаково на всех телефонах, вне зависимости от вендора. что нужно самое главное понимать про project mainline:1 он не сделает апдейты андроида быстрее он сделает их менее релевантными2 из трех целей mainline - security, privicy, consistency третье самое важное. статьи про mainline у меня нет – есть выступление на gdg devfest -  пиарится, так по полной. сегодня говорим про project mainline и модули можно сказать, что это продолжение вчерашней темы. сегодня утром у меня был вот такой термос в рюкзаке очень хорошо тепло держал, кстати а потом я обнаружил что где-то в лесу я его поменял на сосновую ветку и килограмм снега лучше надо рюкзак закрывать, короче. это потребует времени, а я в отпуске) да и фиг знает насколько оно поможет - я там сильно головой мотаю местами. крепежа нет да и камера на груди частенько смотрит на лыжи так как катаешься в наклоне. какой год, такой и адвент. сначала facebook, потом гугл, теперь телега и все в течении недели нам очень не хватает нормальной теории заговора. вообще, интересно посмотреть, поменяется ли ситуация после project mainline (про него будет подробнее завтра) по идее, чем больше вещей будут апдейтится через модули, тем меньше пользователю надо беспокоится о версии андроида но знают ли люди про модульные апдейты. но даже если вы выбрали потерять четверть пользователей, то вам нужен 24й sdk а ему уже 4 года. пока результаты выглядят ожидаемо большинство разработчиков готовы отбросить 5-25% потенциальных пользователей, в зависимости от того, какие api им нужны. мне лично кажется, что все дело в том, что такие параметры как удобство интерфейса, например, очень трудно измерить зато версия андроида это очень четкая метрика поэтому при выборе телефона многие используют её и параметры железа. многих вендоров это смущает, так как им кажется, что стабильность, производительность, безопасность и пр важнее. по результатам пока выходит, что людям важны обновления на последнюю версию это, в принципе, соответствует тому, что я слышал от производителей телефонов на форумах поддержки вопрос: когда обновитесь до последней версии? всегда в топе. да и высоту не всегда правильно рассчитываешь. когда камера не очень и закреплена на шлеме, эпичный фрирайд превращается в шатание пьяного медведя по лесу. а самые интересные новшества всегда можно потом и в андроид затащить с вендорскими фичами это вообще постоянная история. мне кажется, это осознанный выбор со стороны гугла новые фичи и инновации пусть будут в приложениях и гугл хочет создать разработчикам максимально комфортную среду для этого. а если по другому спросить, кто брал iphone из-за того, что он безопаснее а ведь безопаснее он во многом из-за того что apple со своими быстрыми апдейтами и дыры быстрее закрывает. какая благодатная тема для дискуссии:) в принципе, согласен - чем взрослее система, тем слабее новые фичи поэтому я и люблю копаться в treble и mainline - там масштаб изменений сохраняется. да, согласен но это вещи связанные, на самом деле чем проще изготовителю выпустить обновление, тем дольше он будет это делать и тем быстрее оно выйдет. кстати да а есть те, кто выбрал iphone именно из-за того, что там лучше с обновлениями?. и, если не сложно, напишите какой min sdk у вас в проектах преобладает?. и второй вопрос, для разработчиков вы смотрите на distibution версий, когда выбираете minimal sdk?. вообще, для начала устроим два опроса первый будет с точки зрения пользователя когда вы выбираете себе телефон, насколько вам важно, чтобы на нем крутилась последняя версия ос?. пересказывать все что там написано наверное не буду, смысла нет если читать совсем лень, то вывод такой: после project treble в андроиде с апдейтами на новую версию ос стало лучше, а после project mainline апдейты уже не так релевантны, как раньше. благо, сегодня любимая мной тема - обновления андроида я про неё не так давно статью целую накатал - грех не пропиарить:. так, сегодня был powder day и я укатался но долг превыше всего - буду писать по плану а то паспорт не отдаст. приезжай:). рядом с нн горки маленькие сочи чуть ближе, но в декабре там снега маловато да и был я там уже несколько раз а в геш давно хотел съездить. сегодня и с подъемников неплохо было🎿. погода в шерегеше обнадёживает. вообще, treble не очень новая тема - 8й андроид был давно так что остановлюсь на том, что пропиарю для интересующихся мой доклад с мобиуса 2хлетней давности:. ходят слухи, что гугл планирует полностью уйти от hidl и оставить только aidl (ввиду того что теперь появилась такая штука как stable aidl) тогда hwbinder возможно исчезнет. вернее даже через binderы не все наверное в курсе, но binderов в андроиде сейчас 3:binder-это для обычных приложений и фреймворкаhwbinder-для halов там интерфейсы определяются не через aidl а через hidlvndbinder-для вендоров, если они хотят использовать aidl вместо hidl. а с приходом treble в архитектуре андроида еще большую важность обрел binder ipc по сути, большинство компонент системы сейчас общаются друг с другом именно через binder. самое большое изменение архитектуры -это наверное был project treble (из 8го адроида) по-сути, до него, картиночки не слишком соответствовали действительности - слишком много было зависимостей между различными уровнями. несмотря на то, что картинки, которые я постил выше меняются не так сильно, в реальности, архитектура ос эволюционирует довольно бодро. я смотрю, самый новый вариант картинки побеждает видимо, чувак что их рисует не зря свои 400к получает. все верно когда мы собираем ядро мы выбираем какие модули подключить но чтобы оно собралось нам нужны исходники этих модулей про них мы и говорим. ну, страничка эта несколько устарела, как мне кажется так то отличия есть. все верно это,в общем, вечный процесс. и есть у меня большое подозрение, что gki этот будет обновляться как apex модуль через google play официально это пока не объявлено, но по всему оно к тому идет но это я уже вперед забегаю: про модули и apex будем в другой день говорить. так вот, самое интересное, что это ядро ядра скоро будет одинаково на всех андроид устройствах начиная с 12го андроида это будет обязательно драйвера и всю свою обвязку вендоры и oemы будут через модули подцеплять. самое интересное, что сейчас происодит с ядром – это generic kernel image (gki) по-сути, гугл поделил ядро на “core kernel” и обвязку в виде vendor modules “core kernel”, кстати, в русском переводе документации звучит как «ядро ядра» это не я придумал – это оно там реально так. кстати, интересный момент – в платформенной документации под вендором, как правило, понимают вендора чипа а производитель устройства – это oem. но важно понимать, что в ack не входят драйвера устройств (так как они у каждого устройства свои) драйвера будут добавлены потом, вендором чипа и производителем устройства. ack - это сравнительно новая фишка это такая версия ядра, котороя основана на lts и куда добавлены все фичи, необходимые для запуска android. lts – это версия ядра от торвальдса и компании и как можно догадаться по диаграмке она несколько отличается от android common kernel (ack) на данный момент, как я слышал, отличается не так уж сильно буквально одной фичи, необходимой для запуска андроида, в lts не хватает. в последнее время этот процесс гугл активно формализует вот еще одна красивая диаграмка:. то есть это непрерывный процесс, и в зависимости от того, какую версию андроида с какими фичами и на каком ядре мы поднимаем патчить нужно больше, меньше или совсем не нужно. однако андроид за это время тоже не стоял на месте и стал требовать уже новых фич плюс некоторые из новых фич опциональны, и андроид без них работать будет, но какую-то из фич андроида придется отключить. дело в том, что андроид изначально требовал некоторых фич (напр binder, wake locks), которых в ядре по умолчанию не было и ядро приходилось патчить но потом эти фичи в mainline подтянули. на самом деле, все три ответа имеют право на существование все зависит от того, про какую версию ядра, андроида и про какой телефон мы говорим. из интереса, как вы думаете, ядро linux в андроиде отличается от «ванильного» ядра – того что выпускают линус торвальдс, gkh и компания?. но я полагаю, далеко не все знают, насколько сильно ядро нужно доработать чтобы поверх него запустился андроид. по картинкам можно догадаться, что в основе андроида ядро linux но про это все уже слышали, я думаю. система скипассов в геше напоминает конкурирующие фреймворки:1их много разных и они друг-друга не очень любят2каждый имеет свои преимущества (подъемники/фичи)3в итоге оказывается, что половина из них не работает при малейшем ветре. все четыре картинки из официальной документации я думаю у гугла есть специальная должность по рисованию этой картинки зачем иначе нужны 4ре варианта - я не знаю. какая вам больше нравится?. вариант 4. вариант 3. вариант 2. вариант 1. сегодня у нас по плану архитектура android os тема весьма большая, и есть у меня сомнения, что я её всю смогу покрыть ну да посмотрим, как пойдет. на конечно тоже полно информации но там еще нужно постараться, чтобы понять, с чего лучше начать. если вам вдруг интересно углубиться в тему платформенной разработки, то лучше всего начать с книги embedded android by karim yaghmour. судя по результатам опроса большинство все же не боится смотреть в исходники aosp это обнадеживает. есть, кстати, еще один вариант платформенной разработки – кастомные romы те, что публикуют на 4pda и xda-developers вообще говоря, на этих сайтах много всего интересного для платформееного разработчика. из интереса, хочу спросить общественность: а вы когда-нибудь смотрели в код aosp?. вообще, основной кайф платформенной разработки, на мой взгляд, именно в том, что можно залезть поглубже и посмотреть как оно работает изнутри хотя, по идее, весь андроид – это open source кто угодно может посмотреть реализацию того или иного метода фреймворка. как правило, джавистов и плюсистов все же разделяют на две команды но не всегда иногда у заказчика не хватает денег на две команды и тогда все занимаются всем и плюсами, и джавой, и котлином самый прикольный вариант, на мой взгляд. ну и ниже всех bsp разработчики по сути, это embedded разработчики они ковыряются в дровах, halах и бутлоадере их задача – сделать так, чтобы устройство стартовало и все железки работали пишут на си и плюсах иногда плафтормщиками называют только эту подгруппу. собственно говоря, на framework уровне пишется большая часть внутренней логики и пропиетарных фич данного устройства. ниже на уровень владения framework разработчиков они пишут системные сервисы как правило, пишут на java зачастую это все одна команда с разработчиками приложений не всегда у компании достаточно денег на две независимые команды. ну и билдить aosp им все-равно, как правило, приходится как и всем остальным а это не так просто бывает чистый билд android os занимает 3-4 часа на нормальном билд сервере. высшая (в плане архитектуры системы, а не грейда) каста – это как раз разработчики системных приложений по сути работа этих ребят мало отличается от разработки обычных приложений разве что, пишут они под один или несколько конкретных устройств. определение довольно широкое под него попадают, в принципе, и разработчики системных приложений и лончеров так что платформенные разработчики тоже делятся на категории. итак, кто такой android platform разработчик: если очень коротко, то так называют всех, кто правит код aosp как правило, платформный разработчик участвует в разработке прошивки для android устройства. подумаю мне другие темы тоже интересны:). мда, а я и правда не в курсе и какое мнение сейчас в тренде? itшники зажрались или нам недоплачивают?. я только приехал сегодня на горе еще не был но, вообще, понемногу подсыпает. на такой ответ я и рассчитывал :). нет, не про деньги во всяком случае пока не планирую. у нас в компании или вообще? и зачем вам это нужно знать?:). ничего в плане гвоздями не прибито планы могут и поменяться вообще – основное желание, за неделю обсудить будущее андроида куда, так сказать, катится вся эта операционка если у вас есть мнение на эту тему, то я всецело призываю его не скрывать и делиться. план на неделю такой:пн чем в андроиде занимаются платформщикивт архитектура android osср обновления андроидачт модули оспт мотивация – зачем мы кодим?сб андроид на автомобиляхвс пока не определился. хотя я и из нижнего, всю эту неделю я буду писать из шерегеша так что твиты про андроид могу разбавлять твитами о каталке на лыжах никто не против?. всем здравствуйте! меня зовут федор я из нижнего новгорода должность - технический менеджер в компании orion innovations основная область экспертизы – android platform про то, что это такое, расскажу в первый день. друзья, мое время подходит к концу и уже скоро я превращусь в тыкву🎃 успел только половина плана, надеюсь принёс вам пользу подписывайтесь , что-нибудь ещё попишу главное - классно отдыхайте на выхах, долой выгорания! было мего приятно писать для вас 🤟. мне кстати не зашло пока( но допускаю что есть кейсы. потому что apple считают, что тебе этого достаточно:). спасибо, забыл про них. докидывайте свои самые любимое комбинации далее в тред!. 13 ctrl+option+0 - убрать лишние импорты, регулярно использую). 12 option+cmd+[ или ] - прыгать на начало конец скоупа напишите мне аналог для xcode плиз). 11 cmd+n - быстрые действия для класса: override, имплементация. 10 cmd+shift+b - прыгнуть к объявлению от имплементации единственный вопрос - почему b. 9 shift+ctrl+space- выслушать саджесты androidstudio переодически дает советы по делу. 8 object+left/right - двигаемся в строчке между словами зажатый shift позволяет выделять слова, а если дойти до края строчки - выделить всю строку впрочем, если вы хотите что то сделать с целой строчкой - cmd+shift+left/right вам в помощь. 7 cmd+[ или ] - перемещаемся по вкладкам, как браузере cmd+w - закрыть. 6 cmd+option+left/right - это итерация по последним местам, где были изменения дико облегчает перемещение по файлу). 5 cmd+e - недавние файлы еще раз cmd+e - только измененные файлы незаменимо при работе с фичей в несколько файлов если нужно вернуться к предыдущему - cmd+shift+backspace непривычно после xcode, как идти вперед, а не назад не нашел(. 4 cmd+shift+f12(скорей всего понадобится fn) мерзкая комбинация, но я люблю прятать все лишнее вокруг, когда работаю с файлом поэтому привык. 3 cmd+up - когда мне нужно посмотреть файлы внутри текущей папки далее стрелочками я могу уже бегать по файловой структуре и доставать что-то рядом обычно кеда точно не помню что ищу альтернативно можно нажать cmd+1 это возьмем окно файловой структуры в фокус или скроет. 2 cmd+o - ищем класс, cmd+shift+o - ищем файл скорей всего вы ими уже активно пользуетесь). 1 cmd+shift+a = one love! открывает поиск по действиям, очень легко найти нужное показывает горячие клавиши лучшее место для знакомство с клавишами. привет android’ам! у меня не такой большой опыт в среде jetbrains + искажен ios’ом тем не менее, хочу поделиться с вами набором хотекеев, которые сделали мою жизнь значительно приятнее между нами - иногда я вам завидую, потому что xcode…ну это xcode го в тред!. спасибо за дополнение, это реально удобно!. я надеюсь что вы не выгорите от пары выходных тредов). вы правы, я очепятался( действительно, правильная комбинация будет option+left/right. о, это круто, не использовал, возьму на заметку. не учел( подумаю вечером как исправить, возможно дополню каждый твитт отдельной ссылкой. возможно я что-то забыл и докину позже) если я забыл вашу любимую горячую клавишу - непременно пишите мне сюда в тред со злыми смайликами!. 13 мне мешает панель файлов слева при работе с файлом закрыть/открыть ее можно через cmd+0. 12 иногда нужно бегать по конкретной строчке cmd + left/right перенесет нас в начало или конец, а заменив cmd на ctrl вы сможете перемешаться между «словами» а добавить shift (shift+ctrl+left/right) вы выделяете часть строки. 11 иногда проще найти в поиске по проекту что то для этого у нас есть cmd+shift+f пишем запрос, жмем enter жмем tab что перевести фокус к найденным файлам и перемещаться по ним стрелочками если хотите замену (все мы помним как replace работает) - ctrl+cmd+shift+f tricky. для некоторых вещей из списка есть горячие клавиши, но мне не хочется помнить много и нравится вести диалог с системой. 10 периодически вам нужно сделать какое-то действия с функцией или классами допустим прыгнуть к реализации у xcode есть шикарно диалоговое меню, достаточно быть курсором на объявлении и нажать cmd+shift+a у вас удобное контекстное меню, можно выбрать что нужно. 9 но даже в файле на 300 строчек кода это может быть не удобно вы ищите конкретную функцию давайте посмотрим какие есть для этого достаточно нажать ctrl+6 ура, все функции перед вами, перемещаться стрелочками кстати, здесь обретает ценность mark: - здесь он отображается. 8 ура, вы в нужном файле как с ним лучше работать? чтобы попасть в начало/конец можно использовать cmd+up или cmd+down можно еще зажать просто up или down и вовремя остановиться. 7 если у вас много открытых вкладок файлов - то по ним, как и в браузере можно перемешаться через cmd+shift+[ или ]. 6 если вы не хотите листать несколько файлов - можно открыть меню с recent file’ами для этого достаточно нажать ctr+1 откроется выпадающее меню жмете один раз стрелочку вниз - видны все недавние файлы вы прекрасны!. 5 если вам нужно вернуться на предидущий/следующий открытый файл - у вас есть шикарная комбинация ctrl+cmd+left/right не надо тянуться к стрелочкам в левом верхнем углу editor’а. 4 альтернативно можно нажать ctrl 5 и получите выпадающее меню с файлами в папке мне нравится меньше. 3 если вы используете файловую структуру - возможно вы захотите попасть быстро в папку и выбрать нужный файл cmd+shift+j вам в помощь ура, мы в папке и можем стрелочками выбирать файл чтобы провалиться внутрь файла достаточно нажать cmd+j и затем enter. 2 перемещение по проекту если вы ищете конкретный класс - нажмите cmd+shift+o и введите название. 1 самое важное - знать где найти горячую клавишу да, можно залезть в настройки, но в xcode есть офигенный help просто напишите, что вы ищете - система покажет где это в меню и вы увидите горячую клавишу. важно! это все оригинальные горячие клавиши, без изменений так вы будете чувствовать себя как рыба в воде на любом ноуте, а не только вашем это мой личный топ везде приложил видео, елевом нижнем углу отображаются нажатые клавиши сделал с помощью -. итак, мне часто доводилось программировать с людьми в паре или помогать им и меня часто корежит, как не эффективно разработчики перемещаются по проекту поэтому специально для вас я подготовил гайд по комбинациям xcode клавиш и их использованию погнали!. изначально хотел сказать, что сегодня будем говорить о предотвращении выгорания один из лучших способов - сделать выходной в том числе и от твиттера) но все-таки желание вас порадовать пересилило сегодня затронем тему оптимизации своей работы начнем с горячих клавиш в xcode. я знаю ребят, у них все на grpc вроде - сможешь подсказать?. да, с некоторым людьми мы видим по разному) я даже задумался посмотреть как мое приложение выглядит на иврите, они же точно им пользуются. есть этим вечером в твиттере вам грустно и вы непременно хотите что-то изменить просто добавьте ?lang=ar к урлу твиттера и получите новый экспириенс например. раз говорим о сложности - напомню мем). в случае manychat в нас ещё centrifugo, которая шлёт по сокету только от бека сообщения так что у нас подучился классический restapi с его удобными статус кодами и набор входящих сообщений просто, удобно, работает. зато - меньше многопоточности, нет проблем синхронизации, с миграциями, старыми версиями базы, скорости чтения/записи на диск. пользователь закрыл приложение? грузим заново первую страницу и погнали никаких сложных диффов, ничего разве что при реконнкте придётся поработать но думаю если вы сбросите кеш и загрузите страницу заново - расстроитесь только вы. так вот, если в хотите проще - вычеркивайте базу все остаётся так же - один экземпляр сокета, только здесь вы общаетесь уже прямо с вашими viewmodel/interactor там же хранится массив данных никакой убер архитектуры. более того мы запускали андроид позже, решились на базу инвестировали туда месяц релизнули ипользователей напрягало отсутсвие других фичей, никто из них так и не порадовался офлайну я пошёл писать под андроид, тушить пожар, пересматривать ценности. у нас чат поддержки мы хотели релизнутся к определённой дате простор фичей огромный с болью решили пожертвовать базой какой же был мой шок, когда ни один юзер в течении полутора лет не пожаловался, что сообщения и диалог каждый раз заново грузиться! все довольны и ставят 5. прежде чем делать сложную архитектуру стоит подумать - несёт ли она ценность для продукта и юзеров? если бы делаете убийцу телеграмма - вам скорей всего нужна база и офлайн режим, как одна из фичей а если ваша задачу проще?. пока писал не про неидеальный вариант messenger’a понял - не так уже сильно он отличается ну да ладно первые 4 твита - вступление. я дул после пол бутылки виски - не помогало может попробую балон, спасибо. чтобы разработать убийцу телеграмма конечно 👹. я ios разраб, мне тяжело с мака слезть) буду на нем залипать. ого, спасибо за наводку! бесплатно = по гарантии?. крутяк, моему полтора года - и вот тебе подстава(. скорей всего вы уже почти телеграмм в плане бизнес логики пора бежать к дизайнерам и верстать красивые вьюшки. как только он пришел - вы перепишите объект вместе со статусом а если он не пришел - вы сможете показать пользователю сообщение со статусом ошибки и отправить заново. итак, у нас текут данные по сокету в базу, ui-чик обновляется пора отправить первое сообщение чтобы отправить сообщение, внезапно, надо записать его в базу вместе со статусом напомню, что в вебсокете нет ack из коробки, вы сделаете свой и будете ждать, пока бек его пришлет. минутка рекламы - мы с командой делали шаг в opensource, писали огромную статью про таблицыно в итоге выпустили только либу по работе с таблицами она не идеальна, не призываю вас использовать можете посмотреть для обмена опытом ios only. скорей всего вы храните массив данных в interactor/viewmodel), и диффаете прошло и текущие состояние в ios можно диффать на уровне таблицы через diffabledatasource - дайте на вход только новое состояние. поток прибежал к вам в ui надо бы обновить таблицу правильно что делать? в ios apple завести честный diff между коллекциями с ios 13, так что если вы поддерживаете олдскул - придется тащить любу например: далее вы обновляете коллекцию сущностей. мой подход - обертка над методами базы, возвращает наружу plain объекты под каждую сущности свой store, который работает только с ней очень раздельно и удобно красиво получается при использовании реактивного подхода - поток данных течет прямо к вам в ui и обновляется. базы умеют в диф, поэтому вы получите измененные модели есть всякие красивые методы, которые позволяют прям в таблице сделать обновления я их избегаю, так как там не потокобезопасные объекты, видел слишком много проблем с этим. про компонент базы желательно передавать туда plain модели далее маппинг и запись, обязательно на бекграунд потоке (или привет 5 фпс) круто если у вас сокет, база и бизнес логика будут работать на разных потоках и безопасно передавать данные друг другу дорого, но стоит того. знаю ребят, которые сразу парсили в realm объекты и в интерфейсе тоже их использовать пытались н̶е̶ ̶н̶а̶н̶и̶м̶а̶й̶т̶е̶ ̶и̶х̶ не делайте так объекты базы не потокобезопасны, им лучше существовать только при записи/чтение, а затем превращаться в plain/dto объекты иначе краши. в компоненте так же будет отправка и парссинг моделей далее эти модельки отправляются в базу…и тут важно. ну почти есть нюансы в каждом компоненте step one прячем сокет в отдельный компонент к нему нужно добавить watchdog (таймер) для периодического коннекта, если соединение пропало кстати, сюда желательно подтащить reachability и нотифицировать об изменении статуса желающих. у вас динамичные, постоянно обновляющие данные! поэтому нужен источник правды база:) после получения токена устанавливаем коннект по сокету полученные сообщения записывает в базу подписываемся на уведомления о нужных сущностях на ваших экранчиках…вы прекрасны. придется заложить пагенацию, минимум для списка диалогов и сообщений а так же именно здесь надо будет договориться, как же вы получите данные между дисконектами скорей всего вы будете слать спец сообщение, а в ответ бек будет фигачить вам пачки пропущенный данных. первое что нужно это «api» у меня опыт с websocket’ом, поэтому говорить буду за него вам нужно спланировать, как вы будете отличать сообщения либо специальный ключ либо сам объект будет доступен по ключу варианты в картинке. итак, вам выпала задача спроектировать приложение с мессенджером что делать? начнем с идеального варианта - много времени, сил и людей я не писал по этому варианту, но 100 раз обсуждали его в барах, а часть его есть даже на android. никогда не понимал проблем с бабочкой, пока не начал писать в твиттер у меня стал залипать cmd писал тред и нажал w а cmd был залипший как долго меняют клаву по гарантии? или как написать письмо деду морозу, чтобы он привез новый macbook?. доброе утро! сегодня пятница, второй день релиза киберпанка а так же день долгожданной архитектуры чатов 😱😱😱 пока я рефракторю тред и закрываю фичу - можете налить чайку и посмотреть видос, который не растерял актуальности ну или в закладки добавить. они делали для высоконапряжённых сложных проектов я знаю ребят, которые используют эту технологию и им заходит но разбираться в ней имхо гораздо дольше и сложнее чем в том же сокете. можно через json схему ещё делать просто это все дополнительно делается. кстати, недавно на mobius был доклад про grpc думаю в следующем году их выложат в свободной доступ, можно будет посмотреть. я неправильно оценил задачу расписать про работу сети теперь то очевидно что это минимум 8 йобапоинтов! я думаю и вам и мне нужен еще небольшой таймаут завтра с меня подготовленный материал про архитектуру messengerа. grpc vs websocket - чтобы вы взяли в продакшен для разработки messegerа?. если вам хочется посмотреть/поиграться -. насколько вообще grpc полезен? мне кажется он как http на стероидах - все могет он даже может заменить websocket - общение то двусторонние минусом будет - меньше инфы, необходимость архитектуры сервисов на бекенде и сложность дебага. кстати, микросервисы - grpc подталкивает к их использованию и это может быть болью ведь эту архитектуру на беке надо собрать и поддерживать так же болезненным может быть debug - здесь не кинешь url, чтобы понять, что сервак возвращает. кстати про rest - никаких больше дилер - post или put статический путь к вашему сервису (а лучше микросервису), а какими данными обмениваются - это решают модели. есть 4 «модели» общения -unary - почти как рест, запрос- ответ server streaming - при подключении сервер шлет вам данные client streaming - клиент шлет много сообщений biderectional - все шлют много сообщений. так же grpc полностью реализует возможности http 20 - тут тебе и один постоянный коннект и мультиплексирование, а в довесок еще возможность двухстороннего общения помним про сжатые хедеры!. удобно - везде одинаковый код, да еще сгенерированный! мне дико не хватает этого в rest. гугл его сюда тоже затащили, для эффективности чтобы работать с данными описать в proto файлах модельки, пошарить их между участниками общения а уже из них сгенерятся модели, с которыми вы будете работать и сериализация для эффективной упаковки. вы точно слышали про protobuf это бинарный протокол, который эффективно пакует данные в байтики и передаёт по сети не читаем человеком твиттер говорит что переход из xml на протобаф уменьшить размер в 10 раз. rpc - термин старый на русском это удаленный вызов процедур идея - вы как бы обращаетесь к локальным функциям, а они под капотом бегут на удаленный сервер и приносят данные абстрагируемся крч гугл добавил сюда букву g, protobuf и возможности http 20. grpc у меня нет опыта в продакшене но попробую сгруппировать что слышал, видел, знаю итак, это технология гугла, http 20 с плюшками новый стандарт, как обычно) что же там такого нового и интересного?. начинай утро с падающего xcode. кстати, раз затронули centrifugo - пример pubsub концепции это уже не общение 1 на 1, а общение в рамках канала, комнаты вам все равно сколько клиентов в комнате (если не наложено ограничение), вы рассылаете всем клиенты могут быть подписаны на много комнат групповой чат крч. бек выполнял логику, отдавал сообщение centrifugo и рассылка шла сейчас добавили возможность слать специальное сообщение на centrifugo, которое проксируется на бек и дальше по сценарию но я вас заверяю - в связке rest+websocket нет ничего ужасного. но поскольку он отдельный сервис - на ваш сервер и бизнес логику ему с далекой колокольни получает сообщение и рассылает а вам же нужно и сообщение проверить и в базу сохранить до определённой версии единственным способом было отправлять рест запросы на сервер. есть ситуации где даже обязательно допустим в manychat мы используем centrifugo это отдельный сервис для рассылки на go, супер производителен, прекрасно масштабируется, работает с redis за все годы никогда не ломался включил и работает, прямо мечта. вопрос от - нормально ли использовать сокет только для обновлений от бека? кратко - да это не эффективно, но не нужно быть рабом эффективности и технологий если есть огромный restapi и нужно обратная связь - внедряйте но возможно вам и pollingа хватит. я встречал еще позицию что так легче обрабатывать и парить ошибки) да что и говорить, на моем проекте исторически есть код 200 и ошибки внутри. ставь лайк если чувствуешь себя так же. теоретически быть проблемы с firewall’ами, которые не дают долго держать открытым соединение не сталкивался и не копал в эту сторону пока. хороший вопрос, отвечу отдельным мини тредом 🤝. ссорян, я попробовал по фамилии поискать и не нашёл 😩 кто ж знал что он 2 в 8-ой?). ору ссорян, саш я все ещё пытаюсь найти чувство юмора как только так сразу верну старый добрый андерхуд. скорее она тратиться на постоянный ping и pong я не могу привести четкую метрику, но если в пустом проекте открыть socket - то энергозатратный перейдут из low в height померить это на ios достаточно сложно. всем рекомендую ознакомиться с спецификацией, она максимально проста. ух, кажется gprc тред с ptofobuff буду доводить до ума завтра 💀надеюсь вы не залудите особенности сокета и http 11, здесь есть что сравнить. есть ли у вас альтернатива? да, есть http 20 и gprc это достойно отдельного треда и сравнения. при готов рест апи вы можете использовать сокет для входящих сообщений на клиенте неэффективно, но быстро. пардон, лита называется starscream 2 пива - и уже гружу картинки вместо сообщений с сокета. плохо ли это? на самом деле нет вебсокет очень быстро заводится буквально за час есть библиотеки которые реализуют стандарт - на ios kingfisher или networking c 13+ есть коробочное решение, где решены большинство проблем выше. вам придется отключать сокет при сворачивании и подгружать историю при разворачивании и батарейка будет тратиться за каждую секунд открытого коннекта. с баттерейкой все неоднозначно есть много тредов про то, что websocket жрет батарейку, но четких доказательств нет одно точно - если вы свернете приложение с открытом сокетом - система его быстро убьет потмоу что многовато потребление. во вторых, переподключившись вы скорей всего пропустите часть сообщений где их взять? на уровне протокола ответа нет опять же - ваш бек реализует сам логику скорей всего вы отправите id или timestamp последнего сообщения, а вам пачками буду досылать пропушенное. желательно с рандомным интервалом если у вас упадет бек и миллионы клиентов будут раз в 15 секунд пытаться подключаться - бекеры вам спасибо не скажут. с переподклчюенеим чуть хуже во-первых при нестабильном интернете или поломке сервера оно будет не сразу вам скорей всего придется завести watchdog или по просту таймер, который будет пытаться подключиться. успешность логики в http мы привыкли получать 200 здесь такого нет к сожалению, ack надо придумывать самим из идей - на клиенте генерит clientid, отправляете с ним сообщение и пока вам сервер не пришлет сообщение с этим clientid - считаете что оно не доставлено. нет жестких правил по тайминг либо обычно использует 20-30 секунд между ping, и 10-15 timeout. поэтому канал надо проверять для этого есть ping и pong это игра, в которую ваши дизайнеры играли на обеде в офисе один шлет ping другой обязан ответить в таймаут pong нет ответа? разрываем коннект, скорей всего абонента мы потеряли. как мы помним общение между сервером и клиентом идет не напрямую есть прокси при открытом соедини один из прокси может отвалится и не сообщить об этом мы будем слать в пустоту и не получать ответа как моряк который кидает бутылку с посланием за борт и ждет спасения так себе. и это все что делает вебсокет поэтому бывает больно потому что вам придется заботиться о:- стабильности коннекта- гарантии успешности бизнес логики- переподключени и истории- батарейки. subprotocol - это дом условия к общению новые типы сообщения, ограничения все как любят бдсм программисты фиксируется на рукопожатии, может быть только одним. extension - это те же преобразования к сообщения при отправке и получение например, у вебсокета нет сжатия на уровне протокола но есть расширение, которое можно добавить. типов сообщений немного:- строки- бинарные данные- ping и pong (о них позже)- сигнал о закрытии (тут есть коды для понимания почему закрылось соединении). помните страшный хедеры http 11 по 500 байт? хедер сокета весит 2-10 байт, в зависимости от размера сообщения в 10-ки раз меньше и экономичнее особенно заметно при часто общении до http 20 c кешами. фрейм вебсокета минималистичен индикатор конце сообщения, типа сообщения, маскирования и длины подробнее глянуть здесь, пригодится для общего развития из интересного - для ws, небозопасной версии протокола обаятельно маскирование длина есть обычная и extended до 65к. концепция сообщений проста если tcp просто передает поочередно данные, то сокет делит сообщение на фреймы и доставляет он знает сколько весит сообщение и если один фрейм потерялся -сообщения считается недоставленным. а дальше обмен сообщения через сокеты websocket работает на application уровне поверх tcp, забирая все бонусы добавляет только 5 вещей:- концепция сообщений- свой фрейм с хедерами- несколько типов сообщений- extension - subprotocols. сначала нужно пожать руку, потом общаться все как в жизни рукопожатие (1 этап) происходит через http все формализовано - клиент шлет особый запрос с рандомным числом сервер прибавляет к нему константу и возвращает набор полей договариваются о подпротоколах и расширенных. а еще оставалась проблема с кучей хедеров поэтому решили - время нового протокола, с чистого листа договорились, разработали и выпустил тот самый websocketего работу можно разделить на 2 этапа. long polling умнее это как рыбалка закидываете удочку и ждете сервак вам не отвечает пока не изменятся данные или таймаут не наступит тогда вы снова закидываете запрос и ждете эффективней, но может нагружать сервак нужно уметь варить. polling - это тупо переодические запросы вроде «мы приехали?» - нет и через три секунд: «а сейчас?» это polling вешаем таймер на клиенте и дергаем сервак. родился вебсокет примерно в 2008 году тогда был http 11 и было непросто держать коннект а уж отправить с бека сообщение…все решал клиент было только несколько костылей - polling и long-polling. итак, вебскоет это про двусторонние общение на равных да еще и в одном соединении так же как http 11 позволяет гонять строки и позволяет гонять байтики причем байтиков значительно меньше! давай разберемся, как это работает но сначала проговорим зачем. websocket - убер технология, которая поддерживает равноправие, что очень важно в современном мире да, соединение иницирует клиент, но в остальном они равны го в тред обсудим. после websocketа, постараюсь сегодня успеть. есть такое, это конкретно 3-я версия, вы правы. пытаюсь добавить юмор в твиттер 😃. разберемся ближе к вечеру). websocket поялся на версии 11, как раз с попыткой решить проблему оверхеда и поддержки коннекта) с http 20 и gprc он стал не таким очевидным решением для двустороннего обмена данными. ребрендинг http на btp :). книгу может любой) а вот расшифровать все в твиттах - не каждый я вот с трудом умудряюсь уместить все что в голове, а еще не факт, что я все знаю так что мой посыл был - читайте книги и все будете знать. у меня есть ощущение что 3 версия идет куда-то не тудас точки зрения 20 версии мне все нравится все таки это про эффективность доставки, а не удобность чтения текста. классный совет! книжка всегда лучше, у меня сил и возможно знаний не хватит столько инфо пошарить). вечером вернусь с websocketом, есть подозрение что вы его и ждали). научился писать мысли до 255 символов в заметках спасибо твиттер. если у вас возник вопрос кто эти ваши приватный и публичный ключ? - статейка в тему ключи кстати есть в сертификатах для подписи ios приложений насчет android не на 100% уверен. сервер получает ответ и расшифровывает приватным ключом теперь оба могут шифровать данные, а всякие man-in-the-middle пр&amp;^бали мид. при первом запросе сервер дает сертификат и публичный ключ клиент его проверяют договариваются об алгоритме шифрования обычно используется симметричный ключ клиент генерит свой рандомный ключи шифрует его публичным ключом полученным от сервера. на сервер добавляют сертификат он должен быть подписан сертифицированный бюро, гарантирующим его валидность считай что паспорт он содержит всякую инфу, публичный ключ и приватный ключ. есть так же безопасная версия протокола - https это расширение, добавляющее шифрование напомню, что данные по сети передаются не напрямую, а прокси и до этого они с любопытством читали сообщения ваших клиентов не порядок! те же apple запретили доступ к незащищенным ресурсам. уже растет https 30, который кстати планирует использовать udp вместо tcp теперь клиенты могут поменять ip, не потеряв коннект интересно? вот большая обзорная статья возможно это будущее ближайших лет. итого http 20 сильно прокачал эффективность общения по сети если вы еще на 11 - намекните бекам о том, что возможно пора для особых любителей прикладываю спецификацию. прокачали keep live - теперь коннект можно держать почти бесконечно плюс дали серверу возможность обратиться к клиенту по открытому коннекту, что начало менять парадигму клиент сервер и дало толчок к появление gprc, кстати). мультиплексирования - до этого запросы отправлялись по очереди теперь же появилась возможность слать параллельно, что дало заметный буст к проиводительности. http 20 стал бинарным да-да, изначально текстовый протокол, про документы стал бинарным читается хуже, зато весит меньше засчет эффективного сжатия, меньше нагрузки на всех этапах. но мы все еще таскали кучу хедеров http 20 делает шаг дальше первое - хедеры сжимаются и кешируются сервер формирует таблицу хедеров и клиент уже не шлет весь хедер - он может ссылаться на таблицу полезно для всякий user agent. в версии 11 начали решать проблему частого открытия коннектов ввели header keep live, который управляет жизнью tcp соединения и держит его открытым обычно сервер держит такой коннект 15 минут, но можно и больше появился обязательный header host для виртуального хостинга. да и подумаете - мы таскаем кучу однообразных хедеров в каждом запросе не оптимальненько, инженер-оптимизатор внутри бьется в конвульсиях. вообще да изначально первые версии http на каждое соединение открывали новый коннект что достаточно дорого, так как есть куча ack и необходимость заново выделять ресурсы а размер сообщения замедлял передачу, опять же трата ресурсов на размер. возвращаемся к запросу простейший запрос будет весить 26 байтов но если мы добавим любимые authorization, user-agent, длинный путь до нашего ресурса - то легко дойдем и до 500 много это?. в ответ сервер вам пришлет ответ в нем обязательно код коды делятся по классам1хх - информационный2хх - все хорошо3хх - нужно сделать еще запрос4хх - клиент не прав5хх - серверу бо-боэто удобно, но почему то часто делают статус 200, а внутри тело с ошибкой загадка. если мы поменяем на post, то появится body между header’ами и body будет пустая строка, чтобы абонент мог однозначно их различить. простейший http запрос для версии 11 будем выглядеть так host - обязательный, метод, версия, наш урлget / http/11crlfhost:xcrlfcrlf. а еще можно делать свои:) традиционно к ним добавляют суффикс x- чтобы отличать от системных. есть authorization, где принято носить beaoken а так же cockies, который привычно использовать на веб сайтах для идентификации user-agent, этакий «от кого»keep-alive - для поддержки конекта открытымесли вы вдруг решите всех посмотреть. c header’ами все интереней их прямо дофига и часто мы о них не задумаемся например, как сервер поймет, что мы полностью передали body запроса?есть специальный header для этого - content-lenght content-type, который пояснит, чье body мы привезл. для get мы обычно отправляем данные в url, так называем query параметры  post данные кладем в body с put аналогичноhead - нет тела запроса и нет тела ответа, только статусы полезно проверить, если новые данные. методы есть целая пачка методов из которых популярность пользуются два:get - про получить ресурс и post - отправить данные еще иногда встречаю put для загрузки объекта и head для проверки на наличие измененийполный список:. - работает над tcp - есть гарантии доставки- несколько версий- работке по принципу запрос - ответ инициатор - клиент - есть методы, хедеры и тело запроса- сервер обязан прислать вам код состояния (от 1хх до 5хх)- передает строковые и бинарные. http, почти все сетевые приложения держаться на этом ките что о нем стоит знать?. черт, забыл резюме 😃 при работе с tcp/ip стеком ваши данные проходят с 1 уровня по 4-вы, бегут к абоненту проходят инвертированную дорогу - с 4 по 1 и они в вашем приложении если вы не инженер сетей - скорей всего вам достаточно разбираться в 1 уровне. если есть какие-то вопросы - смело задавайте, обсудим тема широкая и освещать каждый аспект без запроса не чувствую необходимым. пр&amp;#ал ветку с твиттами про http из-за лага 💩 востановлю нервы и выйду обратно на связь теперь опытный, пишу твиты в заметках. 1 - application layer высшая абстракция именно этот слой использует для разработки приложения в сети здесь существует целый ряд протоколов, которые мы можем использовать http, ftp, websocket и тд о них мы уже поговорим отдельно, не переключайтесь!. когда мы говорим про сокет мы обычно имеет в виду комбинацию ip:порта - то есть места, где крутится ваше приложение сокет = ip адресс:порт запомним!. тут бы пора переходить к 1-ому, applicationlayer, но есть одна деталь ваш 4-ый уровень не работает с 3-им напрямую есть специальный api - сокеты, простой интерфейс для создания сетевых приложений, опирается на операционную систему. хотя возможно для udp не все потеряно интересная статья на эту тему. про твич. udp - парень поскромнее, не любит все эти формальности есть контрольная сумма из новый полей в пакетах и…все гарантий нет, зато легковесно как пример использования приводят стриминг видео, но тот же twitch использует надстройку на http, который опирается на tcp. ack (aknowledgment) - сообщение подтверждение при доставке вот вам картинка с закрытием tcp - соединения чтобы убедиться, что мы договорились о закрытии - делается обмен 3 сообщениями!. tcp - гарантирует вам доставку, последовательность, информацию в случае ошибки доставки, даже перезапрос данных просто красавчик! добивается он это еще пачкой дополнительных системных хедеров к каждому пакету, а так же ack на каждый чих). 2 - host-to-host layer уже ближе к нам) отвечают за доставку и правильную последовательность данных, а так же какому приложению (для этого используют порты) тут есть два известных протокола tcp и udp. кстати, если вы вдруг не знали есть два протокола ipv4 и ipv6 разница в размере адреса - в 4 версии это 32 бита, а в 6 это уже 128 больше числе - больше адресов, меньше проблем а на случай если вы забыли как связаны адреса и dns. кстати, все еще не дает вам гарантию, что пакеты долетят до абонента. 3 - internet layer абстракция над физическим уровнем, отвечает за передачу пакетов между сетями здесь используются ip протокол ip адрес - способ идентификации абонента в сети ip обогащает пакеты своими хедерами - длина пакета, используемый транспортный протокол и тд. когда провайдер просит вас проверить включен ли роутер - они просят проверять 4-ых уровень. начнем с 4-го уровня это про работу физического уровня, как байтики в превращаются в набор электрических сигналов и бегают по проводам от одного устройства к другому, а затем превращаются обратно в байтики чуть подробнее. tcp/ip уже ближе к нам, почти все наши протоколы общения с беком работают не нем связывает устройства, передает данные пакетами и тут всего 4 уровня, через которые должны пройти данные! на каждом может использоваться свой набор протоколов давайте пробежимся по ним. немного про osi для любителей истории. что стоит знать о osi? модель, разбивающая общение в сети на 7 уровней разрабатывалась технобюрократами и проиграла более простому и дешевому tcp/ip если вы не планируете разрабатывать сети с 0 - знать о ней не обязательно про физическую реализацию где бы ни было не слышал. тред: osi, tcp/ip и как данные ходят по сети для любознательных, желающих освежить в памяти теорию из универа или расширить кругозор поехали. каюсь, был слеп. основная ценность – научиться интегрировать кроссплатформу в существующий натив профит в том, что можешь написать самостоятельно фичу на обе платформы и продать это лиду/po все хлопают в ладошки, ты просишь x2. чуть гибче - можно подрубить к другим компонентам и сделать реализацию самому есть ещё несколько протоколов для добавления картинок с похожим синтаксисом, делает добавление функционала чуть единообразным но через extension к uibutton тоже отлично будет работать. слышал много пожеланий поговорить про архитектуру мессенджера поскольку у нас аджаил и коммьюнити дривен - меняем план) говорить сегодня будем о сетях: https, websocket, gprc 😃 они нам пригодятся, чтобы спланировать завтра архитектуру stay tuned. добавили к парк наследников uibutton и uiimage alwaystemplate перекрашивает добавленные картинки в tintcolor сделали чтобы не забывать. autoinit нужен, чтобы легко дополнять объекты свойствами и не переписывать unit’ы, если у вас от этого болит). runtime - кентавр если вы работает с obj-c - полезно знать, как внутри формируется пул методов, почему возникнет ошибка unrecognized selector, как работают категории и свизлинг обычно этот вопрос обсуждаем только с кандидатами из obj-c в целом не вредно знать, как все работает. возможно гит форматер починит по моим воспоминания в энтерпрайзе - крутая скобочка реально триггерит 😃 слишком выделяется на общем фоне. возможно в моем тексте много связанности вышло 😃 действительно, паттерны решают несколько проблем, и ответственность - не главная из них спасибо за фидбек. чтобы вам хотелось видеть для повышения градуса хардкора?. статья почему однообразный кодстайл полезен. в энтерпрайзе много разработчиков разного уровня, разных взглядов есть опасность не договориться и превратить код в зоопарк поэтому там часто идут на ограничения в пользу единообразия код становится воспринимать легче в том числе из за одинаковых скобочек. будут даже уникальные кроссплатформы вроде gomobile а в конце проверим на прочность все эти решения, разберем корнер кейсы, не пощадим никого!. к счастью, еще есть шанс разобраться в этом году скоро стартует про flutter, kmm и rn (да, он жив) узнаете о тех сложностях, как подготовить команду, как продать или не продать технологию раздам промокоды на небольшую скидку за ретвит. давайте заканчивать с этими классами на самом деле есть только точный способ писать меньше кода в мобильных приложениях - это писать его кроссплатформенно но с этим кроссплатформенными технологиями вечно все непонятно, одни появляются, другие уже хоронят что там, вне натива?. обозначаем приватные методы) в исходном коде свифт тоже так делают, читать чуть удобнее. идут против течения). постараюсь сделать тест проект ближе к ночи. я тебя понимаю 🤝. init создаться за вас при компиляции для каких методов после init есть setup добавление новых зависимостей в объект стало проще вы прекрасны, а код - может быть. не нужны свойства прячем в // sourcery:inline:auto:skipautoinitiable****// sourcery:end. реализуем его в нужном классе помечаем место где будет init//sourcery:inline:auto:nameautoinitiable// sourcery:end. написал простенький шаблон по использованию - затаскиваем sourcery, тащим мой шаблон в проект создаем пустой протокол autoinitable в проекте public protocol autoinitiable {func setup()}extension autoinitiable {func setup() { }}. при большом количестве объектов может начать болеть init вы будете каждый раз добавлять проперти к классу, добавлять в инит, проставлять значение в xcode есть генератор инита, но он мне не заходит поэтому недавно я вспомнил про sourcery. область видимость в swift очень болезненна, желательно не засорять общее пространство одноразовыми функциями по возможности свои extension над базовыми функциями стоит утащить в отдельную библиотеку, чтобы их подключение было опять же прозрачным для окружающий. иногда по смыслу хочется добавить к объекту функцию допустим, у вас есть массив объектов типа foo и вы хотите добавить ему новую функцию для красоты бизнес логики мы так делом, но это расширения обязательно рядом с классом и приватное примерно так. я стараюсь делать протоколы не сложнее такого показывает моя практика - можно сделать очень наборы протоколов, но вашей команде с ними работать будет достаточно сложно так как глядя на объект вы потеряете прозрачность. у меня нет четкого ответа наверное если вы можете сделать объект - не тащите протокол во имя прозрачности протоколы стоит делать маленькими и избегать сложных комбинаций, когда 3 протокола собираются в офигенный трансформер без необходимости что-то реализовывать. ему будет сложно понять, что на самом деле происходит хотя вы вроде просто расширили класс набором протоколов, причем нескольких с дефолтной реализацией так можно сделать маленький класс с десятком протоколов, которые будет при компиляции перерождаться в godobject что делать?. ваш коллега открывает пр и видит например такую картину - есть объект, реализует два протоколаи без дела болтается свойство все. возвращаемся к делу сейчас будем говорить про swift, хотя kotlin это тоже косвенно касается наши протоколы уже не те простенькие интерфейсы из obj-c нам доступны расширения, причём с дженериками это очень удобно, круто и вносит путаницу далее к пример. так появился messenger от facebook). зависит от самих классов если в одном классе целых ворох объектов - возможно он делает слишком много). кажется это затроллено. интересная метрика удается сохранить читаемость?. не совсем вот тут есть про различия. 131 расшифрую частично про d d - это dependency inversion, ваш верхний уровень не зависит от нижнего и полагается на абстракции не путать c di, это про передачу зависимостей. с d тоже справедливый комментарий, d - это про отсутствие зависимости верхнего и нижнего уровня, одного init здесь будет не достаточно приношу свои изменения). плюсану, абстракции по созданию моков могут быть болезненны приятней читать функцию в которой все что нужно создано и протестировано. действительно, к s не имеют прямого отношения паттерны и мои рассуждения, к s - это абстрактный совет это мой способ соблюдать ответственность и делить ее между объектами). я отключил для тестов у меня не взлетает, так как создание моков требует места в каждой функции есть тест класс на 500 строчек кода, который тестит логику класса на 200 логика показа asktorate много разных кейсов с датами. супер, как раз где-то ниже тред был дельный 😜. интересное мнение чтобы вы посоветовали использовать из языков?. интересно, можете рассказать по подробнее?. последний на сегодня опрос - избегайте ли вы -er в названиях классов? статья с тезисам:. полностью согласен с. пока пауза, чуть позже дополню мыслями про extension и общими выводами. 21 работа через фантомные типы добавляет вам ограничений, а они защищают вас от ошибок вы не сможете передать рандомную строку как id, или по ошибке передать не то значение enuma комплиятор вас защитит. 20 в тему я точно помню что был на двух докладах, но не могу найти видео( возможно кто-то сможет поделиться ссылками?. 19 про конкретность классов мне нравится идея фантомных типов мы избегаем работать с абстрактными примитивами - string, init вместо этого мы вводим конкретные классы которые несут смысл для id вводим класс identifier работаем с ограниченными enumами, а не строкамми/числами. 18 про гибкость я считаю, что должна быть некая скелетная архитектура с основными инструментами - сеть, база, пуши, кеш архитектура фичи должна быть под задачу - для простого экрана mvc, для сложного - хоть cleanswift главное скрыть все протоколами и разбить при ожирении. 17 хорошо закрывать все взаимодействия между классами интерфейсами и тестировать удобно и подменить один объект на целую команд просто кстати, количество тестов может быть тоже метрикой сложности объекта. 16 как справедливо заметил ссылаясь на егора бугаенко - поставь себя на место объекта вряд ли тебе понравилось бы тащить кучу отвественности и сто дел без помощников ps с меня ретвит за шикарную подачу. 15 так же статические функции рушат ответственность нет ответственного создание объекта вынуждает вас подумать - а на хрена он мне здесь? это может помочь пересмотреть архитектуру. 14 статистические функции - зло да, это удобно удобно связать неявной зависимость объект с чем-то, что ему не принадлежит) вам будет казаться, что все ок потом вы решите перенести свой объект в отдельную библиотеку и узнаете, что нужно захватить пол проекта). 13 важно делать зависимости объекта прозрачными, частично это про d для этого есть init все зависимости - через него избегаем дефолтных значений кроме примитивов тогда ваш коллега зайдя к вам в класс сразу поймет, что влияет на объект а вы легко заметите 12 переменных. 12 как справедливо заметил solid - сложная метрика достаточно легко поставить ограничение строк если что-то вылезло за условные 300 строк - скорей всего что-то не так главное не обманывать себя через extensionы это тоже рост объекта не всегда ограничения панацея. 11 на мой взгляд важно не упороться в структуру классов - вы все равно все не предусмотрите архитектурой нужна гибкость! а так же понимание, когда же пора включать режим хирурга и превращать класс в два классика. 10 ведь в какой-то момент и этого будет маловы начнете придумывать свои manager, aggregator, datasourceи в какой-то момент можете впасть в депрессию и спросить себя: нахрена я это делаю?! был же один классный viewcontroller/activity. 9 тут скорей всего вы на уровне команды начнете вводить дополнительные паттерны repository - для работы с базой service - запросы в сеть animator - для сложной анимации возможно даже usecase - для выполнение бизнес задачи есть шанс на этом этапе начать путаться ведь. 8 вернемся к теме за паттернами подтянулись архитектуры - mvc, mvp, mvvm, viper то же про ответственность распределённую по классам к сожалению, если экран сложный - ваш interactor или viewmodel все равно наберут массу, начнут пахнуть чрезмерной отвественностью. 7 задача для любознательных - поискать в базовых фреймворка вашей платформы паттерны поверьте, если приглядеться, вы найдёте все возможные комбинации. 6 подобная история с фасадом и декоратором фасад - вы прячете сложность например, общаетесь с imageprovider за картинкой она может и из кеша прийти и из сети знать об этом не надо а декоратор - обертка для расширения функционала. 5 паттерны вроде у всех слуху, но регулярно замечаю, как люди называют фабрику builder, ну потому что он же билдит мне объект все таки builder - это про поэтапное создание объекта несколькими методами а фабрика вам готовый объект дает. 4 как же жить с s? хорошим ходом будет договориться о вариантах сущностях, их ответственностью одним из первых попыток были паттерны есть общепризнанные дизайн паттерны, напомню вам о хорошем сайте легко освежить мысли. 3 критерий размыт и зависит от конкретного разработчика, вызывает споры есть более жесткое определение - у класса должна быть только одна причина для изменений и опять же - это сложно померить, зависит от человека помогает отсечь совсем стремные классы. 2 кандидаты обычно отвечают s - одна ответственность далее идет вопрос - кто определяет эту ответственность? приходим к тому, что разработчик и здесь кроется ловушка filemanager с ответственностью управлять файловой системой с миллионом строчек кода может быть валиден. 11 ps далее будет философия, альтернативные мнения привествуется обсудим буквально пару букв начнем мы с s ее спрашивают на каждом интервью. 1 опрос показывает - solid популярен это мантра, святой грааль, который должен защитить от бедствий в виде рефакторинга, сломавшейся под дождем фичей архитектуры сделать код понятным, структурированным так ли это? достаточно ли его одного? давай обсудим. без подробностей работы сложно оценить насколько решение стабильно) вполне возможны косяки с состоянии, если несколько компонентов будут работать с менеджерами. справедливое замечании, разговор был про классы). постараюсь что нибудь накидать, чтобы не было коня в вакууме. возможно я с лукавил и надо оценить контекст фичи я бы конечно предпочел 6 классов но только если это не что-то с большими планами на развитие. я просто оставлю это здесь ). интересный показатель а что для вас слишком много тестов? как это определяете!. фичу до пр доведу я понял, почему многие докладчики брали отпуск под твиттер. да, когда вопрос встаёт 27 классов по солид или 6 с нарушениямии это не собес! выбор очевиден. кстати, в определённой момент жизни ты понимаешь, что не так уж плохо один объект аккуратно просунуть в две разные сущности например, какой-то локальный кеш) разумеется не рассказывай остальным сущностям, что это singleton. обсудим сегодня). ох, как раз эту тему буду затрагивать😃 ты красавчик, уже часть осветил за меня!. плюсану, по опыту junior‘ам сложно создавать осознанно объекты, а middle - оперировать большими каскадами объектов. у тебя была классная неделя. если бы) я даже не знаю, как померить в конце недели, что бренд прокачался 😥. сегодня будем говорить про объекты давайте для старта соберем статистику - когда вы решаете создать новый объект/разбить старый на несколько?. насчет коней не понял)все еще есть много кандидатов, которые работали в obj-c круто, когда человек в этом разобрался сам по себе runtime лишь косвенно используется (например, coredata). спасибо, сохранил на память). да капец, иногда себя слушаешь - сплошные англицизмы. точно, в тот раз мы победили) даже фотка где то была. ребята, я на сегодня все 😨 оказывается вести твиттер - посложнее чем некоторые фичи пилить постараюсь завтра нагенерить побольше классного контента обратная связь приветствуется! всем ночи 🌙. да, последний совет - пейте ночью колу реально бодрит. - можете затестить или сохранить до момента прогулки по музеям). к сожалению, мы заняли только 2 место, расстроились и забили через год начали думать ещё об одной попытке и тут выяснилось что пару месяцев вышло прекрасное приложение aifact, которое уже делает нужное, и даже больше я ни в чем их не обвиняю - свято место пусть не бывает. как раз тогда в моде была песня ленинград «экспонат», это был частично вдохновитель проекта - питер, музеи + ar поэтому мы на презентации разыграли даже сценку были отзывчивые организаторы, поэтому когда команда пришла к ним и попросила «блондинку для выступления» - помогли. ещё не стоит забрасывать проекты, которые вас прут на питерском хакотоне мы выступили с идеей приложения с ar наводишь на картину - на ней отображаются точки интереса, можно нажать и прочитать про интересующий элемент нас нереально вкатила идея мы были уверены в победе. ещё хакотон - неплохой способ тимбилдинга на одной из работ нам удалось выбить поездку на хакатон в петербурге ночь мы разумеется не кодили) а по этой команде я скучаю, было нереально классно некоторые компании организуют хакотоны внутрь, но это бывает не так круто. мы например так с поработали над интересными проектами правда без ракеты:(. выбираем интересный себе продукт, желательно до старта познакомиться с командой есть шанс что вы ещё несколько месяцев будете тащить своё детище до релиза а вдруг дальше 🚀?. стараться выбирать проекты с новыми для себя технологиями ведь часто мы хотим что изучить, добавляем в закладки и откладываем, откладываем а здесь - чёткое окно в 24, не отвертеться. про хакотоны мне кажется это классный способ роста, когда ты на уровне junior+/middle я довольно много участвовал, почти никогда не выигрывал но получал море удовольствие главное следовать правилам. хорошая идея, постараюсь впихнуть в один из дней 🤝. мощно. передал. приятно, что помог:). о май гад, кажется это было так давно и возможно он работал быстрее чем мой мак 😃. для удобства я сделал диаграмму предлагаю кандидату вычеркнуть то, в чем он точно не разбирается и сосредотачиваемся на сильных сторонах плюс легче после восстановить - о чем говорили после). когда я дошёл до проведения собесов, я вывел для себя критерии качества:- должно быть интересно кандидату - мы говорим о тех вещах, что кандидат знает и о тех, что нужны нам - без коней в вакуме, сортировок и деревьев- обязательно пописать немного кода в playground. как только получил офер - принял, не раздумывая с тех пор я очень внимательно смотрю на тех, кто и как собеседует вам должно быть интересно, собес - это про узнать, что он реально знает и показать слабые стороны не показать крутость собеседующего. я ушёл со новыми знаниями, а так же с пониманием своих дыр осознанием, что с этим человеком будет интересно и продуктивно работать и далеко не все мои дыры легко было загуглить. после череды тухлых собесов я дошёл до одного из лучших собесов в жизни во-первых, вопросы были не из гугла во-вторых, меня реально слушали, даже если я нес чушь, накидывали кейсы - «а что если?» пару нюансов системы мы разобрали вместе. нужны были деньги, работа, сразу же согласился мне повезло и попалось пара адекватных коллег, с кем можно было расти и развиваться я слышал кейсы, когда было гораздо хуже хотя у меня тоже не идеально все было - аутсорс в банке через 7 месяцев я пошёл дальше, сделав выводы. я этого не знал первый собес после череды стартапов со мной проводил js-ер ему была интересна мобилка, он загуглил какие-то вопросы и старательно пытался выбить чёткий ответ как на экзамене я быстро просек, что чувак не в теме, рассказал то, что он не знал, и получил офер. мини тред про собесы я верю что собеседующие - лицо компании как бы мне не нравился продукт - работать придётся с людьми, с командой если вас пушат, не обращают внимание на ваше мнение, не дают пояснений или не разбираются в вашей областибегите!. насколько я помню бекендеру понравилось внутрення среда, продал нам под соусом легче разрабатыватьопять про неопытность команды. он остался висеть на том проекте, мы на него не заходили до кошелька счет так и не дошел мы предполагали что между ними была синхронизация, которую мы сломали, когда все отключали. звучит лампово возможно у вас был добрый наставник и более гладких старт?. из напуствий:- выставляете везде лимиты, где платите) выйти за квоту можно легко- круто разбираться в смежной области мне это дало толчок написать проект на java в роли сервера, поработать с базами это не только вам для кругозора, но и для комфортной работы с коллегами. молча выпиливаем фичу, заливаем этот же сервак на новый инстанс оформленный на новое имя привязываем виртуальную карту, выставляем все возможные лимиты - живем дальше. вежливо общаемся с ребятами из индии они смотрят логи кошелька и не видят суммы мы смотрим на проект, на котором висит 56к бекенд говорит - вот что бывает, когда пилишь микросервисы доводим переписку с саппортом до стадии если вы считаете, что что-то должны нам - докажите. бежим в твиттер, жалуемся крупным айти инфлюенсерам все разводят руками оплачиваем счет на 4 бакса (мысленно ожидаем, что попытаюсь снять всю сумму, но снимают только 4) отвязываем карту пишем спешно в поддержку гугла: студенты, бла-бла, делали научную работу, х&amp;*к - 56к. каждый вызов был платен итого 56к баксов за сутки бекер спешно все вырубил, но карту от кошелька отвязать не смог на удивление на проекте красуется красивая цифра, а вот на кошельке пока вчерашний счет на 4 бакса (испытала уже закончилась). утром чекам мобилу пропущенные вызовы, куча сообщений разбираемся: новая фича тригернула запись в базу запись в базу тригернула нотификацию нотификациятригернула запись в базу круг замкнулся, гугл пустил все свои мощи на наяривавшие кругов каждую сотую секунды. далее, экспериментируем и делаем крупную сложную фичу например загрузку видео тестим утром, убеждаемся что ничего не работает к вечеру для интереса заглядываем на сервак видим огромное количество логов, пишутся кажую 0001 секунду пишем беку, не разбираемся спим. берем одного мобильщика, который мало понимает в беке, и бекендера, который работает с разницей в 10 часов депплоим бек на google app engine важно чтобы тарификация была за ресурсы разумеется берем бесплатный период обязательно привязываем чью-то карточку например мобильщика. личный стартап, маленькая команда 0 денег и светлое будущее впереди. про ошибки на старте каждый обязательно что-то учудит кто-то базу на проде почистит, кто-то краш фри в 0 загонит буду рад вашим откровениям я же начну - как задолжать гугл 5,6к долларов за ночь с зарплатой 0 рублей 0 копеек. согласен, аутсорс бывает очень жесток и травмирует юных разработчиков 😞. и напутствие - обязательно попробуйте довести проект с 0 до релиза вы совсем по другому прочувствуете процесс разработки, нежели в компании по найму и это сделает вас намного более ценным сотрудником. кстати, если идея слушать музыку вместе на разных устройствах вам интересно - spotify недавно выкатил похожую фичу работает через интернет, разумеется). короче, apple запретила приложения с передачей аудио/видео по блютуз и мы получили свой первый деклайн =/ мы 2 место из-за поддержки только 1 платформы приза хватило чтобы разбить копилку и купить себе мак а через неделю мне написали в лс приглашение в стартап. и она реально работало! вот уже сентябрь, время релиза и показа и тут apple опомнилось! ведь когда вы покупаете музыку - вы покупаете ее для личного прослушивания если вы вынесли любимую колонку во двор и включили любимую песню на всю мощь - теоретически вы нарушили закон. мы вдохновились, скрестили где-то 5 примеров из интернета написали свой музыкальный плеер у меня было тогда 7к песен, поэтому лента музыки грузилась 15 секунд асинхроность? на stackoverflow такого не было. к проекту внезапно нельзя было просто взять и подключиться к чужому телефону по блютузу да еще и музыку слушать =/ к счастью тем же летом apple выпускает multipeer connectivity, как раз для передачи файлов на нем хорошо стартанул firechat -. кстати, если кто в 2к20 пользуется хакинтошами - поделитесь опытом, интересно не хватает мощей. много любят маки за то, что их легко носить с собой я вас заверяю - если желание есть, то можно носить с собой и системник мы таскали их к другу другу в гости, чтобы прогать вместе а после этого люди жалуются, что 15 дюймовый макбук тяжеловат. прогать мы умели только под паскаль мы гуглили - под ios на нем не напишешь платформу мобильной разработки часто определяет телефон в твоем кармане в случае нас это были айфоны но не было маков! денег тоже не было, поэтому как-то накатили пиратку макоси на стационарки. собственно про сам проект у нас была безумная идея - подключаться к чужому телефону по блютуз и слушать музыку вместе мы классно ее пропитчили на конкурсе и нас взяли в участники пиши свой гениальный проект и тут возникли нюансы. я думаю все проходили этап stackoverflow-programming в первый год разработки мне казалось я любую задачу могу решить просто скрестив несколько кусков кода из разных ответов иногда мне и сейчас так кажется. разумеется, тогда мы это не знали и это было круто - у нас не было методологий, подходов, правил и соотвественно преград только цель и поиск пути ее достижения в основном через stackoverflow. вот небольшая статья про эту технологию, пролистайте, прежде чем использовать принципе, любое блютуз/wifi соединение это боль, страдание и еще раз боль:( мне кажется это одна из причин, почему биконы так и не взлетели. мой первый проект apple запретила еще до релиза multipeer connectivity, на котором основывалось приложение, оказался самым багованным фреймворком от apple🐞а со swift пришлось слезть, потому что beta и нет материалов и все это за 3 месяца:). интересная статистика кажется аутсорс наиболее предрасположен к найму новичков. если почувствую что не идет - сверну в сторону). плоскую землю обдумываю на субботу). как вы начинали свою карьеру?. план на неделю:- о пути в индустрию - мысли про объекты- оптимизация производительности себя и команды- продуктовый инженер- общение по сети: http, websocket, grpc- life vs work- * в проработке, открыт к предложениям *. всем привет! меня зовут александр и я новый автор недели😃 работаю тимлидом в стартапе manychat, 7 лет в айти, пишу под ios и под то, что горит до сих пор не постиг твиттер и его божественный ui, будем разбираться вместе. я пыталась избежать тему про алгоритмы но запрос есть запрос. совершенно неожиданно для меня тема про английский получила максимальный отклик я очень сомневалась и чуть не выбросила её из плана думаю, я подобью мысли на этот счёт и распишу подробнее где-то у себя если ещё не видели, то вот. буду заканчивать эту неделю, спасибо всем, кто комментил, лайкал, репостил! рабочая неделя и перелет конечно внесли свои коррективы в мои планы на твиттер, но если остались какие-то вопросы/предложения/пожелания - можно написать мне в телегу ibukhonova. уточню вот здесь всё верно, глагол tomar норм употребить про поездку на автобусе для того, чтобы не путаться, мне рекомендовали говорить tomar el colectivo, а отдельно глагол tomar без дополнения аккуратнее использовать а лучше всегда уточнять, что именно tomar. тут скорее проблема не алгоритмов как таковых, а собеседования на алгоритмы - это что-то среднее между егэ и лотереей. погуглила) теперь знаю, cracking the coding interview перевели как карьера программиста хотя этот перевод больше подошел бы к другой книге из этой серии cracking the tech career. это всё лишь малая часть и она направлена не на то, чтобы сделать эксперта по алгоритмам, а на тренировку извилины прохождения алгоритмического интервью. pramp - ещё один ресурс для подготовки по рекомендиции от twitter. вообще, когда начинаешь общаться с какой-то конторой, они сами присылают подборку материалов для подготовки к примеру, twitter в своих письмах с приглашением на интервью рекомендует (помимо leetcode и hackerrank). hackerrank ещё один топовый ресурс я пользовалась им меньше, чем leetcode некоторые конторы присылают собственные подборки задачек с hackerrank для подготовки. в этом году каждый месяц проходит leetcode challenge, где каждый день нужно решать какую-то задачку народ из каждого месяца часто объединяется в чаты и обсуждают там решения или задают вопросы и помогают друг другу на англ пробовала отлично. leetcode ну тут без комментариев мой личный фаворит есть подборки top interview questions по компаниям задачи разделены по темам и уровню сложности, почти ко всем есть есть решения. практика сейчас появилось очень много ресурсов для решения задач на алгоритмы, и их количесво постоянно растет. из теории 4 курса специализации по алгоритмам от stanford-а смотрела частично инструктор бодро рассказывает. не видела её на русском) но если готовиться к собесу в международную компанию - лучше сразу на английском читать. если готовиться на собеседование в международную контору - лучше на английском сразу читать, там довольно простой английский. оооо да, читала! спасибо, что напомнил про неё теперь почувствовала себя дедом. книга grokking algoritms подойдет начинающим простым языком, доступно, много иллюстраций. ещё из топ популярных ресурсов по подготовке grokking the coding interview. самое популярное (и настолько очевидное, что забыла первым пунктом поставить)- книжка cracking the сoding interview вряд ли кто её не знает с ней можно готовиться по плану, который гейл предлагает или в ускоренном режиме. они же на английском на coursera:. есть два неплохих курса на русском от computer science center кстати, это было самое первое, что я смотрела для подготовки. многие хвалят шад и  от яндекса сама не пробовала. теория канал от одного из инженеров гугла просто посмотрите главную страницу канала анимации бомба очень наглядная демонстрация работы алгоритмов и разбор структур данных темы разбиты по плейлистам на скорости x2. как готовиться: кому-то важно сначала разобраться с матчастью, кто-то теорию разбирает на ходу с практикой я пробовала и так, и так, результат примерно одинаковый если нет профильного образования или никогда не изучал теорию алгоритмов, лучше начать с именно теории. интересная статья от девушки, как она преодолевала проклятье алгоритмического собеседования. мне очень нравится история студента sean lee видео уже 5 лет, но оно очень крутое sean lee в этом году отдельно обновленную версию этого talk-a. где эти истории смотреть во-первых, блог на leetcode там люди делятся - сколько готовились, как, с какой попытки получилось, что попалось вчера на сосебе у такой-то конторы, какие цифры были в оффере. зачастую вопрос про алгоритмы подразумевает именно успешное прохождение собеседования в топтех если вопрос именно в этом, то рекомендую почитать истории тех, кто получил оффер в интернетах народ охотно делится своим опытом подготовки. про алгоритмы. всем доброе утро! сегодня день вопрос - ответ и был запрос сделать тред про алгоритмы добавляйте, если что-то ещё интересно. whiteboard для работы из дома подойдёт визуалам и проходящим интервью. для любителей авокадо 🥑 / пп авокадо ваза. для тех, кто хочет работать меньше, но лучше подойдёт всем, особенно любителям разбираться, что там under the hood + с заботой о здоровье highly recommend! днк-тест myneuro. rubber duckу всегда актуально. вариант для девушек coding crystals pins. на любителя не подойдёт для людей с тонкой душевной организацией. кавер на macbook, на котором можно составлять лего картинки не практично инстаграмабельно стримабельно. помидорко-таймер 🍅 просто, дёшево, со смыслом. для андроидщиков матрёшка из версий андроида я этого не видела нигде, но мечтаю такую заказать для себя. а теперь напишу, что ещё придумывала или получала я, что могло бы вас тоже натолкнуть на интересные мысли. да, понятно, его попросили поздравить, но это так много значило для меня, что я до сих пор могу ощущать те эмоции я всё это к чему ценный подарок != материальный подарок. и вот однажды, в день рождения, на рабочий имейл пришло письмо с поздравлением и личными пожеланиями от romain guy-я! меня чуть не разорвало это сложно описать для кого-то это ерунда, но эмоции во мне не умещались. он делал посты двух типов - android &amp; photography короче, комбинация, которую я люблю для меня он был человеком вдохновения и мотивации этакий remote soulmate. немного контекста когда я начала писать под андроид, статей и курсов было совсем немного, а те, что были, на вес золота мои фаворитом был блог romain guy-я. зайду с козырей и расскажу про свой лучший айтишный подарок, который получила 7 лет назад до сих пор ни один другой подарок ещё не переплюнул. топчик it подарков. то ли маленькая ваза, то ли пивной стакан без ручки пусть девочки-мальчики разберутся, в конце концов их работа - думать. флажок на подставке с логотипом компании а кому не нужен такой флажок?. массажное кресло в офис для команды удалёнщиков. носочки для настоящих альфа-самцов с 48+ размером ноги. портрет любимого pm-а в рамочке. эргономичная эко-ручка из туалетной бумаги. на совесть проклееный блокнот, который нужно разорвать пополам, чтобы что-то в него написать. значок я имя компании. корпоративная футболка, обтягивающая твоё пузико. и по традиции - ссылочки на соцсети twitter: fb:. бонусом рандомные факты за неделю :)5 дней подряд я начинала треды со слова “сегодня”;содержательный твит с наибольшим количеством лайков - твит со ссылками на ютьюбчик в этом аккаунте есть много начинающих специалистов;. неделя подошла к концу спасибо всем, кто читал, комментировал, лайкал и репостил мне было очень интересно провести эту неделю с вами, надеюсь, это взаимно. также не стоит ожидать, что курс будет длиться неделю, все же для погружения нужно больше времени а перед покупкой стоит проверить, нет ли бесплатных альтернатив, а если есть, чего в них не хватает по сравнению с платными вариантами. говоря о пользе курсов с точки зрения студентов, то я бы искала те, в которых есть доступ к преподавателям напрямую или активная команда поддержки, продуманные проекты по ходу курса и покрытие тем, которые требуются в вакансиях вашей мечты. в целом, считаю, что сама идея платных курсов это ок но вот то, как за маркетингом стало невозможно увидеть, что тебя реально ждет, немного смущает и сейчас киллер фича в рекламе курсов - это скорее честность, нежели идеализированная или преувеличенная картинка. когда преподаешь людям из индустрии, удается не только учить, но и немного учиться ведь у студентов уже есть много релевантого опыта в решениях домашек иногда можно найти интересные подходы и словить инсайты. в случае с новичками сложность заключаетсч в том, что бекграунд у людей очень разный кому-то объяснение понятно, кому-то нет, поэтому особенно много времени нужно уделить методике преподавания. мне удалось попробовать себя в преподавании начинающим аналитикам в курсе-буткемпе есть также и опыт преподавания студентам, которые уже работают на любимой работе, но хотят узнать больше про новые инструменты. в заключительный день расскажу про опыт преподавания на курсах и о том, на что стоит обращать внимание студентам при выборе курса. зависит от программы, стоило явно это прописать, согласна но еще стоит учесть, что оффлайн программа требует трат на жизнь в городе университета, что тоже важная часть расходов к этому твиту есть пример магистерских програм в georgia tech, там онлайн стоит намного дешевле. мфти + skolkovo. ссылки на магистратуры в россии, в которые реально поступить без профильного бакалавриата (список неполный, можно смело изучать сайты этих вузов и дальше)ниу вшэ спб вшэ мск. tl;dr:планируя совмещать работу с учебой, оцените свои силы и учебный план;найдите рабочий проект для диплома;присмотритесь к online магистратурам;не разочаровывайтесь в учебе, если знания нельзя сразу применить на работе;не забивайте совсем на оценки, вдруг захотите на phd;. также будет круто, если вы сможете связать какой-то проект на работе с вашим магистерским дипломом так можно убить сразу двух зайцев и принести много пользы. не стоит ожидать, что знания в магистратуре (особенно мультидисциплинарной как у меня) будут идти параллельно с задачами на работе не факт, что они будут полезны сиюминутно это осознание поможет не терять мотивацию и оставаться открытым к новым знаниям. сейчас российские (вышка, мфти), американские и европейские университеты активно открывают онлайн программы, которые стоят в разы дешевле их оффлайн копий, либо даже дают стипендии на обучение с наступившей пандемией онлайн образование постепенно становится нормой. из этого опыта я сделала вывод о том, то online магистратура - это лучшее, что можно сейчас найти для работающих профессионалов, а концепция long life learning - это уже не светлое будущее, а реальность. также стоит основательно взяться за time management для того, чтобы не пропускать дедлайны в доковидные времена мне это давалось особенно сложно, потому что часто не было возможности приехать на занятия сейчас с записями семинаров, вникать в происходящее намного проще. при выборе магистратуры, которую вы планируете совмещать с работой, важно обращать внимание на время занятий и важность участия в семинарах на моей программе human-computer interaction в вышке занятия проводятся вечером, а накопительные оценки можно получить за домашние работы. я столкнулась с необходимостью принимать решение о продолжении обучения, уже работая в индустрии и сейчас я бы посоветовала людям с full-time работой реалистично оценить свои силы и понять для чего вам нужен магистерский диплом. магистратура может играть систематизирующую роль, обобщая знания, добытые опытным путем из разных источников может также быть способом формально закрепить свой профессиональный статус вторая функция особенно важна зарубежом, где от аналитика ожидают профильное образование. итак, магистратура в моем понимании никому не помешает другое дело, что не всегда есть возможность ее получить, поэтому появляется выбор тратить силы на поступление и обучение или нет. сегодня поговорим об образовании для аналитиков обсудим, нужна ли магистратура, а если нужна, то какая и кому? также поделюсь своим опытом учебы в магистратуре и совмещении ее с работой. вполне, да :). теоретически, аналитику можно анализировать данные не онлайн, а собрать, например, данные в pandas табличку и исследовать их оффлайн так что не вся работа аналитика требует постоянного доступа к онлайн стриминговым данным, но это важная часть. и еще на сайте clickhouse есть описание. online analytical processing. смотрели на нее, интересная штука но пока не пробовали думаю, попробовать стоит, если сейчас стоите перед выбором bi системы. о месте аналитика в команде эффективнее сразу включать аналитика в работу над конкретным продуктом, нежели обращаться к одному аналитику с запросами по разным направлениям так аналитик имеет возможность погрузиться в исследование и на его основе предлагать дальнейшие идеи. еще полезная вещь - история a/b тестов ее можно автоматизировать или вести вручную в confluence оставлять краткое описание эксперимента и результаты это поможет не повторять каких-то ошибок в будущем, плюс на данных экспериментов можно обучать предсказательные модельки. и, конечно, важнейшим инструментом для принятия решений на основе данных являются эксперименты очень важно, чтобы в компании появилось правило не катить без ab теста, тогда риски что-то сломать снижаются в разы. также для принятия решений на основе данных нужен удобный инструмент визуализации мы используем open source bi систему superset достаточно удобная система, в которой очень легко построить дашборды с основными продуктовыми метриками. несмотря на все плюсы, ch сложно админить и поддерживать стабильность работы поэтому важно иметь еще один источник для хранения данных, например, hdfs в hadoop также можно хранить очень старые данные, чтобы не расходовать память на кластере с clickhouse напрасно. в clickhouse удобно писать события для аналитики, можно делать широкие таблицы с большим количеством колонок, избегая лишних join-ов в запросах синтаксис ch также удобен для аналитики, есть много функций, разнообразие движков и супер оптимизированная обработка запросов. при выборе аналитической бд нужно понять, в каком формате и кто будет работать с данными говоря об аналитике, нас интересуют olap сценарии работы — запросы делаются часто, а их результаты нужны быстро в таком случае подходят колоночные бд например, всеми любимый clickhouse. сегодня говорим о data-driven подходе к принятию решений первым делом нужно наладить быстрый доступ к данным для этого нужно понимать, кто ими будет пользоваться и в каких ситуациях, куда лить данные, в каком виде начнем тред с выбора базы данных для аналитики. есть удобное решение для того, чтобы справиться с потоком adhoc запросов без постоянного мультитаскинга и переключения внимания - дежурства если в команде больше одного аналитика, можно назначать каждый день дежурного аналитика, который будет быстро отвечать на запросы весь день. adhoc в компаниях есть много разных менеджеров, которые общаются с клиентам или развивают продукт напрямую всем им нужно принимать какие-то решения на основе данных в таких запросах главное заранее понять, какие из них повторяющиеся и какие можно автоматизировать. etl это задачи, для которых необязательно привлекать датаинженера вроде создания таблиц, агрегатов, пайплайны с заливкой данных из одного места в другое по крону при помощи, например, airflow полезно уметь делать это самостоятельно, чтобы быстрее потом проверять гипотезы. исследования например, задачи оценки потенциала фичи, исследования поведения пользователей, иногда ml модели для категоризации пользователей или контента и другие это важная часть работы аналитика и нужно стараться, чтобы она занимала не меньше 30% рабочего времени. я бы сказала, потому что у него есть много задач, которые никак не пересекаются с задачами других специалистов например, подготовка данных специально для модели, написание собственного алгоритма кластеризации, придумывание архитектуры нейронной сети и т д. для того, чтобы лучше понимать, как проводить эксперименты можно почитать вот эту книгу, которую однажды в интервью karpov courses посоветовал , ее написали аналитики из linkedin, google и других компаний с огромным опытом в экспериментах. эксперименты первый этап - это дизайн эксперимента (a/b теста): объем выборки, ожидаемая длительность, условия попадания пользователя в эксперимент далее сбор данных (здесь главное не подсматривать за результатами раньше времени) и, наконец, анализ результатов. в моей повседневности есть примерно 4 типа основных задач это эксперименты, исследования, etl, adhoc запросы иногда каких-то задач больше, чем остальных, а иногда перед тем как провести эксперимент нужно построить какой-то небольшой etl процесс, например. еще есть классный доклад от spotify про то, как у них появилась позиция analytics engineer это тот, кто понимает, что нужно аналитикам и как это донести датаинженерам вот видео выступления, там еще много полезного про устройство аналитики в компании. помимо разделения аналитиков по доменам, происходит более гранулярное деление data-related ролей по наличию определенных скиллов мне нравится вот эта картинка от indeed про скиллы разных специалистов. последнее время в россии стали разделять data, product, ux, business аналитиков считаю, это хороший показатель того, что компании стали лучше понимать, почему аналитика важна и что универсального человека найти невозможно. мне нравится читать главного по экспериментам в yelp на linkedin, в одном из постов он рассказывал о том, что сегодня на рынке есть огромное количество data-related ролей, каждая из которых по-своему ценна, а называть всех data scientis-ами не стоит. сегодня расскажу о том, какие повседневные задачи бывают у аналитиков и поделюсь парой полезных ссылочек и лайфхаков но перед этим хочу начать с разнообразия сферы data-related профессий. на эту тему у нас есть пара публикаций в сборниках международных конференций, в твиттере сложно коротко описать все, поэтому вот ссылочки. график с динамикой изменений тематик дает возможность увидеть то, что активно обсуждалось в каждом году, а также увидеть всплески в количестве обсуждаемых тем подобное исследование дает ретроспективу и помогает лучше понять как государства пытаются регулировать сферу интернета. тексты - статьи об интернет регулировании из российских сми мы выделили 7 сфер, которые оказались связаны с темой интернет регулирования это коммуникации и сми, ужесточение законодательства, государственные процессы, онлайн бизнес, политика, создание новых законопроектов. расскажу вам и про исследование, которое мы делали вместе с прекрасной научной руководительницей и соавтором мы исследовали динамику дискурса об интернет регулировании в россии кластеризовали векторные представления текстов, получали тематики по годам. конкретно в этой модели данные были в контексте расы в более продвинутых моделях может быть учтен также и язык, и образование, и другие параметры агентов например, появляются новые исследования с адаптивной толерантностью и новыми переменными в модели. модель никогда не будет точной копией реальности, важно, чтобы она имела определенный уровень описательной силы у модели шеллинга есть описательная сила, а это значит, что мы можем добавлять в нее новые факторы и смотреть на то как может поменяться поведение агентов в реальности. анализ текстов блогов тоже открывает новые возможности исследовательница lada adamic показала высокий уровень поляризации американского общества (республиканцы/демократы) на основе данных политических блогов она построила граф цитирований, показав четкое разделение дискурса. ученые из университета пенсильвании проанализировали тексты твитов, искали в них стресс, депрессивные настроения, агрессию использовали наличие таких сентиментов как предиктор и получили картинку, которая почти не отличалась от официальных данных по болезням сердца. то, что раньше можно было измерить только опросами и скринингами, сейчас можно изучить на данных из twitter api например, предсказать количество инфарктов в каждом штате в зависимости от настроения твитов его жителей. другое захватывающее пересечение ds и социологии - анализ данных из интернет источников с появлением соцсетей и распространением интернета анализировать социальные взаимодействия людей в интернете становится все репрезентативнее. в социологии есть понятие операционализации такие явления как толерантность, мотивация и тд в основном измеряют опросами (операционализируют) конечно, единого подхода нет, но чем больше исследований проводится, тем лучше ясны основные прокси-метрики уровня толерантности. же самая идея на пальцах круто объяснена вот тут. если кому-то станет интересно погрузиться в агентное моделирование, есть курс на coursera популярный инструмент для построения подобных моделей - , мы в универе строили в нем модели, где волки ели овец :). томас шеллинг изучал поведение жильцов в районах города и на основе наблюдений построил модель, на которой в зависимости от заданного уровня толерантности плотность кластеров с людьми одной расы различается те при низком уровне толерантности, похожие люди будут жить рядом. это необязательно предиктивные модели, это могут быть описательные модели, основанные на заранее заданных константах пример тому - агентное моделирование известная иллюстрация из социологической теории - модель шеллинга она описывает процесс сегрегации. сегодня поговорим о пересечении социологии и ds за последние 5 лет стала набирать популярность дисциплина под названием computational social science в нее входят исследования, использующие компьютерное моделирование для описания социальных/экономических/политических процессов. есть чат в телеге про pet-project-ы как раз от ребят из ods они даже устраивали регулярные встречи для того, чтобы было больше мотивации пилить проект в окружении других мотивированных людей. и, конечно, еще паблики университетов, в которых часто постят такие возможности, друзья, которые в нужный момент скинут пост, на который наткнулись (рассказывайте друзьям о том, что вы ищете работу) на headhunter тоже есть стажировки. анонсы хакатонов можно искать на сайтах компаний, и есть еще вот такой канал с вакансиями для джунов кто-то знает еще ресурсы, делитесь под этим твитом!. имея опыт стажировок и работы джуном, я бы советовала сначала идти на стажировку, потому что там будет ментор, который сможет отвечать на кучу вопросов (а их очень важно задавать), плюс в больших компаниях часто проще пройти сначала стажировку, а потом уже плавно перейти в штат. потом появлялись задачи от менеджеров, параллельно ментор искал для меня какие-то более глобальные задачи вроде предсказания ctr я научилась использовать git, читать и немного писать php код, работать с биг датой с pyspark, попробовала zeppelin и получила кучу soft-скиллов. первым делом я, конечно, была в шоке от количества умнейших людей на квадратный метр вокруг меня очень долго смотрела на всех восхищенными глазами :). саню неправильно отметила, саня вот. у меня была классная команда, правда я была далековато от основного продукта, поэтому меньше знаю как там у меня были задачи для pr, где мы проводили забавные исследования на популярные темы и pr-щики писали на их основе статьи для продвижения продукта в целом хорошо :). внезапно меня позвали на собеседование потом на еще одно, а потом я стала стажироваться под менторством крутейшего анатолия карпова вы точно видели его курсы по статистике на stepik. на тот момент то, как можно использовать данные, никто особо не знал я в итоге никуда это не презентовала, но просто получила опыт работы с api в питоне для себя но api открытый, вопросы иногда возникают, когда это куда-то отдают дальше, а я в итоге это никому и не показывала. вторая стажировка была после того, как я поработала джуном аналитиком в semrush это была стажировка в отделе рекламы и бизнеса вконтакте о ней мне рассказал сначала я думала, что подаваться нет смысла, но почему-то все равно подалась. вывод таков, что иногда можно пойти не напрямую аналитиком, а начать сбоку, но делать задачи сверх нужд, чтобы набраться опыта и уверенности. стажировка прошла успешно, меня позвали на еще одну, там я занималась анализом рынка пока тоже без кода, но уже ближе к аналитике потом была возможность перейти в отдел, где нужно было кластеризовать пользователей и писать код, но я пошла работать джуном аналитиком в semrush. например, для того, чтобы изучить конкурентов, я выгрузила подписчиков групп в вк двух приложений-конкурентов по api и посмотрела на их сети дружбы, чтобы понять, насколько активно школьники друг с другом делятся инфой о полезных приложениях и скачивают одно и то же. стажировка была не совсем про аналитику она заключалась в том, чтобы посчитать экономику моего приложения и исследовать рынок но, при этом, я старалась применять методы анализа данных, чтобы самой себе нарабатывать опыт. я предложила приложение для синхронизации расписания школьной программы и заданий егэ чтобы к определенной теме школьникам приходили задания по типу егэ и он понимал как связана школьная тема с будущими экзаменами идея выиграла, мне дали мини-грант и стажировку в компании. теперь к стажировкам первая моя стажировка была в дневникру ребята делают электронные журналы для школ я участвовала в их конкурсе бизнес-идей :), где нужно было придумать образовательный проект на базе дневникру. кайфово! стала замечать, что в компаниях появляются отдельные команды а-ля инфраструктурные, которые делают админки для a/b тестов, сами шарят в статистике при этом, делают огромные таблицы со сводками всевозможных метрик, все это автоматизируют. горы класс, велосипеды тоже! надеюсь, у вас все получится и вы будете к этому во всех смыслах готовы. классно, спасибо за пояснение!. интересно было бы про это послушать это что-то вроде того, чем занимаются machine learning engineers? или прям уже есть такие вакансии, которые называются modelops?. про хакатон nasa и junction рассказывал в этом аккаунте , мы были в одной команде там мы делали генерацию туманностей и моделировали эпидемии. думаем, непонятно решили посмотреть на данные снова глазами, смотрим, а там колонка с двумя классами, которую мы нигде не учли - бензин и сопутствующие товары. история про забавный фейл были мы на хакатоне газпрома с и , сидим пилим себе кластеризацию покупок на заправках придумали так классно, заказ - это слово, применили word2vec, получили фичи, кластеризуем а у нас выходит ровно два кластера. в aivicenna ребята занимались распознованием опухолей на маммограммах, а у меня было направление с дашбордом для врачей для быстрого реагирования на на начало рецидивов но сейчас стартап уже не развивается. там я уже делала байесовский текстовый классификатор, а ребята занимались распознаванием текста на картинках и ботом в телеграме тогда мы взяли 3 место и начали делать стартам aivicenna. еще был хакатон tiltech medhack, после которого мы даже начали делать стартап там со мной в команде были юра макаров, ильдар белялов и еще врач-онколог в качестве эксперта идея была в классификации медицинских бумажных документов. часто даже если знаешь, прямо сразу уйти может не быть возможности многие начинают еще совмещать две деятельности и, если все идет ок, уходят в какую-то одну в итоге. а куда хочется уйти из ит, если не секрет?. а чего именно не хватает?. а давайте сделаем такой опрос тоже, можем себе позволить :). это был классный кейс с точки зрения аналитики, потому что я занималась эксплораторным анализом, рисуя графики, которые доказывали жизнеспособность идеи а ильдар белялов делал face recognition в итоге взяли 2 место и выиграли велосипеды :). первый значимый хакатон назывался adhack и там мы делали рекомендательную систему в продуктовом магазине на основе данных со страниц из соцсетей. сегодня расскажу про хакатоны и стажировку это два отличных способа начать работать в команде на первых хакатонах я старалась следить за тем, что делают опытные участники, а еще искать для себя задачи, которые помогут проекту способность ставить себе задачи - полезный навык. а давайте сделаем такой опрос тоже, можем себе позволить :). мне кажется, это просто изначально другой вопрос тут хотелось показать людям, которые хотят в ds, бэкграунд тех, кто уже в сфере и также показать им тех, кто также как и они туда стремятся. таковы результаты вчерашнего опроса, надеюсь, читателям, которые только собираются в ds, будут полезны сегодняшние твиты. а еще полученные доменные знания в университете могут очень круто сочетаться с анализом данных, позволяя делать экспертные выводы кроме того, знания социологии/психологии могут быть также полезны аналитикам в индустрии об этом поговорим в среду. сейчас я считаю, что образование в социальных и естественных науках вполне логично для перехода в аналитику потому что обычно на этих направлениях изучается статистика, научный подход, проверка гипотез, выборки, а это - часть повседневности аналитика. как вы понимаете, перед тем как начать работать аналитиком, я занималась смежной деятельностью, лучше понимая себя и сферу, в которую стремлюсь это было очень полезно и сделало переход из “непрофильной” специальности и академической среды более плавным. а сейчас учусь в школе продактов от (да, там такое тоже есть!), чтобы закрепить у себя продуктовое мышление и получить новый опыт. в моем случае стажировка показала мне, как общаться с бизнес заказчиками, как представлять данные, на что делать упор в анализе о ней чуть подробнее расскажу завтра. чтобы стать востребованным аналитиком, помимо hard-skills не стоит забывать о business sense важно понимать бизнес-метрики, уметь генерировать продуктовые гипотезы например, в блоге есть много полезной информации по теме. вообще там интересный тред образовался про личный бренд и про возможности, про то, что можно рассказать людям и тд. я подумала, что это прикольно и почему бы и нет а еще можно про социологию датасаентистам немножко рассказать :). я смотрю на тех кто лайки ставит и, судя по описанию профилей, практически каждому есть что рассказать уверена, у тебя есть много кул стори а еще, насколько я знаю, вы можете сами писать организатору, если хотите участвовать еще много недель впереди :). lex fridman, конечно, крут. это так кажется со стороны, честно. или создать!. понимаю это чувство, туда нужно заходить с запасом спокойствия и вряд ли ты что-то там упускаешь особенное и вообще, fomo - нездоровая штука но, при этом, я знаю, что там реально найти себе соратника по прохождению какого-либо курса, главное попасть в правильный канальчик. я была волонтером в сообществе будучи в амстердаме на конференции websci’18 , я записала пару интервью с женщинами, которые преуспели в сфере data science разговор с ними прибавил мотивации продолжать развиваться в сфере анализа данных и дальше. канал из 3 ссылки ведет сообщество оно образовалось после того, как и ко выиграли грант от kdd impact program в 2018 они организовали в питерской вышке выступление девушки, работающей на позиции data scientist в , в 2020 - сотрудницы. еще я люблю смотреть интервью с представителями индустрии это интересно не только новичкам, но и тем, кто уже в профессии вот примеры каналов1 towards data science karpov courses women data leaders. а мотивацию можно повышать, начиная делать проекты, участвуя в хакатонах, ходя на (онлайн)-конференции, общаясь с теми, кто уже работает аналитиком/data scientist-ом, вступая в сообщество ods так можно найти себе role models и тех, с кем можно параллельно учиться. так что, если есть средства, буткэмп будет неплохим стартом еще и с социализацией, если не хочется материально вкладываться, то бесплатные курсы – это супер, только нужно иметь достаточно мотивации для них. сейчас атмосферу нашего майнора успешно воспроизводят разные платные буткэмпы, с его бесплатными курсами и coursera/edx. но, несмотря на то, что у меня была такая возможность как майнор, я также проходила онлайн курсы особенно связанные с python, тк его нам нигде не преподавали здесь я не буду оригинальной и назову специализацию от яндекса и физтеха на coursera и ml course open. уделяю майнору несколько твитов, тк считаю его успешным примером обучения ds-у востоковедов, экономистов, социологов, политологов с абсолютно разными уровнями знаний математики и, уж тем более, программирования на r после опыта майнора особенно верю в будущее подобного обучения. мы проверяли работы, составляли промежуточные тесты и ходили на каждую пару первокурсников, чтобы подсказывать им прямо на семинаре это был крутой опыт, мы видели горящие глаза студентов и сами хотели погружаться в тему еще больше если в вузе можно побыть та - советую. преподавали нам на майноре , , алена суворова и другие классные преподаватели после первого года обучения некоторые ребята и я примкнули к нашим преподавателям в качестве учебных ассистентов у первокурсников майнора. майнор data science длился 2 года, на нем нас учили кодить на r, агрегировать данные, применять модельки, понимать, как они работают, интерпретировать результаты и делать web-приложения на shiny. начну говорить о 1й теме на своем примере училась я не на классического социолога у нас было введение в программирование на r, большая любовь к количественным исследованиям, много статистики, был даже теорвер и главное - майнор data science (по выбору) с него все и началось. прежде, чем начну рассуждать над первой темой, расскажите, какой у вас бэкграунд в плане высшего образования?ps: под ds понимаю и продуктовую аналитику, и data science, и различные подобласти; варианты ответов сильно упрощены из-за ограничений на символы от твиттера. про маркетинг рассказывать не смогу, так как прицельно им не занималась кстати, запостила примерное расписание ниже. расписание1 опыт перехода в аналитику без профильного образования2 хакатоны и мой опыт стажировки 3 что можно делать на стыке социологии и ds4 повседневные задачи аналитика5 data-driven культура в компании6 нужна ли магистратура аналитику7 преподавание на курсах. надеюсь, мне удастся показать вам применения анализа данных под непривычным для этого аккаунта углом а может даже вдохновить и поддержать кого-то, кто тоже заканчивает непрофильную специальность и интересуется возможностями в сфере data science. быть по ту сторону аккаунта - необычный опыт, но рада этой возможности! постараюсь рассказать вам о ярких моментах моего путешествия в мир продуктовой аналитики из академического мира социологии. привет! на этой неделе пишу твиты я, сейчас работаю аналитиком в команде рекламы и бизнеса вконтакте, преподаю в stepik academy и до этого работала аналитиком в pr отделе semrush окончила ниу вшэ спб с дипломом бакалавра социологии. да, на это время желающих не нашлось и в этом году еще не сформировалось толком расписание, вот после первой рабочей недели много кто разберется с графиком, все появится :). we dont have a curator this week but hey, there are many cool communities on twitter to follow and read – just found this account and really impressed by the content there!но если вас вдруг смущает английский, в твиттере есть встроенный переводчик 🖖.  : первый наш гость – евгений кашин ml-инженер из snap inc про лондон 🇬🇧, будущее ds и ar 🚀, и вопросы от русской gpt-3 г🤖слушайте подкаст в удобном вам сервисе по ссылке 🏻.  : мы с овд-инфо при поддержке медиазоны и важных историй организуем дата-хакатон!с 23 января по 7 января будем анализировать данные, которое генерируют российская полиция, суды, дума и прочие органы властиподробнее тут:. на этой неделе с вами был спасибо и всего самого лучшего в новом году!. нет. давайте подводить итоги недели: почти 75% так или иначе доверяют wikipedia, 42% не пользуются отладчиком и 32% не используют type hints. для тех, кто интересуется применением ml в финансах, есть очень крутая книга:. working with any sufficiently buggy technology is indistinguishable from magic. здесь то как раз выражение алгебраический тип данных звучит вполне нормально, потому что произведение и размеченное объединение определены именно над типами данных, то есть здравый смысл сохраняется. из-за этого? нет конечно, в лучшем случае вежливо поправляю, а часто просто молчу и киваю ). новое издание старой книги:. я бы сказал так, я пользовался для разработки проекта на r именно плагином, но для некоторых особых вещей просто ходил в rstudio если говорить чисто про написание кода, да, плагин куда удобнее. к сожалению не могу не согласиться. кажется, что самое время спросить, доверяете ли вы wikipedia, как достоверному источнику информации?. даже мнение большинства не делает неправильное правильным, но это не моя война. да, это скорее трудности перевода, но когда спрашиваешь, что там абстрактного, многие теряются. tips &amp; tricks: а вы знаете, что pycharm также можно запустить на сервере, где очень много памяти и работать из браузера? electron клиент тоже есть. python популярен по многим причинам дело даже не в поддержке со стороны вендоров python просто является языком общего назначения а r очень ограничен применением в ds, это в своем роде тьюринг полный dsl но сложность публикации пакета огорчает. некоторые люди на собеседовании говорят, что ast - это абстрактное синтаксическое дерево не делайте так дерево очень даже конкретное правильно говорить дерево абстрактного синтаксиса. однажды, когда мне довелось публиковать r пакет в cran, я понял, почему python намного популярнее в cran ручное ревью, которое вполне может занимать неделю! 🤦‍♂️. вы знаете, что существует поддержка языка r для pycharm?. для тех, кто интересуется применением ml для кода недавно мы участвовали с коллегами в довольно интересном соревновании в рамках nips2020 простая постановка задачи: text2bash так что рекомендую взглянуть на результаты:. tips &amp; tricks: вы знаете, что в pycharm есть навигация назад и вперед, как в браузере? ctrl + alt + right / left а еще есть pdf, в котором все есть. кто читает gatesnotes? рекомендую про книги вообще интересно, планирую заказать себе все из списка:. с наступающим новым годом!. очень похоже идеологически, но typedparse работает поверх argparse прямо, есть сильные отличия в соглашениях и api, особенно при работе с subcommands. по случаю нового года выкладываю новую версию легковесного парсера аргументов командной строки на основе type hints. подборка ориентирована на визуальную составляющую и на итоги года в ml/dl не тянет, но все равно очень занимательно и со ссылками на github:. если заглянуть в блог google ai, то там есть много интересного:. да, спасибо, на linux/windows все именно так. tips &amp; tricks: текущую строчку в pycharm можно двигать вверх и вниз с помощью cmd+shift+up/down. я тоже задавал себе этот вопрос, до тех пор, пока не попытался написать на r что-то действительно большое. даже подумываю ухудшить ситуацию и в нагрузку к s3, s4, rc и r6 написать библиотеку для поддержки интерфейсов и абстрактных классов. ооп в r действительно пугающее и немного бессмысленное явление без нормальной поддержки со стороны ide, но проблема в том, что для создателей ide это тоже пугающее явление замкнутый круг подробности здесь. тут нет никакой проблемы, просто если работать с apache spark просто как пакетом pyspark для подготовки данных - это один уровень, а если ты знаешь как тюнить jvm для работы со spark и пишешь свою реализацию рекомендаций на scala - это уже другой. производительность и надежность с другой стороны python специалисты дешевле чем scala специалисты но для дата инженера на scala это плюс. многие люди переходят в data engineering меняя python на scala или java на scala не советую так делать на scala довольно легко писать ужасный код сначала лучше изучить функциональное программирование на haskell например дисциплинирует. какую технологию выбрать, если ваши данные не помещаются в память? если вы привыкли работать с pandas и ничего не хотите знать про apache spark, то самым простым решением будет koalas:. а равные возможности потому что лет 40 назад было трудно представить, что работа над матрицами будет так популярна в языке, в котором нет массивов. управление памятью и массивы - это ортогональная история в java есть массивы и сборка мусора массивы важны, потому что расположены непрерывно. на уровне языка в python нет массивов, все реализовано через внешние библиотеки. знаете, что такое настоящая политкорректность и равные возможности? это когда в самом популярном языке программирования для работы с данными нет массивов!. раз уж дело дошло до опросов, пользуетесь ли вы дебаггером? вопрос, конечно, в контексте data science. тут самое время спросить, используете ли вы type hints в python?. должен ли data scientist хорошо понимать концепции из программирования? да должен, но ровно в той степени, в которой эти концепции помогают в работе. должен ли data scientist уметь хорошо программировать? думаю, что все-таки нет, если хорошо программировать значит писать хороший код потому что результатом работы ds’а является не код. еще один полезный ресурс по теме ml для кода:. кто интересуется применением ml к коду, лучший способ начать - это вот этот обзор 2017, все еще не потерявший актуальность:. вы знаете, что вероятность того, что длина файла у вас на диске начинается с 1 в шесть раз больше вероятности того, что она начинается с 9 это называется закон бенфорда:. таким образом, просто на основании имен, удалось получить довольно хорошее решение, а добавив к нему уже информацию о группах получилось совсем хорошо. однако оказалось, что для абсолютного большинства случаев существует куда более простой путь, в ок данных так много, что для практически любого имени или фамилии в отдельности (и для практически любого написания) было как минимум десяток примеров. для простоты можно считать, что мы живем в отсталом мире где всего два пола: м и ж вспоминая работу того же michal kosinski, очевидным решением тут является посмотреть на группы, в которых пользователь состоит. давным давно в далекой далекой галактике значение пола по умолчанию в ок было равно m меня попросили пофиксить ошибку, которая образуется естественным образом при такой схеме…. поговорим о пользе эвристик и здравого смысла перед тем как делать ml вообще считаю, что есть что-то можно решить без ml и это работает, то так лучше и поступить ну или как минимум вы получите хороший бейзлайн для будущих моделей. а вы знаете, что в языке r на самом деле нет скалярных типов? то есть число 314 - это просто вектор длины 1. наверное все слышали про michal kosinski и 68 лайков, который расскажут про вас все я бы сказал, что это не лучшая его работа на мой вкус вот эта самая интересная:. так я понял, что хочу сделать инструмент, который бы помог таким же людям как я, которые решают дата-инженерные задачи вот поэтому я поменял саму работу с данными на разработку инструментов для такой работы и пришел в jb делать big data tools. очень много моей работы в одноклассниках было связано с вопросами дата-инженерии и в какой-то момент я вдруг понял, что кучу времени провожу копируя код из в  и пялюсь в страничку yarn ожидая упадет моя джоба или нет. после работы в университете я оказался в там я занимался рекомендациями и некоторыми вопросами, связанными с поведенческим анализом самым полезным навыком на работе оказалось не знание ds, а способность писать код на scala и java. потом я долгое время преподавал как тут недавно писал , даже в вшэ в питере но не только - еще много где большую часть времени я провел в спбгу, вот здесь:. моя карьера начиналась очень давно, сначала я пришел в программирование, где-то курсе на втором в 1998 писал на java версии 11 наверное, я бы чувствовал себя лучше, если бы пришел в ds, но тогда такого понятия просто не было. на этой новогодней неделе с вами я, тимлид двух команд в : и одной из команд, которая занимается применением ml в наших продуктах. на этом все, я прощаюсь с вами в твитере буду размышлять откуда лучше поработать в апреле-мае: бали, испания или португалия попробую выжать все из текущей ситуации найти меня можно здесь. зачитай запрос. ребята в технологических компаниях не в курсе об этой проблеме. может быть банки, ритейл, телеком и все прочие понимают что делают и лучше разбираются в технологиях или мне встречались неправильные архитекторы, наверняка правильные разбираются в технологическом стэке и не видят вершину своей работы как выбор правильного коробочного решения. так и не смог понять необходимости бизнес аналитика при наличии продакт менеджера еще большую загадку для меня представляет роль архитектора возможно мое мировосприятие повреждено технологическими компаниями: яндекс, фейсбук, алибаба. чего действительно стоит опасаться магазинам, это если советник или аналогичный ему сервис начнет вместо перераспределения трафика вести его всегда в одно и тоже место знаменитую черную дыру екома. разговор, к слову, не об этом советник перераспределяет трафик между магазинами, пользователи могут уйти, но могут и придти ушли-то незаинтересованные, пришли максимально релевантные!. когда я работал в яндекс советнике, некоторым магазинам не нравилось что из-за советника пользователи могут уходить в другие магазины думаю что после моего ухода ситуация с недовольством изменилась несильно. баесовская оптимизация успешно освоена и не зря как говорил один российский политик, два процента на дороге не валяются. априорно. в entity linking трансформеры уже считай что по умолчанию используют - но мне хочется больше иерархии учитывать. решил поиграться с баесовской оптимизацией пять часов спустя могу заявить что это она решила поиграться со мной. все-таки умнее или чтобы скилы нужные были?. многих из них нанимали как тех лидов. во время одной из встреч с руководителями различных команд моего департамента, я задал вопрос: если бы я собеседовал вас также, как делаете вы, вы бы сюда попали? некоторые из них признали, что скорее всего нет. впервые пользуюсь твиттером, он во многом напоминает яндекс новости с функцией комментирования, теперь понятно откуда ребята черпали вдохновение. такого я не наблюдал, большинству наоборот не хотелось из ad hoc идти в продуктовую команду, хотя иногда случались командировки на 3-6 месяцев. приоритезация довольно простая, нужно ответить на два вопроса: что будет если мы это не сделаем? что будет если мы это сделаем? после каждого вопроса происходит ранжирование и фильтрация. ситуации когда задач нет я еще не видел приоритезация довольно простая, нужно ответить на два вопроса: что будет если мы это не сделаем? что будет если мы это сделаем? после каждого вопроса происходит ранжирование и фильтрация. тебе какая, первая или вторая?. это всегда некоторый обмен между вероятность, потраченным временем, желанием и реальностью как обычно - вопрос непростой. не всегда наши желания совпадают с нашими возможностями. важно заметить что к созданию такой команды меня подтолкнули некоторые менеджеры в х5, например сергей добряков, за что я ему очень благодарен. забавно, что если в начале команда состояла из двух человек и их было мало, то через два года их было под тридцать человек и их было мало аппетит приходит во время еды. продуктовые команды по умолчанию отказываются делать что-то вне своего продукта, но ведь очень часто нужно что-то где-то быстро посчитать/предсказать/поправить кроме того именно из ad hoc вырастали новые продуктовые команды и сервисы: например платформа а/б тестирования. одним из лучших моих решений в х5 было создание команды ad hoc, также известной как дата спецназ наличие такой команды позволяет учитывать динамическую природу нагрузки на другие команды и продукты, проводить пресловутый рисерч и помогать за пределами продуктовых команд. кажется я непонятно написал тестирование было на 100 записях, 16000 записей увеличат время обработки в 4 миллиона раз уже особо неважно сколько она занимала до этого, 100 миллисекунд или 100 секунд или 10 минут. после первой книги по reinforcement learning я ревьюил вторую, она была заметно выше уровнем, да и темы в ней разбирались гораздо более продвинутые единственным минусом был tensorflow 17, на котором был написан весь код с другой сторон ни один датацентр не пострадал. я не даю никаких комментариев по поводу позиции или процессов происходящих в facebook. на 100 сущностях в тестовом запуске работало вполне сносно, дело в том что всего сущностей, для которых нужно было запускать алгоритм, было больше 16000 хотя это никак не поменяло бы ситуацию. все верно, сотрудником был я, мной был альберт эйнштейн, алгоритмом же была вселенная. однажды один из сотрудников показал мне классный алгоритм, который он только что придумал вглядевшись в код я сказал, здорово, но ведь это o(n^3) услышав в ответ: что это значит? я понял, нужно работать над процессом собеседований. нанимать друзей на работу можно, если готов их увольнять поэтому лучше не нанимать. процесс перфоманс ревью в больших технологических компаниях чем-то напоминает законы хамурапи. взрывалось - значит датацентр плавился. это похоже на правду но все же не совсем, трансформер учитывает взаимодействие и порядок элементов относительно друг друга с учетом фичей этих элементов, графовая сеть делает похожую вещь, но иерархически, учитывая взаимосвязи в структуре в другом виде. стоит добавить что студенты судя по всему знали об этом недостатке и вставили функцию reset, при взрыве все возвращалось к начальному состоянию, кроме экономии - она безусловно продолжала учитываться. подвох оказался в том, что созданное окружение не особо то и штрафовало за взрыв от перегрева и поэтому на горизонте обучения датацентр регулярно взрывался, зато был очень энергоэффективным. хочу попробовать решить задачу ner через графовые сети, кажется что здесь они подойдут как влитые. работает до тех пока ты не становишься опытным специалистом. работает до тех пока ты не становишься опытным специалистом. это одна из причин большого разброса зарплат. я с удовольствием называю сумму первым. впрочем как и то что на работе надо работать. иногда на собеседованиях задают коварные вопросы один из самых коварных - сколько денег ты хочешь немногие готовы к такому повороту. подвох оказался в том, что созданное окружение не особо то и штрафовало за взрыв от перегрева и поэтому на горизонте обучения датацентр регулярно взрывался, зато был очень энергоэффективным оказалось что первые 8 глав писал преподаватель, последние 2 - студенты. в 9-й главе приводился пример, где rl управлял системой кондиционирования в датацентре функция потерь награждала за отсутствие затрат энергии на нагрев/охлаждение и штрафовала если энергию приходилось тратить как итог rl система была в 10 раз эффективнее чем базовая. однажды я ревьюил книгу по reinforcement learning первые 8 глав были ничего, с кодом на pytorch, последние две ужасны и с кодом на keras, впрочем не берусь утверждать что это было причиной ужаса но не об этом сейчас. семен, оставим твое амбассадорство пластический хирургии на потом. кроме вопроса о том, чем человек хочет заниматься, я иногда спрашиваю как ты представляешь свой рабочий день этот вопрос тоже часто бьет наповал впрочем на первый вопрос многие люди прожив полжизни не имеют ответа, равно как и на второй. и про экстремальное похудение?. это так и решается калибровкой модели - но даже в этом случае мы не получаем интервалов для сэмпла, а лишь вероятность вместо скора. как ни старался - но в задаче многоруких бандитов на 2к сэмплов на кагле - томпсоновское сэмплирование уделывает temporal difference. обучение достойное в плане технического оснащения и свободы выбора и практики и среднее в плане теоретической подготовки какие моменты наиболее интересны спрашивай - я расскажу. должен был учиться в двух университетах из трех: франция, германия и испания в каждом из университетов учишься на языке этой страны, по итогу получаешь два магистерских диплома я решил отучиться только год в германии, собственно не жалею что так вышло. например и. куда давали стипендию туда и поступил. с тем что не могу улететь из юк я уже смирился, но с тем что никто теперь не может приехать ко мне - нет. пробовали ли вы пробивать privacy эмбедингов/весов и вытаскивать чувствительную информацию?. люди редко соглашаются на понижение, но иногда такое работает. эксперементировать в ноутбуках могут пять( а то и больше) студентов третьекурсников под руководством одного опытного спеца ценность таких экспериментаторов обычно не очень высока. сижу и думаю, может быть стоит переехать из лондона в стамбул, как минимум на пару месяцев после новости о закрытии в очередной раз качалок, я был как никогда близок к увольнению. переходы тем не менее случаются, специальности в некоторых моментах пересекаются, что упрощает этот момент. как говорил мой преподаватель металловедения, это не ледебурит, это враки, de - не промежуточная стадия, а очень ценные люди mle это чуть ли не высшая ступень развития, при этом что такое ds - вообще непонятно, если мы говорим про research, таких людей 000001%. находясь в разных компаниях на управляющих должностях, я часто задавал и задаю вопрос своим сотрудникам - что тебе нравится делать, чем бы ты хотел заниматься? частый ответ - машинным обучением к сожалению это все еще не добавляет ясности, чем же они хотят заниматься. если вы ожидаете недельный план, вынужден вас разочаровать, на этой неделе мы познакомимся с понятием стохастического процесса. все еще большой редкостью является оценка неуверенности модели даже на уровне среднего, хотя очевидно что нужно оценивать неуверенность уже на уровне наблюдения. всю следующую неделю командовать парадом буду я недавних пор директор по моделированию и анализу данных в x5 retail group, с недавних пор отвечаю за user data privacy в фейсбуке из лондона. всем пока ! с вами на этой неделе был вова яшин (твиттер ) вот ссылки на мои профили :• github: linkedin (го нетворкаться!): website:. • мета тред:. • твит про curl cheat(dot)sh/x: твит про поиск предыдущих команд и fzf: твит про drawio:. воскресенье (код, нердские штуки и ide)• vscode – лучшее ide: vscode vs pycharm: про печатание и vim: разбор голосований за неделю:. суббота (одс)• (3к/340) про питерскую ячейку:. • (34к/530) твит как выбрать лаптоп: (57к/324) jupyter notebook это плохо или хорошо: много случайных твитов. пятница (свободная программа)• (110к/14к, 26к лайков и 95 ретвитов) твит про интервью в ms, пробивший потолок: (257 голосов) опрос py3: round(125), round(135)=?:. • (154 голоса) опрос занимаетесь спортом регулярно?:. четверг (потное гетто):• (36к/320) изи/хард про правильное питание: (30k/110) как начать ходить в потное гетто и зачем: (28к/370) история дрища:. • (228 голосов) опрос учились/неучились в аспе?: (124 голоса) опрос научник vs универ для phd:. среда (phd):• (28k/280) когда и как подаваться на phd: (30k/100) фейлы из австралии: (32к/110) моя история поиска phd программы:. вторник (финка):• (27k/200) про финку 1/2: (60k/940) про финку 2/2: рандомные факты о финке в течение дня. понедельник (привет):• (25k/130) план на неделю: (27k/300) обо мне:. мета тредссылки на треды и популярные твиты за эту неделю[в скобках – оценка популярности: impressions (times people saw this tweet on twitter) и total engagements (times people interacted with the tweet)]. скучаете дома в воскресенье? можете ознакомиться с творчеством михаила мк– хоботня (можно начать с сингулярности) блокбастеры (можно начать с на иглах смерти). в вопросе про округление на самом деле не был важен правильный ответ, если вы знаете про банковское округление, то можно было выбирать (13 13) или (12 14) однако, лишь треть выбрала правильный ответ кстати, есть крутой твиттер питон контрибьютора бывает оч интересно. оказалось, что среди проголосовавших – половина указали, что регулярно тренируются (тренировалась до ковида) круто, что спорт является частью вашей жизни тоже. второй опрос был о важности научника/универа при выборе phd программы проголосовавшие считают, что роль научника важнее универа для них прикольно, что соотношение в группах учился/неучился в аспе разное. тред собрать/разобрать голосования за эту неделюинтересно, что больше четверти проголосовавших указали, что учились/учатся в аспе радует, что вы такая крутая и близкая мне по духу аудитория. tmux – одна из самых важных тулов в моем терминале наверное, все ее знают tmux позволит вам запустить скрипт и закрыть терминал или потерять соединение, скрипт продолжит работу все эксперименты (не в slurm), только так запускаю в начале будет неловко, потом привыкните. еще изи лайфхак без вима – несколько курсоров работает много где, даже в jupyter я немного расстроился, что в vim – это не тру способ редачить много линий сразу, но до сих пор кайфую, когда так редачу вот записал вам скринкаст показывающий хаки из двух твитов во всей красе. если я вас не убедил с vim, вот несколько изи хаков, которые улучшат вашу жизнь и работают везде когда перемещаетесь внутри строки и держите стрелку слева, зажмите в это время alt (option) – по словам, и ctrl (command) – в начало/конец добавьте к этому shift, чтобы выделять. я прошел этот туториал и просто начал пытаться редачить свой код и что-то печатать (в vscode есть расширение – советую поставить выключатель vim off/on на f2) так и завязалось еще есть самая нердская игра, которую вы видели – называется vim adventures. прелесть vim-навигации еще в том, что вы научитесь быстро редачить код в своей ide, но и не сильно потеряете в скорости, когда вашей ide не будет рядом и придется редачить код в консоли vim-редактор есть на всех линукс системах (вкл мак) начать с vimtutor (в терминал, выйти :q). да, да вы очень много времени тратите, когда перекладываете руку на мышку или пытаетесь ей попасть меж тех вон скобок даже используя стрелки на клавиатуре – вы теряете скорость можно лучше!. умея в vim-навигацию, вы сможете редактировать свой код очень быстро многие фаны любят говорить: vim говорит на вашем языке и можно редактировать код со скоростью мысли, а не со скоростью ide достигается это за счет normal/inse модов, особой навигации и отказа от мыши. у вас займет меньше, потому что я еще решил научиться как в vim навигации и редактированию, в тот же самый период, чтобы сразу двух зайцев почему обе задачки связаны? потому что в vim основные элементы навигации располагаются вокруг home-row зачем нужно знать vim-навигацию?. я считаю каждый кодер должен как можно раньше инвестировать свое время в обучение слепому печатанию обучение займет 2 недели вечеров, первые 3 дня руки будут болеть, скорость восстановится через месяц я учился на easy-advanced + что с кодом (символы). тред по печатание и vim, который начну с анекдота, что сам придумал кеккак отличить геймера от пользователя вима (вимер йо)? попроси и положить руки на клавиатуру – у одного будет на wasd у другого – на home-row (жидкий смех). еще шажок на пути к крутому терминалу – установить свою любимую тему если у вас уже стоит ohmyzsh, то самая крутая – powerlevel10k это на самом деле не тема, а семейство тем, которые можно настроить под себя. как еще прокачать терминал? если вы пользуетесь дефолтным башем в терминале – можно лучше попробуйте zsh (более продвинутый аналог bash), на который нужно сразу накинуть ohmyzsh (менеджер пакетов, с fzf) новому учиться не нужно – тихо будет вам помогать. mermaid это ведь про скриптинг диаграм хорош для быстрых заметок, но не уверен, что будет достаточно, когда захочется сделать что-то менее строгое с большим простором для фантазии и формой я никогда не использовал, но напоминает диаграмы из org-mode. когда нужно сделать диаграмку для статьи, мне нравится пользоваться draw io (теперь diagrams) можно делать на сайте, скачать для компа, и даже для vscode (lol) считаю одним из топовых оперсорс проектов с невероятным функционалом для web аппки – простор для перфекциониста. верно, необходимость писать на других языках возникает редко но если все-таки возникает, ничему новому учиться не придется все свое и знакомое. еще в конде беда: иногда даже с environmentyml, устанавливая его на ту же машину, конда может упасть с ошибкой установки, не говоря уже об возможности использовать этот файл на винде ну и мешать pip пакеты с conda не стоит (сначала ставим из конды, если нет или cv2 – из pip). если вас все устраивает в pycharm, вы из jetbrains или из питера, то оставайтесь на нем если переходите с другой среды разработки или хотите разрабатывать удаленно, на др яп и с докером, то попробуйте vscode – будет легко и просто (делайте как саша лапин, который пересел с vim). с др стороны, мне нравится vscode (+ тем, кому советовал) и я немного biased обе среды – сильно лучше jupyter и других в обоих можно писать отличный код и обе покроют большую часть ваших хотелок от ide я буду больше рад, если перестанете кодить в jupyter, а не pychm vscode. и да, с professional версией pycharm даже докер заработает и появится возможность разрабатывать удаленно, но нужно заплатить и pycharm остается нагроможденным и только средой для питона говорят, что lang server лучше в pycharm, а в vscode можно его поменять на любой другой. если у вашего комплюктора мало свободной памяти, с pycharm ее станет еще меньше на vscode еще можно установить тиндер ( и даже записывать сториз (. когда пробовал заметил, что в нем какое-то невероятное количество спадающих менюшек вверху, где половина тебе не нужны и казалось перегруженным в vscode ctrl+shift+p и печатаешь fuzzy поиском при этом pycharm этим замучал будучи средой разработки только для питона. я не использую pycharm, потому что в community нет возможности для удаленной разработки и поддержки докера оба (vscode и pycharm community) опенсорс, но в пайчарме почему-то скрыты issues на гитхабе (есть, есть у них фидбэк!) я еле-еле нашел сам код, чего уж там (попробуйте!). 🔥 тред vscode vs pycharm 🚒!для питона у vscode основной конкурент – pycharm community не понимаю, почему просят сравнить с professional (80$/год). кстати, если вам нравится работать в jupyter, потому что он в вашем любимом браузере тут vscode тоже пострел везде поспел я не пробовал, но выглядит многообещающе. не знаю даже разница примерно как между читать доку и искать в выдаче гугла ссылку на стак оверфлоу можно еще сравнить результаты для git или советовать другим, когда либа даже не установлена на компе (ffmpeg). жмешь стрелку вверх, чтобы найти предыдущую команду? в терминале можно искать по предыдущим командам – жмякай ctrl+r и печатай если ты так уже делаешь, то есть тула, которая просто изменит вашу жизнь называется fzf – не благодари. вот небольшой хак, о котором мало кто знает если напечатать в коносоль curl cheat(точка)sh/x, где вместо x любая команда (tar, zip, git, gcc, conda), то можно получить очень короткий (страница) и емкий читщит когда что-то забыл, я даже в --help не лезу, и не в гугл сразу. кстати, через конду можно поставить tensorflow-gpu/pytorch без cuda и cudnn на системе и без проблем установить любую версию tf-gpu, для которой пришлось бы еще другую cuda поставить и крутить пути в системе короче, если не нужен компайлер nvcc, ставь через конду. в конде, помимо большого кол-ва питоновских пакетов, есть не менее внушительное кол-во либок для консоли (ffmpeg, vim, tmux, htop, emacs) это удобно, если нет sudo у вашего юзера, не знаете как ставить эти либы user-wise, и это простой способ их окружить, который вы уже знаете. небольшая история, которая была популярна на hn, о современных ide и текстовых редакторов о том, почему vscode взлетел, а остальные – нетthe era of visual studio code. из того что не нравится в vscode некоторые киллер фичи, хоть и бесплатны, но и с закрытым сорс кодом например, у расширения для докера и удаленной разработки для ssh, врочем как и pylance (новый language server для питона) тип есть гитхаб, но без кода лол, только с issues. мое любимое расширение – remotessh ( позволяет делать все это прямо на удаленной тачке (вкл докер, дебажить, jupyter) без всякого этого маунтинга папок приэтом поведение самой ide локал/ремоут неотличимо. так как vscode написан на электроне, сообществу просто писать расширения и оно их бодро пишет пользоваться интерфейсом можно как с клавиатуры, так и с мышкой можно установить vim навигацию, поддержку докер-контейнеров, и много-много чего другого. для питона есть расширение от самого microsoft (тоже опенсорс, питч тут посмотреть – поддержит даже ваши jupyter или ячейки как в spyder + ipython будете дебажить, тестить, линтить, рефакторить, следить за изменениями в гите как батька/богиня. vscode – разработка microsoft (опенсорс и в нем можно разрабатывать на всех языках, которые вам известны ставишь дополнение и вперед поэтому vscode легкий, быстрый, расширяемый это самая популярная ide, согласно stack overflow (50%, 2019). тред vscode (не путаем с microsoft visual studio) – лучшая среда для редактирования и разработки на сегодня jupyter не годится (см сравнение с pycharm будет позже. сегодня воскресенье и это единственный день, на который я не написал заготовок вчера поэтому программа может меняться точно будет (уже написано) vscode – лучшая ide и сравнение с pycharm, случайные твиты о кодинге и тулах для консоли, про опросы в течение недели и итоги. ставь лайк если знаешь рому. сейчас все в спейшеле-чате проходит и даже не нужно вставать в 7, чтобы к 9ти быть на невском – да даже в питере не нужно быть, чего уж там! помню даже диктатор говорил, что если и приходит на завтраки, то только на питерские – отличная возможность с ним пересечься. в сентябре я уехал в финку и больше в завтраках не участвовал, поэтому дальше не буду рассказывать мое пожелание для тех, кто дочитал – сходите вы уже на этот дата-завтрак и не стесняйтесь много не обещаю, но иногда бывало полезно. летом 2018 новых людей стало становиться все меньше и меньше рома почти не участвовал последнее, что мы с ним обсудили – я подавался на стажку к нему, но мы по условиям не договорились и как-то холодно разговор закончился больше его я не видел передача жди меня. шло время, рома делал мероприятия в питере, но на завтраки приходил нечасто я в то время был в москве и ходил на московские завтраки круто, много людей, но не то тогда я еще попал на первую одс дата-свадьбу – это я про пользу одс и поездки на датафест. было лето 2017 треньки не расцвели ребята приходили разок и не задерживались пришел новый учебный год в маге и я поугас с треньками, но опыт получил (15+ еженедельных встреч) в то время на завтраки начали еще захаживать ячейка piterpy – питон-разработчики. чувство приятное, но с другой стороны было другое чувство – неуместности это приватное комьюнити внутри комьюнити со своими мероприятиями большинство девушек и ребят там успешные датасаентисты, инженеры и менеджеры а у меня опыта в дс на тот момент – 15 года. однажды был дикий дождь – на завтрак дошли только я и рома мы обсудили с ним треньки он сказал, что меня пора промоутить и позвонил леше натекину и поставил на громкую связь – леша одобрил и мне добавили в один чатик, про который я не буду рассказывать кек. у меня был культ каггла и идея тренек мне нравилась – исправно ходил и помогал с проведением рома приходил редко и я оставался за старшего и, в конце-концов, вести хотя синдром самозванца давил очень сильно фотка, где данила савенков презентует свою первую победу на каггле. иногда, после дата-ужинов, мы вписывались к нему на ночь и слушали винил во время этих вписонов меня начали добавлять в приватные чатики в одс в конце весны 2017, рома намутил мл трени, которые проходили в питерской вышке – финансировал чай/кофе даже приходящим. кто-то приходил с задачами с работы и спрашивал как решить и мы накидывали идей в общем – нетворкались кто-то даже что-то мутил по бизнесу, пересев за соседний столик мы ездили на датафест в москву и снимали квартиру на всех завтраки цвели рома начал мутить еще и дата-ужины. тогда я совсем ничего не умел (только питон начал учить) как-то вяло представился, но ходить начал регулярно в чт утречком в библиотеку завтраки проходили задорно – рома умел собрать народ: приходили новые/старые опытные люди из дс, гендерное соотношение было хорошим – душевно. на дата-завтрак – как и в одс, впрочем – меня позвал академрук нашей маги в 2016 тогда в одс было примерно столько же человек как подписчиков у этого акка (~2к) на завтраке был рома (человек скрытный, не буду уточнять – если знаете, то знаете), сева–джаваскриптер, и академрук. тред про питерскую ячейку одс– датазавтраки и ужины– мл трени и приватные чаты– синдром самозванца. #dataелка прямо сейчас начинает выступать jürgen schmidhuber подключайтесь послушать одного из самых известных исследователей в области искусственного интеллекта. сегодня одс отмечает датаелку, поэтому будет про одс многие авторы этого твиттера – активные его участники сложно внести новое, чтобы вы не заскучали, потому что все всë уже рассказали я расскажу про питерскую ячейку, про датазавтраки, ужины, мл трени и синдром самозванца. сегодня в департаменте был ежегодный visualization beauty contest – фановое мероприятие с серьезными лицами, приуроченное к рождественской пати все присылают свои графики из статей победившие графики вывешивают по коридору засабмитил туда две картинки ничего не выиграл. так как все научные кофы в онлайне, то от тебя требуется записать видос (1-15 мин) о твоей статье, раньше – делаешь постер и летишь с ним на конфу если вам нужно делать видео самому, советую davinchi попробовал 7 разных прог (от блендера до openshot) – это просто смехотворно. а что по отчётности? необходимо энное количество статей опубликовать + преподавание? или свободный ресерч? свободный рисерч 3 статьи топ-тир или 4 более менее (+ диссер конечно же) преподавать – по желанию (я не преподаю). в этом году и, скорее всего, следующем все научные конференции в онлайне и это полный облом для студентов раньше можно было за счет универа слетать в us или uk и даже получить daily allowance (70е/день). кстати, у detr довольно интересная имплементация от авторов тех, кто считает, что хорошо знает pytorch, приглашаю посмотреть внутрь, начиная, например, с models/backbonepy. трансформеры теперь везде в этом году начали выходить статьи с применением self-attention в зрении: для детекции и сегментации (detr), заменяя свертки (san, в свертке фикс веса, а тут меняются в зависимости от входа) и проч вчера увидел для обработки 3d point clouds. яркая история из прошлого в калуге гуляли мы с поцанами подходят 2 персонажа, один приставляет к шее моего приятеля пистолет и говорит, иди в свой двор мы такие ну ладно и ушли но мы были в своем дворе чувака этого я знал болельщик спартака, громко пел когда шел домой. если вы вручную меняете скорость вентиляторов на тачке с несколькими gpu (headless), гляньте на coolgpus – скрипт, который сделает это за вас, в зависимости от температуры (даже законтрибьютил фичу туда, чтобы скорость выбиралась для каждой gpu отдельно). как искать гранты в европе? ()не знаю меня научрук профинанс из своего tenure-staer-pack на 4года коллега передо мной выиграл степуху универа такую же остальным тоже намутил научрук финка топ, хотя я видел phd вакансии с указанной зп и в другие страны. в нашей учгруппе, помимо 2 кластеров, у каждого по 1-2 тачки с 3-4 gpu каждая я их настроил, чтобы закинуть в серверную и по ssh работать попросил у коллеги его девбокс на 2 дня набираю htop - говорит 10 потоков у cpu он не знал, что на тачке 3года выкл гипертрейдинг (4 gpu). да это я шутливо конечно ни в какой сравнение это с обычной видяхой не идет и это все pr тензорфлоу но для обучения (studying) – ок вот сорс (даже хуже медиума наверн лол). еще кое-что про лаптопы обязательно проверьте, чтобы ваши киллер-фичи работали с линуксом, который вы туда накатите к счастью, некоторые производители начали интеграцию с linux (lenovo) в целом, крутые: xps, thinkpad и mac (на m1 можно что-то быстро тренировать в tf – кринж). выбираете лэптоп? думаете взять нейронки гонять прямо на нем (что б с gpu)? не, не надо он будет шуметь, греться, выглядеть как кирпич и весить столько же (спина у вас одна) берите легкий, с хорошим экраном, звуком/мик (для зума) и клавиатурой а gpu на google colab бесплатно. мало инфы и сложно сказать если влияние последовательности нежелательно, то сетка может это выучить сама (position encoding бывают не обучаемые – sine/cosine в обычном трансформере, и может быть обучаемый – выучить нули). трансформер (точнее attention внутри него) на самом деле не знает, что вы подаете ему последовательность attention оперирует над неупорядоченном множеством понимание порядка ему дает добавка positional encoding к эмбеддингам. во время интервью в майкрософт видеозвонок внезапно оборвался, когда я начал думать над ответом подумал, может интернет у меня выключился или чувак заскучал пытаюсь перезвонить – никто не отвечает (5 мин) оказалось, что у хоста комп выключился с принудительным обновлением винды. потом ты редактируешь эти модули, а у тебя вообще никакой помощи от ide нет (подсветка, автокомплит) – просто чистый geditесли не убедил, хотя бы поставь jupyter lab вместо jn. нужно как-то переписывать код, чтобы его выкладывать (или использовать в проде) – хоть одну библиотеку видели, где сорс – ноутбук? (видели fastai) если ноутбук как черновик используете, а потом сохраняете в py модули (я так делал имплементацию к 1й статье делал) – можно лучше. дебажить принтом или pdb (сейчас лучше, но все равно плохо) всегда казалось неловким скудные подсветка, автокомплит, language server, возможности версионирования, зависимость от библиотеки (когда шаришь, а у них нет jn), невозможность открыть ipynb (только в гите или самому). нравился jn из-за простого интерфейса и возможности без маунтинга работать на удаленной тачке в своем браузере видел все эти доклады, слышал мнения, что jn – это тележка из супермаркета, норм ide – истребитель и закатывал глаза я знал о недостатках jn, но замены ему не было. тред jupyter notebook это плохо или хорошо? ()jn – круто, когда уже все сделано: показать демку того как работает твой код или несколько графиков и их код как среда разработки он не годится, если вы что-то большее чем impo sklearn делаете. python 3 round(125), round(135). mkdocs – простой способ намутить доку к вашему проекту на гитхабе (или вики для команды) и задеплоить на github pages либка генерирует html из ваших md вот как сделать и как будет выглядеть одна из тем (и можно будет много чего подкрутить 1 строчкой). сегодня я планировал свободную программу, где вы можете накинуть темку, которую можно раскрыть 1-3 твитами – присылайте вопросы/темки помимо этого в течение дня буду постить мешанину из технических и научных штук чему меня научил ковид? будет пара кеков и историй. набирать массу довольно сложно высоким и худым – нужно постоянно есть сейчас я ем 7 раз в день, из которых 5 в универе так было всегда – даже когда на бака учился – два контейнера с гречей в рюкзаке всегда были. в финке крутые залы при универе универ дает скидку студентам, а за работающих – платит кайфую от своего зала сейчас – тут есть помост для тяжелой атлетики (я не занимаюсь), поэтому можно бросать штангу на пол в россии в спортзалах греметь нельзя меня никто не бортовал еще тут. потом примутил себе абончик в более респектабельное место, где протренил еще 4 года начал заниматься 4раза/нед запомнились мужики, которые бортовали плечом и бычили безо всякой причины мне нравилось заниматься и я ходил потом полгода в 3-листнике (общага в вшэ мск) – зал топ:. оборудование:– 1 скамья для жима лежа – вешаешь с одной стороны блин, а гриф перевешивает– 2 грифа: длинный гриф 15кг и короткий 10кг– 1 жим ногами и стойка для приседа, не внушавшая доверия– блинчиков парных мало было и вешаешь 10 с одной стороны и 5+5 – с дрмне хватало. третий тред– история дрищав детстве я всегда был худощавым и высоким (70кг / 186см – сейчас 90кг) и мне захотелось это как-то исправить – патриархальное окружение, сами понимаете после первого курса в баке, пошел тренить в свое первое потное гетто – на первый этаж общаги. всего тренька занимать должна 45-60 мин, потом нужно плотно поесть (простые, сложные угли и малян белка), чтобы восст запас энергии и начать строить мыш ткань – на треньках вы ее разрушаете любая крупа с куриной грудкой или нежирным мясом с овощами – лучше не придумаешь. день b1 жим стоя/сидя штанги (маленькой – в залах есть короткие такие с фикс весом) над головой (3xz + 3xz)2 становая тяга штанги (3xz + 3xz)3 подтягивания (сложно, легче: внутр хватом, с резинкой на ноге, в гравитроне, или тяга верхнего блока сидя) (3xz)техника – youtube. день a1 присед со штангой (3xz + 3xz)2 жим штанги (гантель, если не уверены, что сможете пожать 20кг) лежа (3xz + 3xz)3 тяга штанги (гантель) к поясу в наклоне (3xz + 3xz)3xz + 3xz = 3 разминочных по z повт + 3 рабочих по z)между разм не отдыхаем, м-у рабоч – 3 мин. вот изи программа для девушек и ребят на три дня в неделю можно с нее начинать в ней два дня (ab), то есть 1я неделя ава, 2я – вав, третья – по новой кол-во повторений можете варьировать в зависимости от вашей цели и терпелки: худеем – больше (10-15) набираем – меньше (6-10). мышцы болят после первые 2 недели даже после перерыва в тренях на месяц нужно перетерпеть когда работаете с весами, делайте 3 разминочных, постепенно увеличивая вес, и 3 рабочих с весом, с которым вы с хорошей техникой можете сделать 8 (для ребят) и 12 (для девчат) повторений. программа на первые 3 месяца часто включает тренировки 3 раза в неделю (пн ср пт) много частей тела за одну тренировку – тело привыкнет к нагрузкам потом можно начинать делить: один день верх тела, в другой – низ этого хватит еще на полгода а там уж сами разберетесь. тут я бы посоветовал– приходить пораньше – вечером много людей– найти программу заранее – что/сколько делать – там об этом не написано– посмотреть неск видео на ютьюбе с тренями – как это делать– берите тренеров – 1 раз обычно бесплатно и на постоянку, если у вас фак-ю-мани. когда впервые приходишь в зал, накатывает чувство неловкости это сразу видно и понятно завсегдатаям и особо никто не будет обращать внимания неловкость возникает из-за: не ясно что делать, какие-то тренажеры, штанги, бублики, где занято, где свободно, люди, кто-то рычит. зал нужен, чтобы накачать мышцы накачивать ребятам проще, девушкам сложнее, поэтому не стоит беспокоиться, что результат будет как на тех фотках с перекачанными девушками и низким голосом – поверьте, с вам такого не случится, тем более после обычных тренировок в зале. ходить в качку многим кажется скучным, потому что делаешь ± тоже самое каждую неделю и сидишь между подходами в мобилке или просто скучаешь я книжку читаю (в телефоне) или слэк. я прозанимался больше 6ти лет и повидал много новичков в зале иногда знакомые даже просили помочь с программой и сходить им все показать подснежники обычно приходят в зал раннюю весной с годовыми абонами и моментально исчезают это норма. чем тренажерка и правильное питание были полезны для моей карьеры:– дисциплина – отдых от текущих задач (иногда помогает посмотреть на проблему под другим углом)– умение выложиться, когда нужно. второй тред– чем тренажерка и пп были полезны для моей карьеры (я дс – мне это зачем?)– как первый раз зайти в зал и что там делать– про подснежников– неловкость и как ее побороть– изи программа тренировок для начинающихголосуй @ уменьшай p-value. сколько раз в день? больше и чаще лучше, чем редко и на ужин завтрак, обед, и ужин – минимум если в одно и то же время – вообще супер-человек!. когда что есть? говорят и я согласен с тем, что белки должны присутствовать в течение дня поровну а угли и жиры: утром большая часть и снижается к вечеру завтрак и обед дожны быть плотными, чтобы дотянуть до обеда/ужина и не бегать на кофе-поинт за этими вафлями. жиры бывают насыщенными и ненасыщенными:ненасыщ (круто, все эти полезные омеги)– растительные масла (оливковое и тд)– орехи, семечки– рыба– авокадонасыщенные (не оч)– жир животного происхождения (ну кроме рыбы и просто запомнить)– пальмовое и кокос масла– конд изделия. простые (в первой половине дня)– сладкое (чаще всего)– белый рис и хлеб– быстрозаварив овсянка– сок и фрукты и ягоды– мороженноеони быстро усваиваются и дают энергию иногда на упаковке пишут (угл в том числе сахара) чтобы сравнить точнее гуглите гликемический индекс. углеводы обычно разделяются на сложные и простые по скорости усвоениясложные (ок)– кус-кус– булгур– темный рис– гречневая крупа– мучные из твердых сортов пшеницы– крупная овсянка– цельнозерновой хлеб– чечевица– картошка. (например, когда аминокисл состав неполный, мышцы строить сложнее)продукты, богатые белком – обычно животного происхождения– куриные яйца– мясо– курица (филе, в остальном много жира)– творог и молочные продукты– сыр (но слишком жирный обычно)– рыба и море п. многие часто даже не знают, где много жиров или углеводов например, белок может быть растительные и животный в животном более полный аминокислотный состав, чем в растительном, поэтому, если не едите животные продукты, добавляйте больше разнообразия в крупах в течение дня. менее изи варик – это скорректировать рацион ребятам и девушкам, которые не занимаются можно начать с бжу = 1 1 3 (белков и жиров 1гр/кг целевой массы тела и 3гр/кг – углей) если сложить свой рацион из правильных продуктов, будет очень много еды для занимающихся можно 15 1 4. худеть – не значит меньше есть просто другие продукты, которые могут даже больше нравиться иногда достаточно поменять местами то, что едите: зачастую завтрак не плотный или вообще никакой, зато ужин – до отвала, аж не заснуть, устром не встать, времени на завтрак нет 🔁. сумма каллорий за день – линейная комбинация белков, жиров, углеводов (бжу): 4p + 9f + 4c обычно проблемы с двумя последними, переборщить с белком очень трудно можно снизить кол-во жиров (но не менее 1г/кг веса тела) и добавить в два раза больше того, что убрали. зал не нужен, чтобы сбросить вес важно, сколько каллорий съели и сколько потратили бег сжигает в 2 раза больше каллорий, чем ходьба подснежники приходят в зал и 20 мин пыхтят на беговой – переодевание больше времени занимает и терпеть надо, хотя могли бы просто пройтись 40 мин. – белый рис – на бурый– макароны только из твердых сортов– жажду утоляю водой, вспомню, что в 1л сока 110гр сахара (150 грамм макарон)– когда голодный, хочу сладкого и жирного– вот эта печенька с шоколадом = 30 мин бега. вот что можно просто на изян помнять:– чай/кофе без сахара – через неделю забуду и не вспомню– сладкое и жирное не ем на ночь, а просто на первую половину дня переношу– фрукты сейчас как сахарные бомбы – тоже пораньше– молоко с красного на синее поменяю. первый твитизи-мод: расскажу о каких-то простых вещах, которые сделают жизнь лучше даже не нужно будет в зал ходить и какую-то диету держать невероятную они даже со спортом не связаныхард-мод: best practices в правильном питаниидиванные диетологи го в тредик – все свои. прежде чем начать, я хочу оговориться я не хочу, чтобы вы чувствовали себя некомфортно по вашей физ активности главное – ваш талант треньки/пп для меня были поводом (иногда – прокрастинацией) отвлечься от учебы/исследований и стресса кому-то это просто не подойдет. занимаетесь финтесом (групповые, в тренажерном зале или дома, йога и проч)? если ковид прервал ваши регулярные занятия – отвечайте да. привет сегодня будет про потное гетто это не про херванту, как кто-то мог подумать, а про качалкутри треда: правильное питание 101, становимся посетителем гетто 201, история дрища. да как считаешь нужным усреднение ошибок сбалансирует. я все это время думал, что собеседуюсь в аальто, а оффер был в тампере но меня это вообще не волновало – оба универа были ноунейм для меня и научник мне больше понравился и разговор с ним клеился я согласился. интервью было по алгоритмам, которое проводил леша (ныне phd 🎓) из оулу 🇫🇮 интервью было на 40 мин (bigo, сортировки, гномик, и задача по мл), я довольно бодро на все ответил (почти) за 20 мин и был уверен, что будет оффер через неделю он пришел. я первую часть сделал, а вторую не стал, сказав, что я cs231n прошел и бэкпроп могу даже для батчнорма и lstm на нампае написать и скинул гитхаб (like a boss) проф из аальто согласился долго ждал, написал мой текущий научник и позвал на еще одно интервью. первый собес – он с еще одним профессором (мой текущий) оба занимаются зрением и slam мой научник еще занимался другими штуками в dl, что было ближе к тому, что я знаю после собеса дали домашку: саммари к статье и напрогать бэкпроп свертки из курса хинтона на матлабе. в процессе поиска я наткнулся на вакансию в одс, которую запостил егор это были вакансии от hict (какая-то орг от универа хельсинки и аальто) (кстати, набегайте в этом году дедлайн 2 февраля) написал нескольким преподам ответил один из аальто. третий тред (последний)– как нашел программу– про собеседования– как я отказался делать домашку (но взяли)(не забывай голосовать). получаю письмо от него непредвиденные семейные обстоятельства, не работаю, не знаю сколько займет, набирать не буду я написал, condolence letter и сказал, что буду ждать и домашку доделаю (доделал) был февраль он написал мне в августе, а я уже оффер в финку принял. второй фэйл тоже с австралией я подался еще в другие универы один профессор откликнулся, если пройдешь – дадим стипуху собес (у меня 07 у него 16 часов) – веселый, молодой, постоянно ел банан говорит сделай домашку и потом тех собес будет я доделывал домашку и. в любом случае за неделю норм рп не напишешь (я ноль в reinf l), если не знаешь, что писать поэтому начали думать про следующий период в австралии 2 раза в год начинается обучение, но степух сильно меньше во 2й раз ну я приуныл, и уже оффер имел на руках, поэтому слился. я туда-сюда и извините, но вот письмо ответил, что нужно было в копию поставить, что не успею выпуститься из маги и рф под санкциями – без рп никак сейчас нашел др письмо, где он в копии был когда спрашивал про statement of purpose (не тоже самое, но должно было триггернуть). было полгода до подачи, сделал домашку и начал готовиться к англ спросил надо рисерч пропал? чувак от универа сказал, что не надо – а в копию профессора не поставил понимаете, к чему все идет? за неделю до дедлайна все готово, загружаю доки, аелтс, профф пишет а где пропозал?. я написал geoffrey decrouez (моему научнику с московского фкн) у него phd из мельбурна он дал контакты 5 профессоров, я питчнул им себя (сразу всем c cc в письме лол) один внезапно ответил грит – подавайся, у меня есть 50% стипендии, другую половину надо где-то забацать. мне хотелось международного опыта и я подавал всюду, где можно было машины учить, желательно зрению с глубоким обучением я никогда не был заграницей, поэтому мне было все равно, но хотел в австралию (язык и тепло). второй тредпро подачу в австралийские универы– как не надо делать– фейлыи не забудьте проголосовать. я учусь/зак аспу вы учитесь в аспе/phd или закончили аспу/phdработаю/учусь/… вы учитесь в школе/бак/мага/колледж/техникум или работаете в индустрии но у вас нет докторской степенитвиттер разрешает только 4 варика и 25 символов. выбираете куда пойти на phd что для вас важнее?. вот, что следует почитать от мудрого человека – ничего лучше в интернете я не видел. теперь нужно досдать английский если еще не и другие экзамены, которые требует универ собрать доки и уточнить нужен ли перевод чего либо до перевода, сделай апостиль как только получишь диплом! это займет до 45 дней европейское приложение к диплому не катит 🙁. у будущих коллег спросите, ск часов и дней в неделю они работают (много!), как часто видят профа, есть ли постдоки, кот вам смогут помочь, как налажен пайплайн внутри группы, кто обычно работает над проектом, ск человек “довесом” идет авторами в статью, нужно ли преподавать. как там с английским ( – не знаю что там в топе германия делает лол) потому что так будет сильно комфортнее посмотрите варианты квартир, возможно, придется платить 2 мес вперед и ваш худой рублевый студенческий карман это может задеть. домашка, 1–2 собеса и вас примут если неск офферов, посмотрите на то, где их студенты публикуются, можно им написать (с оффером вам ответят) чекните сколько стоит ваш уровень потребления будет на новом месте ( можно ли работать вашему партнеру. больше вариков можно найти в ods (#_jobs_academy_phd), linkedin, сайтах профессоров пишите профессорам – не стесняйтесь указывайте на пересечения в интересах, а не просто я хочу на пхд – вот резюме не ответили, через недельку еще разок попробуйте – больше не стоит. рек письма очень важны (2+) обычно просят контакты и высылают им форму как и фичи в модели, выбирайте релевантных людей, но далеких друг от друга помимо текущего научника, возьмите у старшего, где стажировались, или были та, у кого 5 получили мне приятно, что мне написали:. проекты можно сделать из крупных домашек и кинуть на гитхаб хорошо учишься у препода, будет выше gpa и можно на та напроситься из кэггла – техрепорты и реферы все переплетено это те вещи, которые нельзя просто так взять и сделать перед дедлайном помни – нужна статья. высокий средний балл обычно не очень важен, если по другим пунктам все ок, но в америке любят, чтобы ты был в топе из потока (5%) у меня был ~95/10 и я был топ-1 в маге при подаче. research proposal – это как статья без результатов иногда требуется, иногда – нет его довольно просто написать, если у вас есть статья, и займет много времени, если ее у вас нет здесь научник у меня его не потребовал, а вот в австралии потребовали, но об этого позже. опубликовать статью будет полезно для вас по многим причинам поймете, готовы ли вы это делать фулл-тайм еще несколько лет, к кому подаваться (кого цитируете), что важно в этой области (для рисерч пропозала) у меня вот не было статей и я пожалел. на что смотрит научник? на то, есть ли статьи, где ты – первый автор, с кем ты работал (рек-письма), рисерч пропозал, gpa, мотивашку, ну и резюме в целом: проекты, стажировки, активности (та, волонтерство, каггл) универу нужны будут pass/fail ielts/toefl, в сша еще gre вроде. требования к вам можно разделить на два вида: на которые будет смотреть ваш будущий научник и универ в отличии от поступления в магу и бак, влияние универа значительно меньше в случае аспирантуры если вам удалось убедить научника вас взять, то остальное уже приятные хлопоты. ноябрь–январь – самый активный период с подачей заявок в аспирантуру за рубежом на вторую половину 2021 я думаю, те, кто сейчас подаются, уже все это знают тем не менее это будет полезно тем, кто только собирается, и даст вам идеи как найти больше вариков. аспирантура у вас займет 3-6 лет и чем старше, тем больше появляется хотелок, которые сложно совмещать с обучением в аспе, самолюбие будет задето в индустрии у вас, скорее всего, будет выше зп и перестроится будет сложно ну и просто искорка может угаснуть – не затягивайте. вот вы учитесь в маге/баке и собираетесь на phd думаете, может стоит сперва поработать после выпуска, а уже потом на phd я считаю, что делать так не стоит вернее если хотите в аспу, подавайте сразу после выпуска да, есть случаи, когда после работы начинают, но…. первый тред– почему сразу после учебы– на что смотрит научник и универ– почему нужна статья– пропозал, рек письма, gpa– как выбрать из офферов. сегодня расскажу про то как нужно и как я подавался на phd, как уменьшить вероятность ошибок, и почему меня не взяли в универ в австралии, и почему нужно идти на phd сразу после универа будет три небольших треда. вы учились/учитесь в аспирантуре?. о прикольно🤷 она так называет родителей одного пола. рандомный факт: так как я живу тут после 2-х лет, на прошлой неделе прислали приглашение голосовать в муниципальных выборах приглашение на нескольких языках помимо двух официальных, включая русский. рандомный факт: санна марин – самая молодая женщина премьер министр в мире (35 лет) ее все любят училась в тампере, выросла в rainbow family и вегетарианка. было! аж джва!. рандомный факт: финны любят свой флаг – в каждом дворе, перед уником или бизнес центром есть флагшток флаг поднимают на самую макушку флагштока на праздники везде до середины во время церемонии, когда в доме кто-то умер; после церемонии поднимают наверх до конца дня. рандомный факт: неравенство доходов довольно низкое (топ 10 стран) за фак-ю-мани не сюда, зато если неталантливый (не повезло) – страдать не будет вот график зарплат, разделенный по образованию, показывающий как зп меняется в течение жизни но бакалавров немного жалко. рандомный факт: часто бывает, что за звонок в поддержку, что-то спросили или заказать ты будешь платить (1-3е/мин) + что платишь за симку сразу отвечают? не, ждешь ответа оператора по несколько мин иногда нужно цифры нажимать, а все на финском – делаешь несколько заходов. рандомный факт: косо на вас как раз посмотрят если вы попытаетесь помочь кому-то с тяжелым (бабушке, женщине, девушке) – в россии подушевнее может поэтому финки водят грузовики, автобусы, трамваи, работают охранниками и на стройке. рандомный факт: в финке любят шутить про шведов, много мемов почему? потому что немножко завидуют особенно часто шутят про хоккей и очень радовались когда выиграли у шведов и потом стали чемпионами в 2019 – помните испания–россия матч по футболу? вот так же было на улицах. у меня вид на жительство как у работающего, с таким живешь 5 лет и можно, либо на гражданство (нужен раб контракт и язык финский или шведский), либо на постоянный внж у вашего партнера внж будет таким же как у вас: разр на работу и остальные ништяки можно иметь два гражданства. интернет очень быстрый и в студ жилье бесплатный (100мб) симки двух видов: с именем (+контракт) от 10е и без (платишь за день пользования) от 25е поменять с тем же номером один на другой нельзя, поэтому я до сих пор на безымянном за 27e с 5g от 40е. банковская система развита слабо избалованному россиянину будет некомфортно, так как банкоматов мало, оплата с телефона не поддерживается в крупнейшем банке финляндии (в др ок), закинуть деньги на счет можно только в офисе, который работает два раза в неделю и там очередь 20 чел. многие молодые счет открывают и закидывают туда понемногу два года как только 10% от стоимости жилья набирают, им банк выдает ипотеку на 115k (столица 180) e под 2-3% – но купить на это можно либо новую студию либо вторичку. свою кв покупать от 200к+ е (столица 300к+ е) за новую двушку с отделкой и мебелью, и что-то вроде коммуналки 200е/мес и через 50 лет весь дом накроют лесами на два месяца (вы – к маме) и будут реставрировать здание и менять трубы, и ты за это платишь (30–50к е). съем жилья: во всех городах примерно одинаково, в столице – +20% студия 500е+, двушка 700е+ без коммуналки хорошо, что когда живешь далеко от центра, не чувствуешь себя ущербно финам нравится жить в своем доме, чтобы лес или озеро видно было, а в лесу есть грибы, в озере рыба. такси: за звонок 2е/мин (если приложения на мобилке нет), 8е за подачу, и по 2е за км (но будет комфортно а иногда на тесле) убер только в столице автобус 2е многие пользуются великом круглый год, но дорожек мало – обычно просто по тратуару мимо тебя проносятся. сервис при этом дорогой торт 3–6е, кофе 2–5е, сэндвич 8–13е, в рестике начиная с 30е без напитков с мишленом есть в столице и один в турку в барбершоп (с бородой, без /2) сходить 30е к туркам, которые не спикают, 60е к финнам для девушек от 50. уровень сервиса, в целом, заставляет скучать по родине-матушке только в питере каждая вторая кофейня будет лучше зато цены высокие и ± везде одинаковые напитки на основе эспрессо не оч: в тампере есть только одна кофейня с la marzocco, в хельсинки – больше. я моем городе ~300k чел проживает (2-й по населению) и делать тут особо нечего во всех кафешках побывал, везде погулял людей на улицах немного, по воскресеньями – вообще мало и половина кафешек закрыты нету питерского движа ночного едешь домой к шести. так вот, в ресторан можно прийти в кроссовках – никто не выгонит, даже косо не посмотрят официант тебя обслуживает только в рестиках чаевые оставлять не принято в кафешках заказываешь у прилавка и идешь с заказанным на свое место, а иногда еще и свой поднос на стойку несешь. финны, особенно постарше, любят носить комфортную одежду по типу для хайкинга ярких цветов ребята помоложе одеваются примерно так же как молодежь в рф девушки еще любят marimekko – финский бренд женской одежды на улицах очень часто сможете увидеть вот такой шоппер у девчуль:. на улицах я часто слышал русскую речь (в этом году меньше), и даже осознал, что иногда могу понять, что человек из россии, завидев знакомые предметы одежды или черты лица. рф – первая по числу иммигрантов иногда спрашивают откуда я, я – фром раша – огонек в их глазах на малость угасает есть чувство, что относятся как к приезжему: в отсутствии интереса какого-либо несколько раз спрашивал угадать откуда я – никто не угадал. на улице, даже вечером, никаких проблем я не встречал бывают громкие или агрессивные группки но они обычно между собой – на других не бросаются да и, в целом, заметил, что люди толерантны к татухам (водитель автика), яркого цвета волосам, пирсингу, косплею и ориентации. тред про финляндию (2/2)финны не очень разговорчивые, тихие, чаще всего угрюмые и без эмоций напоказ когда подвыпьют, начинают говорить коллега (🇮🇳) рассказал: к ним в баре приставал финн, обвиняя в том, что он без работы из-за него другие финны в там его (финна) успокаивали. самое яркое воспоминание: из бара с криками вырываются пара (м и ж), которая колотит друг друга женщина побеждает – мужик на полу; их разнимают выходит второй мужик и подходит к встающему и обнимает его а та женщина кричит нам tervetuloa hervanta (добро пожаловать в херванту). крепкий алкоголь, либо в баре, либо только в монополизированных магазинах, которые не работают ночью и по воскресеньям, и довольно дорого пивас/сидр можно в супермаркетах купить – обычно все берут ящиками прямо (12шт) проблемы с алкоголем я тут не вижу, хотя иногда бывает. немного странно, но дороги/тротуары убирают редко с другой стороны обувь всегда чистая летом и зимой помню в питере каждый день мыли, а башмаки постоянно в пыли были некоторые говорят, что воздух тут чистый – я не смог отличить воду все пьют из-под крана без фильтра (кайф). погода как от питера до мурманска – летом довольно тепло, зимой – снег лежит, который они посыпают мелким щебнем, который в апреле лежит на чистом асфальте небольшим слоем и немного раздражает потом его собирают и в следующем году используют. медицина – одна из отраслей, где я столкнулся с проблемой языка, потому что медперсонал и те кто на телефоне не спикают иногда или говорят, но плохо; особенно если постарше в остальном, все говорят очень хорошо – это я не в столице еще живу это делает жизнь очень комфортной. мне очень нравится инклюжен людей с отклонениями (differently abled) всякие реабилитационные центры расположены в бизнес офисах или в студ жилье по супермаркету часто люди мимо тебя проносятся на колясках таких с мотором – выглядит круто. что-то спросить, приболели – записываетесь к медсестре (3 раза в год бесплатно) – она вас переправит к доктору на препараты по рецепту 50% гос-во платит когда большие проблемы, и человек набрал ~400е в месяц на лечение, остальное покрывает государство. так вот, просто прийти к стоматологу 15-20е, осмотр до 40е (больше тут: если мест нет, отправляют в частную, но разницу гос-во платит не пришел – 55е. медицина считается развитой когда приспичит, примут в тот же день когда не срочно – ждешь два месяца или даже больше я привык к стоматологу ходить раз в полгода просто на чек-ап, приходится записываться заранее ну или если нашли что-то и не болит через пару месяцев сделают. студенты балдеют от этих привилегий и иногда остаются студентами еще несколько лет идут работать, заводят детей и живут в студ жилье управы на них нет еще у студентов много разных тусовок, студсоюзов, учатся как-то расслабленно – какого-то задротства я не наблюдал. школы тоже бесплатные + питание за универ тоже платить не нужно если вы с партнером переехали работать, партнер может в универе бесплатно учиться студентам много где скидки – на еду в универе (75%), на жилье (~50% от рыночной), проезд (40%), стипендия 7 прожиточных в москве. еще гос-во выдает пакет с детскими вещами на первой год (заценить милоту ну и много других пособий в добавок (100-150е+/мес). много кто пользуется этой соц помощью довольно много мигрантов (да и финнов) становится на учет в центр занятости, и им платят пособие, которого вполне хватает с детьми тут удобно: детсады бесплатны, с коляской в автобусе – тоже, везде есть пеленальни в общ туалетах. рандомный факт: многие думают, что финляндия относится к скандинавским странам, но на самом деле нет она типа просто нордик но тут тоже скандинавский социализм с сильной соц поддержкой и помощью от государства всего в финке 5+ млн чел (меньше чем в питере). финляндия уже два года как – самая счастливая страна в мире счастливая не в бытовом смысле, а согласно индексу, в который входит:• реальный ввп на чел• социальная помощь• продолжительность здоровой жизни• восприятие коррупции• и еще пара индикаторов. тред про финляндию (1/2)начну с особенностей, о которых туристам рассказывают финны больше всех в мире пьют кофе и любят сауну лапландия (север финки) – родина санта клауса, еще в лапландии можно погонять на хаски, отведать оленины, увидеть северное сияние и норм белые ночи. рандомный факт: поехал я в предрождественский вечер (24 декабря) в четыре часа в центр города везде подсветка красивая, а на улице никого не было и все закрыто я вышел из автобуса, прошел до соседней остановки, подождал 30 минут на морозе автобуса и поехал домой. рандомный факт: в финке гос-вом монополизированны азартные игры можно купить лотерею на кассе, игровые автоматы стоят в каждом магазине – в rkioski тоже – и часто вижу людей ср возраста и постарше, стоящими за ними в крупных моллах есть даже отдельные заведения я не одобряю. рандомный факт: сауны есть в каждой квартире, если не в квартире, то на первом этаже в доме (у нас еще и на крыше) рядом с частными домами по выходным вкусно пахнет банькой много общих саун – совместно мужчины и женщины никто не стесняется иногда бывает даже так:. рандомный факт: по всей финке есть маленькие ларьки (rkioski), там можно купить прессу, кофе, перекусить в них есть несколько фичей: можно у них забрать посылку, заплатить за кв когда нет банковской карты, снять деньги с карты (когда атма нет рядом), закинуть на проезд, мобилу. студентов в этих нарядах можно встретить в любое время года, но больше всего вокруг 1 мая (vappu) – на параде во время парада, каждый факультет несет какую-то фигуру на тему факультета в конце с шампанским окунаются в воду на кранах город на это смотрит. рандомный факт: студенты носят разноцветные комбинезоны с патчами и белую фуражку патчи можно получить на мероприятиях цвета означают пренадлежность к факультету (я только знаю: черный = it). сегодня расскажу про финляндию, чем россия лучше, про русских тут, шутки про швецию, алкоголь, пособия, студентов, чо почом и иммигрантов что тут делать и о том как я поехал в рождественский вечер в центр города и что там увидел в течение дня будут рандомные факты один тредик. сейчас сижу дома – жду вакцину буду прокрастинировать от рисерча и писать вам на этой неделе. потом я взял это решение (3-хдневное), зафиксил баг, сделал код и докер для приватного теста, мы оформили техрепорт и засабмитили на конфу, где была соревка вокруг этого датасета и снова выиграли а приз со школы нам до сих пор не выслали (1к фунтов, 4-й месяц заканчивается лол). летом 2019 съездил на icvss, топовую летную школу по cv на сицилию а в этом году что-то случилось и все школы отменили в одс кто-то скинул анонс летней школы от queen mary university of london, которая проходила в онлайн меня взяли а я с тимой выиграл соревку при этой школе. на основе статей начал пилить либку (), которая позволяет доставить фичи из видео: rgb, audio, optical flow короче можно закинуть папку с mp4/wav, запустить на своей тачке с несколькими gpu и пойти в слэке b читать – все на соплях конечно же. днем исследовал, вечером – пилил пет-проекты имплементировал yolov3 и прикрутил к сайту: типа пользователь может отправить картинку, а в ответ получит картинку с предсказаниями: работает здесь – кидай фейлы/результаты в реплай, баги – в дм. ну а я прошел cs231n и знал что такое image captioning (описание картинки предложением), поэтому стал заниматься video captioning (описание фрагмента видео предложением) в 2020 опубликовал 2 статьи (#aicle_essence в одс) – обобщил трансформер для мульти-модального входа. а мульти-модальные сетки – это когда на вход сеть принимает инфу из нескольких источников информации – например аудио и соответствующие кадры из видео вот несколько примеров того, какие модальности обычно комбинируют. переехал и стал исследователем! научник предложил поработать над мульти-модальными сетками, я – предложил работать с видео так и договорились к обучению анализу видео можно подойти по-разному: класс и предсказание действий, суммаризация контента, ответы на вопросы из видео. летом 2018 перед переездом успел втиснуть одну рисерч стажировку в црт (центр речевых технологий) там я познакомился с женей смирновым ( который оказался классным ментором в црт подсел на pytorch и экспериментировал с сетками для face recognition. диплом поехал писать по обмену в московскую вышку на фкн к geoffrey decrouez диплом был об оценке плотности копул и мало чего получилось, но на диплом наскрябал к тому времени я уже получил оффер на phd в универ тампере в финке заниматься комп зрением к. он же и пригласил меня в одс, но об этом в другой день два года маги прошли весело учился чему нравится и брал онлайн курсы прошел первый поток открытого курса по машинному обучению от , а потом cs231n по сверткам и дл от стэнфорда. в мск не прошел, зато поступил снова в питерскую вышку на новую программу по анализу больших данных там научили питону (), алгоритмам, вычстату, скале спарку и фп (), мл и дл (с николенко) и другим полезностям, а заведовал всем этим маестро. кстати, диплом у меня был про gender-gap у молодых в зп – он есть и довольно рано возникает девушкам начинают недоплачивать после 22. на 4м курсе наметил в рэш, а потом понял, что мне датку крутить больше нравится, а не экономикой заниматься и решил на науки о данных в магу матан и линейку забыл уже к тому времени, начал готовиться был 2016 год выпустился 1м в рейтинге, а вот на фкн в москву не прошел 🤷. как бы то ни было, от него я узнал про ds, дэ сэксиест джоб ин дыс сэнтери, и начал активно налегать на r (договорился с преподом по эконометрике что буду r юзать а не stata) курс от бориса демешева по эконометрике прошел на курсере – до сих пор считаю топовым курсом там. к слову, препод этот был крайне криповым когда девчули подзывали его помочь с компу, он их приобнимал как-то так, что несколько потом отписалось от его курса но тогда меня эти проблемы первого мира не заботили – меня не трогал, я получил свою десятку и был доволен. ставь лайк если тоже начинали с r. в то время на дворе был 2014 и к нам чувак из одной-крупной-компании пришел вести пары по bigdata рассказал нам про r и чтобы мы кабанчиком его начали учить так я и написал свой первый скрипт в жизни и был он на r (и мне не стыдно!). …так вот, начал я все усердно учить – не хотел я быть хуже всех и болтаться в конце рейтинга на втором курсе прочли матстат, потом эконометрику (это интерпретируемый мл для экономики: регрессии и таймсириес) и я прибалдел от датки крутили ее в stata, eviews и gretl. рандомное воспоминание из универа: со мной первак учился на парах он тихонько сморкался в пальцы и засовывал руку в карман, а потом вынимал чистую было у вас такое? а был чувак с фляжкой коньяка, который всем предлагал прибухнуть перед началом пары?. был 2012, взяли в вышку на экономфак (на самом деле на соцфак сначала, но да ладно): модули, рейтинги, блокирующая двойка – респектабельно подсуетился, общажку дали нормалек чуть не вылетев на первой сессии, я начал усердно впахивать ко второй…. конечно приятно было от директрисы получить аттестат и коммент, что я его сдал лучше всех не сотка конечно, а 75 вроде – чтобы вы понимали уровень да и остальные тоже сдал ок прошел конечно же в ту академию перед домом и еще отправил в доки в питер – зачем? хз архитектура. так я и решил учить общество и английский учительница по англ сразу засомневалась, тк я репетитора брать не собирался и вообще ничего не знал, потому что, ну знаете, бывают такие предметы – не респектабельные поцаны все книжки разрисовывают и бросают на перемене в раззяв. в общем и целом, до 11 класса как-то учеба меня вообще не интересовала: играл в комп, смотрел аниме и серики как сейчас помню, в начале 11-го класса решил без особой на то причины стать экономистом и метил в какую-то академию рядом с домом они принимали по 4-м экзаменам. представлюсь я вырос в калуге и ходил в обычную школу рядом с домом когда был поменьше играл в футбик во дворе и матерился когда стал постарше – матерился в каэс адин и шесть и линейке после девятого класса половина друзей ушли в пту и колледжи, а я решил в школе остаться. про технические штуки поболтаем в воскресение почему следует отказаться от jupyter в пользу vscode как редактировать код быстрее и какие тулы нужно поставить в терминал, чтобы быть как кул хацкер вася, сын маминой подруги. в субботу будет дата елка у одс, поэтому расскажу про сообщество немного со своей колокольни про завтраки, как начал организовывать мл треньки в питере и синдром самозванца. в пятницу хотелось бы какую-нибудь свободную программу напишите, о чем рассказать на крайний случай могу порассказывать рандомных кул стори про поездку в выборг из питера на 1-скоростном велике с палаткой например или как в этом году не взяли на стажировку. про потное гетто будет в четверг я недавно подсчитал что в качалку хожу в сумме больше 6 лет было полгода перерыва, когда начинал phd, и из-за ковида пару месяцев, но без этого каждую неделю по 3-4 раза всегда тренил. в среду расскажу про то что хотел бы знать перед тем как искать phd программу и научника, что узнать о стране, куда собираешься расскажу про небольшой фейл с поступлением. завтра будет про финку я тут живу уже третий год и могу немного рассказать о русских, о том как относятся к русским, про (пьяных) финов, как классно когда ты – студент, про швецию и квартирный вопрос. план на неделю такой:сегодня (вечером) про себя – а то вы скорее всего впервые мое имя увидели сегодня может даже будет интересно тем, у кого тоже не очень релеватное образование к компьютерным наукам и уж тем более комп зрению #welcome в одс не видывал столько самолюбования. привет! я вова яшин ()! на этой неделе я буду здесь за главного я phd студент в универе тампере в финляндии будет про phd, финляндию, одс, потное гетто, и задротские штуки про код. # сообщение от куратора привет! это была хорошая неделя как и всегда, все твиты за неделю можно прочитать в нашем архиве – аккаунт следующему автору. всем пока! следующие твиты будут уже следующего ведущего. он, конечно материальный вопрос - где предел, чтобы остановиться? об отсутствии предела я и старался написать. да нет, особой иронии нет мы говорим об одном и том же я думал, что у многих в вузе был предмет вычислительная математика, там это проходили и проще будет сослаться на это я на самом деле пока именно пользователь autodiff, в детали пока не лез. я где-то в одном из ответов писал схему, первые 2 года жена сидела в декрете на full-time, а это описана схема 3 года ребенок пошел в садик в районе 27, как все осенью садик - это болезни всей семьи, ранний подъем в 6-45 утра (вместо 9), адаптация ребенка (он например, против). вот тут нам пишут, что с r все хорошо стало охотно верю сейчас многие языковый экосистемы - целые микровселенные в модели инфляционной вселенной (зачастую даже не подозревают, что решают одну и ту же задачу), как упомянутое изобретение backprop одновременно двумя коллективами. ну для меня эта книжка своего рода ориентир по функционалу сидишь, думаешь, над какой-то фичей в либе зачесалось а как там в r? обычно там есть все свой первый kaggle я заводил на r. вот что вспоминал. ваши бы слова, да молодому датасайнтесту бы в уши я несколько раз оказывался в неприятной ситуации, когда приходилось объяснять людям - что тут svm лучше, чем нейросеть, а обсчитать можно на порядок больше под грустью имел ввиду окончание холодной войны и зимы нейросетей. ну с двухлетке уже почти можно объяснить - мама на митинге, пойдем играть в коридор а раньше 2 лет - там очень разные дети, у кого то в 3 месяца можно сидеть на созвонах и работать - а дите тихо угукает, у кого-то шилопоп и агрессор против дровосеков в мониторе. о, там была сложная схема 20 часов в неделю как два полных дня и стендапы каждый день 2 дня в офисе один из этих дней сидел я (ходил на стендап во время сна), отрабатывал в субботу, другой моя мама (золотая женщина) через 7 месяцев дали садик, но стало на самом деле сложнее. глазастый ты, однако это кстати признак, что илиаду я таки листал уже а вот на одиссею времени не хватило пока а анализ точный - я человек первых 80% по парето борюсь с этим. поднять на нем приложение в прод мне было тяжело 5 лет назад, пакеты очень неоднородные и многие написаны ну вообще не программистами немного отдает matlab (я вот его я не люблю ооочень сильно за экосистему и навязанность в научно-государственной среде). немного писал в контексте коннектора к spark, но в целом нет у меня странный опыт - я на нем писал ds в 13-15 году немного, rstudio, учится легко, ходил на также я пытался сделать r-коннектор к igniteml, но забил. да, задавайте вопросы, не стесняйтесь, у меня сегодня масса времени - кулинарный марафон до вечера, жена обещала научить готовить сырники (я их потребляю, но готовить не умею). если есть вопросы по контенту этой недели - пишите в личку твиттера или в телегу, там я тоже я начинаю завершать свое дежурство в этом твиттере к концу недели мы разговорились на пятерку, я думаю перехожу в режим ответов на вопросы и комментарии к твитам. у меня есть linkedin, там я держу профессиональные связи стучитесь там, можете написать что вы dsunderhood, приму дружбу. подписывайтесь на twitter нашей команды, если вы заинтересовались kotlinfordata. также я веду пару вк-tg для новостей jvm языков (пишу редко и о наболевшем, никаких новостей про новую версию spring, скорее про сами языки) tg:. с новостями своими и которые мне интересны в сфере bigdata (теперь больше ml/dl фреймворки) я веду вк tg:. также все свои (теперь редкие) выступления я выкладываю на youtube (возможно там появятся какие-то видео по spark, kotlindl и других java-фреймворках в 2021). для вновьподписавшихся и тем, с кто успел ко мне привыкнуть и хочет поглубже разобраться с kotlindl/igniteml/kotlin/tensorflow internals сейчас будут ссылки где на меня можно подписатьсяtwitter - medium - -. толстые тома и клод моне - приданое жены шишкин - уже мой любим большие фолианты опять же - ребенку куча картинок, в 3 уже можно отличать моне от шишкина и ван гога стили у них разные что-ли). я немного разбираю текст на польском, поэтому во время командировок привозил пару раз книги по истории и программированию из польши programista na konferencji rozumie prezentację o kompilatorach i bazach danych о, вы тоже смогли!. в свое время я хотел поступать на истфак (в 15 лет) - с тех пор осталось увлечение, любовь к работе с источниками и интерес к археологическим памятникам особенно интересны из истории страны: 20-ые xx века, развитие древнерусского языка, то как жили наши предки 300-500 лет назад. ну и еще одна из полок: для отдохновения и вдохновения ума книги разрешенные к листанию на выходных гомер - свежий, из зингер-башни, справа комиксы про статистику и теорию игр из почившей республики немного r/python - не влезли на соседнюю полку). по этой полке вы можете увидеть мою бурную биографию справа налево (книги по 1с я раздал несколько лет назад, их нет) книги старые и добротные, местами подаренные на java-конфах, каждая из них - отлична в своем поле много информации не устарело и пригождается мне sometimes. также мне понравилась книжка грокаем глубокое обучение, где с нуля пишется pytorch-подобный фреймворк с удовольствием писал код всю книгу (правда на java). когда пишем одновременно:) особенно я кайфовал с его предисловий. мне очень нравятся книги разряда идеи машинного обучения или глубокое обучение от гудфеллоу- они содержат очень емкие выводы, которые просто открывают тебе глаза на суть вещей дают ключ к пониманию иногда, конечно, для быстрого изучения - покупаю и tf за 3 часа. отдельно хочу отметить книгу сергея николенко синяя книга про сетки с рыбкой в какой-то момент она стала самой глубокой, сложной, и широковспоминаемой на русском языке у сергея талант излагать интересно не знаю его твиттера к сожалению. дальше пойдем кучно: я хорошо читаю на английском, но еще больше люблю читать книги по dl/ml на русском, особенно постобработанные после прогона через googletranslate обычно я читаю раннюю версию на английском, но потом покупаю переводную версию на русском я уважаю труд авторов. если подходить с меркой реализма, то прыгнул я на эту книгу вот с этого разбора проблемы нахождения оптимального генплана в ссср. только прочтите последний абзац этой книги me cryingкнига написана с глубокой любовью и уважением к русскому языку, науке, сказкам и персоналиям. неделю назад заказал чудесную книгу red plenty она про выдуманный мир, в котором канторович научился решать задачу линейного программирования поверх генплана ссср о выпуске товаров эффективно это сказка о тройке, это киберпанк, это защита лужина 20. мне все это очень нравилось но в 2011 году никто за это не платил только-только загоралась заря хайпа nosql систем, а-ля mongodb. в 2011 я был на конференции в челябинске и купил вот такую книжку в киоске юргу: mlp, больцман, реккурентные сетки, моделирование нелинейности все уже было фреймворков не было мне она очень понравилась, мы ее потом немного обсуждали на семинаре по нейросетям в омгу. однажды, мой однокурсник уезжал в далеком 2009 из омска и раздавал книги так мне досталась гениальная польская книжка по нейросетям, геналгоритмам и нечетким множествам эта книга дала мне ощущение, что я с своими матмыслями не один и что можно немного писать против ветра. в начале изучения ml/dl хорошим ориентиром были емкие учебные пособия от яндекса тогда я и узнал о великой гонке ядерные советские методы против их продажных капиталистических нейросетей все грустно закончилось. очень сильно я любил советские учебники по терверу и матстату у нас был очень сильный преподаватель в омгу в каком-то смысле был для меня ориентиром в том, как не панибратствуя и не унижая студента доносить до него сложный и качественный материал. мои первые книги по dl/ml и релевантной математике:первой была вот такая книга чжун кай лая однородные цепи маркова цепи маркова для предсказаний и моделирования меня так вдохновили, что я даже делал либу для них на java в 13 году, ее внедрили в паре мест у заокеанских друзей. есть ли у вас домашняя библиотека?. с про боно вообще интересно - этого стало в 10x меньше, и оно приняло другие формы - вместо впиливания тонн времени в малознакомых случайных людей я теперь сфокусирован на поддержке моих ближних - непосредственных коллег, ревью и небольшое менторство в важных для меня кодебазах. всеобщая удаленка с одной стороны даровала нам дополнительной время для семьи, с другой стороны, многие семьи держались на том (есть 2 грустных истории среди знакомых), что они друг друга не видят 24*7 и все удобно (я утрирую, конечно). я бы на них делал, будь моя воля). кстати, про профлитературу сегодня я буду брать с полки некоторые книжки и про них рассказывать никаких бешеных инсайдов, просто люблю свою домашнюю библиотеку, возможно вы посоветуете свои хорошие книжки в реплаях. я вам могу пожелать сил, удачи, высыпаться, и адекватного работодателя у меня среди знакомых есть прецеденты выхода на работу после декрета программисток и автотестировщиц, в том числе растивших детей в одиночку очень сложно, да вечный баланс между своим личным и общесемейным. ну вот фараоны строили пирамиды, кто-то бросался в экспедиции в новые земли, зачиная десяток детей во время перерывов, кто-то работал на двух работах (или шести) думаете дело было в содержании семьи? мне думается, немного в другом. передал, она передает спасибо, и что было сложно, но возможно, если второй пилот адекватный и не тянет одеяло на себя все время:). 3 год декрета она работал на полставки, потом вышла на полную до рождения она была в ее направлении медлу мидлом и синьором, сейчас стала ближе к лиду: судя по обязанностям и тому, что она драйвит проекты и менторит юных падаванов карьера жены - для меня сейчас #1 приоритет. о, народ делится лайфхаками продуктивности!. кстати, 5 лет назад посмотрел такую штуку мастер-класс, мне 36 лет от одного айтишника воспринял с известным скепсисом сейчас, конечно, понял, что все правда. да, если даже не строго этому следовать, а просто попробовать и сравнить, что тебе лучше знаю господ, работающих 7 дней в неделю правда по 5 часов говорят - ни на что такое не променяют. ни в коем разе не собираюсь вам противоречить или навязывать свой подход просто помню по себе, что информации о том, что так можно и так бывает - не хватало как-то в жизни в 20-25 лет надеюсь, кому-то будет полезно, что я написал. сначала упали (подработки приносили много), конечно но там вообще дикий эффект у многих родителей-айтишников но по отзывам коллег, я стал лучше работать, быстрее решать задачи, четче и доступнее коммуницировать, что сказалось на карьере в +. я ребята, к чему это написал просто, чтобы те, кто замотался немного в этой гонке за l5-левелами в долине, и почему-то почуял, что это немного не его, знал, что в жизни можно быть счастливым альтернативными способами. спасибо, тебе тоже хорошего вечера!. люди делятся наболевшим. сегодня выходной, и у меня уже была прогулка по снежку в спб, оплата коммуналки, строительство дредноута из конструктора полесье, сейчас я закончу в твиттер и меня ждут - горячие хачапурики из доставки и продолжение чтения книги фрица фишера о причинах первой мировой. вместо интеллектуального поглощения и выработки информации я стал лучше спать, шерсть заколосилась, надои выросли помните, как в старом фильме наших отцов, нео бочком-бочком вышел из матрицы. потом я постепенно стал ставить рамки всезаполняющей работе (прямой и непрямой): начинал с дней без интернета (по вскр), заставлял себя вместо чтения статьи взять ребенка и пойти играть/гулять/кормить жывотных постепенно выработалась привычка искать иное удовольствие в выхах. потом, впервые за 6 лет я поехал на отдых с семьей, не пытаясь приурочить к конференции как было до этого - еду на конфу, иногда один, иногда беру жену и это типа отпуск так было много раз все время много волнения, элементы подготовки, жесткий маршрут и тайминг. потом я перестал брать новые подработки, связанные с поездками в другие города было сложно, спрос на меня возрос, и надо было учиться говорить нет сначала было тяжело, пару раз меня просто уломали, но потом стало проще но этого было мне мало. пару лет я волонтерил в оргкомитете конференций классные ребята, классная движуха и тысяча часов инвестированные в счастье и амбиции других людей я решил инвестировать их в самого важного спикера - своего сына вы знаете, получилось лучше, чем с некоторыми спикерами. эта маленькая нейросеточка просто выучила самый обобщенный папин паттерн жизни и поведения да и вообще нейросеточка стала такой интересной, что готовить данные для нее тоже стало интересно но на это нужно время где взять? для начала сократить работу в оргкомитете конференций. это помогло мне другими глазами (с женской стороны) взглянуть на положение вещей и если моя жена не роптала и понимала, не значит, что этого бы не случилось в будущем в какой-то момент, я заметил, что ребенок играя в папу, изображает человека за столом за компом. стал обычным рабоче-бытовым паразитом много моих знакомых в ит неоднократно в таком положении оказывались и тут я не рассказываю вам что-то уникальное так вот, я думал в какой-то момент, что это нормально, пока не начал (не знаю зачем читать паблики а-ля щастьематеринства вк. моя жена закончила матфак и сама айтишница - поэтому мне повезло: никто не воспринимал, что я сижу весь день за компом, что сложно встать и сделать, как у некоторых моих друзей но именно это и расхолаживало вот это понимание я перестал делать что-то по дому, готовить. мне повезло с моим руководителем - тоже семейным человеком, который позволил мне работать частично на удаленке еще в 2018 году и это позволило мне наблюдать (поначалу лишь наблюдать), как растет сын, что приходится делать жене, делать небольшие перерывы в работе на общение. в первый год я еще иногда работал по субботам, ребенок был мал, неразумен, а я отлынивал одной работы мало, надо две, деньги в семью, работа по вечерам, ночам и все в режиме без сна ну и что очень быстро лошадка здохла а ребенок привык к папе в углу за компом как к мебели. сегодня выходной и у меня он реально был: уже 3 года, как я перестал работать по субботам и вскр я перестал читать техническую литературу в сб/вскр и посещать рабочую почту и чаты в моей жизни случился сын и это самое лучшее, что произошло с моим work-life balance тред!. его память священна, бегут пионеры: привет, тиану, летят самолеты: привет, тиану. в моем идеале ученый даже не знает что такое тензоры (например, он биолог), но все описанное ниже продолжается ^__^. на сегодня все, на выходных у меня немного времени, да и вам надо будет отдохнуть от суровой рабочей недели планирую писать о следующем - работу на удаленке, ворк-лайф баланс, совмещение занятий наукой и разработку, какие-то странные наблюдения и просто про жизнь, книжки и тд. ясно, что перформанс может быть спорный и мне пока по душе больше библиотеки, нежели языки, но я - ретроград хотя и признаю новое веяние. если не хотите ждать языка - уже есть либа. а с++ не хотите? если в ваш язык не завезут расчет производных на разностных схемах - делаешь c++ ядро с api мостик и вперед!. а с++ не хотите? если в ваш язык не завезут расчет производных на разностных схемах - делаешь c++ ядро с api мостик и вперед!. swift - проторил дорожку и поддержал на уровне языка имхо, swift for tensorflow - незаконченное изделие, но ребята кайфуют, что сказать. посмотрите, как божественно поступает facebook - делает по сути новый, дифференцирующий kotlin прода надо немного подождать, но сказка же. для kotlin существует минимум 2-3 проекта1 по значимости от - он вообще мне кажется немного гений, планирую вскоре попробовать в качестве бэкенда. вы же понимаете, как легко будет делать dl/ml, если надо будет писать только forward pass, a backward - уже нет тогда движки для автодифа - не нужны а это придет в каждый язык фреймворк для dl можно будет написать в 10-20 раз быстрее и поддерживать его будет супердешево тред!. 3 неумолимая поступь прогресса ml/dl через 5 лет будет в любом языке обычным средством вроде orm или web-server просто надо это принять это не rocket science, мы же с вами разобрались и другие разберутся. согласитесь, отсутствие поддержки парсинга json в языке - студента не напряжет а отсутствие тулов для data science (которым манят как калачом в каждой рекламе в 2020) - серьезная причина выбрать python, а не язык x вот все и борются. 2 конкуренция за умы и души новых поколений студентов-juniors студент - человек, который очень сильно доверяет слухам, мнению случайных людей, чьем мнение в какую-ту фазу луны показалось авторитетным чей pr будет лучше, чье сарафанное радио мощнее - тот и получит новые головы. поглядите, ну какая бигдата и ml на net в 2017 сказали бы вы а теперь - к spark есть байндинг, mlnet - написали, к tf - прикрутили достойное api, платформа - развитая, onnx - в кулачке зажат (все вы скоро на него подсядете) любо, братцы!. которые отлично знают свою экосистему, свои фреймворки и хотят иметь простые и доступные инструменты а-ля scikit-learn/keras/numpyэти люди не собираются мигрировать в другую экосистему, тулы, понижать свою производительность напротив, хотят ее повысить особенно крут тут ms. какие есть глобальные цели у всех, кто делает api ds-тулов не на python, и dl фреймворки и байндинги, в частности1 принести в экосистему своего языка возможности, которых там нет net/go/java/scala/kotlin/c++/javascript - в каждом из них есть десятки тысяч умных людей. я не буду столь резок в выражениях, но для ресерча - и впрямь, трудновато. ну все, pytorch, переименовывай!. если вы пишите на jvm языках - приглядитесь, какие-то простые вещи можно делать уже сейчас мы совершенно не собираемся останавливаться на достигнутом планов много и в 2021 будет много интересных новостей на эту тему. это альфа, там пока все просто, vgg - подобные вещи, transfer learning именно с этого и начинали tf js, tfnet и другие. ну и написали, да! kotlindl с keras-like api поверх низкоуровневого java api. тут из тулузы сообщают про позвольте, господа, как они посмели назвать свой фреймворк именем прекрасного (тм) ? это каково? у них юристы не пробовали трейдмарки проверять в общем, не люблю этот ignite :) нас путали. я собрал тренировку простой модели lenet-5 и линейной регрессии на этом безобразии, можете полюбоваться но в целом, мне претило писать стандартные модели на таком низком уровне а не написать ли keras на kotlin подумал я в начале пандемии и устремился!. в 2019 году, используя tf java api я был уверен, что это api только для инференса и на нем нельзя тренироваться однако, лазая по классам, я вдруг обнаружил дырки для оптимизаторов, куда можно сбрасывать веса и обновлять их согласно их внутреннему закону (адамову-адамово!). экосистему: tflite для android, tfjs, tensorboard, swift (с автодифом на уровне языка), tf serving, куча mlops интегрируется с tf, разве что onnx тут немного подкузьмил - я считаю месть за гибель keras для cntk. тем не менее, код написан довольно чисто, в нем можно разобраться, поддерживает внешние группы разработчиков, которые пилят свои мостики, как например sig jvm (пилим в java), встречаются с нами, рассказывают про релизы а еще у гугла очень много рабочих рук, чтобы делать. как следствие тормозится развитие такие языков оберток, как мостик в java, go, net, js (люди в tf js ручками на своей стороне блин добавляют градиенты для операторов). хотя сначала python - был просто тонким фронтендом поверх нативного кода и на каждый чих уходил тудав 2x, когда вся кодебаза оказалась смерджена - все стало иначе при этом c и c++ api оказались подзаброшены - многие вещи не обновляются с 2018 года. однако вместе с удобным api он принес и некий расслабон создателям - много трюков и приколов, включая куски оптимизаторов, градиентов, операторов, странного препроцессинга перекочевали из нативного кода в python. беда с этой комбинаторикой, ага. мне импонируют подход - сделали авто дифференцирование, монсеньор запилил keras для масс, написал чудесную книжку - все же читали, и вкрутил это в tensorflow так отвалились бэкенды для cntk (плак-плак) и иные. я больше болею за наших - команду catalyst но в любом случае, как говорил мао: пусть расцветут сто фреймворков для pytorch, сто цветов. здоровая гонка и амбиция, попытки спрятать не нужную широким массам мешанину под ооп и функции, а также конкуренция за внимание - все это дает мне пищу для изучения и референсы для имплементации. лично мне  не интересен (хотя его кишки я облазил), его многословное api, его слабенькое нечто для инференса на java - выдают в нем плохого кандидата для jvm мира единственное, мне понравилась битва двух сверхразумов - и. вчера мы поняли, что вы любите pytorch, пишите на pytorch (человек 40 из 2000 подписчиков твиттера), но немного и на tf недавно в ods я заметил довольно странный смайлик - перечеркнутый tf, если кто-то обсуждает tf, задает вопросы и тд хотя в 17-18 году все было иначе. да, причем, что самописных либ - прям миллион на любом языке но почему-то они все полузаброшенные (может студенческие проекты, я вот не знаю). так моя наука - пилить фреймворки, чтобы дата-сайнтистам было легче жить поэтому пишу про свои решаемые задачи - чтобы например градиенты для depthwiseconv2d считались не только в питоне и mobilenet пахал у всех, у кого надо. спасибо, я никогда в жизни столько не твиттил, надеюсь кому-то полезно и мы с вами останемся на связи после недели тут. было про любимые а теперь на чем приходится деньги зарабатывать:. перед завтра надо выяснить есть два вопроса: какой у вас любимый нейросетевой фреймворк. ну не очень много, я его только начал пробовать, но давайте поговорим завтра, чому бы нет. завтра день нейросетевых фреймворков готовьтесь буду много ругаться и радоваться. вот на этом я не планирую останавливаться, думаю, что jvm мир ждет нормальную либу (не часть другой) для тюнинга гиперпараметров в других фреймворкахдумаю, что она должна быть написана на kotlin:). подробности все в моей самой большой англоязычной статье в жизни (скажите, такое можно уже на архив?) кто-то в теме, то был бы рад обсуждению или поверхностному ревью идей (и имплементации), пишите, есть что обсудить. тем не менее, даже, если у вас 10 параметров с 10 дискретными значениями каждый, это уже 10^10 вариантов, а с randomsearch или геналгоритмом с 10 особями в поколениями и на 100 итерациях вы можете себя ограничить 1000 прогонов, что меньше значительно. в случае эволюционных алгоритмов одно вычисление fitness function - эквивалентно прогону тренировки с фиксированным набором гиперпараметров они могут быть выполнены на одном наборе изначальных данных, но в ходе тренировки могут быть оккупированы новые блоки памяти. также было ясно, что придется запускать много тренировок, каждая тренировка - время кластера и надо попытаться тренироваться в параллель, управляя количеством тренировок в параллель. после упорных трудов в конце 2018 пришло время пилить hpo в ignite выбирая между bayes и эволюционкой, я выбрал знакомые эволюционные алгоритмы с элитой (чтобы не терять хорошие решения). стартовать в теме мне помогла статья бенджио random search for hyper-parameter optimization (есть тема на которую он не писал?) я видел формулы один-в-один из своего диссера я радовался, что копал куда-то в верном направлении. не прошло и 2 года, как я закончил свои научные дела (думал я, ага), как я увидел эту задачу в hpo для ml как же я внутренне ликовал мы делаем либу, еще и на java, тут своих тулов нет, можно порезвиться с нуля!но сначала надо было родить все метрики, кросс-валидацию. нашел тему еще одной статьи или доклада, но не могу найти текстгенетический алгоритм для решения задачи оптимальной доставки грузов на дорожном графе большой размерности с door13. у меня были отличные датасеты, дорогая фитнесс-функция (ее вычисление требовало значительного времени на одной особи, прогона алгоритма оценки надежности). это не значит, что я не пробовал другое, но на мою задачку они легли идеально моя матмодель чем-то была похожа на современных generator and discriminator в gan, только они у меня были constructor/destructor и делали не фотки, а дорожную сеть, устойчивую (в некотором смысле). генетические алгоритмы как наиболее устойчивое семейство алгоритмов, позволяющих при удачной кодировке и фитнесс-функции двигаться постепенно к хорошему решению конечно, не без элитизма, имитации отжига и прочих трюков для неумолимой поступи прогресса. в целом, задача тюнинга гиперпараметров мне приглянулась, когда я искал прикладные приложения так называемой bilevel optimisation problem игра штакельберга - это весело, но лично я перебрал много матметодов для решения задачи двухуровневого линейного программирования и выбрал. однако в мире jvm все тут намного грустнее даждь бог, хотя бы полный перебор организован, а-ля gridsearchесли говорить про распределенную среду, то все еще сложнее тут возможны несколько схем тюнинга гиперпараметров и утилизации ресурсов кластера. и не менее прекрасный котором уверовали в парзеновские деревья (и они таки весьма хороши) и в целом в движение вдоль паретовских границ. также большой популярностью пользуется - у нее есть куча интеграций со всем подряд и свои способы достичь оптимума. более продвинутые пользователи в python знают и пользуют с его bayessearchcv (наиболее распиаренный альтернативный метод) или sequential model-based optimization (smbo) через skopt. странно, что тот же навык не применяется для апдейта параметров нейросети вместо sgd или adamну да ладно, хотят люди делать хоть что-то сами, пусть делают. в батюшке scikit-learne имеется два способа перебирать сочетания гиперпараметров - gridsearchcv и randomizedsearchcv ну и как показал опрос, ими многие не пользуются, предпочитая зоркий глаз и интуицию - алгоритмам оптимизации на втором уровне. вообще, конечно есть миллионов методов (как точных, так и эвристик, взятых с потолка) как дискретной, так и непрерывной оптимизации, которые ждут своего часа!. она underrepresented в большинстве фреймворков для hpo меня это тоже огорчает. наши руки не для скуки, наши глазки для побед!. пойду поработаю пока, а вам пока опрос с подводкой к следующему блоку тюните ли вы гиперпараметры и какие матметоды используете?. целом это работает на прошлых версиях ignite и , можно побаловаться. в целом, мы очень здраво использовали ignite как аналог horovod для раздачи задачек в распределенном режиме (не зная про horovod, его делали одновременно), tf в распределенном режиме работала хорошо но в tf надо залезать основательно, чтобы так интегрироваться, maybe in future. также у нас была большая история с интеграцией с tensorflow в 2018-2019 годах сложная история в ходе которые мы начали даже контрибутить в java api tf, но в тот момент там было все медленно, вышла tf 20, рантайм весил 15gb, были баги и я дропнул tf. также, какое-то время назад пришли ребята из и добавили инференс для их java api так в ignite попали h2omojomodel и h2omojomodelparser. буквально вчера в мастере появилась интеграция с благодаря pr от  марк!. затем по значимости идет полноценная интеграция с  у него хорошее java api, с ним все интегрируются, это легко и приятно. загруженная модель является полноценной моделью в apacheignite (мы не тащим spark runtime сюда вообще, чистый парсинг файла) и может быть обновлена и дотренирована на данных в ignite, используя update моделей. логично было бы сплотить их еще больше - так и родился проект по парсингу моделей apachespark, сериализованных в parquet для этого мной был реализован отдельный подмодуль spark-model-parser вы трените svm в spark, грузите в ignite и можете разное:. тред про инференс с других ml либ: во-первых, и не сильно-то и соперники (как могло показаться) например, довольно часто использует нижележащий ignite как слой для ускорении и кэширования в памяти - ignitedataframe. в целом, от обработки 10^9-10^10 строк для некоторых алгоритмов мне немного не хватило памяти (например по 120-200gb на нодах вместо 80 были бы уместны) со мной делились числами прогона на 100 нодах по 40gb - ммм, там все очень хорошо. очень неплохо отработал старичок kmeans и основанный на нем внутренне ann (приближенный knn) обычный knn сдыхает очень быстро, а вот если вы как-то ограничили число суседей, то вместо пробега по всему датасету, вы можете бегать и предсказывать по 10 000 центрам мини-кластеров. естественно, себя хорошо зарекомендовали тренеры линейных моделей, а-ля logreg/linreg/svm и гораздо хуже разные древостроительные дело в том, что мерджить информацию с разных партиций на мастере (мы мерджили гистограммы) - это дорого тут никто пока сильно лучше ничего не сделал. запускался я кластере из 4 тачек с jvm с такими настройками -xmx80g offheap = 10g (да, ignite активно любит offheap, как и любая тула bigdata на java) настройки у алгоритмов я брал дефолтные (чтобы потом с легкостью повторить эксперимент), а там где менял - фиксировал. после работы с ним, я нагенерил сходные обсфурцированные данные, запустил на его задаче классификации (бинарной!) в кластере со урезанной конфигурацией (1,2,4 ноды вместо 100) и записал все данные в этот пост считать это отправной точкой. может быть взять синтетический бенчмарк на известном датасете? но там почти всегда данные для тренировки на 1 машине с 1 памятью и выгодные создателю бенчмарка что сделал я? мне было интересно весной 2020, насколько быстро я могу решать задачу от клиента в кластере. насколько быстрым является ignite ml скажу честно, мерить performance ml тренировки (именно она меня и интересовала больше) - дело неблагодарное что есть время работы, скажем распределенного svm? достижение определенной acc? нет же? фиксированное количество глобальных итераций?. very useful comment, happy for redis!. больше про соревнование со spark ml (spoiler, с 2020 оно для меня немного в прошлом), планы на будущее. также мы сделали базовый online-learning для большинства моделей, и пусть он пока местами не финализирован, писать это руками было бы намного сложнее в инфраструктуре. также мы продвинулись дальше в тюнинге гиперпараметров (я в свое время вдохновился парочкой книг по automl) - про это я напишу отдельно. большое развитие получил фреймворк подсчета метрик распределенно (все классические метрики поддерживаются). также мы сделали платформу для распределенного инференса и хранилище моделей на базе кэшей ignite сюда очень легко подключать модели из других платформ, имеющих java api и свой кусочек рантайма. коллаборативная фильтрация появилась в конце 2019 года (als, факторизашки) препроцессоры базовые есть, новые легко пишутся (это вам не в spark всунуть) - у нас 1-2 метода переопределил и поехал. вся классика алгоритмов: деревья, регрессии, перцептроны (кстати наш бохаче), svm, kmeans, gm есть кроме того, я активно занимаюсь темой approximate ml algorithms, среди них адаптация knn - авторский ann. погнали по фичам: я составил сравнительную таблицу spark ml и ignite ml по фичам в целом мы его делаем сами: стэкинг, бустинг, бэггинг есть. но основная была следующая - все эти flinkml/mahout/sparkml/redisml сделаны как будто не для людей просто набор алгоритмов, не соединенных общим api и идеей, их сложно использовать в проде, любую вещь типичную в тренировочном цикле или оценке надо писать руками ml для людей. меня часто спрашивают, зачем вообще было делать такой фреймворк - в этом посте ответ, кому интересно более глубокие моменты в мотивации создания, а также ссылки на образовательные ресурсы - ныряйте. вот в этом видео я рассказываю о первом стабильном релизе и его базовых фичах (им отдельный тред я хотел бы посвятить). igniteml до начала 2020 года (релизы 26-27) очень сильно менялся в плане структур данных, имплементаций алгоритмов и api и только с марта этого года (28) можно говорить о более-менее стабильной версии. чтобы проблемы описанные в посте были решены, чтобы была легкость в добавлении новых алгоритмов, но и в целом in-memory бд потенциально лучший движок для ml, чем etl с диска. ясно, что изначально igniteml поверх появился просто как продающая эту базу данных пунктик, а -ля oracleml/ds, redisml, но в развитии он пошел дальше, чем просто какая-то математика в бд лично для меня - это был способ создать распределенный ml лучше чем sparkml. опрос про ignite ml слышали ли вы что-то про него до этой недели?. вот в этом твите я подробно описывал, что меня привело в давайте я начну с опросов, я допускаю, что вы никогда не пользовались ignite ml и я открою для вас маленькую теплую новую каледонию. маша не держит все яйца в одной корзине!. вспомнил, что забыл рассказать еще пару фактов про spark и kotlinу нас же есть замечательное api к spark на kotlin решено много проблем, которые есть, в java api, а его создатель охотно общается насчет идей и пожеланий по развитию. напоследок кину ссылку на замечательный аккаунт нашего kotlinfordata-евангелиста, марию у нее англоязычный твиттер, очень добрые подписчики, если вы смелый, ловкий, умелый - фолловьте. сегодня было много работы и умеренно твиттилось, завтра продолжим про распределенное машинное обучение и погрузимся в ml, историю его разработки, возможности и особенности реализации. последний проект, pravdaml, делал в дима бугайченко (теперь, кажется в сбере), там есть байесовская hpo/xgboost-интеграция и много приятных плюшек при работе с pipeline api. проект mmmmmlspark от microsoft решает кучу проблем, описанных в предыдущем треде, активно разрабатывается, но знают про него мало пользуйтесь, не стесняйтесь. также там лежит много мертвого кода, который можно утащить себе в проект для решения конкретной задачи, будь то topicmodeling или knn (на квадра-деревьях). приличная интеграция отличной библиотеки машинного обучения h20 (но сыр не бесплатный). на spark packages можно найти много интересного - например интеграцию spark и scikit-learn хоть она и архивная, но проложила дорогу к общему подходу отправки вычислений из питоновских научных фреймворков на бэк спарка. spark ml экосистема: если вас заставляют тренироваться на spark ml, то советую обратить внимание на игроков экосистемы: spark packages mmlspark и pravdaml. у меня очень хорошая статья на эту тему, где я подробно все это разбираю. в самом spark ml все очень грустно с загрузкой моделей из других систем для transfer learning/inference, хотя много готовых java api доступны. отдельной боли заслуживают средства сериализации моделей почему-то выбран parquet, довольно сложный формат для парсинга json - только за деньги в dataricks runtime поддержка старого доброго pmml начата и брошена (он работает только для 7 старых моделей в rdd mllib). в кишках творится анархия - код до сих пор местами обертка над rdd mllib (постепенно мигрирует, большая задача), местами это приводит к странным аномалиям по потреблению памяти, дурацкие распределенные матрицы неконсистентно перемешаны со связками векторов нет единого стиля. самая законченная попытка - это dl4j поверх spark - оно реально работает, видел в проде, дебажил сие добро, проблемы - родовые травмы dl4j. много попыток интеграций с dl-фреймворками, которые закончились либо ничем, либо чем-то слабоэффективным (тут не вина spark, как такового, а скорее амбиции , которые пытались и с tensorflow(аж три раза) и с caffee и с pytorch и сейчас пытаются с tf через horovod. надо понимать, что все данные из датафреймов и датасетов не тренируются as is, а проходят через стадию конвертации в вектора из чиселок и операции над этими векторами и чиселками отнюдь не так круто затюнены, как современный суперspark (а там прям вообще все круто). странная и заброшенная попытка с online-learning, в ранних версиях были online kmeans/linreg на rdd, ясно, что это сложная, не до конца изученная область, но можно было приделать какие-то наивные версиину и работает это только на dstreams, а со structuredstreaming нет. ансамбли не завезли и видимо уже не завезут: есть частные случаи в виде randomforest или gradient boosted trees, но обобщенных stacking/bagging/boosting тоже нет в коммьюнити решить проблему пытались, но далеко не продвинулись. недостатки spark ml (стандартной библиотеки): самая большая проблема - это низкий приоритет у либы у самой компании , начиная где-то с 2017 года и при этом очень жесткий контроль над развитием с ее же стороны пойдем по проблемам:. чуть подробнее я расписал основные плюсы в этой статье. имеется базовая поддержка тюнинга гиперпараметров и оценки моделей для других de-интегрированных тулов а-ля или - это редкость. вы можете делать препроцессинг на etl/sql головного мозга и выплюнуть в датасаентиста. оно работает поверх hdfs! в экосистеме hadoopу него имеются бесшовные и дешевые (по сравнению с java/scala) коннекторы к таким источникам данных, как csv/json/txt. api делался с оглядкой на scikit-learn сразу, как на золотой стандарт, поэтому кривая обучения для питонистов была не очень крутая. также за годы подтянулись довольно приличные байндинги к r с поддержкой формул ~x1+x2, но лично я всегда предпочитал пакет sparklyr. не в последнюю очередь, синергия python коммьюнити, использующего spark как платформу для распределенного ml и отдельных товарищей внутри databricks обусловило приход dataframe api (с оглядкой на pandas), а затем и появление проекта koalas. с самого начала - это было рабочей штукой, а иногда и единственным способом сделать достойный ml на java/scala и одновременно затащить это все куда-то под spring boot. в spark ml постарались перенести оптимальное большинство алгоритмов, которые в целом могут быть распаралеллены по данным и не нуждаются в синке на каждый чих и видеть все данные в моменте (как dbscan, с ним прям беда). иногда, мне кажется, я знаю каждый класс в этом фреймворке, прочел треды в каждом umbrella тикете, помню в лица юзерпики многих коммитеров. за эти годы я видел некоторое: пилил приватные алгоритмы, падал на стандартных, делал pr, испытывал боль от перехода от mllib на rdd на mllib на dataframes в 2016-17, читал по нему тренинги, делал package для spark package за деньги и не под своим именем и конечно, читал код. тред про плюсы spark ml: лично я стартовал на нем в 2013 на версии 08 (svm + distributed matrices на 100 гб данных) на кластере из 10 тачек и это было примерно в 10 раз лучше mahout тогда и началась наша любовь. погнали используете ли вы spark в 2020 году на вашем проекте? нравится? хотели бы?. и чуток глубже в sparkml, для тех, кто уже понимает в ds и интересуется, как поделать что-то на sparkml. а пока пару видосов про spark ml (1 часть - введение в ds для джавистов и немного spark ml)смузи ml вместе со spark mllib с jbreak18. через пару часов доделаю рабочие активности, уложу активного трехлетку спать (из машобуча его интересует только автопилот, которым занимается один мой друг), и мы устремимся в мир распределенного машинного обучения. вперед, мои верные нукеры-дбашники про тесты в ds можно долго и интересно разговаривать например о тестировании алгоритмов ml/dl, особенно в русле проблемы воспроизводимости результатов от прогона к прогону, даже со всем просеянными сидами. коллеги, не переживайте, это дело наживное, вместе поправим, когда надо будет ускориться. на сегодня все, мне приехала доставка из ленты, пойду смывать теплой мыльной водой остатки ковидных телец с ряженки всем хорошего вечера, завтра я хочу посвятить время такому неоднозначному фреймворку как spark ml, его экосистеме, прошлому, будущему, а также распределенному ml. про onnx я отдельно напишу завтра - но скажу честно, в 2020 его java api не пользовался только ленивый, пытаясь встроить в свою dl либув research тоже активно пилят фреймворк поверх onnx - для наших хитрых планов по захвату мира!. язык для интерфейсов в dl/ml, да, пожалуй так, и весьма хороший язык, вы не подумайте, что я тут пришел его обижать мне по душе типизированные языки для либописания с питоноподобным синтаксисом (kotlin - один из них). это не просто вещь в себе, но и попытка поднять в одну экосистему и другие фреймворки, имеющие java api: xgboost/liblinear/onnx/libsvm а вот ноутбук на java с kmeans. с одним из ее активных разработчиков, активно вкладывается в разработку onnx и java tensorflow api - талантище и очень мощный разработчик и исследователь, под его началом молодый сотрудники активно пилят алгоритмы - думаю все у них получится. ml от oracle (tribuo) тред: пару месяцев назад рассекретил ml либу написанную на java, которую они с 2016 года использовали внутри очень нравится проделанная работа и свежий подход к пониманию того, что есть модель и что туда входит. и да, мне приходилось решать задачу в обе стороны, sqldataframes/dataframessql, они решаемы, обе. да нет, не сильно сарказм, безусловно, существует 10% магии pandas (и сахара странных функций) которые сложно повторить в sql, но с подготовкой отчетов и данных для анализа опытные db-щики и аналитики вполне успешно используют sql вопрос привычки. c, c++, scala как сказано в документации numpy: many people like to say that python is a fantastic glue language. да и dataframe мы тоже в отделе хотим сделать не слепой копией pandas, а подойти ближе к неким возможностям бд и иерархического анализа данныхлично я верю, что в следующем году мы порадуем jvm экосистему чем-то приятным. но там внутри остался кусочек python, это нам не нравится и в идеале мы хотим аналог numpy, но как kotlin над c/c++ бэком для операций некое новое издание раннего эксперимента viktor. если говорить о numpy, то мы, в в прямом смысле его просто шоколадно обернули котлином и он пошел жить своей жизнью в бэкендах некоторых крупных корпораций. в kotlin, где ds только зарождается и пытается идти своим путем (используя мощь kotlin dsl и проча) есть вот такая либа сделанная с оглядкой на pandas и dplyr (который мне, кстати, нравится). под апачевой лицензией лежит довольно популярная библиотека (25k звезд), которая неплохо интегрируется с выше упомянутым smileмне она в свое время немного не вкатила, но я в целом не фанат табличек в коде. хорошо, если надо прям, чтобы уже похоже на pandas, но идиоматично к языкам, то вот есть на java (но 500 звезд всего) и gpl3 народ сразу отходит в сторону. ну ок, к нам приходят люди и говорят, хочу месить таблички в коде так у нас есть c 3 или 4 видами api и 1001 попытка сделать sql в коде (они есть в каждом языке, проверьте). на самом деле, надо понимать, что большинство java-разработчиков знают sql наш pandas - это sql вы не поверите, как просто на нем делать все то, что делается несколькими вызовами команд в pandas а то, что не сразу, пишется в какие-то кастомные функции на pl/sql и алга!. квадратно-гнездовой тред: дальше возникает резонный вопрос, ну ок где, я вас спрашиваю, датафреймы хде pandas? хде шустрый и быстрый кирпич и основа сущего - аналог numpyа они есть, их делали неоднократно, но почему-то не летит ежик по небу. также в экосистеме есть свои собственные ноутбуки, которые весьма недурны собой, имеют удобные коннекторы к куче тулов из dataengineering и кучу языков c элементами визуализации графиков, графов, диаграмм и карт. типичный workbench с коннекторами к разным источникам данных и дальше мир красоты!. еще одна либа для раскладки и визуализации графов - , всплывает то тут, то там я общался с создателем этой либы в одной уральской выездной школы - талантливый парень из франции, без ума от графов кейс у меня был простой - есть бд с графом, надо разложить красиво. тред визуализации: с ней на jvm в целом не так бохато как в python в силу безумного заигрывания с awt/swing/javafx и попыток делать это централизованно, через обком партииодной из либ, которая мне зашла пару лет назад я считаю d3js не обошлось. также - из хорошего, есть нормальная визуализация. smile одна из немногих либ, которая имеет api сразу на scala/clojure/java/kotlinисходный код чистый, но плоходокументированный, читается и дебажится легко. крик души, обнимемся брат знаешь, я как-то успокоился ну python, ну ладно, пусть перемалывает души, а мы по тылам побольше нащучим:). либа хорошая, для research, для студентов, для чего-то не финального но в финале вам придется платить по счетам, в прямом смысле читайте лицензии, конечнотакие лицензии еще опасны тем, что протекают в ваш oss продукт, заражая его. самой крупной либой классического ml в jvm мире я считаю smile (погодите про h2o, не гоните) это прямой аналог scikit-learn в jvm-мире но есть одно но текст лицензии он не подходит, например. просто, ввиду популярности #pyspark уже сталкиваюсь с людьми, которые не в курсе и удивляются exceptions с executors или ошибке сериализации. тут действительно собираются разные люди и мнения, и временами хочется перечитывать чьи-то треды спасибо за организацию, кстати. при этом weka - живее всех живых, развивается, там имеется типичный java gui, на котором вы духе концепции no code можете накидать pipeline (и могли это еще в 2014, например). обязательно будет, в свое время с интересными новостями однако без отрыва от jvm экосистемы это не имеет смысла, посему, медленно движемся к цели!. из еще лампового - новозеландская студия для ds/ml/mlops и копирования кода на java - weka source = new datasource(/some/where/dataarff);instances data = sourcegetdataset();j48 tree = new j48();evaluation eval = new evaluation(data). мыши колются, но продолжают есть кактус иногда встречаю либы, написанные как расширение к ней эдакий scikit-learn, который не взлетел, тк попытался стать всем. по транзитивным зависимостям мы можем уйти далеко!. тред ламповости: каждый начинающий любитель java, которому надо немного статистики или кластеризации, значет, что есть такая действительно, бодрые старцы, которые ее делали, лихо впилили years ago линейную регрессию и kmeans. скоро дойдем до кишочков tf, не переключайтесь!. хотел обыграть слово из ника спасите, а вышло, как вышло мне стало стыдно. с++сите!. на волне хайпа про него написали несколько книг и старые перцы до сих пор его вспоминают сами создатели в какой-то момент устали от всего - переписали ядро на scala, сделали либу линейной алгебры, выкинули алгоритмы теперь это слабо кому нужное нечто, но вдруг. к сожалению, не все ml алгоритмы можно легко разложить в distributed среду (об этом мы поговорим позднее) и надорвался еще 7 лет назад - люди потратили тонну сил, чтобы сделать что-то достойное at the top of в итоге, много осталось за бортом. из вкусного: там были кластеризации (distributed clustering implementations: k-means, fuzzy k- means, dirchlet, mean-shift and canopy) и рекомендательные системы, те самые, с триплетами, вошедшие потом почти без изменений в. вчера я уже упоминал , этот тред посвящаю ему: в начале 10-ых с ним многие связывали надежды и очень редко прод всем казалось, что если kmeans, то сразу на всех данных (на целых 100 гб, например) он был написан на java для работы в связке с ранним hadoop. вы знаете, что numpy/tensorflow/pytorch - у них внутри не python? прям сразу? про spark, наверное слышали тоже, что там не python те никакого первородного или перфоманс права у python как такого нет?. известно ли вам, что эти поддерживает в ноутбуках не только #python, но и #java и #kotlin ?. итак, ml/dl/ds на jvm (java/scala/kotlin) использовали ли вы хоть какую-то java библиотеку, чтобы открыть знание в данных или выучить его?. трудовую биографию изложил, завтра продолжимвсем приятного вечера! завтра день ml на jvm. летом 2019 я начал прототипировать ml-либу на java, но поглядел на kotlin, составил roadmap и начал двигаться потихоньку (в приватной репе) и через какое-то время мне написали hr jetbrains и позвали в новую команду kotlin for data science это был идеально мысли материальны. чем больше я пилил распределенный ml, читал статьи, писал свои, изучал код scikit-learn/spark/dlib/tensorflow, тем больше крепло ощущение, что это мое в какой-то момент случилась магия:. оказалось они только стартуют и челленджей непочатый край я начал работу над opensource проектом с баг-фикса в алгоритме перемножения распределённых блочных матриц и понеслось 102 коммита, 300k+ строк кода, 15 моделей, pmc проекта. на пути в jetbrains: в 2017 году я обратил внимание на статью на хабре ребята из компании сделали копию поверх in-memory database потом мне удалось с ними пообщаться вживую (помогли старые epam-вские связи). из той эпохи есть одно добротное выступление на конференции kafka льёт, а spark разгребает! (при помощи structured streaming). потом мне попалась интересная задача с kafka + online learning и я иначе взглянул на классический ml и давно известные модели под углом: кто легко апдейтается, а кто нет кто профнепригоден, а с кем мы еще поговорим а кто может лечь на распределенный кластер. люди на тренингах, особенно на внешних любили задавать такие заковыристые вопросы, рассказывать про такие кейсы, показывать такие вещи, что волосы становились дыбом, а опыт конвертировался в консалтинг но тянуло меня от java-dependecy hell больше к проблемам с форматами моделей. мне повезло работать с очень крутыми архитекторами и большим количеством досконально изучающих фреймворки людей кишки hadoop - это нечто именно тогда и началось мое погружение в недра и уход в библиотекописательство ты глядишь - и понимаешь, что можешь говнякать не хуже 100%. я выступал с кусочками тренингов на конференциях, например про hadoop. одновременно пошел просто огромный поток джавистов, дотнетчиков, database administrators, бегущих из старых рынков в новый сияющий мир bigdata: hadoop, hive, spark в epam мы открыли менторинг (учеба с куратором) по bigdata, через который прошло 300+ человек в 16-18 годах. из той эпохи сохранилась пара выступлений про ds/bigdata на java. dethread: перебравшись в спб я уже вплотную занялся прокачкой навыков de, пытаясь устроиться чистым ds на чистого ds брали только на мало денег, поэтому я раз за разом выбирал de проекты (presale/прототипы) и рос очень быстро, играя роль fullstackbigdata. слушайте, это же омск у меня мама работала на заводе, где делают ракеты, их было так много, что их приплетали всюду, даже на утренниках модно было быть в костюме ракеты:). одновременно я начал смотреть в сторону консалтинга, но там, в 2014, ml-ные деньги попадались только в порно порно, о сколько в этом слове для сердца ml-щика слилось, коль много там отозвалось питер - столица порно-ml стартапов приняла меня в свои объятия. контора, где я работал, активно пыталась войти на рынок ds/ml/bigdata, делала бэки для стартапов, где уже появлялись простые модели на ансамблях деревьев, markov chain для кое-чего и просто матрицы с весами, которые как-то вычислялись поверх данных. второй семестр. мои рецензии на лекции первого и второго семестра тут. что наилучшая информация по ml может быть найдена на вокруг которого и будет формироваться русское сообщество ученых и практиков машобуча. об этом курсе заговорили в моем окружении на рубеже 2012–2013 годов в связи с ростом популярности шада в узких кругах выпускников матфака омгу/нгу изначально звучала лишь название курса и “дикая сложность” оного, без фамилии создателя и изредка проскальзывало суждение,. но практически все, с кем я обсуждал прохождение этого курса, сходятся в том, что существует такое фундаментальное явление, как два семестра машобуча, мимо которых пройти мимо сложно и влияние на индустрию и методику преподавания оказано огромное. кто-то, имеющий большой практический опыт и некоторый опыт преподавания осуждал сугубую академичность изложения и отсутствие практических примеров (видимо, на scikit-learn). те из многих, кто имел достаточную математическую подготовку и небольшой практический опыт боготворили лекции как единственное верное учение и подход к подаче материала. занимаясь машинным обучением в россии, редкий человек избежал искушения обучиться базовым навыкам посредством знаменитого курса от воронцова многие пытались использовать его как первый и единственный доступный материал и убегали в страхе, раздавленные уже первой лекцией. кстати, о воронцовских курсах пост -. у нас на работе возник кружок изучения ds (старое название ml), где мы в нерабочее время разбирали матметоды: деревья, регрессии, метрические и прочеесмотрели подпольные материалы шад (которых тогда почти не было в открытом доступе). dsthread: к 2013 году стало ясно, что есть кластер hadoop, а есть матметоды в распределенной среде и за первое первый мир уже готов платить, а за второе - пока не очень, но интересно именно второе, ведь там какая-никакая математика (к тому моменту я видел только kmeans/knn). поясни за spring, спросили меня сейчас спрингом пугают питонистов в колыбели, а тогда был модный прогрессивный фреймворк (да и сейчас, конечно же). tapestry, java ee и прочую фигню, начинал восхождение hybris для e-commerce, ну и голые сервлеты/jsp. заказчики из usa тогда еще заказывали решения (веб/бэк) на java на альтернативных фреймворках, а spring им казался рисковой штукой. на работе мне в руки текли проекты связанные с геоданными, анализом данных, развертыванием отчетности на основе olap-куба о, mdx, о, богом забытый фреймворк mondrian для их построения на java ніколи знову!. мне как-то сразу повезло попасть в струю связанной с работой с набиравшим популярность и такой ранней библиотекой распределенного машинного обучения, как (spark появился позднее и во всех церквах звонили колокола в тот день). в 2012 году, имея за плечами большой опыт аналитики и разработки бэкендов, написания запросов на прекрасной 1с я окунулся в мир незаконченных фреймворков в java не было единого стандарта ни на что по каждому поводу существовало 2 крупных фреймворка и 10 мелких spring был слаб. однако для дорожных графов и генетических алгоритмов 1с была уже не столь удобна, поэтому в научной работе я переключился на низкоуровневую java 14 (учил по книжке, в которой не было даже дженериков) со временем в городе появились первые конторы с вакансиями на java и я перешёл. еще в 2009 (11 лет назад) мне платили деньги за: матстатистику, кластерный анализ, поиск ассоциаций и дерево решений тренеры и модели шли в 1с, я готовил для них данные и встраивал в отчеты тогда это называлось анализ данных. с самого начала нужно было писать много sql, строить отчеты, графики, общаться с реальным пользователями, делать выгрузки в xml, цеплять dll, делать ui скорость разработки на этом конструкторе необычайно высока после нее downgrade в мир java/mysql/jquery был очень болезненным. один из преподов, не веривших в нас, рекомендовал всем не сдавшим зачет по матлогике идти в 1с хоть зачет я и сдал, в 1с я пошёл шел 2007, там брали молодых и шустрых, а программировать на русском диалекте vb казалось лайфхаком. careehread: свои первые деньги я заработал вкопав ракету в одном омском дворе потом на утреннике для школьников если первое мне показалось тяжелым, то второе чуток понравилось, но не костюме индейца хотелось заработать головой, но в 2006 в омске было мало junior-вакансий 0. final: в 2020 году я с удивлением обнаружил засилье тематики bilivel programming, ml, нечетких уравнений на конференциях, где выступали мои бывшие научные коллеги приятно быть первопроходцем в сибири зовут к ним выступать. в 2014 телёнок закончил бодаться с научным дубом и решил переквалифироваться в управдомы, полностью уйдя в индустрию развлечений на java/data engineering, уехав в солнечный петербург. я поступил в аспирантуру, но статьи не удались, на английском я не умел, дальше урала не посылал, а в одном из журналов случилась дурнопахнущая история, когда мою статью завернул рецензент, а на следующий год его сын напечатался в этом же журнале с похожим подходом к решению. яндекс и mail, которые любезно дали доступ к некоторым датасетам, в научные школы, где такие темы и алгоритмы обсуждались, а затем в одноклассники, в их эпоху активного шаринга социального графа и контестов но чтобы это обработать пришлось ковырять hadoop и ранний spark. начал я с построения дорожных графов наиболее оптимальным способом, перейдя попутно к bilevel programming с нелинейными нечеткими ограничениями, способам ее решения и эвристикам на основе монте-карло и генетических алгоритмов подготовка датасета с дорожным графом привела меня в. мои научные интересы были странными и немного не матчились на увлечение моей профильной кафедры теорией расписаний и линейным программированием, меня откровенно перекидывали от научника к научнику, а я как теленок долбился, не понимая основ взаимодействия в научной среде. базу нам давали хорошо отменные динозавры с корнями из новосибирского академгородка 70-ых (отсюда у меня огромное восхищение тем самым академом) попытки научить нас программировать были вялыми и нерешительными, а айтишники тогда еще не ходили читать спецкурсы во имя хантинга. в 2005 я поступил на матфак омгу, где было все как у людей: матан, функан, тервер, методы оптимизаций, физра, программирование на pascal (sic!) и дрянная еда в буфете, а также транслируемая всеми уверенность в богоизбранности математиков. в омской области в 2000-2020 существовало сразу несколько выездных школ для математиков: лан ноу поиск, шмит, лгмш с 2000 по 2010, сначала ребенком, потом преподом я провел в этой среде, питательной для ума и дружелюбной, позволявшей мириться с окружающим меня затхлым постсовком. позднее, я попал в матшколу 64 в городе омске (удалось покинуть, ага) и там мне повезло с хорошим учителем физики - сухая алгебра и немые производные и интегралы заговорили и ожили, оказались применимы, а фантазийная геометрия лобачевского затанцевала польку рядом с сто. в 2000 году мне удалось съездить в кировскую лмш, и там на берегу реки вятки меня укусил математический комар, вбросив в кровь теорию графов, конечные автоматы (общение с одной девятиклассницей) и linux (без него нельзя было открыть дома дискету с задачами). что за кружок, что за линии и кружочки, кто такой дырыхле, что за комбинационный взрыв, какие фальшивые монеты? в общем, упросил маму свозить меня в этот кружок и обеспечил себе веселые субботы под олимпиадными задачками на весь 5,6 и 7 классы. biothread: мне скоро 33 и я стал как-то спокойнее к славе, быстрым деньгами и выяснению какой язык программирования лучше и тд началась моя история с math с того, что однажды осенним днем 1999 года мой сосед димка не вышел гулять - он решал задачки для маткружка. настроение для разговора с вами: ребята, я люблю ярких и умных и в меру дружелюбных людей, пишу сюда под ooolong чаем, немного устал к концу года от ковида и всего связанного с ним, пришел сюда, чтобы найти парочку единомышленников для дискуссий и познакомить вас с миром ds jvm. сфера моих рабоче-научных интересов в 2020 году: tensorflow java/c/c++ api, расчет градиентов в tf/pytorch, jax, hyperparameter tuning methods и automl вообще, форматы хранения моделей ml/dl, cuda, приближенные методы классического ml, распределённые ml алгоритмы. план на неделю следующий:1 биография (матфак омгуаспирантураначало трудовой карьерырынок труда в небольшом городе)2 ml на jvm, текущее состояние3 sparkml/ignite ml5 kotlin for data science6 tensorflow, кишки7 разное (работа на удаленке, взгляды на жизнь). добрый день, меня зовут зиновьев алексей, в миру сейчас я работаю в jetbrains в команде kotlin for data science, создаю dl/ml библиотеки на kotlin; также несколько лет жизни я посвятил разрабатывая фреймворк распределенного машинного обучения семейный. а на какой срок не глупость? :). интересные книжки. уроки:. на этом я с вами прощаюсь, с вами был , заходите ко мне тоже, но я там столько не пишу (даже шитпостить оказалось весьма трудоёмко с непривычки) ещё пару часов будут смотреть на ваши лайки и отвечать в реплаях, поэтому не стесняйтесь. лайк, ретвит, коммент. computer arhitecture quantitave approach, hennessy-pattersonи computer systems, a programmer perspective, bryant, ohallaronмы ж разработчики да? а на чем разрабатываем? почему оно такое? две книги про архитектуру компьютеров одна сложная, одна доступная хз куда без этого. meaningness, david chapmanэто книга-блог про да хз про что, про всё? философия, этика, поиск смысла хорошо раскладывает разные подходы к этому (удариться в религиозную тему или наоборот нигилизм), коллапс систем 20 века и тдможно стартануть тут. 100%, но я только в общих чертах знаю идею дилеммы инноватора, не читал ещё. пиши, сокращай, ильяхов, сарычеваесли ты живёшь не в сибирской тайге, то общаешься с людьми — на работе, в твиттере чаще всего важное приходится писать книга покажет какое говно ты обычно пишешь и как сделать лучше побочный эффект: чужое говно станет ещё тяжелее читать. color appearance models, mark d fairchildдетальное разбирательство с тем, как формируется цвет, как мы видим цвет, как влияют соседние цвета и тд любой уважающий себя cv-инженер должен понимать хотя бы процентов 10 из этой книги. the bitcoin standard, saifedean ammousрассказ об истории денег (от ракушек, гигантских камней, через золота к бумажным деньгам) 90% книги про деньги и их важные свойства и в конце глава о том, как #bitcoin идеально подходит под все задачи (если взлетит). where is my flying car? j storrs hallлетающие тачки, потребление энергии, великая стагнация и нанороботы — всё, что обещала нам научная фантастика и мы были в шаге от этого почему не дошли и как вернуть обещанное?. the great mental models, shane parrishописание из полутора сотен ментальных моделей, который создают фреймворк в голове как работает мир, общество и всё-всё-всё если в школах выкинуть литературу, а оставить только подобные книги — выходили бы образованные люди из школы :). 80000 hours, benjamin toddкак выбрать карьеру, чтобы оказать влияние на мир? почему не стоит идти волонтёром кормить бездомных если ты на самом деле хочешь накормить бездомных почему не стоит идти врачом, если ты хочешь спасать жизни людейtl;dr:. stubborn attachments, tyler cowen книга — философский кейс о том, что прогресс и экономический рост — это моральное благо и мы обязаны его добиваться ради бесконечного количества будущих поколений наших потомков а для этого нужна свобода, желание рисковать и оптимизм о будущем. never split the difference, chris vossкак вести переговоры знаю, звучит скучно, но это лучший томик по переговорам эвар не академическая хрень или какие-нибудь жесткие переговоры, а опыт реального переговорщика, когда на той стороне чья-то жизнь, и ты не можешь просто уйти. factfullness, hans roslingкнига о том, что наш мир не так уж плох, как кажется в новостях, реальные факты об улучшении жизни миллиардов на ту же тему и презентации рослинга на теде -- они огонь. range, david epsteinесли вы пытаетесь найти общую тему у этих книжек, не можете, но чувствуете интерес ко всему подряд — этот томик про вас как поверхностные генералисты выживают (и процветают) в мире глубоких специалистов? почему не надо грустить если ты распиздяй и другое. the knowledge, how to rebuild our world from scratch, lewis danellговорят 20% приносят 80% пользы в этой книге описаны 1% знаний цивилизации, который даёт 90% пользы мыло, картошка, цемент, антибиотики, электричество, связь — как бутстрапить цивилизацию в случае бп?. the personal mba, josh kaufmanперечитал недавно, когда увидел юбилейное издание краткая шпаргалка по всем бизнес-вопросам прям по всем если даже ты аутист-программист и не выходишь из дома — всё равно стоит прочитать для кругозора, что все эти люди делают и откуда value. the culture map, erin meyerэту прочитал последнюю, лежала год, очень жалею, что так долго! могла бы помочь в общении с америкой 100% даёт фреймворк как размышлять о контактах с другими культурами, 8 осей по которым проходят ключевые отличия книга огонь, рекомендую 100% всем. tiny habits, bj fodd / atomic habits, james clear / indistractable, nir eyal / the motivation hacker, nick winterкогорта похожих книжек с разными акцентами про то, как наши результаты и успех в жизни определяются нашими ежедневными привычками и как по капле эти привычки менять. how innovation works, matt ridley шикарная книга о том, откуда берётся прогресс, что он с одной стороны неизбежен, с другой очень хрупок много истории, как шёл прогресс в энергии, еде, транспорте и в обычных вещах (почему чемодан на колёсах появился позже полёта на луну?). образование для образованных 2020, левенчук хоть автор и противоречивая фигура в наших кругах, но про образование он пишет великолепно и обладает даром систематизировать и раскладывать по полочкамсистемное мышление тоже рекомендую, но если выбрать одну, то берите первую. и на закуску, десяток топовых книжек этого года, без какого-либо ранжирования, как будут в голову приходить. tl;dr:выбирай ключевые проекты, давай импакт, используя для этого любые ресурсы (сам, помощь всех, кого сможешь подрядить, подключай менеджера, продавливай правильные идеи), описывай процесс, рассказывай о результате, учись на ошибках, тикай с бессмысленных проектов и галер. **локальный пайплайн с быстрыми итерациями — ключ к успеху**тут тянет на целый отдельный тред, но тлдр: чем больше мелкого трения, тем больше ты будешь страдать, а не делать работу свой быстрый девбокс — ван лав, плюс безлимитное облако — секонд лав. **много железа — не значит быстро**особенно, если это железо спрятано за тысячей слоёв абстрации, каждый из которых сильно протекает и нет возможности/времени/знаний с этим детально разобраться от и до, а надо хуякс-хуякс и в продакшн. распиздяйство и легаси — не исключают друг другакогда куча народа занимается непонятной херней, то очень быстро всё обрастает слоями непонятной херни, которая чёрт знает зачем нужна (это сделал чувак в прошлом году, который давно уже ушёл, хаха) и которую нельзя трогать. «атмосфера стартапа» не всегда лучшая атмосфера для роста и обучения ты можешь попробовать разное (особенно в маленьком стартапе) и научиться куче всего но, если учиться будет не у кого, то можно делать хуйню, думая, что ты гений, который во всём легко разбирается. **cut losses early** переставать заниматься фигней, чем раньше тем лучше понимаешь, что проект ерунда, чтобы потянуть время? найди другой понимаешь, что тебе в целом тут больше нечего делать — уходи не надо тянуть, это не приведёт ни к чему хорошему. **проси о помощи** можно зарыться на две недели в проблему, а можно найти того, кто поможет её решить за пару часов регулярно бывают задачи, которые не поддаются, а помощи просить не у кого? ну ты попал. **давай быструю обратную связь** если получить задачу и сидеть в углу две недели, а потом сказать бле, неполучается, это гораздо хуже, чем если у тебя будут постоянные обновления статуса по задаче — подход, прогресс, препятствия, поражения. **документируй всё **проговаривай (письменно) все предположения, планы, варианты решений, дальнейшие действия, причины почему делаешь что-то или почему не делаешь что-то особенно в распределённой/удалённой команде не записано -- не существует. **нужно браться за важные проекты **если непонятно какие проекты важные — искать обратную связь, спрашивать, анализировать думать самому — если кажется, что занимаешься херней, то тебе не кажется. **нужно быть активным и проактивным**нужно продвигать свои идеи, когда они кажутся хорошими и правильными, недостаточно просто пару раз предложить как сделать на митингенужно искать обратную связь постоянно и со всех сторон — от боссов, от коллег, от других команд. [мне] не нужно прыгать [сильно] выше головыразмеренное движение вперед и вверх, небольшими шагами да, нужна доля риска, выход из зоны комфорта, но не очень далеко и не во всём сразу закрепился на новом уровне, отработал навыки, растянул один аспект, закрепил, растянул другой. финальный аккорд :) уроки, которые я извлёк из своего фейла в стартапе:. правительства генерируют новые деньги, профит с них получают те, кто близок к источнику (само правительство и банка и тд) к людям бабло приходит когда цены уже выросли см эффект кантильона чтобы поддержать простых людей печатают ещё как остановиться? см гиперинфляция. 35% of all us dollars in existence have been printed in 10 monthsхех прасците, завтра вернусь к нормальным топикам. нас ждут интересные времена кто сказал #bitcoin?. 65/ 52% американцев 19-29 лет живут с родителями остальные в общагах и домах снятых на пятерых?. 64/ малоизвестный факт, пиццу можно разогревать в тостере. unfounately but it doesnt mean we shouldnt strive for it. почему глупость? всего лишь данные cdc по ожидаемой продолжительности жизни для штатов конечно, но в большинстве стран данные похожи, кроме самых бедных. 63/ у cloudflare есть гейтвей в ipfs уже два года как пиратские библиотеки на пути к бессмертию. 62/ у родившихся в 2000 году шанс дожить до 22 века — 2%. 61/ 60% родившихся в 2020 году доживут до 22 века (даже если медицина не улучшится).  : gift guide: the best books for 2020 recommended by vcs and techcrunch writers (pa 1) by. какая цель развития технологий? сначала — уменьшить бедность в перспективе — устранить смертность. тут геном запостили первый раз: в вики есть. 60/ один чувак выиграл несколько миллионов долларов в jeopardy! после того как стратегически выучил около 200 000 фактов с помощью анки за пару лет другие пользователи — американские врачи, топовые колоды студентов-медиков достигают десятков тысяч карточек. 59/ люди забывают 90% полученной информации в течение нескольких дней как запомнить больше? активное повторение на правильных интервалах флешкарты в anki позволяют сделать запоминать что угодно по своему выбороу, с гарантией. 58/ пауки могут летать на сотни километров благодаря статическому электричеству wtf?. про ритэги я был в курсе, а то, что ещё натуральные ядерные реакторы, с турбиной и всем прочим, тоже запускали — не знал. 57/ и это 80трлн _каждый_ год и рост под 3% — две экономики россии в год плюсом, каждый год. 56/ размер физической инфраструктуры и мировой экономики конечно поражает — 80 000 000 000 000$ в год невозможно воспринять смотришь на одну многомиллиардную индустрию, на другую, на третью, балдеешь от масштаба ха, ты посмотрел на 0125% от мировой экономики, лол. 55/ крупнейший контейнеровоз в мире —23 756 teu (контейнера) размеры ограничены только каналами, можно было бы больше грузовой поезд — 200 вагоновв год перевозят около 150 млн teu(полляма в день, 17 тыс в час, 300 в минуту)рост 3х с 2000 года 6 фактов в одном твите. 54/ больше половины населения планеты живёт в пределах 100км от береговой линии изобретение грузовых контейнеров изменило мир — дало дешевую морскую доставку чего угодно куда угодно. 53/ суммарный объём нефтяных танкеров больше 500 миллионов тонн вряд ли их будут бомбить в случае атомной войны, так что будет откуда запитаться топливом первое время после ядерного апокалипсиса. 52/ месторождение было найдено в 1970-е годы, но при этом засекречено, а его изучение заморозили в связи с тем, что в то время в стране строились заводы по производству синтетических алмазов а, ясно-понятно. 51/ однажды читал про сверхтвёрдые материалы и оказалось, что существует особая форма наноалмазов, которая на 58% твёрже обычных потом оказалось, что нашли их в кратере попигай в сибири в сибири есть кратер?! четвертый по размеру в мире. 50/ а специальный софт для анализа накопленных измерений, интеграции данных со спутников и тд стоит около 25 штук баксов за лицензию на один комп. 49/ к вопросу о точности лазерным дальномером можно измерить орбиту спутников gps с точностью до миллиметров при такой точности выясняется, что земная кора в точке измерения поднимается и опускается на несколько сантиметров в зависимости от атмосферного давления кто бы знал?. 48/ точность современных измерений поражает один вариант определить килограмм — специальные весы, настолько точные, что разница в гравитации при разнице высоты над полом 1м уже вносит серьёзную погрешность в нихдругой вариант: посчитать все атомы в идеальной кремниевой сфере. 47/ в прошлом году, впервые отвязали все единицы измерения от физических прототипов и теперь килограм определяется через постоянную планка вряд ли это поможет в жизни, просто живите с этим. 46/ это может быть не очевидно, но в мире около 22 тысяч опреснителей, дающих ~100 миллионов кубов пресной воды в деньи растёт на 10% в год (удвоение за 7 лет, экспонента, bitch) половина из этого — на ближнем востоке и в северной африке. хорошо в иркутске — тут и крупнейшие запасы воды и электричество из воды 15 цента киловатт*час и нефть своя и лес и золото и солнце есть не то, что в этих арабских эмиратах, где даже воду приходится добывать =). 45/ опреснение морской воды требует от 2 до 20квт*ч за кубометр там где пресная вода нужна больше всего — там же и больше всего солнца снабжение 1млн человек (включая промышленность и сельское хозяйство) потребует ~28км2 панелей (5*6км) смело лейте воду, если вы не в пустыне. 44/ в мире, кстати, около 7-8 миллионов вышек сотовой связи по одной на каждую тысячу человек сколько это стоит — страшно представитьдля сравнения, многие считали безумными планы старлинка запустить пару тысяч спутников, чтобы обеспечить такое же покрытие :). 43/ атомные часы довольно распространённая штука, например, есть в каждой вышке сотовой связи. 42/ на вершине горы время течёт быстрее, чем на уровне моря разница всего несколько наносекунд в сутки, но атомные часы вполне её измеряют более того, такие часы относительно доступны (можно купить на ибее) и есть целое сообщество, которое увлекается такими экспериментами. 41/ никто не воспринимает интуитивно всю мощь экспонент: вон тот пик 13 февраля — это была ужасная по масштабам поправка количества заболевших на тот момент было только и слышно, как китай облажался и не может даже эпидемию остановить, не смотря на нечеловеческие локдауны. 40/ китай на днях посадил робота на луну я даже не знаю, замечают ли люди такие новости в 2020 году?. 39/ все млекопитающие нюхают себя люди не исключение — исследования показывают, что практически все жесты, когда руки приближаются к лицу, сопровождаются более глубоким вдохом и однозначно являются бессознательным, автоматизированным обнюхиванием себя. 38/ первые генетически модифицированные люди родились в конце 2018 года ученый, который их модицифировал получил в награду 3 года лишения свободы. 37/ люди всегда боятся, что развитие технологий и рост населения приведёт к катастрофе но всё было наоборот взять голод: ещё в 60-е были призывы бросить попытки спасти индию от голода, это бесполезно потом случилась селекция пшеницы, удобрения и теперь индия экспортёр еды. 36/ related to #8: mdma тоже разрешённая терапия в штатах, на этот раз от посттравматического синдрома я всегда говорил, что у переживших 90-е ptsd без вариантов. 35/ говорят, что закон мура умер, но нам, потребителям, на это пока пофиг, потому что на 15 лет инженеры и исследователи ещё знают что делать, чтобы продолжать в том же духе а потом умрёт, окончательно, да а может за этим 15 лет и ещё чего-нибудь придумают, но вряд ли, ага /s. 34/ неочевидное следствие из 👆: новые технологии кажутся дорогими и недоступными, пока внезапно не заменяют старые см солнечная энергетика с батарейками: супер дорогая десять лет назад (и на эти цены смотрят делая прогнозы), бесплатная через 10 лет. 33/ всё на свете дешевеет по мере роста производства: каждое удвоение общего количества выпущенных изделий даёт снижение цены на фиксированный %(закон райта) один способ оставить дорогим — ограничить выпускнаглядно на примере 66 разных технологий:. 32/ не факт, но мнение интересное (думаю некоторые из вас уже заметили какие-то общие темы в этих твитах). 31/ а акции теслы уже по 600$ (3000$ по старому) millennials pofolio (btc/tsla 60/40) в ударе. 30/ биткоин уже неделю не может за 20к перевалить, заебал. 29/ компании добавляют и исключают определённые слова из финансовых отчётов, чтобы создать более положительное впечатление на биржевых роботов. 28/. 27/ фармацевтическая индустрия прошлого века в германии и швейцарии выросла из текстильной, которая имела химическую экспертизу из-за красок для ткани, обнаружила их лекарственные свойства и имела все предпосылки для развития в этом направлении. 26/ вакцину от коронавируса сделали за два дня после расшифровки генома 10 января всё остальное время — тесты и проверка безопасности. 25/ без кондиционирования не было бы современных финансовых центров в тропиках, таких как сингапур или гонгконг вообще, некоторые считают кондиционирование величайшим достижением 20 векаиз сибири кажется, что батарея отопления важнее, но костёр придумали ещё пещерные люди. заходите сюда, там неожиданно интересно. great stagnation как оно есть, но вроде есть проблески надежды, что нас ждут новые ревущие 20-е. 24/ илон маск без сомнений сделал больше всех для возрождения интереса к прогрессу в физическом мире и восстановления оптимизма, что этот прогресс возможен электротачки, ракеты, нейроимпланты, терраформирование — достойная альтернатива киберпанку. 23/ каждому жителю россии нужно такое зимнее солнышко. согласен, нашёл вот такие данные, в среднем 8 лет получается:as of march 2020, there are 136,682 living atomic bomb survivors, also called hibakusha; their average age is over 83. 22/ основатель леха натекин прямо сейчас втирает путину как космические ии бороздят просторы большого театра на ядерных реакторах а мы тут с вами сидим. 21/ или что все умные пошли в юристы и финансисты и из-за этого технологический прогресс потерял до 2% в год (мелочи, но разница в два процента на промежутке сто лет даёт разы). 20/ факт в том, что есть и другое мнение:. 19/ если захочешь сейчас купить мелкий самолёт, то все они сделаны в 1970-1980-х почему? пик производства (50к в год), после которого упало камнем, а цена оставшихся 🔝🔝🔝почему? нефтяной кризис, зелёные хиппи, экономия энергии и вообще, нехер шастить по небу. 18/ летающие тачки не только возможны и были бы полезны, но и создавались десятками вариантов за последний век почему до сих пор не летаем? поворот на экономию энергии, регуляция и невозможность перескочить через барьеры ранней технологии (как сделали обычные тачки и самолёты). 17/ в дополнение к бионике, развиваются генетические методы лечения (эх, мне бы оба варианта не помешали). 16/ бионика постепенно развивается, даже если люди об этом не знаю, это факт. это просто для контекста для многих же атомная бомба это всё пиздец, пустыня и мутанты с двумя головами но в любом случае, там в японии выжили не только те, кто детьми были на момент взрыва например, единственный кого признали дважды пострадавшим дожил до 93лет и умер в 2010. 15/ ренгтен не очень хорошо фокусируется линзами (вообще никак), поэтому его направляют куда надо зеркалами но отражается он тоже плохо, даже от зеркала из 70 слоёв из молибдена и кремния, поэтому от мегаваттного лазера до подложки доходит сотня ватт. 14/ современные процессоры делают с помощью рентгеновских лазеров и это взрыв мозгов специальная пушка стреляет расплавленным оловом в вакууме, потом двойной лазерный импульс испаряет эту каплю в плазму такой температуры, что она шарашит рентгеном и так 80 000 раз в секунду. 13/ россия разрабатывает мегаваттный (!) ядерный реактор для космических аппаратов вообще, интересно, что именно у нас сохранилось гораздо большее количество ядерных проектов (меньше внимания страшилкам? пофиг на людей?) жаль, правда, если это окажется фантазиями чиновников. 12/ в районе 1970-х годов потребление энергии в сша свернуло с тренда на рост 7% в год примерно с тех пор у нас прекратились революционные изменения в материальном плане, а весь прогресс ушёл в компьютеры (которые, по совпадению, не требуют так уж много энергии). 11/ в следующем году запустить свой микро-спутник будет стоить как полёт первым классом (если самолёты начнут летать, хаха), см:. голосуем :). 10/ в ту же сторону создание универсальных мер и весов, единое время и стандартизация — чтобы субъекты лучше координировались и росла экономика, чтобы было больше налогов в казну всё это в деталях в книге james c scott’s seeing like a state пишите, нужен ли тред про книги?. 9/ фамилии появились относительно недавно (несколько веков назад) как инструмент государства по усилению контроля над подданными и граждане яростно сопротивлялись этому зачем нужен дополнительный идентификатор, если в рамках деревни понятно, что такой иоанн, сын иакова?. 8/ в 2017 и 2018 годах американская fda дала разрешение на лечение депресии псилоцибиномдаже не знаю, что удивительнее, то что это в этоге произошло или то, что это заняло так долго (первые исследование были ещё в 70-х, но борьба с хиппи накрыла психоделики дружественым огнём). 7/ в мире живёт 165 человек, которые попали под _обе_ атомные бомбы — и в хиросиме, и в нагасаки даже не знаю, то ли это невероятно везучие перцы, раз ещё живы, то ли наоборот полные неудачники раз так попались. 6/ кстати, о небесных телах оказывает существует кладбище космических кораблей в тихом океане специальная область, максимально удалённая от всей суши, где запрещено судоходство, неподалёку от точки немо (вон та, синенькая слева внизу) 2600км до ближайшей суши. 5/ советский союз запустил в космос около 30 спутников с ядерными реакторами парочка из них вернулась обратно: один в канаду, другой над островами в океане остальные либо всё ещё летают на специальной орбите, либо развалились на атомы где-то в атмосфере. 41/ то есть шанс умереть от той дозы, которую допустимо получать на атомной станции должен быть меньше, чем шанс того, что тебя убьёт где-нибудь в офисе (по любой причине) для населения норма делится на десять и это порог для _эвакуации_ из дома в чистое поле в случае чего. 4/ нормы по ядерной безопасности в сша требуют, чтобы добавленный риск от облучения для работников атомных станций был не больше, чем риск умереть для работников безопасных индустрий, например государственных чиновников или клерков в банке. 3/ до сих пор живы 135 тысяч человек из 650 тысяч попавших под атомные бомбы в хиросиме и нагасаки75 лет спустя для сравнения, это почти втрое больше, чем всего осталось ветеранов вов в россии. 2/ в мире около 20-30 миллионов дизель-генераторов, способных генерировать 350-500гвт электричества в некоторых странах они дают больше половины выработки ээ, те производят столько же, сколько все электростанции страныудобно на случай ядерной войны :). натуральный _random_flood:. для затравки: в голландии существует традиционный спорт растягивание гуся натурально, нужно на скаку порвать живого гуся смазанного жиром в 1920-е годы этика возобладала и живых гусей рвать перестали ну то есть теперь гусей убивают, подвешивают и дальше рвут мёртвого гуся. давайте разбавим пятницу традиционной игрой — один лайк, один рандомный факт из последней недели. в моём родном ангарске обогащают уран для атомных станций и ядерных боеголовок и в детстве каждый прогноз погоды сопровождался словами радиоактивный фон там-то — 17 микрорентген/час, там-то — 20мкр/ч и я долго не мог понять почему в других городах не говорят эту важную инфу. разговоры про погоду. ч3. ч2. кулстори про стартап, ч1. про иркутск. про серу сибирскую. про беларусь. мегатред с тредами за эту неделю от сергея мушинского aka осторожно, внутри серьёзный дефицит внимания (что, впрочем, норма для твиттера) ⬇ ⬇ ⬇. ничего разумного на это ответить не было (ну давайте искать чёрных разрабов в снг что ли?), но вопрощающие настаивали — нет, всё же скажите, какие конкретно меры вы принимаете, чтобы исправить ситуацию?ходили шуточки, что придётся тянуть жребий и уединяться, будет сразу +2. сегодня в западном мл твиттере много драмы один друг рассказывал, что работал в филиале западной компании и однажды на общекомандном митинге спросили — а что руководство филиала делает для того, чтобы повысить дайверсити в команде, почему там преимущественно белые мужики?. наверное, я одинаково смеюсь над всеми кто так говорит =). окончание истории про стартапный фейл. если бы я знал, как всё дальше развернётся с короной, то может быть и стоило доработать но я не знал и поэтому был твёрд и расстроен и ушёл в последний день февраля fin потом расскажу, как выбирался из беларуси во время эпидемии. а я уже как-то психанул, оценил, что работать ещё месяц и отдавать эту зарплату за опционы, стоимость которых может оказаться равна нулю нет смысла и решил уходить прямо сейчас, буквально работать до пятницы и покавнезапно, теперь уже меня стали уговаривать эти полтора месяца. долго ли коротко, после небольших переговоров выяснилось, что это уже _третий_ мой негативный ревью подряд (а почему я об этом не слышал?), что я могу поработать до середины апреля (но не до середины мая, когда у меня истекает контракт). нет, не получитсяжаль, но хотя бы до апреля, чтобы получить опционы, доделать всё неужели я так плох, что нужно решать всё так внезапно?я был не в курсе про конец контракта и опционы узнаю. у тебя будет минутка поговорить? давай сделаем 1:1 в понедельник, а не в четверг — прилетает в чат конечно, почему нет в компании недовольны твоей производительностью и приняли решение расстаться 😓может быть я доработаю до конца контракта через 2 месяца?. но когда наконец случился полноценный перформанс ревью в начале 2020 года — всё это почему-то не зачлось и я раздумывал о том, когда же стоит уходить, чтобы переставать заниматься херней решился поговорить на очередном 1:1 с менеджером (который к тому времени уже появился). в друго раз выключил задачку, которая по крону прогоняла обработку данных, которые не менялись уже много месяцев (и не собирались меняться ещё очень долго) сэкономил ~15к$ наверное самое большое моё достижение. в стартапах всё обычно нужно вчера и очень быстро, поэтому случались интересные перегибы: однажды я обрабатывал на кластере из 104 многопроцессорных серверов картинки со скоростью 35 штуки в секунду (примерно в десять раз медленнее, чем на gpu ноутбука). а чтобы компьютер вижн инженеры не скучали, нам оставили какой-то мелкий проект с непонятными перспективами (и это наверное единственное из того, в чём я принимал участие, что пошло в прод). потом было важное стратегическое планирование, где вся компания два месяца рисует планы по захвату мира с графиками-клюшками в процессе мы узнали, что важное — это совсем не этот ваш компьютер вижн, а совсем другое и этим другим мы приоритетно и будем занимать. я же в бигдату не умею, поэтому спокойно пытался в одну каску повторить то, что делала конкурирующая/партнёрствующая компания а потом и вообще укатил в отпуск на месяцкороче, никакой перформанс ревью у нас и не проводился, потому что и проводить его было некому. внезапно, на суперважный проект в другой области компании понадобились все инженеры, способные в бигдату на 2 недели (хаха) все, кто мог в бигдату — стали помогать, да так хорошо всё сделали за 2 недели, что остальные обалдели от их скорости и их решили забрать на постоянку. да у вас там просто влажности такой нет. всё так рекомендую купить каких-нибудь очень ярких ламп, это реально помогает от зимней хандры вот например обзор (и классные лампы в комментариях). ладно, с индивидуальными ощущениями не буду спорить :) но для меня это примерно так же как -20 первый раз зимой -- ужас, холодно и после морозов -40 -- ура, потеплело, ништяк стало хотя физически-то ничего не изменилось, только отношение внутри. только в тяжелом европейском морозе я себе уши и нос ни разу не отмораживал :)но в защиту этой логики скажу: когда светит солнце, мороз действительно легче переносится как под инфракрасным обогревателем и в сибири оно светит, ахаха. как говорится, сибиряк не тот, кто не мёрзнет, а тот кто тепло одевается конечно легче, когда на тебе унты, варежки, пуховик с меховым капюшоном, а из лица только глаза торчат наружу и бегом от здания к зданию а сравнивают потом с курточкой без шапки до метро добежать. доброе сибирское утро, планета! у нас немного прохладно, всего -20с, зато не так влажно, как у нас, и мороз легче ощущается, как любят говорить те, кто тут ни разу не бывал. и нашим формальным менеджером стал кто-то далеко-далеко по иерархии директоров, с кем мы вообще не контактировали и мы какое-то время завершали этот проект, закрывали концы, подчищали какой-то технический долг и тд. а пока, надо немного подождать и, кстати, вы отлично справляетесь, я больше не буду вами управлять, мы скоро найдём вам другого менеджера, а пока давайте сами». и за несколько часов до запуска наш менеджер внезапно собрал митинг, на котором сказал «запуска не будет, потому что другая команда не готова принять наши данные, нужно только немного поменять стратегию, но работа был не впустую, мы сейчас чуть-чуть переделаем и всё же запустимся. короче, я остался и мы хорошо поработали, и сделали этот проект и уже назначили дату запуска и всё шло замечательно и было тёплое лето 2019. только начало всё получаться, проект был понятным и подъёмным и обозримым, а в перспективе нам обещали гору интересных задач и была поддержка с самого верха и было понятно зачем это всё нужно, и август был совсем рядом. ха-ха мотивация пробила крышу в этот момент я думал о том, чтобы уходить и нужно было это сделать но. но почему тогда опционы в ожидаемом количестве? «а это с барского плеча, чтобы замотивировать, несмотря ни на что» «но ты не переживай, в августе-сентябре будет следующий перформанс ревью и там-то точно всё будет хорошо». surprise motherf**ker! никаких изменений в зарплате я не увидел на вопрос «как так?», получил ответ — «дескать, мы имели в виду не максимальные бонусы в договоре, а вот конкретный, последний бонус, за последний квартал, а 50% от нуля равны нулю». я не особо-то и рассчитывал к этому моменту ещё через неделю должна был прийти первая новая зарплата, с оставшейся половиной порезанных бонусов. я продолжал в том же духе и спросил через пару недель — ну что? а ничего, оказалось, что один из больших боссов был сильно против и поэтому сорян, не получится. по результатам этого спринта мой новый босс сказал, что я показал себя совсем иначе и что у меня всё отлично и что если я ещё пару недель буду продолжать в том же духе, то мне задним числом и бонус начислят. неделя прошла в митингах с другими командами, знакомством с разными людьми, социализация и так далее и даже удавалось покодить что-то полезное настроение было отличное. дальше наконец всё стало определяться, появился понятный проект и бюджет и сильный менеджер уровня vp для нашей команды из трёх человек мы полетели на кикофф (старт) проекта в головной офис. и в этот момент ощущаешь себя нео: открыть-то рот не получается!. но можно ртом вдохнуть воздуха или выпить воды и будет опять хрустетьглавное не выпить горячего чая по глупости :). ещё у серы есть одно забавное свойство — в нормально состоянии она кристаллическая, то есть твёрдая и хрупкая когда начинаешь жевать она хрустит и разлетается во рту, пока не согреется а потом как жевачка. а уж сколько пломб полегло в неравной борьбе это как ириска — так и хочется помощнее прикусить, а потом резко открыть рот. физически очищают, какие-то там эфирные компоненты бактерицидные, но это как в рекламе дирола — под звёздочкой, что никто серьёзно не проверял :). вкусно говорят, что полезно (но я скептичен) местная традиция из времён, когда ещё никаких баблгамов не было. а в сибири называют и не только дети :). поехали часть вторую на чём я там остановился? ах да, конец первого года работы в стартапе, делающем крутые штуки с компьютерным зрением. я лет десять не жевал, а после того разговора уже не мог не попробовать по возвращению всё ещё вкусно, но зубы уже не те (или сера не та?), прилипло везде, где только можно, потом ещё неделю выковыривал. и дневные конечно, лол час ночи уже о, ещё один факт: все на востоке россии всегда знают, сколько времени в москве на автомате отнимаешь 5 часов и всегда есть чувство какое время там, на западекогда живёшь в москве -- хрен, не работает так. согласен вот, например, ночные виды байкала. это и есть сера жевательная смола лиственницы на первой фотографии как продаётся, в готовом к виде на второй — исходник, из которого делается вкус: как будто жуёшь тайгу — пряный и свежий в отличие от буржуинских жевачек — вкус вечный, можно жевать часами и челюсти качать. иронично, случайно выбрал для иллюстрации солнечного иркутска ночные фотки щас исправлю вот они, наши красоты в ясный день из окна виден аэропорт, плотина гэс на ангаре и саяны. в иркутске реально холодно и солнечно после трёх лет в москве и минске я и забыл, что такое зима, снег, -25но ничего, уже в начале ноября всё это прекрасно вспомнил в начале ноября, карл!но красиво. оказалось, что и правда не знают что это такое, лол потом выяснили, что никто из них никогда серу не жевал это я потом ещё на москвичах проверил — такая же фигня сера, блять, это основа сибирского детства, как вообще без неё вырасти человеком?. тут я офигел и говорю — вы чо, зяки-зяки никогда не видели? они: что блять? я: зяки-зяки, блять, бигрэ, крабовые чипсы, мультифора, сера жевательная, вы вообще по-русски не говорите что ли?. никогда не думал о региональных отличиях, пока мы как-то с коллегами не пошли в тайское кафе и нам дали на закуску такие крабовые чипсы я говорю — о, прям как дома, а минские ребята — что это за хрень? это вообще съедобно?. четырёхкомнатная квартира в центре, с камином, витражом, балконом и двумя ванными? пожалуйста, заверните с вас 600$ после московской двушки на отшибе за 35000руб это казалось практически бесплатным (но можно было и за 300$ снять где-нибудь подальше). отдельный тред про иркутск, сибирь и мультифоры. особенно поразила дешёвая аренда жилья щас буду хвастаться. минск — шикарный город, чем-то похож на военный городок, всё что должно быть пострижено — пострижено, всё, что должно быть покрашено — покрашено, и всё это вместе — подметено но в центре и с деньгами даже очень похоже на европу (и даже лучше, особенно с деньгами). чтобы было не скучно, здесь буду писать всякое про беларусь/минск и тамошних туземцев. на этом часть первую пожалуй закончу результаты первого года: поковырялся с докером, поработал на макоси, натренировал распознавание текста уровня мниста. цитируя «плохие коммуникации» бонус назначили нулевой, жаль, но справедливо. 1:1 с большими боссами, где я почувствовал лёгкое напряжение и недовольство, когда нечего было толком сказать, чего я полезного сделал по результатам квартала (сначала каникулы, потом отпуск, потом мой проект внезапно отменили, а потом месяц не знали чем меня занять). утешало то, что в фантики превращалась лишь половина бонуса. я не очень обрадовался, потому что замена реальных денег на фантики из монополии — это не очень приятно в конце концов на бонусы влияет результат квартала, и можно после неудачного квартала улучшить свою работу и всё такое, а на опцион влияет работа всех, да и вообще. поэтому с апреля бонусов больше не будет, а будет так — 50% бонусов пойдёт в постоянную прибавку оклада и 50% пойдёт в опционы, которые начнут веститься с апреля все очень обрадовались, ведь опционы это так по-взрослому. так прошёл ещё месяц, я придумывал себе занятия, пытался предугадать куда пойдёт новый проект и собирал информацию где-то параллельно с этим нам радостно сообщили, что мы хорошо интегрируемся в компанию и теперь нам тоже доступны опционы, как и всем белым людям. на этой ноте я ушёл в отпуск, а когда вернулся, то обнаружил, что я теперь в новой команде, занимаюсь новым проектом вернее так, в старой команде я больше не нужен, там и так всё в порядке с ресурсами, а в новой пригожусь, но пока ещё непонятно что нужно делать. через месяц западные менеджеры, которые стали нами управлять задали вопрос «а чем ты занимаешь?», ответ «ну вот, ocr» привёл их в удивление и замешательство — «но нахера нам ocr, для кого или для чего вы это делаете? давай-ка пока отставим это дело». в новый год от нас ушёл главный местный менеджер. чем заняться было не особо понятно и мы начали делать распознавание текстов на знаках, чтобы потом впрочем, неважно что потом, главное распознавать задача не сложная, всё более-менее заработало. шёл третий квартал работы, наконец-то приехала пара девбоксов (на шестерых), но и они оказались какие-то дефектные и сожрали просто кучу времени на возню с ними к концу года мы их таки запустили в работу, а заодно я избавился от мака, чтобы наконец-то начать работать. при устройстве я ждал, что приду, сяду за рабочий стол, распакую свой девбокс и буду красиво тренить нейросеточки на мощном железе, поэтому выбрал лайтовый макбук как терминал, ездить везде, да и таскать с собой ахаха. я всё ещё воспринимал себя как «ресёрчера» которому нужно искать какие-то полезные идеи, тестировать гипотезы и что-то там тренировать с компьютерным зрением. второй квартал я пилил с коллегой одну штуку, интегрировать которую в продукт не мог, ибо плюсы-хуесы, короче премию мне не дали, ибо «а интегрировать?»было немного обидно, когда я узнал, что тиммейту моему бонус таки дали, когда он довпиливал штуку через месяц. что мы делали? беспилотный автомобиль, превратившися в видеорегистратор, превратившийся в sdk для разработчиков, превратившийся в элегантные шорты. координация выглядела так: раз в пару месяцев, __внезапно__ набегал начальник, собирал всех в офисе за круглым столом и мы полдня брейнстормили идеи что бы поделатьпотом расходились и продолжали заниматься непонятно чем. однако, первая квартальная зарплата принесла мне лёгкое облегчение -- хоть и хаос, но 125к прилетевшие буквально пока я успел только получить доступ ко всем системам и настроить корпоративную почту, :notbad:. я ждал, что мне кто-то скажет, что делать, за что браться и что важно во всей этой нашей деятельности но нетникакой структуры особо не было, каждый занимался чем-то понятным ему одному и я чувствовал себя полностью потерянным в этом хаосе. там была знаменитая атмосфера стартапа. я приехал, когда вся работа уже была по-большей части разобрана и делать было нечего, пропустил поездку в штаты, японию и везде, практически весь фан первоначальной неразберихи. я договорился выйти через два месяца, чтобы плавно завершить дела на прошлой работе и месяцок отдохнуть перед напряжённой работой (голос автора: это было первой ошибкой). в крайнем случае, есть испытательный срок, увидят, что я не справляюсь и скажут дружище, сорян, ожидали мы совсем не того, приятно было поработать с тобой (спойлер: почти так и получилось). немного подумав, я решил, что даже если и так, то они опытные, более профессиональные ребята и лучше меня понимают, что делают, за что собираются платить и как оценивать мою работу. сказать, что я был шокирован, растерян и напуган -- это ничего не сказать я был просто в ахуе, ведь если мне собираются платить столько бабла, то и ждать от меня будут каких-то невероятных результатов, ведь так? так?!. выходило где-то в 35 раза больше, чем я зарабатывал на текущей работе да блин, это выходило сравнимо с зарплатой в сан-фернандо (100к в год с учётом налогов эдак 35%, аренды 2000-3000 vs 600, получается после базовых расходов на руках ~~ 172к там). ах, да, забыл, к этому ещё квартальные бонусы до 60% от общей квартальной зп, те при хорошем раскладе ещё 10к шекелей в квартал после налогов, после всего, чистыми на руки. через несколько часов пришёл ответ: давай +10% и твои остальные просьбы🎉!!!500 тугриков прибавки за 20 минут письма, хм, если проработаю год, то это 18 тысяч в час, неплохо. но религия хасиба требовала торгов, поэтому я попросил +20% и разных мелких уступок в придачу отправив дрожащими руками письмо, я думал, что это будет либо самый большой почасовой рейт в истории меня, либо самый большой фейл. на следующий день был готов оффер в районе 5к зеленых тугриков в месяц было страшно и непонятно, ведь я только полгода как в принципе начал работать разработчиком, а тут меня походу перепутали с сеньором и хотят завалить деньгами. внезапно собеседование было несложным и прошло больше в формате вечерней посиделки за пивом и разговора за жизнь, нейросеточки и прошлые проекты по компьютерному зрению. терять было нечего и я сгонял пособеседоваться -- хотелось посмотреть новый город, новую страну, да и чем чёрт не шутит, может быть найти новую работу. в 2017 только переехал в москву и втянулся в первую работу в cv (в очень ламповой компании, привет , и ), как мне пришло письмо: «увидели тебя в топ-100 каггла и впечатлились, так что давай к нам на работу, делать беспилотные автомобили». про эту ^^ заметку есть тоже прикол два года спустя обнаружил, что её в ангарских новостях перепечатали и почитал комментарии ааа, никогда бы не подумал, что я такой плохой =) с тех пор пообещал себе публично не токсичить и вы пишите в реплаи только хорошее, пожалуйста :). расскажу, как покорял американский стартап на чужбине история длинная, порежу, пожалуй, на несколько частей, а в промежутках всякое прикольное про беларусов и сибиряковдля тех, кто не слышал про меня до этого, начало истории есть в газете:. победили кулстори из жизни, не могу идти против мнения коллектива. такая забота и ориентированность на долгосрочное сотрудничество — лучшее, чем славится.  : но ведь тогда люди в карьере её пропустят, а этого бы не хотелось! напишите там кто-нибудь, что пока не соберём 500 новых фоловеров кулстори не будет а если соберём — будет, зуб даю. но ведь тогда люди в карьере её пропустят, а этого бы не хотелось! напишите там кто-нибудь, что пока не соберём 500 новых фоловеров кулстори не будет а если соберём — будет, зуб даю. это первый реплай, который я получил, но это уже второй вопрос про кулстори в #career думаю сюда может зайти почиканная на отдельные под-истории версия.  : всем привет, это сергей мушинский aka я безработный разработчик компьютерного зрения из сибири и эту неделю мы будем обсуждать всё самое важное, что волнует безработных по всему миру:. летающие тачки, перспективы атомной и солнечной энергетики, биотехнологии и синтетическую еду, строительство сферы дайсона, почему датасайнтисты не нужны, фантастический прогресс числодробилок, кулстори из жизни и какие нас ждут ревущие двадцатые с чего начнём?. всем привет, это сергей мушинский aka я безработный разработчик компьютерного зрения из сибири и эту неделю мы будем обсуждать всё самое важное, что волнует безработных по всему миру:. этот тред (кхххххх). прощальный наброс про сигбовик. хакатоны, бот-расист и поиск по лицу в порно намба ту. хакатоны, бот-расист и поиск по лицу в порно намба ван. приколдес наивысшего уровня с новогодним поздравлением. хакатон junction. сталкерофф намба ту. сталкерофф намба ван. продолжение про мемасы, ганы и космос. про мемезойда. про коммит в спарк. про двач-бота. моя биография в стиле кровостока, разлетевашаяся по мемасным пабликам. на этом точно все с вами был tj , счастливо оставаться в этом треде - ссылки на треды. например на 6 фесте был доклад от антона василькова про то, как использовать googlesheets в качесте gpu для инференса нейронок (бесплатно!) отметились c ганом для куаркодов, и c предсказанием эмоджи по твиту и саша бельских с кекасом. довброшу напоследок вдохновившись этой движухой, мы с и ко сделали секцию на датафесте правда у нас уклон был не в стеб над академией, а просто на трешовые проекты началось все как раз с двача, ну а дальше завертелось. советую всем ознакомиться, это угар вот 2020 год, остальные поручаю найти в качестве домашнего задания. штомш, время прощаться напоследок расскажу вам о таком модном молодежном движении, как сигбовик вообще это что-то типа первоапрельской научной конференции там кеки вроде статьи из 3 слов с ревью на 10 страниц, или статья про новую архитектуру нейронок с названием из 40 слов. пообщавшись с организаторами хакатона, мы с ребятами решили что это наш шанс, и надо делать какой-то серьезный проект и уже его везти в долину побрейнштормили, что-то потыкали, но в итоге слились короче на угаре мы запилили нечто, а на серьезных щщах не вывезли морали нет. главный приз в хакатоне был поездкой в долину с возможностью занетворкаться с инвесторами и впоследствии запустить стартап его выграла другая команда, но решением жюри нам досталась дополнительная награда она заключалась в возможности поехать в долину и нетворкаться). еще нам запилили лендинг, проект назвали ну и вишенкой был алгоритм трансфера лица в видео делалось это даже без сеток, так что результаты были угарно ужасными но такую технологию мы решили не вешать в паблик (хотя через год-полтора появился deepfake). в итоге юзеру выдавались ссылки на конкретные ролики, а не просто актрисы (актрис мало и они по-разному в разных роликах выглядят) правда качество самого поиска было неоч, либо выборка маленькая, либо эмбединги плохие, а скорее всего и то и то но это мы пофиксить не успели. зато поиск порноактрис мы прокачали во-первых, за неделю до хака я написал кравлер, который выкачал метаданные с xhamster по ним отобрал выборку роликов и напарсил из них кадров (что-то типа 1 кадр каждые 15 секунд) на самом хаке мы переделали поиск на эти кадры. продолжение про бота-расиста и поиск по порно примерно через пару месяцев после первого хака случился второй, от gagarin capital на нем мы решили развить обе идеи с ботом расистом сделали более устойчивый к изменению ракурса алгоритм звездный час бота-расиста был позади. он самый. мне тоже онлайн хуже заходит но вот на одс движухах устраивают нетворкинг в - конечно не ирл, но например на хеллоуин мы оч лампово посидели в сигбовике. при этом заголовки были в стиле в телеграмме появился бот-расист, что вообще не то, на что я рассчитывал) у нас вроде даже хотели взять интервью, но как-то не срослось ну и как это бывает, через пару недель хайп ушел и все забыли про второй хакатон расскажу чуть позже. естественно наш хакатонный говнокод вообще не был на это рассчитан и я помню, как мы в огне переписывали все на вебхуки, очереди и селери к этому моменту про бота написали уже несколько интернет порталов, тут в твиттере народ активно почтил скрины, короче это мощно завирусилось. короче что-то пошло не так - наш главный проект про порно ничего не выиграл второй тоже, но через пару дней мы заметили что трафик запросов вырос с пары человек (это мы сами) до пары сотен в день короче, к концу недели мы получили больше 1кк фоток). тема слегка скользкая, это понятно, поэтому во первых сразу дисклеймер - это на самом деле не работает от слова совсем - что там за эмбединги, что там выучила модель поверх - темный лес ну и изначально мы это позиционировали как прикол. мы взяли выгрузку знаменитых людей из википедии с фотками из текста статей находили этническую принадлежность, из лиц - эмбединги и научили классификатор второго по первому дальше вы понимаете, фотки юзеров классифицируется и выдаётся вероятность принадлежности к расе. то есть можно было скинуть боту фотку с лицом, он детектит его, считает эмбединг и ищет ближайшую по косинусному расстоянию порноактрису типа скидываешь своего краша и потом знаешь, кого гуглить вечером второй проект тоже был ботом, которому надо скидывать лицо, но там хитрее. технология - это мы тупо взяли либу, которая умеет детектить лица на фотках и выдавать эмбединги первый проект, на который мы делали ставку назывался perfect wife я спарсил небольшой сайт с базой данных порноактрис мы проиндексировали их лица в эмбединги и искали по нему. рассказ про бота-расиста и несбывшийся стартап они на самом деле тесно связаны и зародились на хакатоне, на который мы поехали с там вместе с ребятами и артёмом запилили сразу два проекта, разные по смыслу, но схожие в технологии. думаю ты одна из немногих тут, кто эту историю застал ирл). в целом сейчас я вспоминаю это только как веселую историю, серёже благодарен за такой приколдес наивысшего уровня но перед парой случайных людей до сих пор немного стыдно иногда открываю переписку древнюю и там это последнее сообщение) такие дела. но его сообщение уже разлетелось по всем моим контактам, включая семью, коллег, клиентов по работе и случайных людей некоторые уже поздравляли меня за смелость, некоторые успели как-то накатать целую простыню в мою поддержку кто-то просто сказал я так и знал). оказалось это сережа решил кекнуть и разослать такое сообщение по тому же списку рассылки (если вы не поняли его смысл, сходите в гугол) у меня кончено пригорело, я нагнал на серёжу бочку и попросил следом разослать простите, это друг телефон отобрал, что почти правда. происходит что-то странное, вместо того что я написал улетает текст вида кстати, давно хотел признаться и выйти из шкафа, если вы понимаете о чем я думаю странно тут телега работает возвращаюсь в список контактов, и оказывается этот текст улетел всем). скинул ему креденшалы от сервака с ботом, говорю глянь чё там не так, поправь в итоге он поправил, я смотрю и вижу как улетает 200 поздравлений с новым годом по всем моим контактам, кибурпунк, радуюсь я кто-то мне отвечает, я проваливаюсь в диалог, пишу ответ, отправляю, и тут. в час я у меня все хорошо, я бухаю на пароме но к сожалению инет там кое-какой был, и я смог зайти в телегу с веба и в 12 я увидел, что ничего не отправилось(((( видимо бот в очередной раз лег где-то через 40 минут меня поздравил , и я подумал, что его можно заюзать. я подумал, что не смогу всех поздравить, тк там не будет инета, и можно запрогать бота, чтобы он поздравил всех за меня в поезде, с мобильного инета поставил крон на 12 часов 31 декабря, чтобы разослать через моего бота поздравление всем моим контактам. но эта шняга работала нестабильно, тк тг апи быстро менялось в какой-то момент мне надоело поддерживать и я забил, бот продолжал периодически падать примерно через полгода наступал новый год, и я с друзьями поехал в евротрип ночь 31-1 мы проводили на пароме хельсинки-стокгольм. ещё до того, как в телеге появились боты, я запилил пару ботов на основе реальных аккаунтов один из них писал из-под моего акка, я его юзал чтобы по крону напомнить друзьям что пора бы со мной побухать ещё он одной девочке каждый день слал предложение поделиться нюдесами). ну пришло время кулстори про ботов и новый год это самый огонь который я приберег для пятницы, так что собираемся вокруг костра и слушаем, детки. и конечно наш дримтим (донор идеи инклюдед). как-то так это все выглядело. в итоге можно было не только залипать в пиксели, но и делать вид что мы мутим какую-то серьезную симуляцию (ну вот же графики) мне кажется нам именно за такое позиционирование в итоге дали дополнительный приз в размере 500 евросов (и футболочек лол) я расцениваю это как победу. кроме тем у партнеров были челенджи, и одним из них было заюзать облачные сервисы этого партнера я глянул чо у них там есть и увидел инфлюкс с графаной а почему бы и да, подумал я и запилил графики с количеством заражений, рейтом и так далее. а то, что мы добавили возможность по клику покрасить точку в другой цвет а дальше каждый тик она с некоторой вероятностью красила соседей в небольшой окрестности короче, мы моделировали зомби апокалипсис по крайней мере так мы думали в 2019, оказалось конечно ковид-апокалипсис. первым делом мы тупо в питоне нарисовали точки поверх карты кампуса (кстати у него довольно интересная архитектура) перепилили это на js и вот мы уже в риалтайме смотрим, как они ездят туда сюда (это люди с телефонами в карманах ходят) но конечно основной фишкой было не это. тут надо пояснить что за фид на хакатоне была развернута вайфай сеть, ней естественно было много станций они умели отдавать фид эвентов подключения устройств, а так же приблизительное расстояние до них щепоточка триангуляции, и вот у вас уже координаты устройств в этой сети. партнером был сам университет, на базе которого проводился хакатон а тема была примерно следующая вот у нас тут фид датки с вайфай роутеров, сделайте чонить с этим, кек. мы ехали с некоторыми идеями что можно сделать (темы известны заранее), но в итоге весь первый день протупили в муках выбора а спасение пришло от моего знакомого из другой команды - они мучались тем же, и в итоге мы занялись темой, которую они забраковали. еще чутка про хакатоны в прошлом году ездили на junction в хельсинки с и и еще одним товарищем это такой огромный международных хакатон (в районе 1,5к участников вроде) на выбор дается куча разных тем от разных партнеров, первая сложность - выбрать тему. нашел я действительно нужный профиль, даже имя запомнилось правильно, это было необычное сокращение, поэтому вызвало трудности в конце концов я ей написал, но она видимо уже не заходит вк я в целом свой интерес тоже удовлетворил, поэтому дальше не рыпался такой вот кулсторибоб. за несколько таких итераций это чудо мысли выдало похожий на правду профиль, но там не было нормальных фоток, да и в целом через 15 (или больше) лет я спокойно мог не узнать но у меня была знакомая, которая знала некоторых людей из того класса, и через них я все провалидировал. я нашел несколько ребят того года выпуска (ну и +-1 на всякий) и написал скрипт он выкачивал список друзей, сверял его между ними и ранжировал по количеству раз, которе профиль там встречался я просматривал топ профили и либо добавлял их в опорные, либо помечал как неверные. так как это было давно, я только приблизительно помнил, как ее зовут а фотка хоть и с подписью, но была настолько зашакалена что даже в файндклон ее сувать не получалось, не то что разобрать 5 пикселей с именем но зато была другая инфа - школа и год выпуска, можно работать. следующая кулсторя немного похожа я лазил по сайту своей школы и нашел там фотки выпускников какого-то лохматого года и узнал на ней девочку, с которой я дружил - если можно это так назвать, при том что я был классе в 1-2, а она выпускалась решил ее найти. жж мало у кого есть, в отличие от современных соцсеток, но да, бывает что находится странное например находил страницу со стихами искомого человека однажды). через год-два, когда файдфейс таки появился, я вспомнил про нее, залил скрин из видео и он сразу ее нашел оказалось конечно, что я ее не знаю, даже общих друзей нет). надо ли говорить, что на кодинг и дебаг я потратил гораздо больше времени, чем следовало, и не потому, что очень хотел ее найти, а просто потому что это офигенно, киберпунк еее) а девочку я с помощью этой шарманки так и не нашел. я написал скрипт, который парсил и фильтровал людей из группы вк, посвященной этому эвенту, и него поверх мини юи, где я мог смотреть их аватарки и помечать как точно нет или возможно потом я просмотривал результат и попавшие в возможно профили, сравнивая с исходным видео. увидел я на видео с одного эвента девочку, которая показалась мне очень знакомой, но я не мог вспомнить, откуда решил ее найти, тем более что эвент был в моем круге общения ну и дело было в дофандфейсовые времена (файндфейс и последователи фактически наш вид спорта убили). есть у нас с другом забава - сталкер офф смысл - найти человека в сети, имея минимум инфы - например имя, вуз и курс (обычно еще внешность) это спорт в том смысле, что цель - проверить свои силы, а не что-то иное но была пара случаем с другими интересами, ща затру. фреймворк для деплоя мл моделей. ну можно у админа и спросить, откуда пикча гуглеж дает только оригинал. это скорее стайл трансфер, а не ган выглядит круто, но какая именно сетка я не знаю а откуда пикча?. напоследок, визитка бота, которую я реально распечатал в количестве 200шт и раздавал на конфе. да, кстати это как раз красуется на обложке аккаунта). еще. но, на ранних эпохах выдавались просто офигенные картинки, чисто визуально подумываю когда-нибудь еще таких нагенерить, сказать что это кибер арт и продать за много миллиардов, стей тюнед. конечно вышла полная хрень, самое близкое к мемам было вот такое в целом даже за surreal meme сойдет, только очень surreal. при чем тут мемы? при том, что после этого я начал делать мемесбота, и когда накравлились мемы, я чисто по приколу запустил эти ганы на них я взял канал surreal memes потому что там, как и в случае с двачем, происходит необьяснимая муть, так что выход сетки будет выглять окнорм. вот еще примерчик. мне эта идея настолько запала, что даже после хакатона я на своем домашнем железе гонял разные архитектуры и думал как улучшить алгоритм вроде даже в какой-то степени получилось, вот последняя картинка которую я сейчас смог нарыть не везде похоже на космос, но все равно kpocubo. этот датасет сразу навел нас на идею о том, что можно попытаться генерить такие фотки, тем более ганы были в моде поверх этого мы придумали некую идею про образование, но это не так важно главное что я ковырялся 2 суток с ганами и в итоге даже что-то получилось например вот. у меня в детстве была картинка с фотками космоса, которую я перечитывал и пересматривал много раз, так что датасет попал куда надо вот кстати гляньте на него, фотки просто космос (кхекхе). продолжение про мемы, ганы и космос и начну с космоса осенью 18 года позвала меня на хакатон от nasa в команду к и конкретной задачи там не было, но были датасеты, один из них был с фотками с телескопа хаббл дальше в потоке. тупанул, космос и ганы, а не мемесы. правда дальше развивать эту движуху все еще нет времени, но хотя бы можно копить разметку живет оно тут а при чем тут космос и мемесы - в следующем треде. тогда было лень и некогда разбираться, и бот умер хотя я в какой-то момент даже купил рекламу где-то рублей на 500 но недавно случилось второе пришествие - я откопал код, подкрутил, перезапустил и сейчас у меня уже есть 15кк мемесов (на этот раз я качаю только их). собрать 40кк постов из 40к каналов потому что он был настроен качать вообще все посты, а мемасные каналы я потом размечал вручную в итоге постргря на которой это вертелось крякнула и послала меня в жопу (это выражалось во времени респонсов в районе 10 минут) ну я и приуныл. а потом генерить мемесы из шаблона + текстовой модели короче идей была куча, но главная - не пилить это самому, а дать возможность пилить другим но все это уперлось в проблему (помимо мотивации) пока я писал бейзлайн рекомендаций (не пресональных, без мл), кравлер успел. ну и сами картинки с подписями можно искать одинаковые и следить, как мем распространялся по каналам тут еще и графы появляются, тк есть инфа о репостах можно искать просто похожие, чтобы выделять мемасные шаблоны в шаблонах часто меняется только текст, его можно распознавать. ну рекомендации это ясное дело но я хотел сделать платформу, на которой люди бы могли пилить свои дикие проекты на мемасах например, возможность подключать свои рекомендательные модели, чтобы устраивать между ними аб(цдеф) тестирование на реальных пользователях. там были свои затупы, но в итоге все заработало к этому всему я прикрутил бота, который выдавал рандомный пост, на который можно прореагировать дальше у меня были наполеоновские планы по сути юзеры бота размечали разные мемесы, а дельше со всей этой даткой можно делать движ. чтобы присылать мемы, сначала нужно найти что присылать забегая вперед, эта задача единственная, которую удалось победить) короче я решил парсить каналы с мемасами в телеге в тот момент я как раз овладел джангой, так что быстренько некекал моделей для базы и кравлер на телетоне. итак, сижу я как-то в коворкинге напротив моей подруги, которая была ответственна за своевременную подачу данк мемасов в наши организмы и она говорит а кто будет присылать вам мемы когда я умру здравый вопрос все можно решить технологиями, так что челенж был аксептед в тред. за вчера вроде отстрелялся, план на сегодня - боты, мемасы, ганы и космос и это одна тема, стей тюнед. но это конечно же не помешало мне еще полгода на пьянках донимать рассказами о том, как я комитил в спарк и какой я теперь классный). ну в итоге я ошибку поправил, написал тесты по ходу узнал много о том, как вообще работает спарк и кодогенерация джобов, а мой pr в итоге приняли правда довольно быстро кто-то там все переделал так что моего там осталось процентов 30%). ну я скромно пишу об этом в таск трекер, вот ошибка, происходит поэтому, можно решить так, типа мам поправь а они мне да, все так, ждем pr) ну и я такой вызомв примнят) кстати вот нашел даже линк на ишью. происходило это потому, что в моем классе было поле типа enum, которое является особенным классом в джаве и не определяет некоторые методы, которые использует спарк для определения набора сериализуемых полей, как-то так. писал я на джаве и немного на скале в какой-то момент мне понадобилось положить в датасет объекты моего самписного джава класса запускаю код и вижу npe ковыряние показало, что спарк пытается сериализовать джавовый класслоадер (это супер внутриенние кишки джавы). я тогда работал в rubbles и занимался тем, что писал поверх спарка интструмент для наших аналитиков, чтобы они могли без боли (отностительно) переносить результаты своих исследований семплов в пандасе на спарк для обработки полных данных. напоследок, в треде небольшая кулстори про коммит в спарк. ну и наконец сейчас появляется все больше компаний и стартапов, которые строят свой бизнес вокруг ос продуктов это я так беспалева подвел к интерьвю с про и про построение такого бизнеса, наслаждайтесь). на самом примитивном уровне - смотрите инвесторы, у нас все так хорошо, что мы можем себе позволить выкладывать наш код в открытый доступ бесплатно а если им вдруг еще и кто-то пользуется, и комьюнити есть вокруг, так это вообще сказка. ос дает очень много очков репутации это очевидно в случае гигантов типа гугла, которые могут вливать огромные бюджеты на это но и для небольших компаний это может быть полезно - для пиара, для хантинга специалистов, ну и для потенциальных инвесторов. правда все равно перед выкладыванием пришлось пару месяцев шлифовать, дописывать тесты и доки, но все же на этой ноте можно соскочить на тему пользы опенсорса для компаний, а не только для специалистов. когда я работал над эбонитом, еще до того как мы реально его выложили в опенсорс, у меня была установка - делать его так, будто мы собираемся его выкладывать мысль о воображаемых пацанах, которые засмеют помогала меньше костылить. ну и разбираясь в устройстве чужого проекта, всегда можно наткнуться на новые для себя идеи, фреймворки или просто какие-то фишки языка для этого даже не обязательно комитить) я например довольно много знаний подчерпнул, изучая различные питоновские либы. ласково просить написать тесты и поправить доки - короче все то, на что многие забивают, хотя это не менее важная составляющая хорошего кода, помимо того что он вообще работает). и это даже не совсем кек - увидеть свое имя в релиз ноутс какого-то большого и популярного проекта вполне себе доставляет приятные ощущения но это конечно же не все еще это очень полезно для прокачки - ваш pr будут любезно тыкать носом во все косяки, пока не сделаете нормально. конечно, главное - это что потом можно писать в твиттер, что ты - контрибьютер спарка, например, хотя твоего кода там строчек 20. сори, обещал вчера накинуть про опенсорс, но чет меня вырубило) так вот, хочу поделиться, в чем понт комитить куда-то, хоть за это и не платят деняк, казалось бы ну, по крайней мере для меня. ну это не настоящий ган) ган в том смысле что был генератор - первая версия бота и дискриминатор - хгбуст который пытался отличить генерации от реальных предложений из корпуса (и генераций с хорошими реакшенами из канала) но я забил слишком рано, чтобы из этого что-то вышло. хм, мне недавно приходило письмо от слака что они какое-то апи прикрывают, мб в этом дело я чекаю через телегу поэтому что в слаке беда не знал =/. и это все я тоже писал зря, потому что вот тут есть сиквел видео. но двач бот на этом не умер в разное время я его впихивал в приложение с говорилкой, как скилл алисы, к боту в стиме (там он был обучен на дотерских чатах, кек) пик карьеры - двачботом генерились отрицательные примеры для одного из крупных нлп соревнований. процесс генерации теперь выглядел так - цепями генерится 50 вариантов, они скорятся хгбустом и выдается самый топовый конец этой истории банальный - мне надоело с этим копаться и я забил). я сделал ган из говна и палок, а если точнее - из цепей маркова, бустинга и реакшенов я выкачал генерации с реакшенами из канала, считая их позитивным сигналом, подмешал в датку реальные предложения как позитивный класс и другие генерации как отрицательный, и обучил хгбуст. уже потом был создан канал #bots (хотя бот там один кек) и этот канал сжег немало человекочасов пару месяцев особо усердные товарищи семплили его каждый день по несколько часов и ставили реакшены особо мощным изречениям это навело меня на мысль, как его можно проапгрейдить. мы выкачали несколько недель из /b, ребята стали пилить нейроонки, а я систему, которая постила на двач ответы, сгенеренные моделями и мы устроили соревнования, кто соберет больше реакций рассказ про это есть тут (ахаха зачем я писал все это). я даже прикрутил генерилку к слаку и добавил бота в админский чат а потом меня свели с и мы втроем с решили запилить то же самое на корпусе с двача мотивация была такая, что раз генерится бред, надо источник брать такой же, чтобы различия были минимальны. сперва просто считали у кого сколько банов и других реакшенов потом я вспомнил, что одной из домашек в шаде было написание генерилки бреда на марковских цепях, и я решил вай нот, попробую на сообщениях из одс первый же прототип парализовал пьянку тк все семплили фразы и угарали. к кулсторе поехали мы как-то к :dictator: на дачу (оттуда кстати шла трансляция датафеста20) с посылом запилить что-то крутое с собой у нас была выгрузка сообщений из слака одс (тогда это были считанные десятки тысяч) в перерывах между возлияниями я стал в них копаться. в моем случае еще есть свистелки-перделки с дополнительными статистиками по началам и концам предложений и еще какие-то хаки, но суть такая цепи маркова это конечно более общий инструмент, там состояния, матрица переходов и вот это все, но тут вам не википедия. берете большой корпус текстов и считаете, сколько раз после пары слов а б встречаются другие слова потом, взяв два слова, можно сгенерить третье, взяв случайное из тех, которые встречались в исходном корпусе, взвесив их соответственно частоте вуаля. двач-бот живет уже несколько лет в канале #bots в одс и в телеге это разговорный (ахахахах) бот, работающий на принципе марковских цепей для уважаемых специалистов, которые пропустили эту пара тервера, ниже один твит с сутью явления. про двач-бота будет проистекать отсюда. продолжаем разговор сегодня - уже классическая история про двач-бота, а потом немного про опенсорс заюзаю-ка я треды в этот раз. для утреннего настроения. в магу я поступил по олимпиаде, там было не сложно после матфака, да в шад я прошел уже внутри маги на тоненького, но потом выполнил условие (полугодие без 3) чтобы зачислили в шад полноценно. я себе говорю что просто не хотел идти в академию, но на самом деле переборщил с забиванием и не вытянул в последний момент, как обычно привык :). нет, то был файндфейс они позволяли искать людей, похожих на порноактрис в реальном мире (обычно, это они и были) мы делали наоборот, можно было искать порно с похожими на реальных людей актрисами (и иногда актерами). вижу дедлайн приближаетсявспомнил лекции, воркшопы, темы сменяютсярешил рассказать про питон, пиджачки прихватилитрут уже о своем, обо мне забылислайды наполнил, вот и всё, приплыли. я вспомнил вечер у реки, шашлык, как учил го языкдженериков не хватило, эх, мы умели кодить красивозапрос темы направили в мою сторонукак глаза менеджера, когда проект сдавалипомню в отпуск ездил в ла, было здоровозакаты, шорты, пальмы. поняли, пассажир опасныйнаняли в ai отделпосадили в офис на 22, макбук вручилитребуют проекты пилить, всех наших подрядилиушел в эбонит, и как-то разпредлагают на техтоке сделать рассказпросят тему, снимают пиджакине передумал?, слышу, не, говорю, мужики. пишу код, деплою в банке, открылся jaws на лубянкеродился петпроджект, выступал на датафестеодс растет не стоит на местепозвали в цифру, прием на ленинском, хантят конкретноне успел опомнится, стали обсуждать бабкивспомнили прошлый опыт, достали старые папки. стали снимать хату с друзьями на рижскойвступил в одс, так вышлопошел в стартап, из интегратора спрыгнул с рейзомкак закончил шад оттуда первым же рейсоммосква, сижу в коворкингеновая ксива, новая работа, новые задачирешаю вопросы на спарке апаче. пошел на курс в шад чтобы добрать на зачетвыучил алгоритмы, от пацанов почет, время течетнаписал диплом про разделенных разностей операторыустроился джавистом в телеком интегратореоказался в маге, взял направление в шадподвис на мл капитально, спасибо воронцову за этот ад. погружался дальше в разработку,в 9м писал компилятор, в 11м сдал егэ на соткузабил на мгу, стал поступать с друзьями в вышкуолимпиады, экзамены, приняли на матфак мишкузабросил программирование, учил матандумал стану квантом, это был самообман. я родился в москве в 92-м в центре городапрограммирование рано ударило в головув 5 классе хостил сайт на народрудевочки впервые лазили по моему сайтупотом лицей, уроки программирования в профильном классе,так я узнал что в c++ есть классы. вроде все те кто все это время ждал кровосток - велком в тред (текст писался для закрытой конфы, но мне уже лень конец переделывать). с недавних пор ушел в (почти) свободное плавание, но очень надеюсь что эбонит на этом не закончится ;). ну, и заканчивая с карьерой, в 18м ушел в компанию цифра и работал там последний 2,5 года, преимущественно над фреймворком для деплоя моделей машинного обучения под названием ebonite (ну потому что эбонит используется для опытов на уроках физики, а не то что вы подумали). ну и последний петпроект, телеграм бот с мемасами недавно его оживил заново, мемы можно начинать смотреть уже сейчас а как так вышло - читайте в следующих сериях. еще был забавный казус с телеграмом, когда я слишком толерантно поздравил всех с новым 2018 годом (это ясное дело тизер очередной кулстори) возможно некоторые мои знакомые наконец узнают, что же произошло в ту роковую ночь (простите это мой продюсер посоветовал нагнать саспенса). ну и про пет-проекты не забывал, хотя часто под этим понимается стартап на 1 человека без финансирования в моем случае это непонятный трешугар, который мне тупо весело и интересно пилить уже упомянутый двач-бот можно к ним отнести. короче, я плотно влился в одс движуху, помогал организовывать эвенты, исправно посещал афтерпати узнал еще больше клевых людей, делал доклады последние 2 или 3 феста делал секции по бигдате и сигбовик (что это - тоже тема для отдельной ветки). например, история про двач-бота зародилась в том же 2016 на одной из первых датасаун на даче у :dictator: (кулстори буит офк) или кековый проект с поиском порно по лицам, с которым мы (почти) выиграли один из хакатонов (про все хакатоны тоже расскажу). но самое главное в моей карьере произошло еще до этого, когда мой товарищ притащил меня на datafest2 (2016), где я с ноги затусил с кучей интереснейших людей, со многими из которых общаюсь до сих пор ну и большинство кулсторей связано с кем-то из одс. после выпуска перешел в небезызвестный финтех (дс мл крейзи миднайт дисплей) стартап rubbles там потихоньку перетек в ковыряние бигдаты и вообще поближе к этому самому дс делал тулзу для мл пайплайнов поверх спарка, даже удалось на полшишечки в него комитнуть, (кулстори буит). в магу пошел на фкн совместно с шадом, там и познакомился с волшебным миром дип биг дейта сайнс параллельно работал в системном интеграторе, ковырял там что-то на джаве с фкн свалил через год, а вот шад закончил (кстати моя ава снята на выпускном). впрочем неслась недолго, потому что в 11 классе уже чисто дрючили к егэ поступил я на матфак вышки, там проги почти не было но на последних курсах можно было посещать лекции шада, там то мне школьные знания и пригодились. еще где-то в начальной школе мне купили книжку про бейсик и я даже что-то там калякал классе в 5 замутил свой сайт на народе, с другом писали простенькие игрушки на флеше в 7 поступил в матшколу с углубленным программированием на си, и вот тут уже панеслась. тэкс ну што, начинаем второй заход напишу откуда я такой в 20к20 году в конце будет бонус в виде биографии на мотив кровостока, ткскзть. не за что, но очень маловероятно что ты мои смотрел - я делал только кусок про деплой). для себя я определил так - это роль, в которой человек должен заниматься тем, чтобы ходить по конференциям и его подпись на бейджике круто звучит. ps оказывается отсылку из приветствия уже использовал в свою неделю, но что тут поделаешь. и да, в конце вводной скажу что везде я если вы чувствуете непреодолимое желание со мной связаться подписоваетесь тут в твиторе, в инсте, фейсбуке, вконтакте, одноклассниках, мейл ру агенте, аське и где только найдете. на сегодня у меня план рассказать о своем пути (хотя кому это интересно вообще) и заспойлерить некоторые кулстори а потом по ходу недели разгребать все то что наобещал рассказать). о еще забыл про спортивный сталкеринг (возможно этот термин я сам только что придумал, ну и что). я так написал будто это все разные темы, но многие кулстори на самом деле относятся сразу к нескольким. у меня припасено кулсторей о: хакатонах, чучут о соревнованиях, мемасных пет-проектах, ботах в телеге и мое любимое - использования навыков кулхацкера в жизенных ситуациях. каких-то особых мудростей я вываливать не собираюсь, только если по ходу что-то возникнет, спрашивайте ваши ответы, как грицца так что объявляю неделю кулсторей. конечно сразу же торгану лицом сколько я в итэ посчитать сложно, мл и ко начал заниматься году в 14 а сейчас на бейджиках для конференций я подписываюсь как ml архитектор (кто-нибудь объясните что это значит) еще преподаю на фкн в вышке и пилю курсики в скилфактори. всем привет в этом чяте, это миша свешников я повелитель дс твитора где дс твитор - там это лицо я дс твитором командую. # сообщение от куратора именно на этой неделе автора не будет зато есть небольшой анонс: архив авторов переехал на новый сайт – тёмная тема (в ногу со временем :yeah-sure:)👀 топики авторов (на самом деле этот пункт важнее предыдущего). • метания между наукой и индустрией про русскую аспу про face reenactment и face swap. • обо мне про stylegan encoder кулстори про филиал калифорнийского стартапа. thats all, folks!это был владимир ивашкин, спасибо, что читали надеюсь, вам было интересно =)давайте дружить в твиттере , а еще лучше подписывайтесь на мой ламповый канал список тредов:. в коментах опасаются, что обама так и не получил своё пиво! вот видеоподтверждение, что всё прошло отлично. блин, реально, щас добавлю. впрочем, это всё уже догадки рассказал всё, что знал! место для вопросов, дополнений и предположений:. reface хорошо работает, когда разница между лицами большая, но при маленькой разнице лицо как будто не накладывается вообще (на гифке должен был быть тоже обама) может быть, следствие работы гармонизации, у которой не было лосса на сохранение id?. * получается, они могут менять pose и expression твоего лица, и вклеивать его в кадр видео* но тогда качество будет как у mug life? можно полирнуть гармонизующей сеткой* в пользу того, что каждый раз инферят сетку, говорит то, что без интернета прила не работает. что у них под капотом неизвестно, но можно погадать:* когда сохраняешь своё лицо, они что-то процессят параметрическую модель головы?* все видео добавлены заранее, значит что-то в них заранее просчитано? например, pose/expression параметры на каждом кадре и маски лица/волос. one-shot face swap видео круто делают zao и reface. можно ли сделать one-shot? по сути, если reenactment мы можем делать без обучения (например, использовать fomm), то значит и весь пайплайн мы можем делать feed-forward, не обучаясь на конкретное лицо. можно вместо автоэнкодера делать reenactment на лице, которое собираемся вклеивать это подход fsgan:. есть очень популярный живой репозиторий deepfakelab, где развивается именно подход автоэнкодер с ган лоссом + весь пайплайн процессинга: в readme написано, что 95% дипфейк видео сделаны этим репозиторием надеюсь, это не фейкньюс!. правда, этого мало – получившееся лицо нужно ещё как-то вклеить обратно нужно:- в таргет картинке отсегментировать зону лица и волосы- вклеить получившееся лицо, но только там где лицо не закрывают волосы- гармонизировать (не обязательно, если цвет лица и освещение совпадают). если заменить mse на preceptual loss + gan loss и немного увеличить разрешение, то получим уже вполне рабочий вариант. можно сказать, что происходит disentanglement source картинки на pose+expression и id+фон поза определяется латентным вектором, id обучен в декодере если теперь в инференсе поменять местами декодеры, то произойдет face swap. первые дипфейки появились в 2017 и учились как автоэнкодеры для двух лиц учим два декодера и общий энкодер во время обучения энкодеру нет смысла протаскивать в bottleneck информацию об id, тк каждый декодер генерирует только одно лицо. а может быть потому, что face swap – это скорее не про одну сетку, а про пайплайн. теперь про дипфейкипро дипфейки на самом деле мало что понятно, видимо из-за сильного общественного порицания писать пейперы тяжело, и весь рисеч проводится энтузиастами, которые уже ничего не боятся. а потом мы вместе сделали avatarify – приложение-нейромаску для ios учитывая всё сказанное выше, мы написали свою модель, которая даже работает реалтайм на устройстве! прила продержалась пару недель топ1 в app store ссылку не даю, ведь тут нельзя рекламировать свои продукты!. вокруг fomm мои друзья али и карим сделали виртуальную камеру для zoom и получили 9к звезд на гитхабе:. но мы выше говорили, что нужно использовать не кипоинты, а параметрическую модель? а, ну вот про это пейпер, это текущая sota:. * в инференсе в качестве source выбираешь фото обэмы* в качестве driving – кадр из видео со своим лицом* ???* profit!. source картинка, dense motion и occlusion map (маска, по которой сетка понимает, каких частей нет в исходной, и придется инпеинтить) подаются в генератор. базово, при обучении берется два кадра одного видео: source и driving из source берется картинка и кипоинты, из driving – только кипоинты из разницы положения кипоинтов строится dense motion, с помощью которого можно привести source картинку к driving. а что, если не генерировать лицо заново, а преобразовывать фотку, приходящую на вход? тогда не будет проблем с поддержанием id такой подход развили в monkey-net, и позже отточили в first order motion model (fomm). получается, здесь, в отличие от stylegan, удалось сделать есть энкодер для стиля? ну, не совсем получается похоже, но в работе рекомендуют все-таки немного помогать бэкпропом, чтобы лицо стало хорошо узнаваемым. здесь id естимейтится веткой-энкодером и передаётся в генератор через adain (так же как в stylegan), а pose и expression передается картинкой с кипоинтами на вход генератора. обучаться каждый раз заново не хочется, да еще и отдельное видео не покрывает все возможные движения и тд хочется обучиться сразу для всех и делать reenactment по одной фотке на помощь приходит пейпер от московского saic. чтобы избавиться от uncanny valley, рендерим сеткой генератор учится генерить лицо из меша, а в инференсе смешиваем параметры от обэмы и от нас, от нас берем только expression получаем результат cvpr16:. меняя expression параметры, можно управлять лицом вообще без сетки: один раз считаем параметры для обэмы, берем параметры expression с нашего видео, рендерим без рефайна выглядеть будет не очень, будет чувствоваться uncanny valley это то, как работает mug life. один из вариантов – dense alignment, например 3ddfa это параметрическая модель головы, в которой by design разделены текстура лица, id, pose и expression параметры по этим параметрам строится mesh, на который можно наложить текстуру. как сделать, чтобы id не протекало? использовать архитектуру, которая может делать disentanglement информации на id, pose и expression. но чем сильнее вы различаетесь с политиком лицом, тем хуже будет работать и тем меньше он будет похож на себя (и больше на тебя) почему? потому что через кипоинты протекает id кипоинты отражают не только expression, но и строение лица а это тоже уникальная штука, тоже часть id. даже full body работает, хоть и не супер реалистично. первая мысль – определить на каждом кадре кипоинты, обучить из картинки с точками-кипоинтами генерировать кадр видео, в инференсе подставить свои кипоинты накинуть perceptual loss и gan loss будет ли это работать? ну да:. допустим, у нас есть 10 минут видео с выступления обэмы, мы хотим сгенерировать видео, как он приказывает купить ему 2л пива. в этих терминах, в face swap наша задача – заменить id, в face reenactment – менять pose и expression (или хотя бы expression!), оставляя id и фон. что такое лицо? для данных задач лицо удобно определять как совокупность id, pose и expression id – это специфичные для человека черты лица, pose – это наклоны головы и expression – выражение лица: положение глаз, рта. прежде всего – это разные задачи face swap aka identity swap aka deepfake – это задача о замене лица на фото на лицо другого человека face reenactment aka face transfer aka puppeteering – это задача об изменении _выражения_ лица. тред про face reenactment и face swap. stop the count!. про что рассказать?. есть пары на первом курсе – философия, педагогика, английский их переносили на субботу, чтобы было удобнее работать фултайм =)еще кажется были в понедельник, но я не ходил и мало кто ходил. павел чеботарёв, из ипу ран диплом будет про кластеризацию графов написали две статьи про графовые меры, третью щас делаю про кластеризацию графовыми сетками, договорился с яндекс рисечем вместе поработать. в такую – точно нет будь у меня тогда мой текущий опыт, попробовал бы нормальную phdработал фултайм, ничего не делал для аспы но и по статьям продвижения не было в пандемию был без работы, почти доделал всё что нужно для защиты. собираешься в аспу? (опрос для тех, кто заканчивает бакалавриат/магу). какая у тебя аспа? (опрос только для аспирантов/phd). не прикол) зависит от комиссии, но всякие там профессора ран скорее будут ожидать, что на защите можно будет покушать это не обязательно, но принятоузнал про состав стола:- вино- коньячок- пироги (не пицца!)- салаты тамв общем обычный приличный фуршет. если чем-то могу помочь – спрашивайте. бывает ли так, что кто-то всерьёз работает в аспе? за пределами cs – довольно часто, в cs, пожалуй, только у сильных научруков, у которых есть команды, лабы, у которых не стыдно работать, в общем =). можно ли уехать на phd после во время/после окончания аспы? после окончания можно, после защиты – нет. можно ли брать академ? на первых курсах да, на четвертом, говорят, почти невозможно. можно ли ездить на стажировки? да! правда делать это в последний год оказалось поздновато сейчас fair мне говорит, что кандидат должен после летней стажировки вернуться в академию (это условие чтобы поехать в америку по j1?) на тот момент я уже закончу аспу, так что без шансов(. мог бы я всерьёз работать только в этой аспе? да конечно нет) по статистике, 90% аспирантов работают во время аспирантуры. за последние полгода я написал полторы из оставшихся двух статей для защиты, и наверное даже успею защититься до конца 2021. что я делаю в аспе? первые 25 года я не делал ничего но написав пару статей в индустрии, я понял, как писать статьи =) понял, что аспу можно даже и закончить, может еще пригодится для того, чтобы взяли в зарубежную лабу. в общем, самым простым решением было остаться там же, где я был в маге в аспу взяли даже не всех желающих, но у меня было преимущество в виде proceedings с международной нижегородской конференции так что я продолжил заниматься с научруком теорией графов. можно было бы получить военник на военной кафедре, но меня туда не взяли именно из-за аллергии так я обернул своё генетическое преимущество себе же во вред(. вообще я мог получить военник по аллергии, но надо было задуматься на несколько лет раньше и регулярно отмечаться в государственной поликлинике а раньше уже закончилось. зачем я поступил? на момент поступления у меня не было научных амбиций заканчивалась мага, я почувствовал нависание угрозы армии. могут ли отчислить? у вузов появились kpi на долю защитившихся от числа закончивших теперь вузу выгодно отчислить тех, кто не собирается защищаться на моём потоке чистка произошла после третьего курса - нескольких ребят убедили написать псж. итак, в мфти аспирантура длится 4 года, на первом курсе есть пары, потом можно просто заниматься *научной работой*. самой защиты у меня ещё не было, это я рассказываю, что слышал. важно, чтобы предзащита прошла хорошо, а защита – это праздник на защиту важно собрать стол: водка, закусочки, не забудьте шпажки. защита проходит так вуз собирает тебе комиссию, ты выносишь доклад на предзащиту, у тебя есть два оппонента, ты заранее знаешь их предъявы и вы разыгрываете спектакль. также нужно сдать три экзамена: английский, философия и экзамен по специальности последнее – это по сути свободный доклад перед кафедрой о состоянии своей научной работы. все статьи должны быть по одной теме (например, мои статьи по наукаст и дистилляцию стайлгана в счет аспы не идут) на основе результатов статьей пишется диссертация (каждая глава – переведенная на русский статья). требования к защите зависят от того, где ты защищаешься в моем случае это может быть мфти или ран нужно иметь минимум три (для мфти) или две (для ран) статьи в журналах из списка вак если статья проиндексирована в scopus или web of science, то скорее всего она считается. защищаться можно независимо от окончания аспирантуры можно закончить аспирантуру, получить диплом (преподавателя) и не защищаться вообще можно защититься в любое время позже или можно защититься во время аспы, и тогда аспа автоматически заканчивается. окончание аспирантуры без защиты не даёт ни звание кандидата наук, ни военник многие мои знакомые заканчивали аспу, но не защищались, потому что статей нет, а 27 – есть. прежде всего, в россии закончить аспирантуру и защититься – это разные вещи для того, чтобы закончить аспирантуру, нужно просто отсидеться: сдавать экзамены, отчеты о нир, проходить всякие аттестации, в самом конце сдать госэкзамен и написать реферат на тему рисёча. сейчас я нахожусь на 4/4 курсе аспы по computer science в мфти расскажу устроена аспа, как поступил, зачем, как буду защищаться. окей, тред про русскую аспу. да, в основном такиз не совсем мега-компаний мне нравится snap research – у них команда, которая развивает передний край науки по нейромаскам и тут же продуктовые команды snap используют их наработки для того, чтобы делать новые линзы. внимательные читатели уже заметили, что в предыдущем треде не хватило места для рассказа о российской аспирантуре расскажу завтра о своем опыте и обстановке на этом фронте. хочется интересный проект, не важно где расскажите, что вы думаете по этому поводу и конечно зовите меня в свою классную лабу =). я себе за последний месяц всю голову сломал, нужно ли обязательно стремиться в этот божественный статейный рисёч не хочется дрочить на хирш и вообще ебал это всё именно поэтому я написал десять твитов о статьях и два об индустрии. причем задачи в индустрии ничуть не проще в некоторых случаях одна и та же задача решается и в индустрии и в рисёче, разница только в подходе. в свою очередь, в индустрии важнее, чтобы работало, чем novelty проще регулярно добиваться результатов, боли не меньше, но она другая можно чувствовать удовлетворение от того, что реально делаешь что-то полезное проще вырасти в руководителя ну вот это вот всё. не каждый пейпер – это прямо работа на тысячу цитирований наверное, это создает фрустрацию?. надо скрупулёзно сравниваться с другими, делать ablation study твой труд могут завернуть на ревью, а может его просто никто не прочитает. минусы написания статей: проверяешь гипотезы костылями, ничего не доводишь до прода каждый раз надо стремиться выжимать novelty и писать так, чтобы не докопались. такая работа – это игра публикуешься, проходишь ревью, докладываешься, твою работу читают, цитируют дофаминовая игла. не нужно думать о применимости, не нужно писать прод твоё имя в заголовке статьи, твоими идеями пользуются по всему миру проще сделать американскую визу гения о1. плюсы написания статей: шире выбор темы, можно проводить более смелые эксперименты из-за того, что изначально настроен делать новое, есть шанс реально сделать что-то новое). писать статьи есть смысл, если ты хочешь строить на этом карьеру – пойти работать в дипмайнд и писать статьи уже там ну или просто это является побочным продуктом твоей работы – твой индустрийный проект настолько инновационен, что по нему можно что-то публиковать. (за этим теоретически и нужен был универ!). написать пару статьей ради резюме, чтобы потом пойти работать в индустрию – оверкил проще сразу пойти в компанию и там расти, чем для этого же писать статьи, или тем более заканчивать phd но, конечно, полезно попробовать писать статьи, чтобы проверить, твоё ли это. но зачем вообще писать статьи?. еще есть рисёч стажировки (обычно летние, 3-6 месяцев) и ai residency (6-12), там тоже можно писать статьи на такие стажировки берут в основном аспирантов в теории можно поступить в аспу института типа синергии (у них есть аспа?) ради того, чтобы взяли на стажировку в fair. а можно без phd? ну да, это мой случай можно найти команду, которая пишет статьи, или проект, в котором потенциально можно нарисёчить на статью если совсем повезёт – пройти на работу в лабу сразу. многие страны дают вид на жительство, проще найти друзей среди коллег (потому что они тоже иностранцы), проще привыкнуть и остаться. в некоторых науках единственная возможность заниматься нормальным делом – это уехать на phd в хороший институт к хорошему научруку пойти на phd по ds – это отличный способ ворваться в науку, да и уехать из россии заодно. что же делать, если хочешь научиться писать статьи?. у меня вышло наоборот я работал в индустрии и в какой-то момент повезло написать пару статей и понять как это делать так у меня появился выбор – можно продолжать делать индустриальные проекты, а можно попытаться пробиться в лабу и начать публиковаться на регулярной основе. у меня так не получилось - институт ничего про рисёч не рассказал, а только привил отвращение к дедам ставь лайк, если у тебя было так же!. стандартный академический путь – это делать рисёч в маге/аспе, а потом определяться:- писать статьи в академии или в коммерческой лабе - идти в индустрию починять прод. в датасаенсе можно делать разное, но вершина – это делать рисёч и писать статьи или наоборот, статьи пишут студенты, а взрослые ребята растят качество на проде? расскажу, что думаю поправляйте, если моя картина мира неверна =). здесь будет тред о рисёче и написании статей. чем ты занимаешься в датасаенсе?. чем ты занимаешься в датасаенсе?. правда сейчас кажется невозможным даже на самолете в европу полететь( пока писал, чувствовал себя дедом, который застал время до пандемии(. так мечты о собственной лабе за деньги калифорнийского стартапа столкнулись с реальностью казалось, что делаем невозможное, а в итоге реально не получилось. на 4-часовом созвоне с xy и xy2 разбираем ситуацию и соглашаемся, что надо валить xy забирает трофейные футболки с логотипом ss и летит из сф в россию а мы с xy2 забираем трудовые из субсубподрядной конторы. узнаём, что ss купил в европе стартап, в котором делали то, что должны были делать мы и приходит понимание, что мы во всей этой истории были разменной монетой менеджера ивана, который пообещал ss, что сделает европейский офис, и сделал в амстердаме. постепенно крепнет ощущение, что нам не очень рады что проект, который мы должны делать, не ляжет на железо что никаких 15 сотрудников не будет, и демо стенда не будет и офиса. но как бы понятно, процессы еще не наладились, бывает xy из америки рассказывает, как со всеми встречается, разбирается в продукте про всё рассказываем ивану, он обещает всё порешать а пока созваниваемся с ml командой, рассказываем им про то, зачем нас наняли. выясняется, что иван не сделал никакое российское ооо, нас нанимает контора, которая заключает с ss договор подряда, то есть мы как бы на субсубподряде денег на офис нам тоже никто не дал, снимаем отдельные места в коворкинге за свои. подаюсь на визу в австрии, на собеседовании получаю админпроверку до того, как успеваю открыть рот берем третьего сотрудника xy2, ему в визе вообще отказывают xy едет в омерику один а я увольняюсь со старой работы, ведь мы с xy2 официально устраиваемся в российский офис ss. начинаем работать сразу после нового года, но ss хочет, чтобы мы перед началом работы прилетели на экскурсию к ним в офис в сф, познакомились с ребятами для этого нужна виза, туристическая сойдет у xy она уже есть, у меня нет. отдельный показательный эпизод, как мы с иваном и xy идем в москву сити, чтобы на первом этаже в кафешке встретиться с его знакомым подборщиком офисов сидели час, перебирали варианты вслух, он на любой говорит – да да, у меня есть такое, скину письмом ничего не скинул вообще. невероятно счастливые вместе с xy ходим по коворкингам, ищем офис, выбираем варианты, не смотрим на бюджет но арендовать ничего не можем, потому что денег нам еще никто не давал). после всего, уставший вусмерть, сажусь в убер до аэропорта и лечу домой это была невероятная победа, потому что ребятам я понравился =) дальше прошли секции на алгоритмы и ml по зуму, тоже успешно. мы сидим два часа, я уже вымотался, да и вопросы уже закончились но тут наступает время обеда мы выдвигаемся в ресторан, в ресторане болтаем ещё два часа. а как вы делаете вот это? а пробовали ли вы то? а, понятно ну, у меня есть небольшой опыт в этом да, в принципе понятно что можно сделать, думаю я мог бы помочь. я беру отгул, в пятницу утром вылетаю в варшаву, встречаемся с главой ml ss в старбаксе у жд вокзала английский у меня не супер уверенный, поэтому больше задаю вопросы и с умным видом слушаю ответы потом приходит ceo, потом приходит vc по технологиям. иван уезжает обратно, созваниваемся – говорит, что согласовал офис в россии, но правление ss хочет поговорить со мной лично они как раз устраивают турне по европе, ищут офис, и будут рады видеть меня в конце недели в варшаве. встречаемся с иваном в старбаксе, обсуждаем условия, вместе мечтаем иван говорит, что ss хочет делать экспансию в европу, они думают про европейский офис предлагает нам переехать в европу, но мы уже настроились, что хотим рулить тут сами. xy ищет кофаундера лабы и находит меня мы до этого работали только на большие компании в офисе, и все эти движения, что можно снять офис, нанять людей – невероятно льстят. долго ли, коротко ли, в россию приезжает русскоговорящий человек из борды стартапа, назовем его иван, и предлагает xy сделать лабораторию стартапа в россии снимем большой офис, наймем 15 человек, сделаем демо зону даже статьи будем писать звучит очень заманчиво. позже xy пересекается с ss на конференции, наши американские коллеги снова зовут работать, и снова – неудача просто в долине все сильные разрабы куплены большими конторами, перекупить оттуда ребят к нам – непросто. итак, в конце прошлого года мой друг xy публикует на архив пейпер с несколькими граммами sota через пару дней ему пишет калифорнийский стартап, назовем его ss, и предлагает пойти к ним работать в америку xy отказывается, тк патриот. и сразу второе предупреждение: в твите будет рассказываться про личные встречи и авиаперелеты за границу если это для вас неприемлемо, посмотрите соседний тред про stylegan encoder. выводы здесь не очень глубокие, такие же, как и у постов соответствующих пабликов удивительно, что такое бывает, иногда находит, что хочется тусить вот так, но это не всерьёз. кулстори о том, как мы делали московскую лабу калифорнийского стартапа, поработали три недели и всё поняли тред будет в духе анонимных наркоманских пабликов, чтобы не ворошить названия и имена. работаете сегодня?. думаю, через полгода выйдет stylegan3, который будет учиться уже с энкодером и уж тогда-то, надеюсь, получится вволю поугарать над фотореалистично покорежёнными фотками друзей в 1024x1024, feed-forward и без потери id. кажется, что все эти костыли победит архитектура, в которой энкодер будет учиться вместе с декодером уже сейчас есть alae (автоэнкодер для 1024x1024), но он проигрывает по качеству подходу выше:. но это уже вполне можно использовать на куче развлекательных задач, особенно если потеря id не портит пользовательский опыт:. работает ли это? получается похоже, но как будто теряется id на знакомых лицах ощущение, что на восстановленной фотке другой человек. и вот наконец выходит пейпер про работающий энкодер: их модель psp тоже ищет латентный вектор, но они не обучаются к правильному вектору вместо этого они генерируют картинку через замороженный стайлган и навешивают лоссы уже на неё. недостаток – каждое преобразование нужно учить отдельно что там все-таки насчёт энкодера? на момент нашей публикации предсказание латентного вектора feed-forward мы нашли только у работало это плохо, и подходило только как initial state для бэкпропа. помимо feed-forward с качеством stylegan2 , архитектура позволяет использовать части исходной картинки, например оставлять надпись на бейсболке, что невозможно даже в стайлгане с бэкпропом это позволило нам победить на user study сам стайлган). это немного шаг в сторону, ведь мы не находим латентный вектор но заработало это неожиданно хорошо слышал, что нейромаски примерно так и оптимизируют под запуск на устройстве, просто никто не подумал, что про это можно пейпер писать. я, и предложили в сгенерировать стайлганом синтетический парный датасет для конкретного преобразования (например, женщин и соответствующих им мужчин) и учить на нём обычную dense prediction сетку, например pix2pixhd. и даже в пейпере stylegan2 предложили использовать бэкпроп это работает медленно, нужно порядка 1000 шагов бэкпропа, на одну фотку уходит минута. первые подходы предлагали находить точку в латентном пространстве бэкпропом – оптимизировать вход так, чтобы на выходе картинка совпала с искомой про это вышло несколько пейперов:. можно найти вектор усов, и варьировать их густоту на сгенерированном лице но интереснее такие манипуляции делать с настоящими фотками чтобы делать это с помощью стайлгана, надо найти латентный вектор, соответствующий фотке но как? все-таки стайлган – это декодер без энкодера. на вход генератору подаётся латентный вектор прообученное латентное пространство довольно гладкое (особенно в v2), можно найти зоны, ответственные за пол, расу и тд это дает возможности не только для бесконечной генерации разных лиц, но и для манипуляций над конкретным лицом. stylegan – первая архитектура, которая без проблем обучается генерировать картинки 1024x1024 проще всего генерить лица, они отличаются только в деталях благодаря лицевому домену все поверили в мощь ганов, хотя кошки генерируются всё еще крипово порой. тред про stylegan encoder можем ли мы уже наконец менять себе пол, возраст и цвет глаз feed-forward в 1024x1024?. про калькулятор рассказал на первоапрельской конференции sigbovik обычно конференции используют double blind review, в sigbovik пошли дальше и сделали всю конференцию blind, те без видео вот тут я записываю свой доклад на кухне:. последнее, что сделал в милабе – калькулятор, который не использует математику, а предсказывает картинку ответа по картинке выражения вот здесь можно попробовать:. потом написали с ребятами статью на eccv20 про дистилляцию стайлгана про нее уже рассказывал женя  но я позже вставлю свои пять копеек. дальше я перешел в яндекс milab первым делом научил танцевать анну-веронику дорогуш с помощью vid2vid. самое сложное – подвоз/хранение данных, перевод их на одну пространственную и временную сетку тут нужна команда и полгода времени а в обучении сеток никаких хитростей нет имея выборку, приемлемого качества dense prediction и motion можно добиться за месяц gpu в проде не нужны. вот эти ребята сделали наукаст чисто на радарах, но, насколько понимаю, данные они используют без оглядки на лицензии. насколько помню, спутниковые данные довольно дешевые но, чтобы из них получать качественно данные по осадкам, надо обучаться к метеорадарам на разнообразных ландшафтах вот радарные данные доставать сложнее, они у каждой страны свои. тогда же я узнал, что про работу можно писать пейперы мы написали пейпер про спутниковый наукаст на воркшоп nips18, взяли орал kdd19, и даже подали заявку на патент! 3-минутное видео о наукасте с kdd:. наукаст на метеорадарах работал и до меня, мы же обучились предсказывать зоны дождя по спутниковым снимкам так расширили действие наукаста на всю европу, дальний восток и на юг до экватора. отличие наукаста от обычного прогноза в том, что для просчета в будущее не нужно применять уравнения гидродинамики достаточно optical flow, еще лучше – обучить сетку. в яндекс погоде мы сделали спутниковый наукаст наукаст (now + forecast) – это предсказание погоды на ближайшие пару часов, в продукте это карта осадков:. закончил физтех, шад, поработал java-программистом в netcracker, поклассифицировал документы в тинькофф банке, пришел в яндекс. расскажу немного про карьеру и интересные проекты. план на неделю (2/2):* есть ли смысл в phd? что я делаю в русской аспе, и как люди гибнут за науку* про вэны* ещё про ганы* может быть про ai residency, но у меня больше вопросов, чем ответов!. план на неделю (1/2):* как я поработал три недели в калифорнийском стартапе* энкодер для stylegan2* про avatarify и face reenactment* наука vs индустрия, что выбрать?* зачем пейперы, и почему конференции это классно. привет! в эту смену твиттером командую я – владимир ивашкин занимался ганами в яндексе, веду телеграм канал в последние полгода поработал в двух стартапах, а теперь мечтаю вкатиться в cv рисеч. треды за прошлую неделю. спасибо всем, кто меня читал на прошлой неделе, а также за приглашение! надеюсь кому-то было интересно! с вами был андрей чепцов подписывайтесь на , где я делюсь новостями jetbrains в области data science и не только!. власти задумываются о предотвращении контроля над ai компаниями со стороны других государств. военные сша продолжают применять технологии ai из академии и лабораторий. компании, производящие пролупроводники, продолжают набирать геополитическое влиение. после нескольких ошибочных арестов с применением распознавания лица, вопрос этики стал подниматься более активно. приложения обработки естественного языка активно продолжают повсеместное применение в том числе в поисковиках google и bing. google, graphcore и nvidia продолжают лидировать в области оборудования для ai. километраж само-пилотируемых автомобилей все еще микроскопичен при этом он подпитывается данными, которые открывают компании. испытания первого лекарства, созданного с помощью ai, пройдут в японии. экосистема сша интенсивно наполняется за счет мигрантов, и в частности студентов из китая. крупные компании выигрывают войну за таланты это негативно сказывается на появлении новый предприятий. новые институты формируются исключительно вокруг ai. большая часть публикаций - от американский институтов и крупных компаний. только 15% всех научных работ, открывают исходный код. биология быстро становится популярной областью применения ai. большие модели (и соответственно, крупные компании и огромные затраты на вычисления) доминируют в области для обработки естественного языка. согласно отчету, новые поколения транспортерных моделей открывают новые области для обработки естественного языка. говоря о data science, месяц назад вышел большой отчет о состоянии дел в ai, подготовленный и (неудивительно, что они работают венчурными инвесторами). flask и django остаются самыми популярными веб фреймворками numpy и pandas остаются самыми популярными библиотеками для работы с данными. при этом только 33% их тех, кто занимается анализом данных, называют себя data scientists. при этом 40% всех, кто использует python, сказали, что занимаются также machine learning. согласно отчету python software foundation, 59% всех кто использует python, в том числе используют его для анализа данных в то время, как только 51% используют python для веб разработки. кстати, такой же новый опрос проводится и в этом году его результаты будут доступны через несколько месяцев. другой интересный опрос проводила python software foundation (вместе с jetbrains) в прошлом году. среди тех, кто указал jupyter ноутбуки как основную ide, 41% работает как разработчики, и 27% как data analysts, data engineers или data scientists. среди тех, кто указал python, как главный язык программирования, половина ответила, что использует его для веб разработки 43% сказали, что используют его для анализа данных 41% сказал, что использует его для machine learning. на вопрос о хобби, 58% сказали, что программирование является для них главным хобби 49% также указали видеоигры. среди всех (не только python) опрошенных, 19% сказали, что их главной целью использования языка программирования является работа с данными (business intelligence / data science / machine learning). согласно опросу, python используется в качестве главного языка программирования 31% всех опрошенных это делает python третим самым популярным языком после javascript и java (согласно конкретно этому опросу). в опросе участвовали 34,000 человек про методологию можно узнать здесь. в этом году jetbrains опубликовала результаты собственного опроса. теперь, давайте посмотрим на более широкую аудиторию. в понедельник, мы узнали кто лет вы в data science. сегодня обещал поделиться наблюдениями из чужих опросов и исследований тред. и еще:. еще пример:. пример того, что в проде: еще более крутые вещи (full line) в процессе. в этом году на nips проходит соревнование по генерации bash команд. тренды с последней крупной конференции по nlp acl 2020. здесь можно посмотреть результаты. другая популярная задача – поиск кода полтора года назад microsoft проводила соревнования в этой области. здесь много интересных примеров применения gpt-3. о s gpt-3 сегодня не говорит только ленивый. два примера решения задачи по генерации sql кода и. пример be. один из популярных подходов – использования моделей естественного языка применительно к коду. пример tabnine. пример kite. одна из наиболее популярных задач – генерация кода на основе больших моделей. задачи “ml on code” сейчас очень популярны. тред про использование ml в инструментах разработки. самое смешное, что за это видео джереми забанили на . доброе видео про jupyter ноутбуки и почему все (а точнее ) не правы. один из интересный проектов вокруг big data tools, разрабатываемый ребятами – ztools расширение к , которое позволяет получать информацию о рантайме из ноутбука и использовать ее в ide. недавно вышел новый апдейт big data tools о котором написал на хабр. поддержка parquet, orc,  и avro. плагин предлагает файловый менеджер для aws s3, hadoops hdfs, azure file storage и google cloud storage. плагин предлагает возможности для мониторинга spark приложений внутри ide алтернатива интерфейсу spark history server. используя плагин можно указать адрес инстанса zeppelin, и работатать с ноутбуками прямо внутри ide код ячеек можно бдует редактировать используя всю мощь scala, java, и sql. продуктовым маркетингом этих инструментов некоторое время назад занимался я сейчас эту задачу подхватил. твиты об инструментах для big data можно почитать в. эти инструменты доступны как плагин для , , и вот официальная страница плагина:. кроме data science, в jetbrains есть целое направление инструментов для big data, которым занимается. api для библиотек, которое позволяет из kotlin библиотек обращаться к сущностям jupyter ноутбука - ячейкам кода, аутпутам и тд. типизированные датафреймы на kotlin. lets-plot (kotlins ggplot2). kotlin numpy. библиотеки kotlin для работы с данными. будет много полезного про параллельные алгоритма тюнинга гиперпараметров и стэкинг на распределенных системах!. в четверг в 18:30 по москве будет выстуать на. скоро ожидается альфа-релиз keras-подобного фреймворка для kotlin поверх tf хотя он еще официально не доступен, его уже можно посмотреть на github  уже сам скоро придет в рассказать об этом в ближайшее время!. еще одна статья о kotlin, уже в контексте тренировки модели линейной регрессии также авторства. статья о тренировки нейросети на kotlin используя tensorflow. к слову о jvm и data science, принимает участие в развитии  java api для. еще одно видео с ромой уже на русском. подкаст, записанный в январе этого года с , о том, что происходит в kotlin на тему data science. kotlin работает с plotly. kotlin работает вместе с jupyter ноутбуками. начиная с версии 090, можно использовать вместе с. с августа этого года, kotlin можно использовать для написания spark приложений. kotlin, будучи jvm языком может быть особенно полезен в процессе обработки данных (etl) и инференса моделей. более актуаьная информация в более структурированном виле теперь доступна на сайте kotlin. как kotlin связан с data science? в конце прошлого года я написал статью где суммировал события за прошлый год. если у вас стоит последняя anaconda, datalore можно открыть прямо из anaconda navigator. пост на реддите про desktop a generator. при совместной работе, внутри редактора также можно отслеживать курсоры коллег, чтобы знать кто над какой частью сейчас работает. когда приглашаешь коллег работать над ноутбуком или воркспейсом, коллеги автоматически получают доступ к данным. как работает публикация ноутбуков? публикуется статическая копия, которую можно расшарить по ссылке коллеги cмогут оставлять комменты, использовать ноутбук как темплейт, копировать код и сохранять картинки визуализаций ноутбуки можно публиковать прямо из pycharm. платный план datalore будет анонсирован через 1-3 недели платный план предложит gpu, и более мощные машины и больше памяти этот план подойдет для быстрого прототипирования ml/dl моделей. бесплатный план предназначен для быстрых экспериментов с данными - не нужно ставить библиотеки, данные можно загрузить и хранить прикрепленными к ноутбуку. datalore позволяет работать одному или команде. datalore позволяет работать с данными, делать визуализацию больших данных (все рендерится на сервере), оформить ноутбук markdown и latex и опубликовать его статическую версию. что такое datalore?  это онлайн-ноутбуки с умным редактором кода редактор кода в ноутбуках предлагает авто-дополнения, и другие функции “code-insight” (знакомые многим по pycharm). итак погнали!. эти продукты – и если с datalore кто-то мог быть уже частично знаком, многим может быть интересно узнать, причем тут kotlin ⁉️. сегодня, расскажу немного про другие продукты jetbrains, также связанные с data science. вчера я чуть-чуть рассказал, чем занимается наша команда (pycharm data science) и сделал спойлер нового продукта (jetbrains dataspell). тред про продукты jetbrains, связанные с data science. если вы хотите попробовать ранюю версию jetbrains dataspell, заполните эту форму мы свяжемся вами и вышлем подробную информацию как получить ранний билд!. несмотря на то, что продукт все еще находится на стадии активной разработки, мы уже прямо сейчас активно привлекаем ранних пользователей к его тестированию. если pycharm делает основной акцент на работе с кодом и ориентируется на паттерны разработчиков, новый продукт будет делать акцент на интерактивной работе с данными, и ориентироваться на паттерны людей, которые работают с данными и ml моделями. в новом продукте, ноутбуки будут выглядеть и работать также как и привычные ноутбуки (с их полной интерактивностью) – за исключением того, что мы постараемся сделать работу с ячейками, кодом, и результатами, макстимально эргономично и удобной. новый продукт получил кодовое имя jetbrains dataspell это продукт, над которым активно работает команда, и который мы, если все пойдет хорошо, планируем сделать публичным через несколько месяцев. последние месяцы наша команда занималась формулированием этих различий и созданием принципиально нового продукта, который использовал бы базу pycharm (и intellij), но при этом представлял бы идеальную среду для работы с данными. лучше всего это можно продемонстрировать вот этим твитом. что мы узнали за последние несколько лет в jetbrains – это то, что паттерны работы (и ожидания от инструментов разработки) разработчиков и дата-сайнтистов (или тех, кто работает с данными а не кодом) в корне отличаются. за эти 10 лет, python стал также основным языком для data science по этой причине, естественно предполагалось встроить инструменты для работы с ноутбуками (и данными в целом) в pycharm. pycharm в этом году исполняется 10 лет сегодня pycharm знакомом большинству профессиональных разработчиков python. этот секретный проект был назван pycharm data science и этим проектом наша команда активно занимается прямо сейчас. именно тогда, мы решили основательно проанализировать паттерны использования ноутбуков: кто и почему их использует, и почему старый подход не работал. в октябре прошлого года мы вместе с командой pycharm обсудили текущую ситуацию вокруг ноутбуков на тот момент эта поддержка много раз переписывалась, без какого значительного успеха, и было острое ощущение, что нужен “новый план”. далее я расскажу, почему поддержка ноутбуков была такая “многострадальная”, а также что происходит прямо сейчас, и, что более важно, что будет происходить в ближайшие несколько месяцев. в целом, на радар jetbrains ноутбуки попали очень давно – и их “базовая” поддержка вначале появилась в pycharm community, затем переехал в pycharm pro, и переписывалась несколько раз. несмотря на то, что ноутбуки далеко не единственный способ делать ml, сегодня jupyter ноутбуки используются повсеместно: и локально, и на удаленных серверах, и даже в облачных сервисах для ml. если zeppelin ноутбуки больше используются инженерами данных (вместе с scala и sql), jupyter ноутбуки больше используются python разработчиками вместе с библиотеками визуализации и тренировки моделей. естественно, как только я начал искать, кто какие ноутбуки использует, я сразу же обратил внимание на jupyter именно это и стало точкой моего погружения в мир data science. мне стало жутко интересно откуда появились ноутбуки, как они эволюционировали, и что будет с ними дальше. после знакомства с zeppelin, я обнаружил, что ноутбуки в целом (несмотря на многие их ограничения) невероятно удобны для интерактивной работы с данными. для тех, кто не пропустил, вот в этом треде я рассказал, чем я занимался до инструментов для работы с данными, и чем они меня заинтересовали. тред про то, чем занимается наша команда в jetbrains (pycharm data science) буду говорить о jupyter ноутбуках и не только внимание, спойлеры/тизеры новых продуктов jetbrains. из недавних статей на тему удаленной работы, очень понравилась статья gitlab:. лично мне, очень сложно работать из дома мне важно разделять рабочую и нерабочую обстановку однако, предлагать удобную среду для тех, кто работает удаленно, очень важно – даже если большая часть работает из офисов. наблюдая за коллегами четко вижу две разных категории людей: те, кому нравится работать из офиса (и кто сегодня страдает из-за карантина и ограничительных мер), а также те, кто наконец-то может работать удаленно без каких либо ограничений. совсем недавно jetbrains открыл офис в амстердаме, и кажется это теперь намного “моднее” мюнхена если хотите работать жить комфортно в центре европы, и не учить немецкий, эта возможность для вас!. несмотря на то, что мюнхен – большая деревня, тут много всего проходит (когда “не карантин” lol), включая митапы и конференции другой бонус приятный – расположение в центре европы отсюда можно поехать в любую другую страну рядом, где проходит обычно много всего интересного. в мюнхен я переехал из санкт-петербурга больше 4 лет назад компания помогла с визой, переездом и адаптацией в jetbrains классный отдел hr, который помогает абсолютно с любой проблемой в германии это особенно ценно, тк тут много бюрократии. у нас есть приличное количество людей, которые работают полностью удаленно и приезжают в офис только несколько раз в год но в целом таких не много большая часть либо обычно работает из офиса, либо часто там бывает. большая часть всех продуктовых команд сильно распределена между разными локациями например, в pycharm в мюнхене я практически один остальные в разных локациях учитывая сегодняшние реалии, все митинге проходят не в офисах, а через google meet, кому откуда удобно!. если ты поработал несколько лет в одном офисе, и желаешь перебраться в другой, компания помогает это сделать это включает помощь в оформлении и непосредственную помощь при переезде также компания активно нанимает во всех тех регионах, где есть офисы (и юридические лица). jetbrains – международная компания не только в плане продуктов или продаж, но и разработки у нас есть офисы разработки в праге, мюнхене, санкт-петербурге, москве, новосибирске, бостоне, и теперь амстердаме тут можно глянуть карту с офисами:. про то, как я перебрался в мюнхен, и немного про jetbrains. просто подожди секунду, и выбери больше 3 лет. скрины страшно выкладывать не уверен, что старшие коллеги одобрятпредставь приложение, где можно по продукту (или семейству), версии, группе событий (например редактирование python файлов), сегменту пользователей, можно смотреть %-ы, ретеншен, распределения, и многое другое. как только получилось передать работу над инфраструктурой и продуктовой аналитикой в надежные руки, я решил вернуться в продуктовую деятельность – с намерением заниматься исключительно инструментами для работы с данными. больше всего мне нравилось, что zeppelin, удобен для интерактивной работы, умеет из коробки делать простейшие визуализации, а также умеет не только scala/python, но и sql знакомство с zeppelin во многом повлияло на мою будущую карьеру и привело к тому, чем я занимаюсь сейчас. учитывая что, я большей степени работал со spark, scala, и sql, первым инструментом для работы с данными, с которым я познакомился, был несмотря на тормоза и отсутствие многих важных фич, этот инструмент мне очень понравился и кажется определил мое будущее. непосредственно я занимался всем подряд; от devops, и spark, заканчивая наймом и backend разработкой писать и деплоить spark после 6 лет занятий маркетингом - это откровение! за помощь в борьбе со spark, особая благодарность. кроме того, что теперь каждый в jetbrains может ответить на многие продуктовые вопросы, cоздание инфраструктуры позволило аналитикам делать работу точнее и быстрее. вместе с коллегами, мы за 1,5 года создали с нуля инфраструктуру для сбора данных и также сделали внутреннее приложение, с помощью которого любой в jetbrains смог бы ответить на огромное количество продуктовых вопросов – не привлекая аналитиков. в будущем эта платформа должна была также решить проблему с логами и лечь в основу создания ml решений для продуктов jetbrains. созданием такой self-service платформы процессинга данных и продуктовой аналитики я и занялся несколько лет назад в jetbrains посколько ничего подобного практически не существовало на тот момент, пришлось создавать ее с нуля. чтобы качественно анализировать данные, нужна инфраструктура чтобы работать с данными мог не только аналитик (или инженер данных), но и любой разработчик или маркетолог в команде, нужна self-service платформа продуктовой аналитики. чтобы делать продукт, и принимать продуктовые решения, нужно понимать как он используется для этого необходимо собирать данные об использовании продукта и анализировать их. продуктовый маркетинг в jetbrains не сколько про рекламу, сколько про коммуникацию с пользователями, анализ рынка, а также ежедневное взаимодействие с командой продукта. за многие годы работы в jetbrains, удалось поработать в разных продуктовых командах, а также помочь запустить абсолютно новые продукты: и. в jetbrains я пришел, как это не удивительно, чтобы заниматься маркетингом делать маркетинг продукта, который любишь и используешь сам каждый день, до сих кажется невероятной удачей. до jetbrains я работал программистом и руководителем проекта в , где занимался софтом для торговли опционами (и не только) моим руководителем в том числе был рома сейчас также работает в и занимается развитием языка. тред про то, как я занимался вещами несвязанными с data science, и при этом попал туда, где я сейчас. если вы задаете вопрос в комментарии, буду ставить лайк это значит, отвечу на вопрос в одном из тредов в обратном случае, буду отвечать также в комментарии. прежде, чем я  расскажу про себя, давайте знакомиться сколько лет вы в data science?. если хочется чтобы, я рассказал про какую-то конкретную тему, кидайте вопросы. план на неделю 2/2:[четверг] про использование ml в инструментах разработки[пятница] буду делать опрос, и делиться интересными наблюдениями из чужих опросов[суббота] пока не придумал, решу ближе к делу[воскресение] в баварии в этот день все закрыто, даже твиттер. план на неделю 1/2:[пн] как меня угораздило попасть в data science[вт] чем занимается наша команда (pycharm data science)[среда] про другие продукты, связанные с data science. всем привет! эту неделю с вами буду я – андрей чепцов я живу в мюнхене и работаю в продактом в команде , где отвечаю за направление data science расскажу, чем занимается наша команда, а также про коллег по цеху погнали!. статистика за неделю:- 130+ тыс просмотров - 130+ твитов- 600+ лайков - 70+ подписчиков. всем спасибо кто был на этой неделе в коллективном ds твиттере в следующие недели уже будут новые авторы подписывайтесь на меня:-. здесь главное не закончить так. на датафесте по теме могу посоветовать доклад артура кузина. общение это так или иначе про переговоры могу по теме посоветовать:- договориться можно обо всем! как добиваться максимума в любых переговорах переговоры с монстрами как договориться с сильными мира сего. для понимания основ лаконичного текста-пиши и сокращай как создавать сильный текст. как писать письма - изучите книгу как писать письма - изучите книгу новые правила деловой переписки - нужно включать в школьную программу. чем выше собеседуемая вами позиция - тем большую роль начинают играть софт скилы: общение с бизнесом, да просто правильно рассказать про свой проект без общения никакразвивайте софт скилы. возможно у вас в компании не построена адекватный процесс управления проектами переходите на гибкие методологии идейно очень крутая вещь рекомендую книгу scrum революционный метод управления проектами - от самого создателя scrum. почему же? обычно я читаю утром и вечером в метро. какие вопросы задать на собеседование самому они про то, чтобы понимать самому куда, с кем и над чем идете работать:- какой размер команды, какие роли- последние успешные проекты команды- какие задачи будут у нового сотрудника- кто ставит задачи, откуда они приходят. я рад за вас, но уверен что вас взяли не из-за других оферов, а из-за вашего опыта и знаний. любители r?. что именно?. для полноты докину примеры вопросов про ml- схемы валидации, как использовать кросс-валидацию- отбор признаков- гиперпараметры бустинга- беггинг, блендинг, стекинг- метрики vs loss функциии тд. к тому что вас не возьмут - надо быть готовым и на это могут разные причины, и в том числе самые неочевидныетак что я советовал бы собеседоваться сразу во много мест. если больше недели нет обратной связи имеет смысл спросить у hr про ваш статус но могу сказать что хороших кандидатов не забываютиспользовать аргумент, что у вас оффер и хотелось бы решение по вам быстрее - я бы не советовал. take home или домашка после собеса - обычная практика их не очень любят, но это все равно лучший способ оценить технические навыки кандата если вас просят что-то доделать, советую сделать, ведь значит в вас заинтересованы. не стоит быть излишне вальяжным один раз собеседуемый пил колу и закинул ноги на соседней стулпожалуйста - не надо так. некоторые вопросы предполагают однозначный ответ, на некоторые важен не ответ, а рассуждения если не знаете ответа на первый тип вопросов лучше сразу сказать об этом в целом если понимаете что работа не для вас - собеседование можно закончить досрочно, сэкономите время всем. на самом собеседовании будьте честны и адекватны не нужно отвечать односложно, но и говорить не умолкая тоже не стоит вы удивитесь как много людей готовы чуть ли не самим собой час разговаривать. почему?). на собеседовании если сможете развернуть список, написать пару циклов, работать со словарем - уже неплохо многие не могут и такогорасскажите по паттерны программирования с ооп - будете на коне. питон - можно изучать долго, просто посоветую хороших книг:* python cookbook* the programmatic programmer* the clean coder* fluent python* working effectively with legacy code by by michael c feathers* agile principles, patterns, and practices in c# язык другой но не суть. забавно что большая часть кандидатов не может ответить на вопрос: сколько записей (min и max) можно получить после inner join двух таблиц размерами 5 и 10 строк соответственно. что нужно знать в sql:- базовые операторы select, from join, having where group by, sum- оконные функциикак изучить: первые 50+ задач с  последующие задачи из-за кривых схем бд не очень- советую книгу t-sql fundamentals - для изучения с 0. и так вам предстоит техническое собеседование на позицию ds или аналитика что можно повторить:sql, питон, ml если первые два используете на работе - сложностей не должно возникнуть мало кто спрашивает задачи с leetcode, еще меньше применяет на работе. помните резюме не только для hr, оно нужно и для технического собеседования. фотография в резюме сейчас тренд что это не нужно мой совет - пусть лучше будет через несколько недель + 10 кандидатов, вспомнить без фоток по резюме бывает сложно. не нужно указывать что умеешь в deep learning, а в опыте только обучение сеток на mniste и курс на степике. в резюме акцентируйте на готовых проектах, особенно тех которые принесли результат и/или дошли до прома при составлении резюме в начале про текущую работу, и далее прошлый опыткратко можно указать с чем умеешь работать, например python, sql, spark, ml. ах да до общения с hr - сделайте хорошее резюме уместите все на одну страницу, если не влезает - уберите нерелевантный список, уменьшите отступы как вариант вот этот сайт  - там есть лаконичные шаблоны. уже с этапа hr - важно понимать сколько хотите денег вилку можно оценить по форумам, ods и тд но нужно иметь ввиду премиальную часть, которая ваше чем выше собеседуемая позиция. первый этап - hr бывают внешние(внештатники) или внутренние не скажу что внешние хуже, они сговорчивее и могут сразу выдать вилку по позициипри общении с ними нужно быть просто адекватным и уметь повторить то, что написано в резюме если позвонили, значит опыт уже подходит. если нет знакомых, напишите рандондым чувакам, с просьбой прокинуть резюме это работает. любой поиск работы начинается обычно с но не забывайте и альтернативные источники ods, сообщения в linkedin рефералы увеличивают вероятность попасть на собеседования , поищите в linkedin - возможно кто-то уже работает в компании вашей мечты. новый тред про собеседования кажется в качестве собеседующего я провел сильно больше чем был сам собеседуемымдальше немного советов как пройти успешно собеседования и найти работу, которая будет интересна. спасибо за уточнения, согласен я и хотел показать книгами разной направленности - что wasted время бывает от разных причин а прокрастинация как фактор. приглашаются еще авторы: участвуйте сами, приглашайте друзей и интересных вам людей. как часто читаете книги? не важно художественная/научпол или техническая. про концентрацию рекомендую книгу максимальная концентрация как сохранить эффективность в эпоху клипового мышления кажется что актуально, ну и название книги говорящее. если хочет немного больше физиологических подробностей силы воли, то это есть в книге воля и самоконтроль как гены и мозг мешают нам бороться с соблазнами быть может все дело в генах. быть может на работе не хватает эмоционального драйва, правильной отдачи почитайте эмоциональная гибкость как научиться радоваться переменам и получать удовольствие от работы и жизни. прокрастинация - зло, укреплять силу воли как решение кому-то помогает медитация, новый способ организации работы и тд большая часть книг по тему безумно скучные, но это очень рекомендую. *бизнес-роман это как обычный роман со своими героями, обычной жизнью но которые решают свою бизнес задачу, делают ошибки, но верно идут к цели как итог обычный научпол получает немного эмоциальности, легче сопоставить сухие советы с реальной жизнью. последний бизнес-роман на сегодня, но возможно еще интереснее предыдущих задача глобальнее, и на первый взгляд кажется, что герою никак не решить нужно буквально построить звездолет в пустыневсе в книге deadline роман об управлении проектами. еще один бизнес-роман уже про devops и соответственно приближенный к it проектам в книге проект феникс роман о том, как devops меняет бизнес к лучшему. устранения бутылочного горлышка в проектах как чуть ли не самый важный фактор в увеличении производительности проектов, и про планирование все это очень хорошо описано в книге критическая цепь, написано в стиле бизнес-романа, крайне рекомендую. срочные важные задачи на работе, и не удалось написать в течение дня в целом такого быть не должно хорошее планирование с правильной приоритезацией должно помощь избежать такогооткрываю тред по планированию. если хотите изучать ганы - очень советую книгу gans in action: deep learning with generative adversarial networksтам начиная с основ до вполне современных решений, код на tf, но его при желании можно перебить на pytorch. я даже по тебе набил статью на архиве который приняли на noname конфу она же на медиуме на гитхабе. зачем нужны такие данные:* сгенерировать анонимизированные данные, но с аналогичным распределением исходного датасета * генерация новых данных для использования с псевдолейблами и тд* в целом чтобы на сгенерированых данных модель в итоге обучалась не хуже. ключевые работы следующие * lei xu lids, kalyan veeramachaneni synthesizing tabular data using generative adversarial networks (2018) arxiv:181111264v1 [cslg]* lei xu, maria skoularidou, etc modeling tabular data using conditional gan (2019) arxiv:190700503v2. тема мало форситься, но оказывается можно ганы использовать и для табличных данных работают, скажу честно - не так хорошо сложности с специфичным распределениями, при использовании большого кол-ва признаков, свои сложности с категориальными признаками. я здесь просто нарисовал море и мост к горе, с цветочками и деревом огрехи видны, но если посмотреть что было на входе, то очень неплохо. но мне особенно понравилась работа от nvidia gaugan, в целом это такое наследие от pix2pix когда по входной маске нужно предсказать исходную картинку у них крутое демо - попробойте. много чего придумали безумно крутого в цифровых аватарах и во всей этой теме pose estimation и тд. cтоит ганам усложнить задачу - добавить нестандартный фон - и тут ganы теряются обратите внимание на картинки, которые генерируют sota в ганах, фон можно сказать всегда размыт. пример сгенерированных изображений, правда выбранных вручную но обратите на фон:. тред про ganыеще одна в cv в которую я верю - это ganы лица людей , собак и кошек - они генерируют просто не отличимых от настоящих при этом это не просто комбинация картинок в трейне, генерируются в действительно что-то новое. красивая презентация, довольный бизнес, проект в проде и реальные пользователи. для успеха проекта важен хороший менеджмент, и не важно какая у вас позиция джун или сеньор - в ваших интересах проявить инициативу как это делать лучше крайне рекомендую прочитать книжку rise, ее много рекомендуют в ods она и про построение карьеры. если вдруг нужно найти причины провала можно посмотреть здесь. картинка выше и ведьмаком по горам из докладов leands (tg. экономика тоже важно: нужно сразу трезво оценить сколько ресурсов займет разметка, какие данные уже есть, а какие данные отдельно придется тащить в прод нужна ли будет поддержка модели и тд в таких случаях ищите золотую середину. забавно что в реальных проектах подход кагла не работает где важно построить звездолет помощнее и побольше ведь на кагле важна твоя позиция на лидерборде на работе успех проекта сильно больше многограннее. в какой-то момент время на research уже не будет, и нужно показывать результат и здесь важно понимать, что важнее еще +01% точности или работающий прод код (подсказка это второе). с другой стороны если что-то бизнес очень хочет, но у вас свой вижен приоритизируйте в начале хотелки бизнеса, быть может вы не знаете всех деталей и тд, а вашу идею реализуйте как дополнение так вы покажите, что понимаете что от вас хотят, и мыслите шире с другой. то есть если кто-то хочет точности 100% - бегите, или меняйте метрику, чтобы результат был достижимым иначе окажитесь на пути полных разочарований и непреодолимых препятствий. для начала всегда поймите, что хочет от вас бизнес если требования не ясны, не реализуемы - приземляйте их на ваши реалии. * все совпадения случайны, истории вымышлены и выдуманы. все счастливые семьи похожи друг на друга, каждая несчастливая семья несчастлива по-своему - как говорил классик начнем же тред про необходимые факторы, чтобы ds проект взлетел и дошел до прода, ведь причины почему провалился проект всегда много. зачем открытые датасеты, когда есть лидерборд на #kaggle. интересно вроде такие разные подходы так сильно связаны. гм, гм - очень похоже на metric learning но в статье явно называют именно meta learning: a large volume of works in few-shot classification is based on meta learning methods, where the training data is transformed into episodes to better fit in the context of few examples. читая сота решения, не забывайте про прошлые статьи в разных доменах могут работать разные решения. в nlp - такие исследования тоже ведутся - верю что там тоже свой продвинутый meta-learning. очевидно, полученный скор можно значительно улучшить при наличии хорошего размеченного датасета, однако я вижу большую перспективу в таких решениях очень хотелось бы бесплатных тулзов, которые под капотом имели такие модели, и помогали размечать данные. как итог 82% точности на 1-shot задаче, тогда так бейзлайн с обычным resnet18 дает менее 52% точности при 5-shot подходе же получаем уже 88,8% точности датасеты специфичные и инфы сколько можно получить использую нормальный датасет-нет, но можно предполагать 90-95% точности. ну и далее итеративно приходят к искомому решению используя так называемый sinkhorn mapping, что по сути есть решение системы уравнений через матричное разложение. далее у нас в пространстве фичей несколько сэмплов каждого класса и нужно найти наиболее робастные центры каждого класса соответственно они показывают, что максимизация апостериорной вероятность есть задача минимизации расстояния wassersteina. преобразовывают так, чтобы распределение внутри каждого класса стало больше приближено к гауссовскому по сути это некое степенное преобразование аналогичное tukey’s transformation ladder (не смог найти русское наименование) оно же отлично помогает избежать перекоса в данных. ребята же в этой статье делают ставку на гипотезу, что признаки одного класса имеют свое определенное распределение кратко суть их подхода: фичи с бэкбона с претрейна на другом датасете (проверяли на resnet18, wide resnet, densenet121). что делали раньше, накидывали аугов, semi и self supervised методы как выше так же много meta learning, то есть подход при котором вытаскиваем мета-фичи и в самом простом случае по l2 норме собираем вместе одинаковые классы, такое очень часто практикуется в face recognition. так вот в few shot алгоритмах - лучшее вот это leveraging the feature distribution in transfer-based few-shot learning arxiv: [ [ отличная и дает обзор других алгоритмов. few shot алгоритмы давайте обзорно посмотрим текущую соту few shot обучение, это когда у тебя, обычно, всего 1 или 5 картинок на каждый классps sotaу с кодом смотреть здесь. можно соответственно дообучить модель на псевдолейблах ну или сделать качественный претрейн на другом большом датасете, не только imagenet semi supervised подходы - для кагла, уже обязательный пункт, даже если в хочется попасть только в бронзу. но данные размечать дорого, и вроде здесь начинают работать разные few shot алгоритмы, semi supervised подходы последнее отлично работает и когда текущая модель очень хорошая, но есть неразмеченные данные. начнем тред про сomputer vision (cv) кажется что задачи классификации и сегментации в целом решена, и очень хорошо то есть при достаточном количестве данных можно получить качество даже лучше чем человек. * а ну еще и покекатьзнания, деньги, и тд и тд - только как бонус. тут накинул еще причину: думаю, самое сложное - ответить себе на вопрос зачем? верю что человеку в первую очередь должно быть интересно, многие в участии видят даже азарт ведь каждая сорева - длинный забег когда отсутствие коммитов очень быстро сдвигает тебя вниз. участие и медальки как весомый аргумент в резюме. можно участвовать в хакатонах, обычно они длятся в течение выходных, так что на них нужно меньше времени участников меньше, опыта можно ожидать тоже - как бонус больше шансов попасть в призовые. тут поставили вопрос ребром зачем участвовать:* опыт в решении новых задач, который можно применить в своих рабочих задач* удачные пайплайны можно переиспользовать* pr - статьи по участию и тд тд* чсв и покекать над задачей. время:* всегда верил, что это вопрос приоритетов могу рекомендовать сесть за выходные подбить пайплайн, который в будни будет перебирать решения * соревнования идут 2-3 месяца, в целом можно спокойно заходить за месяц до конца как раз найдут все лики. не забываем что можно объединиться с другими ребятами, которые рады сразу залететь в медальки и предоставить ресурсы искать на форуме или на ods. вычислительные ресурсы:* иметь свою тачку приятнее всего* colab (бесплатно) или colab pro $999/месяц работает очень шустро, советую сделать периодическое сохранение state модели на гугл диск* сами kaggle kernels с прошлого года появились квоты на gpu, надежнее чем colab. сложно начать как превозмочь:* смотрим решения прошлых аналогичных соревнований на самом кагле, гитхабе и ml trainings* текущий открытые решения, избегая бленды открытых решений, их время придет ближе к концу соревнований* изучить papers на архиве* почитать discussions. так, кажется, что большая часть не участвовала на каглевижу несколько причин, почему такое может быть:* сложно начать* нужны вычислительные ресурсы* время. хороший вопрос, я бы сказал мотивация ровно такая же: pr, лайки, ну можно апнуть индекс хирша. какой у вас rank на кагле по соревнованиям?. если кто знает где можно опубликовать paper без регистрации и смс, дайте знать многие конфы хотят 300+$, что кажется перебор. изюминкой станет написание статьи успешно опубликовать на конференции может бы сложно, но на архив - почему бы и нет например мы как то раз так и поступили - , уже даже 9 цитирований. удачный опыт участия, не обязательно с призовым местом нужно максимально использовать:* набить блогпост на самом кагле за это дают медальки, правда только за дискашен* причесав код, выложить его на github* набить статью на medium* написать о результате в твиттере, linkedin. по лучшие решения выкладывают здесь есть видео и с конференций, всячески рекомендую. * опыт взаимодействия с командой и тд если вдруг не пользовались гитом, то отличный момент чтобы начать им пользоваться* так как нужно уметь итеративно улучшать результаты, можно научиться лучше трекать результаты. сам я набил 11 медалек, но золото не получилтак вот зачем нужен #kaggle:* опыт решения новых задач: кернелы, обсуждения и тд пару курсов и пару конкурсов на кагле и я более менее смог разобраться в cv* в своих рабочих задачах - иногда можешь предложить нетривиальные решения. про #kaggle уверен прошлые авторы рассказали много я на стороне что это очень полезный опыт и почему это так - добавлю и свои 5 копеек про это и будет новый тред. вот например ребята с соседнего отдела разрабатывают, новостной мониторинг, чистый nlp. деталей не скажу, но в компетенции в ml здесь хорошие решаем, даже внутри направления, почти все виды задач: табличный ml, nlp, cv, графовые модели и тдиз интересного что перед внедрение модели, проходят валидацию ребята из направление валидации. кажется что натравить пачку моделей и дело в шляпе на деле снимки дорогие, дома очень разные, банально от этажности дома будет сильно зависеть какую часть здания на снимке уже построили так или иначе было интересно заняться такой задачей. по cv рассказывал на последнем датафесте что доклад - есть строительство жилых зданий, за ходом строительство нужно следить есть прогресс есть, то банк может выдать новый транш по кредиту. для интерпретируемости shap пожалуй лучшее из того, что придумали - вы только посмотрите какие красивые графики там можно строить:. если кратко строить небольшие модели для разных бизнес блоков с хорошими интерпретируемыми признаками, и далее пользователю выводить признаки, которые больше всего по shap увеличивают вероятность искомого негативного события. благо про текущие проекты удалось рассказать даже на конфах про табличные задачи и наш подход к интерпретации моделей - рассказывал на прошлом ai journey. после всего этого я попал на свою текущую работу в сбер и уже работаю здесь второй год что удивительно задачи не только про таблички, но есть и про nlp и cv хотя и направление про мониторинг кредитов. насчет целей: важно чтобы отдельные отделы имели общие цели, от которых зависит годовая премия это все сильно улучшает кооперацию и мотивацию потратить время на чужие задачи забавно когда цели противоположные 😈. в крупн компании стоит ожидать лучше налаженных процессов в плане разработки, постановки задач, постановки целей и тд банально процесс повышения будет формализован и открыт. процессы в мейле были налажены круче: ноут заменяли и чинили в тот же день, как и доступы и заявки зато сам бизнес tele2 был крупнее, в анализе была вся россия к сожалению, чем крупнее компания, тем все сложнее однако в крупн компании стоит ожидать лучше налаженных процессов. в tele2 работали совместно с (андрей лукьяненко), он в представлении не нуждается андрей был в ml отделе, я в аналитике именно он сподвиг меня взять комп помощнее, что позволило вкатиться в #kaggle. самый вин был с моделью прогноза оттока общего количества абонентов, даже простые эвристики существенно улучшили точность существующей модели я к тому что не всегда нужно строить модели в xgbooste, нужно в первую очередь решать бизнес задачи. продолжаем про опыт после мейла пошел в tele2 занимался a/b тестами и аналитикой: почему те или иные клиенты уходят в отток или переходят на новый тариф. все это было в выходной день, так что за трудовые успехи выдали купон на delivery club на 1000 руб опыт полезный - дата аналитику и dsу полезно увидеть бизнес процесс воочию. из забавного что там было выходил в поле работать курьером - доставщиком еды все было по-настоящему: рестораны не знали кто мы, клиенты были настоящие за эти два+ часа доставил 5 заказов, прошел 11 км от двух клиентов получил чаевые в сумме на 100 рублей. про презентации очень советую книгу говори на языке диаграмм пособие по визуальным коммуникациям от джин желязны (say it with chas the executives guide to visual communication) сотрудник mckinsey, а они умеют делать презентации. презентации лучший способ донести свою работу, и в целом помогают помочь структурировать твои выводы, найти слабые места в повествовании. в ds сообществе принято ругать как excel, так и презентации но зачастую бизнес хочет сам покрутить данные, excel же инструмент зачастую единственный инструмент которым они умеют пользоваться. после я попал дата аналитиком в mail, а именно в delivery club пришлось научиться пользоваться excelм и powerpointм, и в целом научиться делать качественные и достоверные выводы по данным презентации до этого делал только в универе, и было больно тк руководство хотело красиво. в будущем sql пригодился на каждой работе так что изучайте sql даже с хадупом/спарком можно отлично работать с обычном sql. чтобы прийти к успеху вуз не нужен (steve jobs). про работу в сбертехе - у меня это было про инженерную работу с данными, в основном на sql в итоге свелось к написанию различных метрик и проверок качества новых загружаемых данных как окажется в будущем - sql знать полезно, вопрос качества данных стоит остро почти везде. в целом все образование у меня, но я думаю это справедливо для большей части образования, очень фундаментальное и есть значимый недостаток практики, бизнесовых курсов, курсов по тем же софт-скиллам остается надеяться, что в будущем станет лучше. а так курсы кантора были много про теорию с доказательствами теорем зато очень зашла его рекомендация специализации ml на яндексе, если ничего не знаете в ds советую начинать именно с нее. кафедра от сбертеха ( были хорошие курсы, особенно по алгоритмам и джаве курсы по mlу вел кантор, тот который еще попал на обложку forbes курсы кантора, самое положительное - это то что они сподвигали тебя учить ds самостоятельно. наверное потому, что как раз к 4му курсу заканчиваются основные фундаментальные курсы по матану и физике матан в ds пригодился, физика скорее нет, но было интересно. этот тред будет по карьеру, но пока про моюначинал работать как наверное почти все, еще учась в универе заканчивал кстати мфти кафедра была от сбертеха, так и я начал там работать если говорить про мфти - первые 2-3 курса самая жесть, потом значительно легче. надеюсь успеть рассказать про ml, kaggle, computer vision и ганы, и конечно же по карьеру после может дойдет и до моих увлечения. всем привет! меня зовут инсаф ашрапов эту неделю коллективный ds твиттер будет за мнойнемного обо мне: сейчас senior ds в сбере, основные задачи по мониторингу юр лиц после выдачи кредита, но не только до этого работал в мейле и tele2. 🎉 datafest2020 уже на этих выходных🎉. узнали, согласны. пока нет авторов, давайте проведем простой анонимный опрос твое отношение к удаленной работе?. # тест отправки отложенных твитов, пока на аккаунте нет авторовнемного о –. # и снова на связи продолжение митапа от сообщества women in tech!🔥 регистрация тут:.  : heres a condensed version of the matplotlib cheatsheets so it can fit a desktop background( image: vectorized svg, with the non-standard fonts outlined:  et al for making it!. # сообщение от куратора привет! ищем авторов на следующие недели, пишите. ну вот откликнулась на вакансию аналитик данных, выполнила тестовое и в excel и в jupyter (pandas, matplotlib) чтобы продемонстрировать, что могу так и так после собеса не позвали но на hh, убрали вакансию аналитика, а добавили маркетолога. ну это не проблема бизнеса в плане, тебе когда нибудь правда это мешало? одно дело, когда тебе надо ответить на запрос в течении милисекунд под высокой нагрузкой, другое, когда ты можешь чаек поить, пока считается не вижу проблем r тоже медленный и ничего). ну даже в сетках надо думать) знания матеши там как никогда понадобятся) особенно в каких то хитровыебанных и все это нужно, в первую очередь, для интуиции потому что как раз мат образование дает неплохое понимание, как что то может работать хотя бы это. не, ну сейчас есть варики! то есть если ты хорош в ней, то сейчас попроще с приходом дс как хайповой дисциплины люди и статистику полюбили, и оптимизацию и прочие радости! то есть сейчас это можно применить чуть более быстрее, чем раньше). о чем рассказать и о чем поговорить завтра?. я подумаю, да понакидывать там тоже можно). чего то я потерялся уже в своих твиттах надо до завтра отложить, наверное. ладно, там читерская ссылка была в прошлом твите это расширение экселя аддоном, который умеет в простой мл но линейную и нелинейную регрессию из коробки в эсельке никто не отменял!а еще я нашел упоротый пост, где чел сетку с релу реализовал в эксельке. большинство задач для условного небольшого бизнеса, даже прсотых мл задач, можно решить в экселе а вот уже освоить эксель может любой, я считаю ну и пройти курс по подготовке данных там или статистике. кажется, что сейчас работодатели пока что не очень понимают в массе своей как работать с данными а данных же у всех дофига счас ими там, маркетологи занимаются с другой стороны, зачем вот людям дс ребята? они дорогие и много мнят о себе я бы вообще не нанимал нас. на отклик приходит задание сделать выгрузку из редшифта через оконные функции в сиквеле и говорят, у нас вся работа вот так проходит хм ну такое! хотя, почему нет собсветнно. еще года полтора назад, я просматривал вакансии по дс и там в целом, все было ровно то, что я проговаривал выше например, вот компания - один из лидеров на рынке дистанционного образования, все процессы диджитализированы и прочее ищут дс чувака. у меня есть стойкое ощущение, что такое продолжается до сих пор на рынке труда и дс да, конечно, в больших двух городах россии, и может быть в больших городах европу уже появились нормальные ребята, которые знают, что хотят от дс но в больше своей части, кажется, что нет. математики могли хуй сосать, или делать экономические модели в финтехе или писать игры - вот это, кстати, самое норм было там много же надо математики знать, чтобы как то писать движки формошлепство же не требует знаний даже алгоритмов, и даже стуктур данных. тем и жил но к чему это я все? а к тому, что по крайней мере года три назад, никто не умел подбирать себе персонал, которые хоть как то не традиционен умели нанимать примерно никак и культуры рынка труда в профессиях связанных с данными не было!. вот тут можно даже посмотреть на результаты не то, чтобы там что то прикольное но ради интереса глянуть можно. у них была такая идея - что креативные индустрии вносят серьезный вклад в экономику, но никто не считает, и не знает как это сделать и вот мы с pwc через парсинг данных и сведению их в какие то индексы, по срезам времени, делали такие штуки вроде там получалось даже. все это время я подрабатывал барменом, ну и там фрилансил парсингом данных промышленно, например, промышлял для хорошей конторы, кстати, которая креавный индекс экономики по россии и не только считала. вот туда, я даже с энтуазмом сделал тестовое на r и вроде даже классно сделал но взяли почему то какую то девчоку с более математическим бэкграундом что бы это не значило но тут правы, наверное, были я ж с математикой плохо знаком. самая адекватная вакансия была, как ни странно в игровую контору - которая естественно игры делала браузерные и мобильные там надо было на основе данных предлагать гейм дизайнерские решения ну или как минимум с ними работать бок о бок. раньше помню это называлось инженер баз данных, почему то видимо потому что бизнес аналитики раньше не было, а отчеты надо было кому то делать, а кроме как инженерам баз данных и некому вроде было писать такие запросы когда надо десять кросс запросов через три базы слинковать. ну и много очень предложений было быть бизнес аналитиком, это в смысле сидеть и делать запросы в сиквел базу данных по требованию руководства я олап сиквел очень люблю (или любил видимо), конечно, но как то писать запросы по требованию было так себе. были чуваки, которые звали сидеть в эксельках считать какие то отчеты были чуваки, которые звали считать какой то телеком по данным, но проводили менеджерский стресс тест на собеседовании, как будто я шел на менеджера. полный пиздец с рынком антифрода в целом вообще все ужасно было, думаю до сих пор все не очень при нынешнем уровне автоматизации и возможностях и количетсве данных, есть компании, которые до сих пор сажают туда бедных людей целыми отделами. в основном меня звали сидеть в комплаенс отделах и проверять ручками фрод помните да, что я занимался тем, что автоматизировал такую систему причем с нуля со своим отделом а тут меня говорят, ты ж антифродом занимался, не хочешь у нас в банке посидеть руками проверять?. почти ни в одной вакансии не надо было заниматься тем, чем я занимался, или тем, что было написано в вакансии сейчас с этим попроще, но раньше рынок совсем был ужасный люди, которые занимались бы мл или дата майнином были совсем не нужны видимо. и тут я хотел рассказать, про свой опыт всех этих вакансий, которые меня зазывали. до недавнего времени, когда эта профессия стала хайповой к тому же теперь аналитики - это дата саентисты тоже же!. и мы продолжаем как ни странно, пока я не работал, мне прилетало довольно большое предложение работы ясное дело, что у нас все плохо с рынком труда айтишников дефицит все дела плюс аналитиков вообще сложно наверное было искать. ммм, на нас подписываются индусы, которые видимо считают, не знаю, что российский дс великий, и поэтому, может быть, читают меня через гугл транслейт?. почему?. вы меня простите, что я забыл про вас счас исправимся. вот эта например понимаю, что бэкенд сикрет в целом один из самых низких по порогу входа вести этот аккаунт, но не настолько же там все плохо. вспомнил, что мне надо писать сюда, открыл, и сразу убежал от компьютера потом опомнился, и решил все таки продолжить а тут пока меня не было, всякие смешные твиты прилетели в реплаи. ого! это много! я такого пункта в опросе даже не ввел). готово). тут свят предложил опрос запилить, чтобы вам просто тыкнуть надо было бы, я знаю, вы тоже ленивые как и я , так что вот для вас опрос сколько в среднем за месяц вы пишете строк кода в день?. со временем мне надоело, и я ушел вникуда и не работал в ит, кажется, года четыре зато года два работал барменом было намного круче тока платят мало(. что еще раз подтверждает индустриальное правило, перед тем как впиливать мл, попробуй зарулить как то по другому скорее всего это закроет 90% боли. потому что скорость прохождения платежа была критичной составляющей при этом, легко все тюнилось) если ты замечал, что что то уже переставало работать, то просто переписывал под новое поведение в целом такой подход удачно работал. возвращаясь к прохладным историям о жизненном пути так чо там первая настоящая работа впилить антифрод в платежи под нагрузкой лонг стори шорт в итоге все легло в эвристики все знания, что я получил за рисерчем дата майнинга просто втупую запрогалось в кучу ифов. сегодня решил плюнуть и занятся другим буду пробовать новые сота детекторы хочу покрутить на видео я работаю в основном по ночам, это как то не очень удобно, но так как я ленивый, заставить себя работать как то по другому у меня не получается. я вчера еще хотел пока похмелье, поделать работу пытался запихать наши новые пару моделек в - все таки клевые ребята его делают надо постараться освоить но чего то ничего так и не вышло сложно мне, я ж не умею ничего, вот и тут не справился. вот где реальные 300кк секунду, а не в этом нашем дс тут горбатиться надо, учить что то, каждый день пейперы читать с руководством ботаться справедливости ради, надо отметить, что вроде как востфак очень заблатованый и туда просто так не попасть, да. простите мне молчание за вчера да и за сегодня вчера меня мучило похмелье был у знакомых востоковедов в рощино семья, оба закончили востфак спбгу муж зарабатывает +- 600 к за два месяца ну то есть месяц там тусит работает, месяц тут нихера не делает. никто не ответил!отвечу за себя в среднем если брать за месяц, то я пишу меньше одной строчки кода лень - двигатель ничего!. так давайте опрос кто сколько в среднем строчек кода пишет в день? если вы не дс пацаны, уточните это). помнится был же нормальный нампай с гпу - cupy ( на его основе даже свой пайторч был - chainer ( и это было красивым решением как по мне жаль, что чейнер все но зачем снова по кругу создавать то, что уже было не оч понятно). по сути numpy, но с xla и поддержкой gpu/tpu сам по себе для дифференциируемых вычислений (не сетей) пожалуй удобнее если пилить на нем сети, получится pytorch, но от гугла (хз плюс это или минус) ну и видимо попытка работы над ошибками дизайна существующих фреймворков. короче шляпа?). кстати, а есть кто за джакс этот знает/топит? по моему шляпа какая то кто мне скажет, что я не прав?. то есть типа цель сделать его полностью совместимым плюс минус с пайторчом с минимальными усилиями делать тоже самое в ниме ну и есть своя версия тензорной либы с некоторыми алгоритмами и поддежркой нампая ну и там некоторых штук из дл. ладно, вспомню последний оплот новых фенси штук - есть такой компилируемый язык с пайтон лайк синтаксисом у него есть нимторч, например там ничего своего интересного просто есть возможность свой код на торче сделать бинарником. кстати, вспоминая хаскель под него ведь тоже есть либо для мл! но это уже что то из области извращения да и какой хаскель фенси язык?. у него есть небольшой списко либ для мл многое просто биндинги в тф, например, или другие существующие вещи но есть и самобытные -  вот как будто самый внятный и код на нем выглядит хорошо есть и со списком классических мл алогитмов. но для любителей статической типизации есть же rust! еще и ублажает тех, кто в подрачивает на функциональные подходы в программировании не в смысле как в лиспе а в смысле как хаскеле там, с богатой системой алгебралических и линейных типов и прочей фп эзотерики. хотя челы из вк на одном там митапе ставили на него я очень скептичен, особенно из за того, что там вроде все пересрались и поувольнялись (не в вк, а в гугле) а ну код там выглядит максимально ужасно хоть и те, кто дрочат на статическую типизацию там будут ликовать. дальше, какие там еще фенси языки есть? многие вспомнят про любовь swift с tensorflow и их типа differential programming но все мы знаем, что тф говно, так что скорее всего свифт унаследовал все его болячки в неуважении к дс челам, мы ж не программисты, нам код бы попроще писать. там у нее еще есть парочка фреймворков для дл и куча хороших годных для обычного мл и неудивительно зоопарка моделек тока нехватате тут матлаб, конечно, в хвост и гриву тащит джулию. вот тут про это можно их пейпер почитать, я так и не осилил но говорят, что можно даже рекурсии впиливать и автоград отработает не уверен, что такое можно провернуть с пайторчевым динамическим графом хотя может и можно но зигот именно на язык заточен. так вот, есть такой фреймворк для дл у julia - очень красивый с их нект ген автоградом, как они заявляют -. хотя, конечно, так себе сравнение - ведь питон вообще где то там далеко позади даже после пхп!. то есть это одновременно и язык для моделирования и general purpose programming language правда говорят, что веб в ней пока сосет, что синхронный, что нет но запилить страничку как на фласке хватит и будет даже так же быстро рабоать как на питоне. поддержка видеоакселераторов поддержка распределенных вычислений поддержка hpс - ну просто потому что для этого всего она создавалась - считать сложные вычисления на суперкомпьютерах еще и в целом умеет general programming -. надо куда то, что свободное, понятное, и намного фенси тут, конечно, на мой вгляд есть пара вариков и первое что приходит на ум - julia самый математичный, самый фенси язык для мл как будто бы куча крутых штук прямо из коробки. а какие еще есть варианты кроме матлаба? ну там может быть математика? вот например фенси задачи в ней но это, конечно, дроч. я вообще люблю смотреть за пределы экосистемы дл питонячей потому что ну она ж какая не фенси тут, конечно, сама проблема в питоне, - как язык он ничо такой, но как боттлнек - говно то есть по сути, все что мы пишем на нем, внутри не его. а это был 18 кажется год и мне пришлось почитать как пишут на матлабе в целом, там все круто, пацаны не одним питоном, да. это я узнал, когда однажды рисерчил для одного там предпринимателя в сфере моды, что можно сделать с дип лернингом в этой же сфере нагуглил кучу пейпиров, и кода к нему, и оказалось, что половина кода сделана не на модных пайторчах или тензорфлоу, а вот в матлабе. можно загружать модельки из tf, из onnx, из пайторча, есть весь зоопарк моделей с весами в том числе и напомню, что там все еще можно делать все кнопочками и потом делать визуализации слоев на лету в один клик потому что зачем дс челу писать код? незачем в целом. это я сейчас понимаю, какой крутой интерфейс тогда был у матлаба для нейронок все наглядно понятно и все делается кнопочками хотя код никто не запрещает писать а сейчас кстати nn toolkit у матлаба так это вообще космолет. потом я скачал паленый матлаб и вспомнил универскую удаль, решил им все зарешать открыл там их великий подуль nn через nnsta и ничего не понял какие то ползунки, какие то эпохи, какие то параметры, которые надо крутить. потом мы с коллегой даже нашли какую то реализацию адекватную нейросеток на прости господи php (весь сервис же на нем написан был, и программисты там сидели соотвествующие), и даже чего то выучилось, и скор был на классификацию около 06 - ну нам такое конечно не годилось). это сейчас все мы знаем, что это изи зарешивается через графовые сетки, до аккураси 09999, но тогда непонятно было, во первых, что такое эти самые нейросети (я ж с универа ничего не вынес, а там мы даже их имплементили), ни как к ним подобраться. и много из этого я вычитал на хабре, лол)и естественно, так как я тупой, и ленивый, я не понял ничего совсем даже не смотря на то, что это как то даже работало нейронки правда не работали, потому что никто не умел их готовить и непонятно было как в этой задаче это делать. так вот, тогда это называлось data mining и именно тогда я познакомился с этими вот деревьями, бустингом, какими то скриптами под эксель, самописными и нет, и даже нейронками, и научился делать сиквел уберзапросы в терабайтную базу данных. оказывается, что в твиттере есть ограничение на длинну треда, который можно составить за один раз. ну а дип лернинг не очень понятно, чем отличается от обычных сеток, так что странно его выделять так что так себе зонтичный термин). термин биг дата, как мы все знаем, к 2020 году протух и даже все релейтед штуки, типа хадуп, мапреьюс и прочие динозавры инжиниринга больших данных перестали быть модными, и все пытаются забыть об этом как о страшном сне. но в 12 году в россии, всякое такое называлось data mining и на самом деле термин полностью покрывает все что связано с data science в нынешнем его понимании по моему скромному мнению хотя википедия говорит, что дс это data mining + deep learning + big data. ладно, на самом деле, как мы знаем, такой термин уже был так как его определили еще в 97 как замена термину статистика, так как он ассоциировался больше с экселькой, чем с наукой и потом уже в начале нулевых термин стал распространяться появился такой журнал даже. вы скажете, кул стори бро! но где же дата саенс? а нет его, потому что в 12 году не было такого термина! да и я же не настоящий сварщик. а третьей работой стала неожиданно прямо настоящая работа в финтехе, где мне предложили с нуля поднять антифрод систему в одном из самых больших агрегаторов платежных систем в россии. второй работой была поддержка всей интернет и локальной сети университета финнек было круто я тогда познакомился с фрибсд и прочими радостями админства сетей, цисок, и ковыряния в носу весь рабочий день, потому что делать нечего. первой же работой потом была должность технического писателя в айтишной госконторе, которая делала большие системы на джаве для госудраства, типа медицинской единой системы все писали на джаве, а я писал на uml тогда научился писать техпроекты по госту никому не пожелаю. в общем я филонил и меня потом отчислили с аспирантутры политеха а может и нет но я не узнавал. и на начало второго полугодия я радостно потерял эту книгу тетрдаку с заметками и рисерчами в даче на думской улице вместе с сумкой и всем остальным а так как я ленивый, начинать заново мне было очень лень а признаваться проектору про это было страшно. сказал, будет параллелизм с точки зрения матеши изучать в смысле пытаться придумывать как параллелить алгоритмы, чтобы их на видяхах твоих ускорять я радостно взялся полгода рисерчил, все выписывал в большую такую тетрадь\блокнот\книгу. после того, как я радостно закончил второй вуз я пришел обратно в первый на фтк с дипломом и говорю, смотрите у меня тут перспективные штуки, давайте меня в аспирантуру берите ну и тот самый чел, который меня в печи отправил, взял меня под научного руководство. как вы поняли, жизнь меня не учит, так что я два раза повелся на одну и ту же шляпу. и как ковать дамасскую сталь в промышленном производстве а еще нам по средам показывали крутые совесткие кинофильмы про то, как лить метал под крутой совестский индастри или спейс что то типа такого пришел невыспавшийся, то получалось круто. ну я и повелся поступил по рекомендации проректора и завкафедры с фтк на автоматизацию промышленных печей, а так как я ленивый, то не стал переводиться, а просто отчислился к чертям после первого семестра зато там я получил какие то знания, про то как льют метал. самое смешное, что это не первая моя попытка поучится была, первая была с похожим сценарием я пришел значит поступать на фтк (ныне кспт) политеха, а мне говорят, слушай, ну конкрус большой, мест мало, давай ты пойдешь в соседний факультет, а там переведешься. ну я и повелся, а так как я ленивый, то и переоводиться потом не стал в итоге все пять лет пришлось вгрызаться в матан, функан, эконометрику, матстат и теорию игр из всех пяти лет, я может быть вынес только определение предела, и интеграла обыкновенного. но когда я пришел поступать, мне декан сказал, типа ну туда куда ты хочешь, шибко большой конкрус, мест нет, и вообще, давай ты пойдешь на соседний примат, а там по ходу переведешься а то велик шанс проелететь совсем. а учился я на прикладного математика и системного программиста, чтобы это не значило, но точно не то, что это низкоуровневый программист, который пишет на си дрова, а что то другое хотя вообще то хотел быть обычным то есть писать там на плюсах роботов, или чо нить такое. и естесственно формализацию и понимание сду я, пока писал диплом, не освоил да и архитектурные особенности чипов acelerated by cuda я тоже не понял). получил за диплом удовлетворительно, хотя все рецензенты влепили отлично были у меня кое какие терки с завкафедрой, который и принимал почему то экзамены хотя положа руку на сердце, диплом был говном я тогда впервые познакомился с стохастическими дифференциальным уравнениями. с тех пор, кажется, даже ни разу не писал на плюсах (куда язык он сиплюсоподобный). ксати, alexnet появился в 12 году и если вы не знали, вся суть была в том, что просто эффективно реализовали подобие cnn lenet на куде c кучей слоев правда еще в 11 году это сделал dan cireșan et al (2011) но помнять почему то алекснет (потому что имаджнет на самом деле). первый диплом защитил аж в 2010 году на тему моделирование процессов на cuda, тогда, когда это еще не было модным, как сейчас правда и не было чем то необычным работы про это были уже в 7 или 8 году с тех пор ничего не помню про то, как программировать под куду. расскажу немного про себя я живу в спб, суммарно учился в 5 вузах два из них закончил имею специалиста, бакалавра, и магистра пхд не имею, хотя хотел в свое время но на пхд учился. забавно, вижу, как лайкают посты свята, а мои не лайкают это хорошо значит все делаю пока правильно). потому что, как вы возможно уже поняли, я не настоящий сварщик ничего не умею, ничего не знаю и вот вам мем на эту тему, которое описывает стейт этого акка на неделю. так как до меня тут по сути и так все рассказали про дс как вкатиться, плюсы минусы, подводные камни скока платят или про скока платят не говорили? вообще считаю, что нам платят предательски мало и предательстки много, одновременно так вот, я не буду все это обсуждать.  : rip. так вот, меня зовут иванъ дурдинъ, и на этой неделе я продолжу эту славную традицию скатывания в сракотан коллевных твиттеров, и буду первым в конкретно этом, аккаунте про дс, который будет неадекватен, и ничего не понимает в тематике этого аккаунта. часто в авторы приходили люди, которые не очень разбирались в теме, или вообще были не очень адекватными (с моей точки зрения). спустя время появились коллективные твиттеры на другие тематики, и большая их часть была, конечно же, про ит, так как и эброад был запилен айтишниками и, конечно, в сракотан это скатилось гораздо быстрее чем оригинальный эброад. всем привет когда то давно мой знакомый, с которым мы даже однажды пилили издание про сериалы, сделал великую идею - коллективный твиттер людей, сваливших за бугор и назвал это эброад андерхуд. пока у меня не отобрали доступ к акку, я могу ещё что-то ответить но уже на всякий случай попращаюсь спасибо, что читали мои посты на этой неделе надеюсь, кому-то было интересно и спасибо за приглашениес вами был до скорых встреч. деньги мне не заплатили, на следующий день я не пришёл. в конце я наткнулся на шкафчик в который уходил пучок проводов открыл шкафчик, а он пустой и эти провода торчат обрезанные бум-да-тсс. ну так вот, возвращаясь к моей задаче интернет включили, я смог перевести части документации и пошёл сопоставлять это с агрегатом просто нашёл тот кусок, на который жаловался аппарат и шёл от него по схеме дальше. и вот они подкручивали ножки, роняли листы, снова подкручивали пока не откалибровали. а сам стол с такими дырками, из которых дует воздух, чтобы создавать подушку поэтому стекло приземляется довольно мягко, и потом скользит по столу плавно. между делом мы сходили откалибровать стол для резки стекла это большое шоу один чувак становится на лестницу за стопкой из пятиметровых листов стекла, которые стоят вертикально отделяет один лист и роняет его на стол если калибровка плохая, то лист разбивается. интернет был в другой части здания там где-то на чердаке была комната, в которой стоял огромный слой пыли, много проводов и комп с толстым старым монитором починили перетыкиванием проводов. в общем, аппарат включался, выдавал какую-то ошибку про его определённую часть и ничего не давал сделать как я говорил, рабочие отпинали системник, а интернет не починился, поэтому сначала мы пошли чинить интернет. документация -- толстенная книга на итальянском хорошо, хоть схемы -- это просто линии, которые переводить не надо. а это прямо такие хардкорные электрики они даже пинками пытались починить компьютер, когда на нём интернет пропал. до меня его какой-то чувак чинил два месяца и не починил я тоже такое впервые видел мне выдали комбинезон и привели в каморку к электрикам. это полуразвалившаяся кожаная фабрика просто будто в заброшенное здание приколотили двери и внесли станки мне надо было починить какой-то дорогущий станок, который при этом бу из италии. так вот я устроился ремонтировать какие-то агрегаты на производстве пластиковых окон просто ничего лучше я на тот момент в омске не нашёл. ок, победили треш-истории если что-то конкретное про датасаенс хотите, лучше задайте вопрос а треш-история будет в треде. хотя когда читатель говорит автор лосось, потому что мне было не интересно/не полезно -- ну я уже написал выбор есть, читать или нет. для меня самая большая проблема была в том, что я считал свои шансы околонулевыми поэтому в основном о ней если говорить о своих проблемах -- это самолюбование, ну пусть так. так это и есть дорога как не волноваться на собеседованиях? воспринимать как торг, а не экзамен как написать резюме? лаконично и на английском что делать, если не берут? пробовать ещё. должны быть, надо подумать🤔. про что ещё рассказать?. я когда ездил потом с командировками по разным заведениям, прямо возвращался будто в одно и то же место везде первый отдел, везде эти проходные, везде инженеры прячутся по курилкам и скучают в своих комнатах. я всё никак не привыкну, что тут нельзя редактировать посты делаю опечатки и жму tweet не перечитывая простите мою орфографию, пожалуйста. но если хотите про датасаенс дальше говорить, то задавайте вопросы просто к предыдущем тредом было не сильно много вопросов, а вчерашние карьерные истории много лайкали. шутки про тагил? или где это происходило?. начальник сектора любил проходя мимо сказать на ухо шёпотом очень быстро мягкие зубы. он там тоже недолго проработал а мой непосредственный начальник перед увольнением не выпускал меня из кабинета 3 часа, беседуя о великой миссии воспитания людей весь отдел он рассматривал как социальный эксперимент. когда я увольнялся, психолог позвал меня поговорить наедине я думал, начнёт докапываться, хорошо ли я подумал но как только мы сели, он сказал что они тут все поехавшие и я всё правильно делаю. на другом заводе у нас даже была доска позора и ещё там всё начальство было помешано на соционике они даже наняли штатного психолога. это приколько первые пару месяцев, потому что необычно но давит ужасно прямо физически плохо. из курилки постоянно возращается мужик с кликухой профессор видно только силуэт он держится одной рукой за стену, другой за живот, потому что шутит сам себе шутки и скручивается от смеха. в целом атмосфера была настолько гротескная, что кто не видел -- тот не поверит прямо как в сталкере или в фоллауте длинные мрачные коридоры с мигающим светом, всё полузаброшенное и лет 30 без ремонта. несколько раз в месяц случался повод накрыть стол на весь сектор и бахнуть коньяка всем коллективом то поминки, то старый коллега заглянул в гости а перед новым годом инженеры едва справлялись с тем, чтобы пересечь проходную засыпали прямо у дверей. так вот бабки (а там работали одни старики и вчерашние студенты, которые каждый день увольнялись) собирали эти грибы, а потом после рабочего дня продавали их на обочине. о, вот забавная история я начал в соседнем треде про байки с заводов там была огромная территория посреди территории стояли гигантские цистерны с ядом ну что-то там для производства и на лужайке рядом росли грибы очень хорошо. ещё если опоздаешь на одну минуту хотя бы, то надо час ходить подписывать бумажки, оформлять себе задним числом отгул на час. и потом час пытаться скачать pdf на 3мб потому что скорость как на dial-up, и соединение рвётся каждые несколько минут. чтобы получить доступ в интернет, нужно сходить подписать служебную записку у начальника сектора, потом в друго корпусе у начальника отдела, потом вернуться в своё здание, постоять в очереди к тем двум компам. для примера, на моей первой работе был запрещён интернет, и никакие носители данных нельзя было проносить через проходную. ну в смысле, мне теперь мало того, что раньше казалось прямо шикарными условиями потому что по айтишным меркам это плохие условия. с другой стороны, судя по моему опыту, мало кто может оценить насколько это круто да и я довольно быстро привык и обнаглел. почти две трети подписчиков всегда были в ит что ж ребята, с одной стороны вам повезло, потому что самая позорная айтишная галера намного лучше по условиям и климату чем средняя неайтишная работа. сегодня последний день моих баек здесь никакой особенной темы сегодня не будет расскажу, что в голову взбредёт кому понравилась эта неделя, приглашаю в свой канал в телеграме. а про спб и питер, правда, конечно но с глобальной удалёнкой, возможно, станет проще. тогда была ситуация, что в эти курсики ещё никто из работодателей не верил где-то через год только их начали писать как плюс к вакансии. я сам таких собеседовал, даже если бы было место в компании, взял бы тоже. был в челябинске, там было страшнее особенно на дороге. можно запросить бесплатное обучение, для этого нужно мотивационное письмо написать но эти письма никто не проверяет lorem ipsum -- это когда нужно заполнить текстовое поле чем-то в графическом дизайне так просто примеры заполняют, где должен быть текст. lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. а что с ним?. =(. между этими двумя моментами 4 месяца на самом деле возвести, конечно мог, но на одном из собесов просто так тупил, что не додумался а так, я физфак закончил, просто мозги превращаются в вату, если ими непользоваться какое-то время нужно, чтобы их обратно размять. ради этого стоило вести этот твиттер. мораль какая?1 то как вы себя оцениваете и то как оценивают другие -- это очень разные вещи 2 с людьми надо говорить находить общие точки3 ходить по граблям больно, но лучше, чем стоять на месте. а специализацию от яндекса бросил на середине. ну в общем, меня взяли и на испытательный срок дали писать по статьям с нуля dpmm на равномерных распределениях мне потом эти два месяца кругом только и мерещились гауссовы смеси, но я просто прыгал от радости. я не решил одну задачу на алгоритмы из двух, потому что не хватило времени и я час зря тупил вместо этого написал идею как решать вместо кода благодаря этому меня пригласили на очное собеседование и я там неплохо отстрелялся по математике. параллельно я ходил по конторам подобным предыдущей в соседнем треде было про тот спектакль а в другую подобную контору мне сделали оффер но я попросил их подождать, потому что ждал ответа из ещё одного места, где проходил на джуна ds. но блин, денег у меня было на 2 месяца, а я их растянул на 4 в два раза снизил к тому моменту свои ожидания по зп и растерял всю уверенность после такого количества отказов думал, уже придётся в омск возвращаться. в бою разобрался, что это за большая о и как её оценивать лучше понял, как оно должно выглядеть со стороны собеседующего, поэтому это стало в меньшей степени экзаменом и в большей торгом. но через некоторое время я стал понимать, как оно в целом устроено, что от меня хотят услышать перестал цепенеть от страха и научился уверенно говорить даже с высоким пульсом. ну и каждый раз после собеседования я чувствовал себя ещё более тупым, потому что не мог ответить на элементарные вопросы. у английской версии просмотров было намного больше и я шёл прямо вообще везде надо писать на плюсах под банковские терминалы? да почему бы и нет, по ходу плюсы выучу. и так как ждать 6 месяцев до конца специализации я не мог, я просто пошёл по всем собеседованиям подряд сделал резюме потом сделал его лаконичнее потом ещё лаконичнее потом на английском. ещё я не знал, что можно написать lorem ipsum в курсеру и учиться бесплатно поэтому заплатил очень значимые для меня в тот момент 4к. и мне попалась реклама курсика от яндекса и мфти он тогда только запустился я подумал, что надо рискнуть для меня в тот момент такое решение было прямо прыжком в никуда. ну вот я такой подваленный, с запасами на два месяца жизни, думал, что делать, когда у меня в резюме было инженер-конструкторинженер-конструкторинженеринженер по применению (по сути продажник). в основном опыт был не очень я как всегда сначала сделал кучу ошибок, а потом узнал как правильно вот эту книжку рекомендую очень она мне здорово вправила мозги, и в дальнейших собеседованиях тоже помогла. после полутора лет работы мой непосредственный начальник разыграл спектакль, чтобы вышвырнуть меня из команды и я уволился возвращаться в ту же область совсем не хотел но вынес много опыта в переговорах. на последней неайтишной работе были постоянные интриги, в которые я въехал, когда уже было слишком поздно опыт полезный, но очень травматичный. как я говорил в соседнем треде, я до этого электроникой занимался сначала разрабатывал, а потом продавал прямо по наклонной вниз, зато по зп вверх правда по айтишным меркам это всё равно крохотные суммы. дальше тред мотивации для тех, кто считает что недостаточно умён/образован/whatever про то, как я не отупев за 3 года без математики не мог возвести 2 в восьмую степень, 4 месяца без работы ходил по собеседованием и оставшись почти без денег всё-таки устроился джуном. и что я не уловил по ходу -- они так смотрели, как я буду общаться с разными типами людей в конце мне сказали, чтобы я пошёл поиграл на бирже и возвращался. так вот пять актов на каждом этапе, который был как будто бы последним необходимым, мне приходилось общаться с новым персонажем с новым паттерном поведения и рядом всегда сидела тётенька для сопровождения как я потом узнал, она вообще-то психотерапевт. поэтому, я крепко усвоил всё сказанное может быть использовано против вас, как в кино. если бы не предыдущий опыт, написал бы что-нибудь честное но до этого я полтора года проработал в конторе, где все продажники и манагеры и не плели интриги, должно быть только кладовщики и я. там прямо был настоящий спектакль в пять актов и в начале ещё какая-то безумная форма на несколько страниц я пытался отшучиваться от самых неприятных вопросов, типа назовите свои слабые места я вписал при звуках флейты теряю волю. апогеем был собес в пять этапов в компанию, которая микросхемы продаёт я не очень надеялся, что смогу вырваться из электроники, тем более из продаж после нескольких лет такого опыта. росту самооценки это не способствует. в общем, до моего первого собеседования в ит компанию, я не видел нормальных собеседований обычно я просто приходил и терпел унижения, или подыгрывал какому-то спектаклю. чтобы познакомиться с такими технологиями, я согласился на пять лет невыезда правда меня всё равно раньше выпустили в итоге. среди таких технологий, например, было вырезание гнезда для крохотной микросхемы ножом или ещё срезать наполовину бутыль у кулера и поставить кулер под кран, чтобы бутылки не менять. он не ладил ни с кем с соседних секторов, поэтому меня устроил как шпиона, осваивать технологии которые ему не хотели раскрывать. а на первую работу меня взяли через научника с универа он был какой-то параноидальный чувак мы шли по лестнице, он мне дал бумагу с инструкциями где первой строкой было после прочтения уничтожить. вы всегда работали в ит компаниях?. но моё первое собеседование было не многим менее трешовое там два каких-то чувака просто задвали мне вопросы и ржали например какие колготки носишь это была моя вторая работа чуваки потом оказались начальником отдела и сектора. пожалуйста =) я как-то не почувствовал большого интереса по ходу, поэтому не стал много подробностей рассказывать. чё какие синтезаторы частот делал? какой чип ставил?мы ониип не уважем, а цкба уважаем ну ты позвони, чё, земля круглая ещё встретимся. если меня спросят про самое трешовое моё собеседование, я первым делом вспомню, наверное, как на одном омском заводе меня просто два мужика вынесли на улицу из проходной и стали задавать вопросы. как дела, чат?. если не про русский язык, а вообще, то предобученный ner из коробки у меня нормально завёлся только у allennlp и то там иногда вылазили ошибки безумные какие-то в общем, всё нужно немного под себя допиливать, это норм. а natasha тоже хороша razdel у нас сейчас для токенизации используется я когда-то пробовал yargy parser их в конкурсе каком-то ещё. когда я ставил deeppavlov он мне половину окружения задаунгейдил там будто сделали pip freeze requirementstxt. зато, написать свою работу и прославиться ещё можно они очень много внимания набирают, а проверять их сложно например эти ребята обещали чудо, а оно вообще не работает никак. а если продолжать в реальном мире, то больше надежд на грубые методы, вроде такого отражают ик свет от камер и делают засветку. среди дальнейших задумок, на который пока нет времени, немного похулиганить с атаками на распознавалки соцсетей говорят, инстаграм может прямо рассказать, что он увидел на фото. мне в какой-то момент стали частенько писать с вопросами на эту тему, и мне пришлось объяснять снова, что в жизни это не спасёт например мне писали про грим от детекции, а потом чуваков каких-то в метро задержали с таким гримом (не как на картинке). например по той статье, которую я воспроизвёл: они использовали очень маленький датасет и ещё я подозреваю, что он бракованный местами. есть идеи, как это дело можно сдлеать более надёжным, конечно но это ужасно дорого и долго для петпроджекта немного перебор. зато можно как угодно одеться, закрыть голову, и yolov4 тебя теряет. детекторы очень надёжно определяют человека если в кадре есть голова и хоть чуть-чуть рук чуваки с фейсбука на фотках всё время прятали руки за спину а в старте треда чувак в капюшоне стоит. а разгадка этих фотографий с эффектными результатами вот в чём:1 голова 2 рyкn. выводы такие: хорошо работает в симуляции, неплохо если напечатать на бумаге и сфотографировать, и отвратительно, если тестировать живьём. но вся интрига заканчивается вот на этих графиках из исходной статьи от чуваков из фейсбука. и ещё я протестировал те знаменитые стикеры, с которых всё началось. и там было много интересных идей например вот это кодом на матлабе. так вот, я по пути нашёл ещё много статей со смешными картинками судя по картинкам в соседних каналах ту статью про геометрик дип лёрнинг растащили на отдельные кусочки так что вот например ещё. у меня в канале ещё есть видосики с демонстрацией, но они почему-то не грузятся в твиттер вот последний. но это я сейчас проделал тот же трюк, что и все авторы этих статей, и пропустил половину истории. ну я напечатал и попробовал живьём. сходилось к тому же, что было в иллюстрациях к статье, но только не к тому, что на финальном результате. первым делом, я взял тот код, заменил картинку-сид, чтобы получить всё-таки хоть чем-то отличающийся результат и натренировал патч. и вот сейчас, после того как я почитал статей и попытался воспроизвести сам я замечаю мелкие подвохи в этих всех фотках. там чуваки тренируют адверсариал патч -- то есть заплатку, которая должна сбивать с толку детекторы человека. но вот эти ребята не оставили код, поэтому я поискал и нашёл другую статью с кодом. в прошлом году по чатам ходила вот эта статья я подумал, было бы круто воспроизвести. а результаты при этом были устойчивы даже между разными запусками на разных машинах мне кажется, это больше от данных зависит. sparsity, coherence, perplexity если коротко ответить -- то на глаз спарсити, потому что темы должны хорошо друг от друга отличаться на глаз, потому что нет численных метрик для интерпретируемости. но большинство парализовано страхом неудачи, поэтому даже не начинают 95% таких. из позитивного: очень много полезных вещей делают люди, которые учатся прямо на ходу то есть приходят нулями, берутся за то, чего раньше не умели и учатся по ходу это наглядно показывает, что не нужно быть каким-то особенным, важно просто брать и делать. так что если хотите получить экстремальный опыт управления проектами -- то велком в ml4sg в одс есть канальчик для этого с таким названием. зато есть возможность пробовать подходы, которые больше нигде нельзя попробовать бесплатно. обычно есть какие-то рычаги мотивации зарплата, повышение, работа в принципе а тут никто никому ничего не должен даже сроки планировать невозможно. это очень интересный опыт, на самом деле, хотя пока сложно хвастаться успехами никто тебе не платит, но ты руководишь чуваками, которым тоже никто не платит к тому же пришли они без всякого отбора. а в том, что это весело только пока ты прогоняешь один jupyter notebook и рисуешь графики в общем, наш проект быстро наполнился такими ноутбучеками, а теперь со страшным скрипом делается сам продукт. так вот вроде интересная тема и многим хочется поучаствовать но в жизни видно, что много таких проектов заброшены в чём причина?. на основе совстречаемости разных слов, они детектируют вспышки каких-нибудь устойчивых фраз в новостях, твитах, блогах и сопоставляют пики из этого получается такой анализ как новости вбрасывают, а блоги реагируют. ещё интересная тема связанная с этим -- это детекция событий во временных рядах юре лесковец, который наверное сейчас самый модный исследователь графов запилил такую штуку. наверное не попал в топ 10 там много нюансов в подготовке данных надеюсь, мы однажды сможем повторить на других источниках новостей тоже. и ещё парфёнов красавчик. ещё как влияние технологий входило в политику билл гейтс сначала был один из категории, и то скорее как богач, а потом вот пошли соцсети и всё такое. там можно увидеть, как два года нам рассказывали, что будет если обидеть путина: в топе три участницы pussy riot потом 4 года порошенко упоминался в 4 раза чаще путина. и вот легенда. про ner у нас интересная штука получилась это 20 лет лентыру как менялись ранги в топе упоминаний имён в новостях. а ещё либа flashtext это просто каеф быть поможет вам выкинуть регулярки. это больной вопрос мы сейчас перепиливаем всё, потому что человеку со стороны в нашем репозитории ничего не понять но можно глянуть тут. поэтому в двух словах напишу сразу выводы:лемматизация: pymorphyтематическое моделирование: bigamner (в русском языке): polyglot. на момент, когда мы начинали, я не видел, чтобы где-то в одном месте можно было найти схему если хочешь делать препроцессинг/тематизацию/ner, то делай вот так, а всё остальное не работает кажется, до сих пор такого нет. что касается результатов и особенностей менеджмента таких проектов позже из полезного, чем можно поделиться -- это куча экспериментов, которые мы проделали над разными инструментами и технологиями. а я вот по соседству веду проект по визуализации новостей вот он основан на тематическом моделировании мы там накачали кучу новостей, разбили по темам и отрисовываем, как они менялись во времени. там несколько разных проектов самый успешный и известный -- это должно быть lacmus, которые помогают искать потерянных людей с помощью компьютерного зрения. тут новое действующее лицо: проект osd ml for social good если раньше не слышали -- это внутри одс движуха со всякми некоммерческими проектами во имя добра. и вообще для факторизаций матриц а там и до двудольных графов недалеко графы мои графы. на самом деле модель достаточно общая, чтобы вместо слов с документами применить её на что угодно например вместо документов юзеры, вместо слов их корзины тогда темами будут типичные профили пользователей. идея в общем-то простая у нас есть документы, есть темы в темах своё распределение слов в документах своё распределение тем получается документ создаётся семплированием тем, из которых семплируются слова и надо вот параметры этих распределений определить. учитывая что я успел узреть чудеса байесианства, как каким-то образом из нескольких строчек семплирования всякого шума в цикле вдруг восстанавливаются параметры процесса из данных, так вообще. и тогда же на пике моды было lda и следующий проект был связан с текстами поэтому просто судьбой мне было предначертано везде его использовать. у меня был крутой тимлид, когда я резко из продаж микросхем перекатился в датасаенс и стал джуном вот он мне привил любовь к процессам дирихле это такое испытательное было. но в плане извлечения признаков из неевклидовых данных часто работают как раз вот эти штуки тм тоже про это он и в рекомендациях тащит. давайте я просто про свой опыт тогда расскажу слово старомодное -- это дисклеймер большую часть задач сейчас решают одной толстой нейронкой, а не всеми этими трюками. лидируют грязные хаки и всё с самого начала я так понимаю -- это два совершенно противоположных лагеря: прожжённые нлпшники и те, кто текстами (почти) не занимался. что-то мало за tm но я про него всё равно расскажу. тут я бы хотел понять аудиторию лучше nlp это уже не такая экзотика как графы, и может быть вам не сильно интересно о чём больше рассказать?. по плану у нас старомодное nlp я в основном занимался тематическим моделированием плотно весь 2019-й прошёл мимо меня с другой стороны я не застал rule-based системы и всё такое, что было в моде до word2vec и подобных штук. среда. твиттер ужасно кропает изображения, но я просто должен напомнить вам, какой сегодня день с понедельника готовился. есть ещё грязный хак, кластеризовать такие прямоугольники, научить на них деревья, и из них сделать уже ручные правила для кластеризации повторяйте на свой страх и риск. а вообще частенько получаются прямо отдельные прямоугольнички связанные общими свойствами и разделённые пустым пространством. тут данные после всех этих этапов и автоэнкодера раскрашены по времени так как это признак с самым большим масштабом и особо не связан с остальными свойствами, автоэнкодер просто взял и растянул по нему все данные. не нашёл картинку с хорошим примером, поэтому пусть будет не самый хороший заодно напоминание: всегда выкидывайте время из данных перед всеми этими трюками. но от признаков разной природы это плохо спасает а вот автоэнкодеры тут вывозят отлично. план в итоге такой: берём и эмбеддим всё, что неевклидово, конкатенируем с тем, что евклидово и пихаем куда-то в снижалку размерности по пути можно построить график и раскрасить его по разным признакам. это негативный, да мне нравится, что это путь вслепую, поэтому есть азарт решать а не так, что быстренько сделал бейзлайн, а потом тюнишь и улучшаешь надо хорошо въезжать в природу данных. наверняка можно что-то подобное выжать и из tsne, но это сложно. umap сломал геометрию, но задачу выполнил он отделил фон и разобрал на части и сгруппировал рикардо. и это похоже на просто помятую бумажку там в исходном датасете просто добавлены две лишние размерности ivis всё просто смял, и далёкие друг от друга точки наложились друг на друга в результате. тут я постил, что оно сделало с рикардо. и кажется, будто круто вся геометрия на месте был динозавр и остался динозавр tsne превратило его в кровь кишки, тоже понятно на самом деле выигрывает umap. это видео, которое должно хвалить алгоритм ivisвзято отсюда. потому что таким образом точки, которые лежали в совершенно разных частях многообразия будут просто накладываться друг на друга. это не очень интуитивно, но здесь сохранять глобальную геометрию скорее вредно, чем полезно то есть если после снижения размерности получилось что-то похожее на проекцию, то это плохо. другая штука -- это что у нас данные могут лежать на многообразии меньшей размерности, чем сам датасет и тут на помощь приходят алгоритмы снижения размерности. ещё внезапно хорошо работает nmf он чудесно справляется с тематическим моделированием, хотя от него этого не ждали, и всякие one-hot и счётчики ему тоже можно кормить. при этом важно не терять совместную информацию как они вместе себя ведут, эти категории тут работает всё, что предназначено для bag of words мощь донейронного nlp. есть две штуковины, с которыми я предлагаю бороться по отдельности сначала всё, что неевклидово сделать евклидовым то есть закодировать категории, заэмбеддить тексты и так далее. но что-то надо делать, да?. а всё, что приходит на ум как готовый алгоритм, работает на предположении, что у нас данные в евклидовом пространстве и все оси равнозначны ясный пень, это предположение нарушается. а вообще говоря, признаки не обязаны быть одной природы и частенько там смесь категорий, числовых значений дискретных и непрерывных. если это не какой-нибудь вырожденный случай, разумеется. ещё одна беда -- это масштаб признаков допустим нам повезло, и все признаки числовые непрерывные сделаете какую-нибудь нормировку и бах, все масштабы поменялись все алгоритмы кластеризации начнут давать совсем другие результаты. вы можете мне напомнить про всякие метрики, конечно но не всё так просто в конечном итоге вам либо нужна разметка, что крайне редко случается при такой постановке задачи, либо это всё равно оценка на глаз. обожаю задачи кластеризации, потому что обычно там вообще не понятно что делать и как оценить, хорошо ли вышло. дальше по плану я обещал рассказать, про кластеризацию и как заэмбеддить что угодно немного даже начал вчера, закидывая странные картинки. =(. а это он же, после инструмента с очень модной презентацией я тут у себя рассказывал, что за дичь тут происходит. потому что из tsne можно получить что угодно и оно скорее запутает, чем поможет например это -- рикардо милос после tsne. как подобрать способ для получения эмбеддингов -- тоже отдельная тема, но я в той корявой диаграме ключевые пункты отразил а снижать размерность надо через umap, или по крайней мере лишь бы не tsne. а вывод такой если граф прямо вот гигантский, то отдельные объекты будут только мусорить картинку можно сделать эмбеддинги методом, который лучше всего подходит под задачу, а потом снизить размерность, чтобы нарисовать картинку. это очень долгая тема, поэтому последняя картинка и вывод это node2vec + umap мне просто визуально нравится, но все эти отдельные куски оправдали себя при дальнейшем анализе. а тут то же самое, то по времени выхода фильма старые группируются в отдельный кластер таким образом, если бы мы заранее не знали этих свойств, их можно было бы частично восстановить только по связям объектов. вчера я постил ссылку на туториал по графовым эмбеддингам там была серия вот таких картинок координаты получены только из связей, но если раскрашивать по разным свойствам, то видно, что они группируются тут видно, что хорошие фильмы рядом с хорошими. ещё если раскрашивать график по каким-нибудь свойствам, то можно найти какие свойства являются ключевыми в группировке по связям. а увидеть можно многое базовый принцип: близкие по свойствам объекты находятся близко друг к другу на картинке часто видно сгустки, или большие пустые промежутки. меня в соседнем треде спрашивали, что вообще на таких картинках можно увидеть это правда, что они очень тяжелы для интерпретации, но дело именно в количестве объектов если заранее не известно, что именно показать, то придумать что-то более наглядное сложно. largeviz -- это инструмент для снижения размерноститут про него статейка и имплементация может переваривать очень большие датасеты и не обязательно графовые. ну в том то и дело нужно какие-то гипотезы выдвинуть прежде чем численно проверять всё, что можно проверить а видно бывает сразу много. поэтому можно переходить на вот такие штуки на картинке весь блокчейн в терминах адресов и транзакций нарисовано через largeviz и viewpoints. но всё равно, уже на сотне тысяч вершин большого смысла рисовать отдельные вершины и рёбра нет дальше важна только плотность. я ответил вы мне говорите, что я не мог так делать ну то есть вы мне пытаетесь втереть, что я не делал того, что я делал и вообще так делать запрещено, потому что сложно что я могу на это ответить?. я уже понял, что вам не нужны не надо мне доказывать, что мне они не нужны тоже. а зачем тогда делать численный анализ, если по скаттерплоту и так видно?. как валидировать численный анализ кластеров?. он просто не для этого не справится. seaborn для тех, кто не умеет матплотлиб использовать. примерно такую же, как из скаттерплотов близко расположены близкие по свойствам объекты иногда видно кластера если кластеров нет -- то это тоже информация. seaborn -- это обёртка над matplotlib оно не для графов вообще наш товарищ принял позицию, либо eda с классическими графиками, либо искоренить и запретить. - я вижу это- а я вижу вот это- смысла нет- нет смысл естьдавайте закончим на этом не очень конструктивно. это позиция мне не понятно, поэтому не надо я ничего с ней не сделаю мне понятно и надо я знаю других людей, которым понятно и надо не буду заставлять менять мнение. а, если просто смотреть на картинку, то разумеется, это просто куча вот тут можно потыкать и там ещё ссылки на статьи о том, как это сделано на коленке. без контекста смысла нет конкретно эту я отрисовавывал потом интерактивно здесь граф рекомендаций с imdb там видно кластера индийского кино, советских фильмов про войну, отдельный огромный кусок с мультфильмами. неа можно куда-то вовне отдавать на укладку, получать назад координаты и рисовать матплотлибом или ещё чем-нибудь. я вот тут у себя постил, как оно работает. и вот недавно я узнал, что есть такая штука, как -- выглядит почти как замена gephi но очень сырая штука и именно для укладки и отрисовки там пока мало всего но зато в активной разработке. я по прежнему рекомендую gephi как самый полный и универсальный инструмент для визуализации и какого-то анализа но он заброшен уже лет 10. в gephi другой граф, но такая же укладка будет выглядеть вот так и то для этого надо сначала покрутить много крутилок зато бесплатно и много чего другого можно сделать. если вы шарите в webgl то вот вам идея для стартапа у graphistry кроме хорошей палитры по умолчанию особо никаких преимуществ нет. выглядеть может например вот так это скрин из graphistry -- коммерческая штука, которая рисует на своих серверах, потом показывает в браузере. классика -- это force-directed укладки это то, чем в большинстве случаев по умолчанию рисуют графы по сути это симуляция физики, поэтому ещё и интуитивно. поэтому про мелкие я рассказывать не буду подробно я толком ими и не занимался большими будем считать от 10 000 вершин на таких масштабах уже почти нет смысла рисовать отдельные кружочки и палочки. почти все просто не работают, или для больших графов не применимы для мелких работает почти что угодно, особенно, если вы дружите с js или какой-нибудь обёрткой на d3. иногда можно увидеть статейки вроде 60 инструментов для визуализации графов мне такие скидывали раньше оказывалось, что я пробовал почти все из них. сами статьи здесь хабр:. ну вы сами напросились. про визуализацию больших графов рассказывать?просто это будет в основном пересказ моей статьи с хабра и картинки с моего канала в телеге может надоело уже всем. давайте тут заканчивать с графами и криптой могу сказать на последок, что команды связаные с криптовалютами очень закрытые и параноидальные сидишь там и не можешь ничего рассказывать уходишь и всё равно не можешь. другая проблема именно с биткоином, что он двудольный и признаки из разных пространств у разных вершин но решение я тоже уже описывал если перейти к терминам групбаев и джоинов, то это уже не проблема. обещал говорить, о графах из блокчейна, а говорил просто о больших графах просто размеры, наверное, самая большая проблема. ещё для всего этого есть gnn, но для моих задач они не подходили сейчас могло что-то поменяться почти год прошёл ведь. у меня схема для решения задач на графах вот такая там везде могут быть нюансы, разумеется. да почти нигде глубина не нужна по моему опыту двух свёрток хватит всем. это можно увидеть в каггловских трюках для кодирования категорий, когда делают для значений категории статистики по другим признакам обратные случаи тоже есть, особенно с nlp в конкурсе на молекулы использовали трансформеры, а потом их и вовсе объявили графовыми сетками. за что я люблю графы -- это универсальность тот же node2vec -- это обобщение word2vec на графы gcn -- это обобщение cnn всякие привычные форматы данных можно представить как вырожденные формы графов, соответственно графовые подходы будут работать и в других местах. там половина инструментов реализованы и они очень шустро работают на больших графах. ещё для извлечения признаков из графов без использования нейронок у меня есть вот такой туториал. всё очень плохо это же обычное матричное умножение чуть-чуть легче от того, что матрицы смежности обычно очень разрежены а в целом для мл на графах, если у тебя сложность куб, то это ещё повезло. а ещё есть такая статья, чтобы въехать в тему издалека и понять концептуально, что происходит. граф двудольный был, поэтому там два куска разделённых пустым пространством. когда я в первый раз испробовал такой подход, получились вот что. недавно был конкурс automl на графах там было сильное ограничение по памяти вот я использовал тот подход с матричным умножением на разреженных матрицах получилось нормальненько. я писал туториал об этом. но по сути это как сделать groupby по вершинам, и взять среднее признака по соседям, а потом вычесть значение признака в вершине поэтому можно всё перевести в термины табличных операций и вытворять уже что угодно. если делать это прямо по науке, то будет примерно так:получаем нормализованный лапласиан матрицы смежности:s = sparsecsgraphlaplacian(adj, normed=true)shape1 = featsshape[1]умножаем матрицу признаков слева на лапласианconv1 = s @ feats[:, -shape1:]. а нелинейностей можно добавить, если поверх учить нелинейную модель. в общем, есть такая статья: учат, что можно просто агрегировать информацию по соседям вершины, и это будет в общем-то однослойной gcn. но можно обойтись и без gnn я сейчас прямо противоположные вещи начну говорить относительно того, что рассказывал сергей две недели назад. конечно, вы мне скажете я читал статьи, там пишут что надо graphsage использовать не знаю, как сейчас дела обстоят, но я пробовал ещё до pytorch geometric, и референсная имплементация, конечно чему-то училась, но ничего не выучила. а взять кусок нельзя, потому что большинство gnn устроены так, что надо учить на графе целиком, так как на входе матрица смежности должна быть другой кусок будет из другого пространства уже. какая бы задача ни стояла, нужно сначала из графа вытащить признаки gnn делают это на ходу, как и любые другие нейронки но с большими графами не прокатит просто не влезут. но если у вас есть конкретная понятная задача для большого графа, которую надо делать быстро и часто, то придётся писать свой инструмент. ещё сэкономлю вам время при выборе графовой бд только neo4j не смотрите на эти графики с бенчмарками это единственная графовая бд, которую можно поднять без команды девопсов, наполнить данными и потом использовать. шаг 1: найдите очень мощную машину, у которой как минимум 64 гб озу, а лучше 256 гб нет ни одного универсального инструмента, чтобы работать с графами распределённо или батчами. давайте теперь про огромные графы и что с ними делать вот как выглядит, например, уже граф кластеров в биткоине. а ещё есть единственный наверное публичный датасет на каггле по этой теме, и мой коллега его деанонил когда-то вот статья на хабре поковырять самостоятельно и увидеть на что это похоже. если хотите ещё подробнее, то вот можно почитать статейки клейна вот над этой ещё я работал дальше давайте я больше расскажу про большие графы и как с ними работать. шифропанки считают, что это прямо то, что надо, но там можно устроить sibyl attack чаще там просто недостаточно участников, чтобы надёжно что-то скрытьещё это очень дорого, потому что нужно провести много транзакций. но есть ещё coinjoin это когда вы с другими чуваками подписываете входы одной транзакции, будто вы один и тот же владелец средств. 1 ими пользуются только жулики и на выходе вы получите деньги жуликов, которые никто не примет, тк они уже помечены большинством платформ как грязные2 неизвестно, кто держит такой сервис некому будет предъявить, если они просто заберут деньги. голосование идёт почти 50/50 ну что ж, про миксеры я ответил в другом твите уже в двух словах -- эта такая штука, которая должна запутывать следы, усложняя цепочку транзакций и разрывая прямой путь между входом и выходом проблем с ними несколько. вы любите зефир в шоколаде?. грязные -- значит больше всего на входе у миксеров всяких воров, наркоторговцев и других жуликов заведения обращаются к специальным компаниям, которые предоставляют такие оценки как сервис это не всегда в реальном времени происходит. ждал этого вопроса работают очень плохо в хорошем миксере на выходе у вас будут просто ещё более грязные деньги и приличные заведения их не примут а если поток на миксер не большой, то можно будет ещё и сопоставить вход с выходом. предварительно, мораль такая: 1 биткоин не анонимен2 адреса лучше не смешивать. я могу углубиться в детали дальше, и рассказать про миксеры, например, или могу переключиться на то, как справляться с гигантскими графами. вот с этим ещё более заморочно потому что с механикой кошельков тут почти невозможно бороться, и нужно разрывать цепочки дополнительными ложными транзакциями это снова дорого. utxo -- это просто выход с транзакции можно сравнить с монетой с номиналом выхода на входе в транзакцию он исчезает, на выходе появляется новый набор таких utxo так вот когда на выходе два адреса, то один скорее всего получатель, а другой -- исходный владелец. 2 one time change heuristic в примере у нас была сдача 005 btc так уж устроен блокчейн биткоина, что нельзя потратить баланс частично на самом деле атомарная единица в биткоине -- это utxo: unspent transaction output она двигается только целиком. что делать с этим тоже очевидно, но очень заморочно просто не пользоваться адресами одновременно делать действия с ними отдельными транзакциями это дорого по времени, и дорого, потому что комиссия но это такая криптогигиена. ну и ясный пень, кто увидит эту транзакцию, может сказать окей, вот эти два адреса должны быть подписаны одновременно их приватными ключами при создании транзакции -- должно быть у них один владелец и оп-па, мы уже немного кластеризовали блокчейн. 1 common spending heuristic если у вас есть адреса на которых допустим 01 btc и 02 btc, а вам надо отправить, скажем, 025, то ваш кошелёк скорее всего сделает транзакцию где на входе эти оба адреса, а на выходе два новых 025 для получателя и 005 (минус коммисия) сдача. а дальше нужно уже лезть в детали, как устроен блокчейн и что делают kyc aml конторы разумеется, я не расскажу всех секретов, иначе меня в лес увезут, но есть две базовые вещи, которые легко узнать и без меня. но избежать деанонимизации всё-таки можно во-первых, если у вас сумма меньше 1 биткоина, то вы неуловимый джо и никто вас искать не будет скорее всего. это называется псевдонимность где-то видел сравнение, что это как ходить в маске, но с прозрачными карманами. как отмывать биткоиныкликбейтный заголовок, очевидно на моей предыдущей работе мы пилили систему кластеризации блокчейна, чтобы всякие ребята не боялись влететь на проблемы из-за своих клиентов биткоин, надеюсь многие знают, вообще не анонимен. что касается самой конторы, то именно ds команда пока работает полностью в формате стартапа каждый сам себе one-man-army и пилит свою большую задачу в clain я тоже был как первый наёмный сотрудник и пилил там в одиночку много чего сейчас немного расскажу о той области. про свои дела в самокате пока мало что могу сказать, так как не так давно начал у меня там самописная моделька в ядре которой numpyrandom и всё это вместе чем-то похоже на многоруких бандитов и байесовскую цепь одновременно когда-нибудь будет саксесс стори или наоборот. про карьеру расскажу в обратном порядке, потому что если начну с заводов в омске, будет вообще не понятно причём здесь data science. 7 ods ml4sg, манаджемент8 real world adversarial attacks9 датавиз10 треш-байки с собеседований и заводов11 свободная тема, общение. не по дням, а по порядку в двух частях:1 малян о себе, самокат, clain2 как отмывать биткоины3 графы: что с ними вообще делать4 графы: визуализация5 кластеризация, как заэмбеддить что угодно6 старомодное nlp. кто я такой:сейчас data scientist в самокате делаю там эксперименты на живых людях до этого кластеризовал блокчейн биткоина в clain ещё менеджерю ml4sg проект про визуализацию новостей остальное по ходу расскажу план ниже:. приветики меня зовут святослав ковалёв на этой неделе я твиттором командую. the question. # на связи через неделю пройдет вебинар от сообщества women in tech ”demystifying data science”цель мероприятия показать, что ds – это не какие-то чудеса, а ремесло, которое можно изучить и совершенствовать 🔥 регистрация: (free, en 🇬🇧). надо переезжать в гренобль! там как раз офис есть. с 9 утра до 9 вечера. в испании не так много работы для технарей там все больше стартапов, амазон открыл свой офис, но пока рынок не настолько большой как в париже или лондоне зарплаты в барсе ниже. спасибо всем, кто читал я старался быть честным с вами был сергей иванов подписывайтесь ко мне на канал или твитер. если паспорт другой нормальной страны для вас важно, то франция не такой плохо вариант однако, в любом случае, помните, что всегда можно вернуться обратно и что с кем вы дружите и общаетесь часто играют большую роль, чем то, где вы живете на этом все. и насколько я знаю это не частая история для стран например в голландии надо отказываться от русского паспорта в англии по-моему 6 или 7 лет нужно жить и это уже не ес а в швейцарии очень тяжело получить гражданство. но в отличие от них, в франции можно получить достаточно быстро гражданство, через 5 лет работы, или через 2, если после магистратуры это дает очень большое преимущество в будущем, так как можно будет работать в любой стране ес. берлин и амстердам – два отличных города для переезда, там не будут платить много денег, но бюрократии ноль, люди на английском говорят, и достаточно защищённо себя чувствуют берлин более молодежный, амстер больше для семей. часть 4 наконец как я сравниваю париж с другими городами европы мне кажется обьективно большинство русских прогеров переезжает в несколько городов европы это лондон, париж, амстер, цюрих и берлин можно сказать, что если за деньгами ехать, то лучше переезжать в лондон и цюрих. на этот счет почитайте заметку моего бывшего коллеги, который пожил в амстере, париже и сейчас в лондоне в конце концов, если хочется хорошего баланса между работой и жизнью франция это хороший вариант. к нему каждый день выстраивается очередь, чтобы поговорить с ним и помочь ему у большинства французов есть свой любимый мясник, мороженщик, пекарь, продавец фруктов и так далее. во время карантина, всем пострадавшим выплачивали дополнительно деньги в аптеках у меня бесплатно таблетки, врачи тоже бесплатно отношения к бездомным это небо и земля по сравнению с россией у нас недалеко от дома, есть бездомный, который спокойно живет и никого не трогает. помимо этого, франция это страна победившего социализмаздесь все зарабатывают примерно одинаково если ты не работаешь, тебе платят хорошее пособие и убирают налоги с тебя если твой бизнес ничего не зарабатывают, то с тебя тоже ничего не берут. у нас в городе выпускают газетку, где пишут всех людей, кто родился и умер за последние три месяца выглядит она так видно, что большинство людей умирает в 85-90 лет в россии мне кажется эта цифра лет на 20 меньше. я только через год понял, что у меня нет этого раздражающего фактора как в москве, когда я добрался до работы и меня уже что-то разозлило все это ведет к долголетию и более счастливой жизни. часть 3 что мне нравится в франции как ни крути, здесь обьективно лучше качество жизни, чем в россии безопаснее еда намного свежее постоянное солнце жизнь более спокойная. во-первых часы работы обычно с 9 до 9 в воскресенье и по праздникам все закрыто так еще в эти часы работы они не особо любят напрягаться, переносят встречи, треплятся с коллегами, пьют кофе и тд. так как английский они плохо знают, если ты с ним говоришь на английском, у них ощущение, что ты – небожитель, наверное американец, и с тобой надо особенно хорошо вести себя последнее, что меня здесь расстраивает, это общая нелюбовь французов работать. это как, если бы в россии с какой-нибудь бабушкой говорили на ломанном русском, она наверное бы подумала, что человек приехал из средней азии и относилась к нему соответствующе также и в франции, они думают, что ты какой-то мигрант, который еще покушается на блага франции. более того, я и многие другие заметили, что французы больше тебя уважают, если ты с ними на английском говоришь, а не на ломанном французском. например, мои агенты по жилью принципиально не говорят по-английски и поэтому все проблемы по дому приходится решать с помощью заранее подготовленного текста. вообще префектура это самое худшее место в франции, избегайте ее как можно дольше во-вторых , сильное желание говорить французов на французском как и в россии, здесь на английском говорят далеко не все и это создает массу проблем, когда не знаешь французского. например, у французов есть возможность поменять русские водительские права на французские в течение первого года это реально сделать, но это заставляет тебя идти в префектуру, где к тебе относятся как к проклятому мигранту. для себя я сформулировал, что мне нравится сама франция, но не процессы внутри нее что мне не нравится во-первых, жуткая бюрократия чтобы решить простое дело надо брать рандеву на два месяца вперед, чтобы узнать, что одной бумажки не хватает. часть 2 теперь про францию в частности я здесь живу больше двух лет и у меня отношение меняется по затухающей синусойде мне то здесь очень нравится, то не очень буквально полгода назад, я думал как тут можно жить, а сейчас мне кажется, что здесь лучшая жизнь на планете. с другой стороны, когда я был без семьи, мне вообще было фиолетово на любого рода проблемы, включая переезд поэтому сильно тоже не пугайтесь. даже, если ты переезжаешь в русскоязычную страну это будет страна со своей историей и своим подходом к решению проблем, который нельзя будет изменить, а можно лишь к нему привыкнуть. потом второе, что нужно понимать, что сам переезд это стресс даже из одной квартиры в другую переехать это стресс, а тут в другую страну -- это стресс в квадрате и наконец, в какую бы страну ты не переехал, ты переезжаешь в другую культуру. и наоборот, чем больше у тебя семья, тем сложнее переехать об этом стоит понимать, так как даже если тебе будет все нравиться в твоей будущей стране, твоему мужу/жене/детям не так сильно будет нравиться, и для них это будет жертва. приходится спрашивать, напоминать о себе, разговаривать с разными людьми, и тд то есть должно очень этого хотеться самый лучший переезд, как мне кажется, это в молодости, когда еще нет сильной привязки к родне и родине. и вот в какой-то момент выпал шанс переехать в францию начну с того, что обычно за шанс надо бороться, те редко бывает такое, что тебе говорят, сереж давай ты переедешь к нам в париж. часть 1 завершим неделю разговорами про переезд и жизнь в франции я начинал неделю с того, что хотел переехать в сша позднее оказалось, что в сша не так уж замечательно по ряду причин в гонконге даже как-то более душевно было, но жить там постоянно мне тоже не хотелось бы. вот такой явный плагиат редко часто бывают случаи, когда код не выкладывают, а потом результаты не сходятся. про реальные цифры, которые я слышал это от 160к до 500к тотал компенсейшн от 3го до 6го левела вот здесь достаточно свежая инфа по зарплате и расходам в силиконовой долине но не в деньгах счастье а в чем поговорим в следующий раз. правда там нет этой семейной налоговой фишки, как в франции про цюрих те же зарплаты слышал наконец, можно поехать в сша, там зарплаты сильно больше, но и чтобы поддерживать то же качество жизни, что в европе, придется платить сильно больше. или, если увольняют, то 6 месяцев выплачивают пособие по безработице в 60% от твоей годовой зарплаты однако, если переезжать в европу с целью денег, то это лучше в лондон или цюрих в лондоне в дипмайнде/гугле/фб платят в районе 100-150 база + 100-150 акциями. тут надо понимать, что из твоей зарплаты сначала вычитается 20% на социальные выплаты, но в отличие от россии, здесь социальные выплаты реально работают на тебя скажем у меня бесплатные лекарства в аптеке. при этом в франции налоги учитывают есть ли у тебя семья или нет например, у меня для семьи с одним ребенком коэффициент 25 в итоге подоходный налог на следующий год у меня 5%, в отличие от русского в 13%. в россии из того, что я слышал, зарплаты для рисерч сайентиста будут варьироваться от 100 до 450к в месяц больше, только по менеджерской линии в франции зарплаты от 60 до 100к в год, это примерно 35 до 6к чистыми в месяц. поэтому лучше делать стажировки во время phd во-вторых в хорошей компании у тебя больше бенефитов: зарплата больше, офис лучше, о тебе заботятся больше говоря про зарплаты, нужно упоминать страну, в которой ты работаешь. индустрия привела меня в чувство и я начал больше понимать и про задачи, и вообще про то как работу работать на phd максимум ты будешь набираться опыта от себе подобных. я помню, когда я был первый год phd я вообще не понимал над какими проблемами стоит работать мне казалось, что можно любую проблему выдумать и решать ее, а как ее применять, люди потом придумают. слайды можно здесь посмотреть сравнивать индустрию с академией, то у индустрии есть несколько плюсов во-первых, ты работаешь над реальными проектами, которые помогают компании. с логами в академии сложновато, они большие и недоступны, поэтому есть среды типа recogym, которые эмулируют поведение пользователей на рекламу у критео был курс на рексисе в прошлом году про modern recommender system, если возьмут в этом году то будет еще одна итерация онлайн. а датасеты нужны про то, что если ты покажешь вот эту рекомендацию, она будет лучше, чем другая рекомендация, то есть нужен как минимум recommendation log. то есть мне нравится интерстеллар и мне также понравится одиссея 2001, но сегодня вечером я хочу посмотреть джейсона борна и вот большая часть датасетов (всякие там movielens) как раз заточена под cf подход. при этом cf вообще говоря решает не ту задачу, которую нужно нужно решать задачу, какой продукт юзер дальше купит или кликнет, а cf решает задачу, вам понравился этот продукт вам может понравится вот этот продукт. рекомендательные системы вообще говоря активно развиваются уже лет 20, но при этом прорывов каких-то не было, люди делают collaborative filtering (cf) или какие-то нейронки, и меряют потом precision/recall и аб-тестируют. из главных направлений в исследованиях это рекомендации, аукционы и классификация я был больше всего погружен в рекомендации с рекомендациями происходит интересная трансформация сейчас. в r&amp;d сейчас работает больше 500 человек, из которых 90 приходится на criteo ai lab (cail), в которой я нахожусь в cail есть ml engineers, есть просто se, а есть research scientist в целом организация похожа на тот же гугл, дипмайнд или фейсбук. у критео 31 офис по всему миру, я начинал работать в москве, у них офис на белке, напротив авито два года назад переехал в париж, где у них базируется headquaer и в том числе сидит большая часть r&amp;d. это ретаргентинг, когда пользователям показывается реклама с продуктами, которые они наиболее вероятно купят и мы можем оптимизировать под разные целевые метрики, типа средняя корзина или маржа. критео появилось в 2008 году, это один из немногих успешных европейских стартапов, вышедший в свое время на ipo, и до сих пор являющийся лидером по так называемому performance marketing. сегодня поговорим про индустрию, про критео, как устроена работа research scientist и какие у кого зарплаты. unroll. unroll. unroll. unroll. в следующий раз поговорим про работу и индустрию, не обойдется и без зарплат ну а завершим неделю обсуждением переезда. tommi jaakkola (mit), stephan günnemann (tum) еще я собрал список разных чуваков из индустрии и университетов, кто занимается graph machine learning ( ну и как обычно, если у вас есть вопросы как начать или куда идти, дайте мне знать. если говорить по группам, то вот список ребят, кто занимается графами в той или иной степени jure leskovec (stanford), le song (georgia tech), karsten borgwardt (eth), philip s yu (uic), michael bronstein (ucl), christos faloutsos (cmu), joan bruna (nyu), jian tang (mila). во-вторых лучше сразу начинать практиковаться с гнн, начните c pytorch-geometric ( или с deep graph library ( можете пройти курс, например от стенфорда или от лекуна (. напоследок, если вы планируете заниматься наукой по графам, то начните с обзоров по graph neural networks, это сейчас хот тема, хоть и не одна вот здесь я привел все ссылки на учебную литературу по gnn (. но потом узнали об этом и отклонили ее авторы не стали расстраиваться и переподали ее на icml ее опять приняли и опять узнали и отклонили в общем ждем, когда ее примут на нипс вот эта работа сплагиачена отсюда. потому что быть умным сложнее кто-то иногда читит, особенно, когда не выкладывает код но все-таки читить уж совсем плохо мне кстати про читинг рассказали совсем на днях историю что на текущий colt 2020 приняли статью, которая была плагиатом. хочется вспомнить один момент из фильма margin call are three ways to make a living in this business: be first, be smaer, or cheat вот это то как можно сделать научную публикацию на западе, да и вообще везде, стараются быть первыми. так например есть graph attention network из-за трансформера, netgan из-за гана, optimal transpo gnn из-за optimal transpo это то как работают ученые на западе, где очень большое давление публиковаться быстро и не особо думать насколько это полезно людям. наконец последний, самый простой способ написать научную статью по графам это узнать о каком-то подходе в одной области (например в nlp) и применить это к графам. в общем, если вы видите настоящую проблему и там есть взаимодействие между обьектами, подумайте нельзя ли применить графы к ним. дальше, если вам хочется быть ближе к реальности, то можно заняться применением графов к каким-то необычным проблемам например я не видел, как графы используются к музыке или аудио, или можно ли получить какие то прорывы в лингвистике. чтобы посмотреть на открытые, простые проблемы математики можете посмотреть вот этот тред на mathoverflow ( или вот этот список открытых проблем. на википедии есть прямо целый раздел про любителей математиков ( почитайте, если хотите тоже стать великим. а в 1975 году домохозяйка, мать пятерых детей, марджори райс ( нашла новые способы замощения плоскости, которые считались невозможными до этого. в теории графов постоянно случались такие случаи, когда непрофессиональные математики доказывали долгостоящие теоремы например два года назад геронтолог сделал прорыв в одной из задач по раскраске графов (. для опровержения гипотезы нужно ли найти два таких разных графа, у которых одинаковые урезанные графы и тем не менее проблема стоит с начала 30х годов если вам кажется, что вы точно не решите никогда такую задачу, то не торопитесь. вопрос состоит в том, что если тебе дается n таких урезанных графов, которые получились при удалении каждой вершины из оригинального, можно ли по ним как-то восстановить оригинальный граф формулировка крайне простая. например, есть такая задачка на графах kelly conjecture ( нам дается граф, мы удаляем одну вершину из него, получаем такой урезанный граф. мы про это написали обзор, можете почитать ( вторая область, которая меня увлекает это доказательство всяких математических теорем с помощью умного перебора. например в branch-and-bound подходе на каждом шаге нужно выбирать узел в дереве, на котором бренчиться выбирая правильно узел можно сильно сократить высоту дерева и улучшить время работы алгоритма таким образом. идея состоит в том, чтобы научить агента строить решение для таких задач без лейблов или, что более перспективно, взять текущие солверы и попробовать улучшить эвристики в этих солверах. чтобы было интересно пока непонятно одно из направлений, которое в последнее время достаточно активно развивается это reinforcement learning для комбинаторной оптимизации есть np сложные задачи, например traveling salesman problem или min veex cover или какие еще. собственно это как раз задача научрука переварить какую-то область и выдавать нагора идеи для рисерча я давно хочу написать пост про открытые проблемы, но это не так просто, так как некоторые проблемы не очень сложные, а некоторые фундаментальные и как их обьединить. часть 2 теперь поговорим про открытые проблемы, как вкатиться и какие группы работают над граф мл в эти дни одна из причин почему сложно начинать заниматься наукой это то, что нужно довольно много знать про область, чтобы знать какие проблемы вообще стоит решать. поэтому статей по графам сейчас на конференциях очень большое, от 5% до 30% на топовых конференциях ( и и кажется это будет продолжать только расти, чему нельзя не радоваться. в каком то смысле это более общий трансформер, где линки у нас находятся не между всеми обьектами, а только между релевантными ( так что наверное графы скорее нужны, чем нет, и мл комюнити все больше и больше про это узнает. но если отношения также играют роль, то моделировать задачу с помощью графов будет наиболее правильно более того, с помощью графов мы можем понимать как влияет один обьект на другой. по сути единственное, чем граф отличается от набора точек, это только тем, что он задает бинарные отношения между точками если точки сами по себе несут в себе большое количество информации, то графы не нужны. в какой-то момент я пришел к простой мысли, что графы релевантны там, где есть отношения между обьектами и эти отношения влияют на наши предсказания например, если на картинке несколько обьектов и нам надо понять, что стоит за тем стулом, то без графов тут тяжело обойтись. то есть какой-никакой прогресс эта область граф мл в последнее время получила я до сих пор много думаю на тему того, какие приложения для графов могут быть релевантными. подробнее, можно посмотреть видео здесь как это делается с гнн ( там много всяких физических штук, которые предсказываются с гнн. с левой стороны это как реально выглядит динамика, с правой как она предсказывается с помощью gnn, когда каждый атом представляется в виде узла в графе и мы пытаемся предсказать скорость и направление частицы на каждом шаге. наконец самое по-моему впечатляющее это предсказание динамики физики реальных обьектов (. или говорят в квантовой химии графы очень хорошо заходят, где задача предсказывать число для каждой молекулы, которая соответствует какому-то свойству, которое тяжело получить в лабораторных условиях (. соц-сеть анализирует тренируется на графе, чтобы выдавать тебе отранжированные рекомендации, с кем тем нужно зафоловиться. помимо этого можно представлять разные обьекты как граф и потом пытаться предсказывать что-то на графах например, самый популярный пример это предсказание связей у тебя есть соц-сеть, ты пытаешься найти еще друзей. первая это scene graph generation ( то есть фактически это распознавание образов и их отношения на картинке второе это сопоставление одних объектов на разных картинках (. может быть если натренировать gpt-3 на википедии, она тоже сможет отвечать на вопросы на такие вопросы для cv графы используются для нескольких вещей. тут не надо софтаксом ничего предсказывать надо знать вот, вроде как, подход с графами здесь уместен, но я не видел сравнений или доказательств, что подход 1, те на вероятностной модели не будет работать. первый мы строим вероятностную модель, которая софтмаксом выдает вероятности и мы аргмаксом выбираем тот или иной ответ второй, мы признаем, что на некоторые вопросы, есть точный ответ и он один такой вопрос на знание типа когда родился лекун. про графы знаний сейчас кстати много статей и можете почитать блог посты михаила галкина ( чтобы разобраться, что уже с ними делают в nlp так вот непонятно насколько тут нужны графы вообще то есть у нас есть два подхода к рекомендациям. можно построить граф знаний между такими обьектами (например на википедии), потом парсить текст, и потом искать соответствующие узлы в этом графе и выдавать ответ. например я спрашиваю, в каком году родился автор этой песни тут по идее два запроса, первый определить автора этой песни и второй год рождения автора. несмотря на то, что графы нашли свое применение в разных областях типа cv или nlp, пока непонятно какая киллер фича графов, те можно ли обойтись без графов и при этом получать примерно те же результаты ну например, графы знаний используются в nlp для построения чат ботов. в этой ветке поговорим продолжим говорить про графы, зачем нужны, какие открытые проблемы, и кто над ними работает часть 1 в следующем посту я расскажу про работа в критео. что за подкаст?. эх, не дорос я еще до подкастов). хорошо, надеюсь смогу помочь я планирую побольше ивентов смастерить в этом году в россии по графам надеюсь на datafest ods получится организовать секцию может быть рождественскую елку еще так что будет возможность еще пообщаться. в следующий раз поговорим еще чуть-чуть про науку или побольше поговорим про мою работу и компанию criteo, которая занимается рекомендациями. для начала можно почитать обзоры или тезисы у меня на канале есть и про то ( и про другое ( ну а если есть желание начать писать статьи в этой области, то дайте мне знать, может быть я смогу помочь. графов комюнити большое, но обозримое, я бы сказал, что есть 10-20 групп, кто активно работает над графами, и еще многие once in a while как мне кажется вкатиться в gnn достаточно просто, особенно если знаешь cnn это по сути одна и та же хрень. например, можем ли мы скормить кратчайшие пути в графе на вход нейронке, чтобы она в будущем могла на новых графах сама искать кратчайшие пути для дайкстры да, но для других более сложных алгоритмов еще непонятно и это открытая область для исследований. сейчас я занимаюсь скорее изучением gnn, как мы можем применять нейронки на графах, чтобы они учили какие-то таргеты или имитировали алгоритмы. то что мы делали это придумывали такие эмбединги, которые сохраняют изоморфизм графов, те если тебе дается два эмбединга графа и они равны между собой, то мы можем сказать, что графы изоморфны друг другу. дальше я двинул в сторону представления графов, то есть representation learning on graphs aka graph embeddings. …maximization problem, которая про то, каких людей нужно подкупить в социальной сети, чтобы получить вирусный эффект от рекламы это интересная задачка, но как мне кажется тест времени не прошла, люди в итоге не пользуются результатами для вирусного маркетинга. часть 2 теперь про меня мои научные работы можно посмотреть здесь в целом мне интересно все про графы, их применения к реальным задачам, теоретические аспекты, комбинаторные задачки, rl на графах и тд начинал я с комбинаторной задачки influence…. это уже видно по курсам, которые включают в себя топики gml например в текущем курса лекуна есть отдельная секция про это: в общем если вы собираетесь думаете, чем заниматься на phd, это прямо очень перспективная область с кучей открытых вопросов. или нам нужно чат боту выдавать рекомендации на основе сложных фактологических запросов в общем много уже поставили вопросов, еще больше предложат в ближайшие 10 лет у меня bias, но я думаю gml займет свое почетное место среди computer vision и nlp. например, задача какая может быть, дается социальная сеть и нам ее кластеризовать нужно или нам дается молекула и нам надо предсказать валентность каждого атома или нам дается картинка и нам нужно определить взаимодействие обьектов на этой картинке. он занимается тем, что решает практические задачи на графах, с помощью мл типа нам дается граф и какие-то лейблы, а мы пытаемся предсказать новые лейблы тут очень много задач и эта область сейчас супер-мега активно развивается. вот эта наука активно развивалась с 90х до 2010х, и мне кажется сейчас она уже непопулярна, потому что не особо нужна на практике и дальше есть третий виток в науке о графах, связанных с мл я называю его graph machine learning (gml). дальше люди напридумывали таких моделей кучу, стараясь делать их все более и более реалистичными известные сейчас барабзи-альберт и вотс-строгатц модели, но есть прямо целый книжки про это то же красивая математика, правда скорее про статистику и теорию вероятностей. например, в erdos-renyi модели, всего два параметра, количество узлов и количество ребер дальше задается случайный процесс (поведение, процедура), который генерит тебе граф с таким количество вершин и ребер. с точки зрения мл это наука изучает генеративные модели графов, те как можно генерировать разные графы с заданными свойствами идея такая, что хочется описать модель генерации графов как можно меньшим числом параметров, но при этом, чтобы графы получались правдоподобными. это очень популярно до сих пор, математики выпускают примерно по 100 работ каждый месяц по теории графов дальше, начиная с работ эрдоса и рений началась новая ветка изучения графов, а именно network science. вот как раз классифицировать все графы позволяет теория групп вот вся наука о графах до середины 20го века, она как раз занималась применением теории групп к графам я это называю теорией графов. понятно, что 2^m, где m – количество пар вершин, те m = (n 2) = 45 то есть всего 2^45=3*10^13, много но при этом многие графы являются одинаковыми по своей сущности, те изоморфными таких графов будет намного меньше, а именно 274668 = 2*10^5 (. сейчас теория групп фактически единственный инструмент для изучения математики графов неформально теория групп занимается классификацией объектов например, у тебя есть граф на 10 вершинах, какое вообще количество графов может быть?. он умер в 20 лет на дуэли, несколько раз не мог поступить в университет, пуассон и фурье писали, что он идиот, но он фактически доказал, что полиномиальные уравнения выше 5й степени не разрешимы в радикалах и разработал теорию полей. сегодня поговорим про мою науку часть 1 я занимаюсь графами графы появились благодаря эйлеру, когда он изучал кенигсбергские мосты ( параллельно галуа разрабатывал теорию групп вообще про галуа стоит отдельно почитать. да, в твитере приходится писать кликбейтные заголовки, иначе никто не заметит. захотелось покритиковать, на ночь глядя, наше графовое комюнити идея в том, что люди, чтобы опубликоваться делают теорию, которая не имеет никакого отношения к практике как результат практические результаты стоят на месте. как я писал для многих компаний это обязательно для позиции research scientist. в следующем посту я расскажу больше про свою науку, что я делаю с графами, куда это область движется и кому все это нужно. профессором тоже невозможно стать без phd все остальные плюшки phd (eg тусовка, хорошие зарплаты, уважение и тд) сомнительны и находятся другие, более простые способы их получить. как мне кажется phd сейчас нужно только, если ты хочешь быть research scientist в компании или стать профессором в гугл/фб действительно не берут без phd на rs (но берут на re). если все получится хорошо и ты напишешь несколько статей первым автором, то уже можно сказать, что ты сможешь в будущем писать статьи самостоятельно и в этом и есть финальная цель phd: сделать из тебя самостоятельного рисерчера. в интернете есть куча советов про phd советую недавний пост от рудера, который в конце собирает ссылки на другие гайды для phd. и вот для молодых рисерчеров важно понимать как им добиваться того, чтобы статью приняли: как строить графики, как подсвечивать результаты, как акцентировать внимание на сильных результатах. на текущий icml есть статьи, которые были написаны в 2017 я знаю людей, которые 10 лет не могут добиться акцепта статьи. студенту важно понимать не только сколько статей надо сделать во время phd (минимально 3), но и какой обьем работы для этого следует например для моей icml статьи потребовался один год и мне повезло, что результаты были удачными. вот презентация, которую делает один профессор в гонконгском университете для фрешменов. хорошие научруки не только дают направление по науке куда двигаться, но и советы вообще как нужно быть phd студентом мне кажется профессора часто этого не делают или делают это минимально. они учились хорошо в школе, потом в университете, потом в магистратуре, и почему бы не продолжить это на phd проблема в том, что phd это не то обучение, что до этого, потому что курсы нужны, но не важны важно научиться публиковать статьи, а это какой-то индивидуальный процесс. часть 2 теперь про мотивацию идти делать phd я думаю, что для большинства студентов основная мотивация, это то, что они не знают куда еще идти после универа. вообще для меня нет особой разницы между phd и кандидатом я не видел, чтобы компании докапывались как правило пишешь phd в cv, а там если будут проверять, то уже обьясняешь. я уверен, что если бы я подошел к научруку и спросил можно ли я пойду работать еще full-time, то он бы мне отказал, но по жизни иногда лучше просить прощения, чем разрешения, и в этой ситуации это сработало конец части 1. так как я уже работал и мне удавалось это со скрипом совмещать, то решили оставить такой процесс. так например ветров покинул сколтех вообще это специфика сколтеха (и не только), что профессора часто уходят, студенты немного страдают от этого мой ушел, через полгода мне предложили нового, бурнаева. потом мой научрук решил уйти из сколтеха и переехать в другую страну это был год 2016, в сколтехе тогда началось перестроение пришли новые начальники с новыми правилами многие прежние обещания перестали выполняться, соответственно профессора решили уйти из сколтеха. идея была заработать денег на перелет и первое время к октябрю мне предложили работу в критео, как дата сайентист параллельно я был заенролен на phd программу сколтеха, где я просто продолжал работать с своим научруком. наверное большим отличием моего phd от других было то, что я параллельно все это время работал так получилось случайно, но глядя назад я скорее рад, что мне получилось это совмещать как я описывал раньше, я сначала перенес свой переезд в торонто на полгода. ко мне приезжал майкл бронштейн ( и метью блашко ( защита открыта для всех желающих и ее записывают, мою можно посмотреть здесь. …computer science на самой защите присутствуют 5 членов комиссии, три из сколтеха и два извне россии. …набрать какое-от количество кредитов к окончанию phd лучше закрывать все кредиты в начале обучения, чтобы потом было много времени заниматься phd в конце этих 4х лет, тебе назначают несколько предзащит по твоим научным работам, и квалификационный экзамен, типа по всему…. но есть курсы по твоей специализации, которые ты сам выбираешь при чем эти курсы не привязаны к твоей конкретной специализации, и например можно взять какой-то курс у биологов или физиков посмотреть каталог курсов в сколтехе можно здесь: главное…. во-первых у тебя нормальная стипендия, на которую можно либо квартиру на окраине снимать, либо комнату получше во-вторых, процесс получения phd подразумевает из себя выбор курсов все равно есть курсы типа философии и английского, которые нужно закрыть, но они легко закрываются. если ты проучился 4 года, а у тебя статей еще нет, то ты получишь свой диплом об окончании аспирантуры, но phd не получишь в сколтехе по сравнению с другими вузами в россии есть несколько преимуществ. собственно низкие зарплаты и невозможность постоянно работать над своими проектами (как правило это еще гранты научрука) это то почему я считаю phd в америке легкой формой рабства в сколтехе phd 4 года, это то сколько тебе будут платить стипендию. у нас в критео есть несколько таких студентов, у фейсбука есть, и много где еще называется cifre в сша и канаде время phd может варьироваться от студента к студенту в среднем то, что я слышал, это 6 лет, но некоторые делают и по 10. сегодня расскажу про phd как оно проходило у меня и нужно ли оно часть 1 в разных университетах, а скорее странах, phd выглядит по-разному в франции например phd делается 3 года всего при этом очень распространенно, когда phd работает половину времени в компании. о том стоит ли идти на phd, какие полезные советы, а какие нет, и что делать после, расскажу в следующем посту. впрочем, чтобы заниматься рисерчем нынче необязательно быть research scientist, есть еще research engineer aka ml engineer, software engineer, и конечно дата сайентисты, но у них немного другие роли. в дипмайнд такого критерия нет, но там процесс интервью состоит из 2 тестов на статистику+мл+cs + 2 manager interview + 5 onsite interviews такое пройти не просто и наверное если у тебя нет хирша 10, то тяжело будет пройти его. вообще, чтобы стать research scientist в гугле надо примерно иметь хирш в районе 10 и в районе 300 цитирований суммарно, мне так рекрутеры говорили но можно и найти шорткаты, типа, чтобы тебя кто-то важный порекомендовал. делаем phd, надо опубликоваться как минимум пару раз в топовых конференциях типа icml, и иметь 5-10 публикаций в сумме за свое phd помимо этого делать летние стажировки в гуглах по окончании таких выпускающихся студентов обычно легко берут в индустрию, того же гугла. оптимальный путь для человека, который хочет и много публиковаться, и хорошо жить, выглядит следующим образом. поэтому перейти из одной компании в другую для research scientist гораздо сложнее, чем для software engineer: компаний, которому нужен твой узкоспециализированный рисерч, не так много. применимость этого рисерча для реальных задач необязательна в индустрии все зависит от компании большинство компаний имеют области исследований, например рекомендательные системы или reinforcement learning, и они публикуются только по ним. для phd студента важно научиться хоть что-то опубликовать понять как придумывать идеи, как их реализовывать, и самое главное как писать так, чтобы твою работу приняли о чем писать научные работы обычно зависит от заинтересованности студента и его научрука в конкретном топике. зарплата не сильно отличается от phd студента, при этом ты уже не студент (и лишаешься всех соответствующих благ) и тебе 30, а твои сверстники уже 6й левел в фейсбуке получают и думают, где дом покупать на юге франции и для каждой градации в универе свое отношение к рисерчу. профессор обычно имеет свою градацию типа assistant professor, associate professor, full professor хуже условий для phd есть только условия для постдока. градации в компаниях у research scientist практически нет (есть левелы, но по сути все делают одно, пишут статьи) градация в университете есть и она значима: graduate student, postdoc, professor. если для вас важно, чтобы ваши идеи помогали не только конкретной компании, но и всему миру, то вам не очень захочется идти в такую компаниютеперь поговорим про разницу рисерча в университе и компании. но помимо создания новых полезных знаний для компании рисерч играет еще важную роль в создании репутации для компании например, apple практически не публикуется, все разработки патентуются и не особо выходят за пределы компании. рисерч это long-term investment компании, который в какой-то момент поможет компании придумать новый способ зарабатывать деньги из-за того, что люди долго не задерживаются в одной компании, многие начатые рисерч проекты так и не дают прямой пользы для компании. и еще длинный хвост больших компаний и стартапов, которые публикуют научные работы предпосылки делать рисерч в компании такие же, как и в университете. например, транзисторы и c++ появился в bell labs, индустриальной компании, которая впрочем фокусировалась на рисерче и науке сейчас, если посмотреть на топовую организацию, которая публикует больше всего работ, это будет гугл фейсбук с дипмайндом будут недалеко. после второй мировой войны ситуация начала меняться во-первых, из-за гонки вооружения многие научные открытия стали появляться в военных организациях во-вторых, обычные компании начали спонсировать рисерч. стать ученым было сложно и престижно, мест в университетах было мало, денег тоже, брали только самых умных и то со скрипом эйнштейн работал клерком в патентном бюро, банах проводил испытания на теле за деньги, ковалевская бегала из страны в страну. помимо этого страны, в которых была развита наука, жили лучше, чем страны, в которых ее не было но тут еще непонятно, что причина, а что следствие так вот, науку всю историю человечества вплоть до последнего десятилетия драйвили университеты. сегодня поговорим про рисерч в университете и в компании вроде как с вопросом зачем нужна наука человечеству более менее разобрались: мы пользуемся благами технического прогресса, которые без науки бы не случилось. мое альтер эго сегодня опубликовало блог пост про научные статьи на топовой конфе icml из интересного в россии яндекс опубликовал 6 статей сколтех - 3, физтех - 3 и еще есть по мелочи другие вузы. тяжело работа фулл-тайм, коррелировала первое время не очень расскажу поподробнее дальше. внутри россии котируется хорошо на западе пока сколтех еще слабо знают, но это один из вузов, который на слуху из-за публикаций на топовых конфах. сколтех получил аккредитацию, что означает, что степень phd соответствует степени кандидата наук по окончании ты получаешь диплом об окончании аспирантуры и потом диплом phd защита проходит как минимум с двумя внешними ревьюерами извне россии. 4 years later я успешно защитил phd в сколтехе, перевелся в парижский офис критео, и продолжаю заниматься графами и я расскажу про эти вещи поподробнее в следующие дни. я сначала отложил на полгода переезд, за это время устроился на работу в критео и продолжал делать рисерч в сколтехе со своим научруком, который потом сделал меня phd студентом там. в общем, я до сих пор считаю, что сделал правильное решение по сравнению с итмо, в этой ситуации я смог дожать внутри себя то, что мне хотелось, а именно не переезжать на непонятные условия куда-то ради каких-то будущих возможностей. …надо было доплатить тысяч 20, пришлось бы занимать денег, и я решил, что нахрен оно мне надо, ехать непонятно к каким людям, делать то, что им нравится, проведя следующие 6 лет в месте без возможности нормально работать, за надежду, что потом это окупится. уже на этапе ввода своих паспортных данных, было указание, что я должен проверить, что у меня необходимая виза для стыковочных аэропортов, те в нй оказалось, что в америке нельзя делать стыковку без визы, а у меня она только закончилась на следующий билет, через ирландию…. но я принял офер, отослал туда оригинал своего диплома, и готовился к переезду оставалось последнее купить билеты баланса на счету хватало ровно, чтобы купить самый дешевый билет москва-торонто, через нй. …обговаривают на этапе собеседования и бедные студенты не понимают в какую ловушку они попадают, переезжая на phd если бы я давал совет себе самому, я конечно бы отговорил себя от подачи документов на phd и предложил phd в сколтехе или в европе, где условия более человечные. в-третьих, подрабатывать во время учебы не особо было можно, да и не за тем я хотел туда ехать как оказалось, я не один такой, кто переоценивает поддержку западных вузов во время обучения, такие же истории случались у моих друзей и знакомых денежные вопросы часто не…. я был уверен, что денег на phd мне должно хватать на то, чтобы худо-бедно жить, но это совсем неправда во-первых, мне мой будущий научрук и школа отказались оплачивать перелет и визу во-вторых, стипендию начинают платить только на третий месяц учебы. выбрал последнее, оно вроде покруче и поближе к родине стипендию предложили что-то в районе 1800 канадских долларов, что на тот момент с трудом хватало на съем отдельного жилья там пока я гнался за поступлением, я легкомысленно отнесся к финансовой стороне вопроса. но что-то еще до подачи я начал чувствовать, что дело пахнет керосином, и борьбу с индусами и китайцами тяжеловато будет выиграть получилось что-то среднее во все американские вузы я не прошел, а в оба канадских прошел в итоге выбирал между ubc в ванкувере и uoft в торонто. toefl у меня был 112, gre 75 и 95 квартиль по английскому и математике рекомендации мне делал мой научрук p karras, лемпицкий, который вел у меня курсы в сколтехе, и еще один профессор из mit, у которого я тоже брал курс. я изначально думал подавать штук в 20 школ, но потом посчитав во сколько мне все это выйдет, решил сократить до минимума у меня до сих остался гугл док ( как я ранжировал разные школы подавался в итоге в 7 универов, два в канаде, 5 в сша. официальная процедура такая, в декабре во все американские и канадские вузы дедлайн на подачу заявки на следующей год в заявку входит cv, cover letter, toefl, gre и 3 recommendation letters еще каждая заявка стоит примерно 100-150 баксов. заканчивая эту ярмарку самолюбования, расскажу как я поступал на phd и что в итоге из этого вышло пока я учился в маге в сколтехе, я все время готовился к поступлению на phd в америку. как обычно в россии за счет государства они пытаются там свои деньги зарабатывать также, на грантах и endowments, но как много это составляет от общего бюджета я не знаю обязательств нет, да и неправильно это, держать людей на привязи. шад конечно серьезнее в плане подготовки кадров и поступить туда сложнее но преподаватели и вправду пересекаются и в целом сколтех это не только про конкретные курсы, но и про коммьюнити, и про инновации, стартапы и тд. а если хочется больше практики, то взять библиотеку pytroch-geometric или deep graph library и пройтись по туториалам. если вы про то как нейронки работают на графах, то у меня есть отдельный пост про это в канале если вкратце, то я бы начал с пары обзорных статей: и. сори, я расскажу про то, что я делаю чуть попозже на неделе. он смутился и перешел к другим более патриотичным студентам но в university of toronto я так и не поехал, а что сделал, расскажу в следующем посте. как итог к окончанию магистратуры у меня было две полноценные статьи, одна на sigir, другая на ieee dsaa когда дворкович вручал награду за лучший диплом, спросил, что буду делать дальше, я честно ответил, что поеду на phd в university of toronto. такие визиты вообще полезная штука для людей, которые занимаются рисерчем, так что я советую искать знакомых своего научрука в других лабах, чтобы провести там какое-то время. перед тем как поехать в mit, я также поделал рисерч два месяца в hong kong university of science and technology вот гонконг мне понравился по атмосфере больше, люди намного больше готовы с тобой общаться, ходить в походы и так далее. как результат трое за семестр наложили на себя руки, постоянные мемориалы, еще большая депрессуха было невесело из хорошего я до сих пор с ностальгией вспоминаю спортивный центр, в котором все есть и все практически бесплатно. с одной стороны там все заряжено наукой, очень сильные ребята, амбициозные и тд с другой все зациклены на учебе и нормально сделать себе друзей там тяжело помимо этого в тот момент была жуткая метель в течение нескольких недель и у многих была депрессуха. надо сказать, что побывать в mit мне в итоге получилось два раза, сначала нас всех студентов туда послали, пройти месяц так называемого innovation period потом, уже непосредственно на учебу, на семестрвпечатления от mit оказались двоякие. сколтех как оказался и стал реализацией моей мечтыиз-за тесного сотрудничества можно было поучаствовать в конкурсе и поехать в mit на один семестр я брал graduate курсы по network science, статистике и бизнес предметы от sloan school of management. в общем это было круто, следующие три месяца я забил на все и с утра до ночи, ботал английский, решал математические задачки, и готовился к интервью подготовка чересчур, но в итоге я попал в первый батч студентов в сколтехе в 2013 я бросил итмо и переехал в москву. как оказалось позже денег было много, доллар по 30, выбирали между mit и stanford стэнфорд заломил еще больше денег и в итоге выбрали mit. я был подписан на рассылку по грантам и обычно там стандартный шлак, который не подходит под мою кандидатуру а тут появилась рассылка про набор студентов в новый институт, сколтех по странному стечению обстоятельств, сколтех решили организовывать с mit. если бы мы обсуждали с психиатром почему я занимаюсь графами сейчас, наверное как первопричину можно было назвать эти курсы, потому что там было куча задач по графам и фактически это было единственное, что я знал хорошодальше мне повезло. самый крутой курс был по алгоритмам от tim roughgarden ( на курсере манера обьяснять материал и качество английского – фантастика до сих пор смотрю перед сном. в общем я понял, что далеко я не уеду с таким, поэтому я забил на все пары и начал из дома ботать программирование и английскийтогда как раз начали появляться первые онлайн курсы mooc как сейчас помню первый мук был circuits and electronics на mitx (. курсы по электротехнике проходили на оборудовании советского времени, роботы, которых они показывали на каждой презентации, они покупали в китае, преподаватели не особо интересовались зачем они читают лекции и кто на них ходит. через какое-то время я понял, что итмо на далеко ушло от сгу в плане преподавателей и обучения. видно меня настолько достал саратов, что я уже не особо интересовался как я буду жить в питере стипендию платили примерно 1500руб, на общагу уходило половина, еще были накопления в размере 100к, на которые я должен был прожить два года, до поступления на phd в америку. продолжаем про биографию в этой ветке расскажу добился ли я своей давней мечты учиться в mit обещаю рассказать про науку чуть попозжеитак 2012 год, еду в питер в магистратуру на кафедру робототехники в итмо. что приблизит меня к мечте поступления в mit в итоге решение переезда в итмо, а не в вышку было одной из ошибок в моей жизни, но об этом в следующем треде. тогда для меня это было просто три буквы, сейчас это наверное одно из самых крутых мест в россии, где можно получать образование в cs я подумал, что хотя москва круче, лучше следовать рациональному мышлению и ехать в вуз похуже, но зато тот. возвращаясь, я учился по специальности “механика”, то есть чего-то про управление понимал в итмо была кафедра по робототехнике, и я решил, что быстренько подучусь там, и через два года переду в сшапомимо итмо, я еще поступил в вышку, на фкн. решил во что бы то ни стало поступить на phd в mit наивности было запредельно но глядя назад, это даже помогло: если бы я сразу знал какой объем работы надо переделать, чтобы поступить на phd в америке, то наверное так бы и сидел в саратове. мотивация была такая есть такой чувак russ tedrake (mit) который занимается роботами сейчас это называется reinforcement learning, в те времена называлось control theory в общем я влюбился в то, что он делает и. год был 2012 и как раз начали появляться магистратуры я решил, что надо сначала сделать перевалочный пункт, где-то в москве или в питере, подучиться в маге, и потом подать на phd в сшаитак, мне 21, я закончил с отличием мех-мат сгу и поступаю в магистратуру в итмо, в питере. реальных практических навыков практически не былов то же время, к окончанию обучения я четко чувствовал, что хочу уехать из саратова, что этот город слишком мал для меня, надо валить, желательно на запад, но как туда переехать, если я даже английского толком не знал. в 2006 сгу занял первое место в мире по главной олимпиаде acm но во время обучения я не могу сказать, что я увлекался программированием и скорее считал себя чистым математиком как результат у меня были хорошие оценки по всем предметам, но. а что более важно, после сгу была полная каша в голове, как применять эти знания в реальном миревпрочем, какие-то предметы были полезные, типа матан, алгебра, диффуры, или алгоритмы интересно, что сгу один из сильнейших универов в мире по олимпиадному программированию. а в сгу, кто-то даже читал какие-то лекции 30 летней давности, написанные от руки, видно во времена собственного обучения в университете я не могу сказать, что все было ужасно, но любимых профессоров у меня было немного. что большую роль в обучении играет не название предмета, а то, кто его ведет условно, чувак из мгу понимает в каком состоянии находится его область, какие открытые проблемы, что нужно учить, а что уже устарело. надо сказать, что долгое время я считал, что мех-мат сгу не сильно отличается от мех-мата мгу те же предметы, в том же объёме 2 года матана, год функана, год тфкп, год диффгема, год сопромата и тд это так но чего я не учел. егэ тогда не было, надо было лично приехать во все университеты и сдать отдельные экзамены перечить я не стал, денег у меня своих не было, поступил в саратовский государственный университет (сгу) на мех-мат. я естественно хотел поступать в мгу, но мой старший брат уже пытался поступать в мгу 6 лет до этого и не поступил в итоге мама решила, что раз я глупее своего брата, то нечего тратиться и ехать в москву поступать. откуда я мог это знать в 17 лет, находясь в саратове?в общем мех-мат так мех-мат теперь надо поступить поступал я в 2007 году, тогда бакалавриат был распространен только для педагогических специальностей, тогда как все учились пять лет, на специалиста. (а) насколько я плохо понимал какие профессии существуют и (б) что я не так далеко ушел от своих предсказаний то есть сейчас я наверное рассматривал бы в первую очередь cs факультет, наряду с биотехом, эконом факом и лингвистическим, но. в общем особого выбора куда поступать я не видел, мех-мат казался предназначением, а профессор математики казался единственной профессией, которую я мог бы выполнять это говорит о двух вещах. начну с моей собственной истории я родился и вырос в городе саратове, что на волге как-то так получилось, что математика была единственным предметом в школе, что я легко понимал и любил плюс еще олимпиады по математике 1/. на этой неделе я постараюсь рассказать на следующие темы* про себя * про рисерч в университете и в компании* про написание статей* про блоги и телеграм каналы* про жизнь во франции: за и против* про науку и графы. я больше люблю науку, чем инженерию, поэтому на этой неделе будет больше про статьи, конференции, подходы, нежели крутые новые тулзы. привет, меня зовут сергей иванов research scientist в criteo, phd в ml, и любитель графов меня можно найти в твиттере, в телеге на медиуме. про pet-project с векторным поиском. про pet-project с классификатором людей. про типичные ошибки и лайфхаки в индустриальном ml. набросы на каггл и академию. про релокейт и собесы. про карьеру. моя неделя подходит к концу, в этот раз на табуретке стоял андрей васнецов если было интересно, подпишитесь на мой телеграм-канал или читайте блог спасибо за внимание! недельный мета-тред:. хех, спасибо, обновил. ну да, но в обычном эластике честных фильтров все равно нету. нету! эластик умеет только в пост-фильтрацию а в aws версии эластика вообще доступно только евклидово растояние. это может работать, если категории не пересекаются и их не очень много с гео-регионами такое, очевидно, не прокатит с тэгами тоже много кейсов, где не сработает + если надо по всему искать, то придется делать поиск в каждом индексе. все еще можете использовать мою имплементацию, ее можно прямо из github-a через pip ставить. слишком много изменений, не получилось. какое-то время я даже пытался заниматься промоушеном этого проекта, но не получив никакого респонса - забросил все-таки плохой из меня маркетолог кстати, если у кого-то есть мысли про использование такой штуки - пишите, всегда рад коллаборациям. в результате у меня получился у которого есть даже online демка - один показательных примеров работы которого - на картинке. дальнейший план в этом проекте - сделать векторный поиск как сервис, с api, шардированием и репликациями, умным планировщиком запросов и, конечно, фильтрамичтобы сделать этот сервис достаточно быстрым, я даже начал изучать rust, но это уже история для другого твиттера. в результате получился форк hnsw, в котором можно даже реализовать фильтр по гео-зонам, диапазонам и тэгам. оказалось, что при некоторых модификациях в алгоритм hnsw такие фильтры вставить можно, и это даже не повредит его производительности!описывать эти модификации в твиттере довольно сложно, но можете прочитать про них в моем блоге. попытаться реализовать подобную логику можно с помощью пост-фильтрации, но это подход не масштабируется - рано или поздно из-за фильтра придется перебирать огромное количество лишних векторов. однако в практические задачи иногда требуют не только нахождения ближайшего вектора, но и указание дополнительных критериев отбораэто могут быть бизнес-правила или логика работы приложения, не зависящая от близости векторовтут у существующих библиотек возникают проблемы. следующий мой большой pet-прожект, которым я занимаюсь до сих пор - это векторный поиск существует много библиотек типа annoy или faiss, которые делают очень быстрый приблизительный поиск по миллиардам векторовисследователи и инженеры борются за наносекунды. в итоге этих категорий оказалось даже слишком много, поэтому я оставил только ~200 наиболее значимыхплюс, конечно, всегда оставалась бы возможность использовать внутренние эмбеддинги сетки для дообучения и добавлять новые категории. чтобы выучивать агрегированное представление нейросети нужно было придумать максимально общую self-supervised задачу, в качестве такой задачи я выбрал предсказание вики-категорий (типа таких за одно представление получилось бы еще и человеко-читаемым. к этому моменту мне уже хотелось сделать что-то, что можно использовать и демонстрировать, а не только наблюдать в виде графиков на тензорбордепоэтому я решил сконцентрировать только на одном типе сущностей - на упоминаниях людей. представление я собирался строить на основе упоминаний, потому модель должна была уметь принимать на вход сразу несколько текстов с упоминаниями одной сущности. эта статья натолкнула меня на идею сделать своего рода агрегированное представление для сущностей, которое можно было бы использовать для резолва, и которые могли бы независимо обновляться при поступлении новой информации. подход заключался в том, что нейросеть выбирает какой источник использовать для перевода очередного слова - обычное состояние seq2seq или вектор, сохраненный во внешней памятипамять здесь отвечала за перевод редких слов и могла быть модифицирована без дообучения. это обстоятельство делало резолв сущностей неприлично долгим, и я начал искать другие пути тогда мне попалась статья, описываются интересный подход запоминанию редких слов в nmt. алгоритм работал и даже выдавал неплохой скор, но огромное количество редких сущностей, создавали много шума и портили результаттак, например, для парижа система выдавала около 50 разных кандидатов и, соответственно, 500 упоминаний для проверки. я не верю, что это приближение к agi, уж слишком все идёт в сторону китайской комнаты можете сказать, что там есть прикольные эффекты типа выучивается арифметики, но они были и на меньших моделях заметны а доказать, что gpt-3 просто все не зазубрила будет сложно. идея проекта заключалась в том, чтобы хранить информацию о интересующих нас сущностях в виде их упоминаний,быстро добавлять или удалять, а алгоритм при классификации просто находил бы самое похожее упоминание. нашел и начал экспериментироватьк слову, в то время переиспользовать matchingzoo было совершенно неудобно, поэтому я переписывал интересные модели на allennlp. датасет создавался следующим образом: давайте найдем все преложения в интернете, которые которые содержали бы гиперссылки на какую-нибудь статью викитогда можно сказать, что текст ссылки - это named entity, которая linked на соответствующую статью. при этом со времен универа я работал с над задачей named entity linking, возникла идея объединить эти две темы так я начал экспериментировать с матчингом сущностей, используя датасет ссылок на википедию. вообще, наличие подходящего датасета - это 80% успешного делаи самое удачное - это найти self-supervised датасет, те датасет, который сам себе является разметкойв nlp - это языковые модели, в cv - целая куча всего: colorization, slow-mo, super resolution, depth maps и тп. заинтересовавшись этой проблемой я старался найти ей практическое воплощение для этого требовался датасет, который бы представлял собой не узкоспециализированные данные, а универсальные знания о миретакие знания, которые содержатся в языковых моделях и word2vec векторах. в computer vision типичной задачей one-shot learning является задача идентификации лиц, а также имеется своего рода mnist для этой задачи - датасет omniglot. формально же задача one-shot learning заключается в том, чтобы решить задачу классификации, когда на каждый класс дано всего несколько обучающих примеров причем новые классы могут даже не встречаться в обучающей выборке. меня давно заинтересовала тема one-shot learning в nlp, начиная еще со знаменитого поста рудера двух словах идею one-shot learning можно описать так: знание нескольких принципов компенсирует незнание многих фактов. привет! последней темой моей недели будут пет-прожекты расскажу о том, что пробовал делать я и какие уроки для себя извлеквесь материал материал есть также в моем канале, но тут я попытаюсь описать более доступно. тут в реплаях уже про poetry рассказали но как по мне, даже обычный viualenv лучше. тут под хорошей, я имею ввиду, хорошей настолько, что можно простить кривую имплементацию и реально потратить время и разобраться с такой себе идеей и, в добавок, неюзабельным кодом залеко не уедешь делает более-менее сностно, потому и живет. там вообще нет никакой новой идеи зато есть цель побить лидерборд любой ценой хорошей идеей был аттеншен, хорошей идеей был дропаут еще раньше в lstm была хорошая идея использовать память mega-xxl трансформеры и бесконечный *be - ну такое. сделать модель с терабайтом весов - плохая идея, побей она соту хоть на целый процент. самому использовать не доводилось, но судя по докам - такую штуку имеет смысл брать, если работаете в большой команде и нужно шарить ресурсы не могу сходу придумать ни одной задачи, в которой индивидуальный ds мог использовать такой комбайн эффективно. происходит это потому, что операции, незаметные на фоне больших данных, привносят гигантский оверхед при единичных запросах бывали случаи, когда замена pandas на обычные словари увеличивала скорость ответа сервера в сотню раз!. нет, я не буду призывать отказываться еще и от него - это отличный инструмент, если знать границы его применимости и границы эти заканчиваются там, где заканчивается обработка данных батчами. обычно первое, что я делаю, если ко мне обращаются с такой проблемой - проверяю не используется ли где-то в подготовке фичей pandas обычно именно он является причиной самых серьезных тормозов. успешно пройдя всю подготовку к деплою, ds может внезапно обнаружить, что его сервис отвечает на запросы какое-то неприлично долгое время, хотя из моделей используется только лог-регрессия причем в жупайтер-ноутбуке все работало адекватно. дальше, на стадии a/b тестирования (или хуже - после потраченного полугода разработки) обнаруживается, что фичи не надо было брать из месяца, на который делались предсказания. вторая проблема - это подмена code-ревью на plot-ревью plot-ревью возникает, когда старший рисёрчер в вашем отделе удовлетворяется лишь красивыми графиками и хорошими цифрами в f1-метрике. понятно, что первое обучение модели несет много проб и ошибок, порождает мертвый код отдавать его на ревью не имеет смысла в этом случае его лучше запланировать после получения первого результата, удовлетворяющего mvp а далее, каждое изменение ревьють отдельным пул-реквестом. первая - код-ревью проводятся настолько редко, что накопившиеся изменения становятся необозримыми в этом случаe код-ревью, либо занимает несколько дней, либо, что вероятнее, пропускается. еще один важный способ контроля качества является код-ревью если в вашей команде есть тимлид, обычно он и должен его проводить (встречаются, однако, и другие варианты) мне приходят на ум две основные проблемы, с этим связанные. если разрабатываете в одиночку, попробуйте настроить github actions или любую другую систему, у которой есть бесплатный лимит и которую не нужно хостить у себя очень скоро вы познаете блаженство автоматизации. если вы работаете в компании, где есть другие разработчики, то в каком-то виде ci\cd наверняка уже существует, спросите у них в минимальной конфигурации вам понадобится автоматический запуск тестов при push-е в определенные ветки. после написания тестов важно не забывать их запускать тут, конечно, можно понадеяться на собственную пунктуальность, но лучшим решением было бы использование ci\cd. кстати, в моем блоге есть пост про интересный подход к отладке нейросетей, который я несколько раз применял на практике он больше подходит для разработки новых архитектур, чем для unit-тестирования, но, думаю, должно быть интересно. также, при разработке новых функций, полезно иметь регрессионные тесты, проверяющие, что новые изменения не ломают старого поведения и при случае помогут обнаружить источник проблемы согласитесь, отлаживать модель, в которой внезапно просели метрики - удовольствие ниже среднего. когда нужно вносить изменения, связанные с каким-то фрагментом вашего кода, хорошо написанные unit-тесты могут служить своего рода документаций для функций и классов и иногда бывает гораздо проще разбираться в коде, зная ожидаемый результат при данные параметрах. еще одна типичная недоработка в ds - отсутствие тестов может казаться, что раз модель дает хороший результат на кросс-валидации, то все и так работает правильно однако тесты нужны не только для того, чтобы проверить работоспособность в данный момент. если успею, про это тоже расскажу либо можете посмотреть мой обзор тулзов для ds тут. категорично, потому что. git lfs - это такое все-таки не чистый гит, а костыль, причем довольно кривой по юзабельности далеко позади dvc. кстати, если вы используете docker для деплоя, то dvc pull удобно включить прямо в dockerfile, тогда собранные образы не будут зависеть от доступов к хранилищам и всегда будут готовы к работе это полезно, если, например, понадобится срочно откатиться на старую версию. из коробки такую функциональность можно получить используя который сделает все красиво и удобно dvc также имеет функции построения дата-пайплайнов, но лично я считаю её избыточной есть тулзы, которые для пайплайнов подойдут лучше. правильным решением тут будет хранение моделей в специализированных хранилищах, например s3 код, при этом, должен содержать информацию о актуальной версии файла и откуда его можно достать. даже если вы попробуете удалить файл из репозитория, то обнаружите, что это не решило свою проблему git все равно все запомнит, на случай, если вы попытаетесь откатиться тут вам могут помочь только тулзы вроде этой. во-первых, git изначально не предназначен для хранения бинарных данных, diff считается не эффективно, операции происходят медленно во-вторых, вы будете страдать каждый раз, когда нужно будет склонировать репозиторий, git потащит за собой всю историю изменений. помимо зависимостей, большую проблему досталяют сами файлы с данными и моделями возникает вопрос - как хранить и доставлять модели до продакшена? и самым худшим решением тут будет положить их прямо рядом с кодом в git. продолжаем вчерашнюю тему!. какой третий знак, там api поменяется и все, выкидывай код. one impossible thing at a time, pls. как говорится, слова не стоят ничего - покажите мне код видели какой поток идей проходит через arxiv? без воспроизводимости, громкие заявления в самой статье не стоят ничего и уж точно у вас не будет такого pr-отдела как у openai, чтоб продвинуть даже посредственные идеи. анаконда не даст воспроизводимости в любом случае. это сильное заявление на самом деле, опытные разработчики не дадут обмануть, на протяжении долгого времени выстрелить может даже палка вы же рассчитываете, что ваш рисёрч - это вклад в знание человечества?. мой понт в том, что анаконда подталкивает забивать на зависимости если тебе с самого начала не надо было устанавливать sklearn, ты забудешь добавить зависимость. ну камон, это каменный век так делать я уж не говорю про то, что версии библиотек могут быть не совместимы. тут мы видим репозиторий, в котором авторы не указали requirementstxt и теперь желающие воспроизвети их результат должны выискивать все нужные зависимости в кодевообще этот репозиторий изобилует типичными недоработками ds, наверняка мы к нему еще вернемся сегодня. избежать этого лекго - не используйте anaconda и всегда трекайте свои зависимостизвучит банально, но за негативным примером ходить далеко не нужно. поэтому разработчики стараются не тащить в прод ничего лишнего из этой ситуации возникает проблема, что окружение дата саентиста может отличаться от откружения продакшена, что может привести к мучительно отладке прямо на боевой системе. тут может подстерегать сразу несколько проблем во-первых, ds проекты часто начинают разрабатывать в anaconda, в которой из коробки установлено несколько гб библиотекесли вы делаете регулярные обновления, то прогонять такой объем лищней нагрузки через ci/cd будет очень больно. первое, с чем сталкивается начинающий дата саентист перед внедрением модели в продакшн - это обеспечение вопроизводимости результататут речь даже не всегда идет о том, чтобы через год модель могла нормально обучиться нужна возможность банально запустить проект на сервере. привет, сегодня и завтра буду рассказывать какие частые ошибки встречаются у дата саентистов, когда дело доходит до продатакже поговорим о тулзах, которые существенно облегчают жизнь, и которые полезно иметь ввидуосновано на вымышленных событиях, все совпадения случайны. все как в соревновании от телеги. как раз следующая тема по плану, stay tuned!. правда, такие соревнования есть например соревнование от telegram но в каггл сообществе, почему-то, от него плюются плюс, а что на самом деле даёт требование кода? то что гранд-мастер не запутался в своих собственных жупайтер-ноутбуках?. кому свободные ресурсы, а кому $10 в час. примечательно, что в it это случается не впервые в спортивном программировании тоже решают задачи, вроде бы, близкие к реальным проблемам однако использование в продакшене кода, порождаемого спортсменами, занятие из разряда программирования экстремального. или к тому, что некоммерческая компания сжигает $10m+ на обучение модели, которую невозможно использовать, и не видит в этом ничего зазорного. а приводит это к ужасному write-only коду, который, под прикрытием бренда известного универа, толкается, например, для прогнозов по пандемии. печально, что проклятье лидербордов просачивается и в акадению причем в академии это могут быть не лидерборды могут принимать изощренные формытут это не только лидерборды в чистом виде, но и kpi на количество статей, разные индексы цитируемости и тому подобное. отсюда регулярные скандали с читерством - , семинары по эксплуатации дата-ликов - мемы про more layers. любая состязательная система, так или иначе сталкивается с этим явлением и в попытке сделать цель удобной и прозрачной, каггл дисцилировал ее до состояния лидерборда, сортирующего всех учасников от лучших к худшим тем самым создав идеальную среду для ревад-хакинга. такое явление не является побочным эффектом какого-то конкретного алгоритмапоявляется, если пытаться заменить реальную метрику (чистый пол) на вычислительно простое прокси (камера не видит грязь)короче - когда метрика становится целью, она перестает быть хорошей метрикой. в rl тусовке, есть замечательный термин - reward hacking он описывает явление, чем-то схожее с переобучениемприводит оно, например, к тому, что роботы-уборщики надевают себе на голову ведро, чтоб не видеть мусора. в случае же, если вы собеседуете начинающих дата саентистов, то участие в каггле, при отсутсвии минимального опыта разработки, я бы считал даже негативным факторомне спешите отписывать, дальше я попытаюсь мотивировать такое непопулярное мнение. после того, как ваш проект одобрят, вам нужно будет собирать под него командутут все сильно зависит от проекта, но можно сказать точно - если вы хотите делать полноценный продукт, не рассматривайте участие в каггле и phd как преимущества. понимаю, что совет не универсален, сложно сделать демку для моделирования аплифта однако если ваша задача связана с nlp или cv, у вас есть пространство для маневровдля этого придется овладеть азами веб-разработки, но оно однозначно того стоит. прошло огромное число совещаний, где я показывал какой выходит roc-auc, как замечательно выглядит схема деплоя все эти совещания давали ничтожный импактно стоило сделать самую простую веб-демку, в которую может потыкать кажный менеджер, как сразу появлялась заинтересованность. получить такой качественный переход удалось не сразу, понадобилось несколько заброшенных задач, прежде чем первый проект начал жить более-менее автономнолучший совет, который я могу тут дать - старайтесь представить вашу работу как можно более наглядно. однако были и проблемы, полученные решения, в лучшем случае, годами допинывались в прод силами самих дс-ов, в худшем - пропадали у заказчика без какого-либо фидбекапериодически возникало желание конвертировать такую задачу в проект и отвечать, в том числе, и за его эксплуатацию. наш отдел был функциональным юнитом, к нам приходили заказчики из других отделов с ml-like задачами, а мы их решалитакая организация была удобна для рисёрча - все дсы сидели рядом, обменивались опытом, могли месяц пробовать новую идею из понравившейся статьи. глобально, чтобы вам доверили управлять проектом, должны сложиться 2 фактора:должен быть проект, который кому-то нужен, и вы должны быть тем, кто лучше всех в этом конкретном проекте разбирается тут важно заметить, что не самым умным вообще, а только к конкретном проекте. привет, сегодня еще неменого продолжу вчерашнюю тему с карьерой, а потом перейду к набросамрасскажу как стал техлидом и какие перки это дает. в nlp или cv? расскажи как успехи. компанией с самым сломанным отбором, без сомнений, является амазонв ней все с этим плохо настолько, что рекрутеры сами вам высылают ссылки на материалы для подготовки и в предварительном созвоне рассказывают как именно лучше угождать своим техническим коллегам. в результате это привело к нескольким заваленным собеседованиям, но хотите ли вы работать в компании с настолько сломанным отбором?если вы в свой ежедневной работе не занимаетесь выводом формулы для лог-регрессии, то не стоит и на собеседовании ее спрашивать. как я готовился к собеседованиям? никак серьезно, если вам нужно готовиться, не значит ли это, что интервьюер спрашивает что-то не тоимеют ли такие интервью что-то общее с реальными задачами? конечно нет.  : the near future of live #mma (and spos) broadcasting is with #computervision and #ai#ufc #danawhite. по факту трудоустройства, причем оплата растянута на первый год. намекну ему, что есть заинтересованные. продолжать собеседования на эту позицию, я, конечно, не стал. домашнее задание, кстати, может быть полезно не только работодателю, но и соикателюпо нему можно понять какие задачи _на самом деле_ вам достанутся на работетам например в одном из задании было требование оформить результаты обучения модели в виде power point презентации. практически все собеседования, продвинувшиеся дальше скринигово созвона с hr, включали домашнее задание и технический собес по его результатам. однако в лондоне предложение по деньгам намного более скромное, если брать в расчет стоимость жизнипоэтому основное количество моих собесов проходили именно в берлин. за время поиска работы мой менеджер разослал мое резюме в почти сотню разных компаний, американские компании часто даже не утруждали себя отказом, все-таки в последнее время переехать туда стало намного сложнеесреди европейских городов it движуха есть в лондоне и берлине. кстати, если вы выбираете страну для переезда, то сравнивать варианты удобно в от себя могу подтвердить, что все цифры про берлин достаточно близко совпадают в реальностью. да, я тоже находил в интернете много контор, которые обещабют работу в faangно, как мне показалось, интересны они могут быть, разве что, джунам во-первых, заламывают конские проценты во-вторых, открыто пишут, что для успешного устройства нужно прорешать 50+ задач с leetcode. он финансово заинтересован устроить тебя на работу твоей мечты:-если тебе не понравится вакансия - он ничего не получит-если тебя уволят раньше первого года - он получит меньше-его вознаграждение зависит от твоей зпплюс, договоренности помогают не забить из-за лени. релокейт менеджер - это такой чувак, который делает за тебя всю скучную работу: -ищет вакансии, подходящие под твое резюме-заполняет формы (видели какие они огромные у гугла и амазона?!)-назначает созвоны, ведет начальные переговорыв идеале остается невидимым для компании. и если после описанных ранее событий нерешительность и улетучилась, то как побеждать лень на протяжении довольно продолжительного поиска работы - оставалось для меня не решенной проблемойпока linkedin не принес неожиданное решение - личный менеджер по релокейту!. начну с релокейта задумываться о переезде в страну первого мира я начал намного раньше, но от активных действий меня удерживала лень и нерешительностьусилий воли, хватало, максимум, на нерегулярные занятия английским, чтобы не растерять устного общения. привет, на сегодня у меня запланированы две частично связанные темы - про релокейт и про карьеруточкой пересечения тут будут собеседования, на которых мне приходилось быть по обе стороны баррикад иногда в один и тот же день. compile. с тех пор я работаю в , ставлю таски, делаю код-ревью, обучаю нейросети, пинаю metric learning,заворачиваю все в сервисы и деплою в кубернетис на этом, пожалуй, все на сегодня, пишите ваши вопросы. затем летом 2к19-го я сходил выразить гражданскую позицию на трубной площади, провел 2 ночи в камере овд, после чего решил, что пора заводить тракторчерез 2 месяца трактор успешно завелся, о чем я тоже расскажу завтра подробнее. за это время я начал вести канал, успешно поучаствовал в хакатоне, параллельно вписывался в стартапы, стал техлидом и даже, в какой-то момент, одновременно менеджил две ml-команды подробнее об этом завтра. спустя несколько собеседований устроился в один желтый банк мидл дс-ом, или как это называется у меня в трудовой - старший разработчик-аналитикза почти 2 года работы там было много интересных проектов с #nlp и не только. к тому времени я уже защитил диплом и начал искать фулл-тайм работу искал я ее в в #_jobsудивительно, как ods удалось создать, по сути профсоюз, который, например, запросто продавливает требование открытой публикации вилки зп даже крупными компаниями. успешное завершение этого проекта принесло мне, пожалуй, наибольшее на тот момент удовлетворение от своей работы это был не просто очередной таск в jira, а полноценный самостоятельный продукт. но один из заказов был особенно интересный нужно было с нуля написать сервис, который бы мог делать умный автокомплит для текстов вакансий на английском и голландском языках в этом проекте было все - и веб-сервис, который должен быстро отвечать на запросы, и рисёрч, и деплой. благо, за счет ежедневных интерконтинентальных митингов удалось прокачать английский на достаточный для технического разговора уровеньчто позволило искать заказчиков на upwork-е заказы были абсолютно разные - от помощи с подготовкой статьи, до бэкенд разработки. дипломом, к слову, я тогда очень гордился там была модификация одного из ml-алгоритмов, расширяющая его применимость, бенчмарки на разных датасетахбыла статья, оформленная по всем канонам arxiv org он, конечно, оказался полностью неприменимо на практике, но об этом позже. такое состояние дел демотивировало команду, и в результате из стартапа разбежались почти все разработчикитогда и я решил попробовать себя на фрилансе к тому же в то время я только дописывал свой диплом и искать полноценную работу было сложно. для исключения эффекта барнума у нас даже была контрольная группа, которой мы показывали случайное описаниеполученный результат не опроверг нулевую гипотезу, но начальник решил, что это не повод для изменения подхода. в какой-то момент мы даже организовали настоящий научный эксперимент на людях!чтобы проверить эффективность наших алгоритмов мы просили студентов оценить насколько точное описание мы даем их покупательским привычкам. со временем и под давлением запроса от маркетинговых компаний в стартапе начали появляться идеи, напоминающие скорее астрологию, чем data scienceмы начали сопоставлять цвета фоток из инстаграмма с покупательским поведением, влияние любимых жанров музыки и другие странные вещи. к сожалению интересная задумка, сулившая много возможных ml-применений, натолкнулась на отсутствие каких-либо данныхпоэтому написав базовые эвристики, команда из 3-х студентов занималась full-stack разработкой, которую пытался продавать американский начальник. стартап хотел заниматься матчингом людей, интересных друг другунапример выбирать на конференциях людей из одного города\школы\универа и рекомендовать друг-другу или организовывать студенческие группы по схожим интересам. так, получив скилл отладки в gdb, использования bash и осознав важность тестирования кода, я решил перейти поближе к наукеперешел маленький в калифорнийский стартап, где работал мой научрук и еще пара его студентов. как следствие, не могу похвастаться какими-то особыми достижениями на той работе, да и не думаю, что тимлид был сильно доволен моей вовлеченностью в проект. в то время я еще учился в универе, только начинал ковыряться в ml и считал, что обязательно нужно стать минимум phd - ведь только там будет весь cutting edge и сильный ai работа, соответственно, уходила на второй план. начал свою оплачиваемую разработческую деятельность я стажером в group, в отделе поисказанимался низкоуровневыми оптимизациями поискового движка, параллельно писал шедулеры для внутренних задач - airflow тогда еще не было. в отличие от предыдущих ведущих, я буду адвокатом от индустрии в ml я пришел из низкоуровневой разработки на c++ через бэкенд-разработку на java успел поработать в крупных корпорациях, немного пофрилансить, и вот теперь работаю в стартапе. примерный план на эту неделю такой:пнд: расскажу про себявтр: про релокейт, карьеру вот это все срд: буду набрасывать на каггл и академиючтв-птн: про ml в индустрии: тулзы, лайфхаки и тпсбт-вск: про свои пет-прожекты. свой твиттер я давно забросил, но зато веду телеграм-канал про нейросети (нет, это не обзоры статей про берт!)заходите, подписывайтесь: часто отвлекать точно не будет. привет, меня зовут андрей васнецов () и на этой неделе андерхуд веду яя lead ml engineer, работаю, в основном, с nlp, последние полгода живу в берлине. 🔥архив этой недели уже доступен для чтения! нового автора. я прощаюсь с вами дорогие читатели, была любопытная неделька меня можно найти тут: , подключайтесь к  пишите если есть работа для опытного консультанта в ds/ml/ai помогайте c oss на , вместе победим удачи. радикально согласен, математика - не наука, это язык описания моделей или набор абстрактных методов исполняемый людьми когнитивно. касается философского вопроса, математику создают или открывают (is mathematics discovered or invented) я убежден что открывают, потому что каждый набор аксиом создаёт свою математическую вселенную и она верна для всех кто согласился на эти аксиомы. возможно самое старое machine learning demo с неким клодом шеноном ) любопытная статья где предаставляют контекст и перспективу. в mit был очень крутой курс про антропологию вычислений очень тяжело вообразить как история развивалась и что делали люди что бы создавать разные вычислительные устройства, кулиминирующие в современных компьютерах. человеческие организации - это компьютеры которые используют поведение людей как свои вычисления, понятия программирования, памяти, скорости вычислений - принимают новые оттенки налоговая система например - это алгоритм современные мега корпорации - это уже суперинтеллект. что бы понять эти идеи подрбнее, рекомендую почитать эту любопытную книгу computing without computers: a gentle introduction to computer programming, data structures and algorithms. 1/3 другая сторона модельного мышления - алгоритмическое мышление многие не понимают что компьютеры/калькуляторы - это лишь самый очевидный пример того что такое вычисление фундаментально все физические процессы с определенными свойствами - являются вычислениями.  : some time ago, for internal use in my projects, i created a simple library for the evaluation of map for object detection algorithms that can be easily integrated into different pipelines and now i published it on github enjoy using!. есть еще статья ответ на статью  , но там больше политические аргументы а не про свойства технологий и их роль в различных идеологиях. вот интересная книга про попытки создать советский интернет, интернет академика глушкого. еще одна интересная тема - это паралельное развитие продтечей к ai в сша и ссср, идеи оптимального контроля развивались паралельно с некоторыми различиями но во многом похожи так очень важное для reinforcement learning уравнение беллмана оттуда исходит. вообще много из советской истории очень любопытно пересекается с современными технократическими веяньями вот хорошая статья описывающая это. если хотите узнать историю советских попыток создать интернет и использовать предсказательные модели для помощи индустриям вам обязательно нужно посмотреть первый эпизод документальной серии адама кертиса pandoras box вас многие формулировки удивят. моделирование совместное распределения, реляционные отношения полученные формальным выводом, каузальные модели, имитационное моделирование. есть очень много видов выучивается закономерностей из данных, регрессия - один частный случай весь ds/ml - поиск закономерностей оно же построение моделей. нет. вс кэти новости про gpt-3 подчёркивают какой кризис воспроизводимости с суперкомпьютера, напоминает ситуацию в физике с бак или каким нибудь уникальным телескопом интересно как их там решают и решают ли нужно больше oss hpc проектов что бы вернуть возможности малым игрокам. был на конфе на эту тему в прошлом году, в целом очень интересно, полезные для моего ресерча было не так много как хотелось бы, на воркшопе про мультимодальные онтологии и ничего про visual ontologies в этом году надеюсь будет побольше на эти темы. одна из областей ai research-а которая по моему не получает заслуженного внимания это #akbcрасшифровывается как automatic knowledge base construction - автоматическое построение баз знаний (онтологий) сильно пересекается с задачами neuro-simbolic обучения и geometric dl. сейчас изучаю цифро-аналоговый семплер korg volca sample, и прохожу курс по livecoding системе #tidalcycles когда освободится время смогу больше времени на ml music проекты хотел воспроизвести статью норвежцев которые rl агентом управляли аудио-сервером очень любопытно. я с математической теорией музыки познакомился в 2012м когда писал курсовую про групповые свойства аккордов как структуры на множестве полигидральной группы мощностью 12 ( z/12z ). логика такая что музыка это своеобразный язык со своей грамматикой , которую в неявном виде можно выучить, примеры этого jukebox, musenet, проекты у magenta очень любопытные вещи. я последние год начал интересоваться электронным музлом, стало сразу интересно что есть на пересечении музыки и ml, огромный поджанр генеративной/алгоритмической музыки попал в мое внимание потом различные попытки использовать nlp модели на midi последовательностях. понять какие свойства измеримые нужно выделить и распутать их, что бы облегчить обучение это касается любых измеримых вещей самые большие проблемы возникают когда люди плохо учитывают поведение людей. самое ценное в анализе данных это так называемое модельное мышление, был такой mooc model thinking, в россии это часто называют просто математическое моделирование но разница в том что моделировать можно не только подбирая закономерности, но и выучивая их. кстати этот кризис называется the valley of shit ).  : my colleagues released intels public online server for cvat: this server provides an online labeling tool for your computer vision datasets we hope that it will be helpful in your great projects. а кому-то неудобно переключать настройки ¯\_(ツ)_/¯ меня попросили сделать канал, я сделал). # сообщение от куратора каналаесли вам вдруг стало неудобно читать твиттер с его алгоритмической лентой, залетайте в наш telegram-канал: все твиты отсюда теперь будут направляться туда. абстракт дедлайн был, щас неделю без сна статью улучшать будем. конференция ранее известная как нипс. вух, таймер вышел, дедлайн прошел, можно выдохнуть статьи куда то отправлены, дела закончены, хотя бы на сегодня невероятное чувство облегяения. нужно слазить с рельс и подумать что ты хочешь сделать в жизни аспиранта не должны вводить в ступор вопросы: зачем тебе аспирантура, что ты собираешься делать после аспирантуры, как оно тебе поможет. часто гораздо эффективнее пойти сразу в эту индустрию и там работать, стаж нарабатываешь и повышаешь зарплату. очень важно не ненавидеть писать тексты, потому что академия это место которое генерирует множество текста как свой основной выход вам придется найти своего внутреннего стивена кинга что бы приуспеть писать статьи, переписывать статьи, заметки, отчеты, диссертации, слайды итп. ищите научные группы где кроме celebrity лидера группы есть suppo staff, это ассистент руководителя, постдоки, инжененеры, и фактические менторы которые будут с вами работать культура в группе тоже очень важна, всегда спрашивайте перед поступлением тех кто там уже работает. аспирантура больше похожа на монашество, чем на работу или учебу, на учебе есть план и learning outcomes, это процесс с малой неопределенностью работа - задачи более приземлённые, горизонты планирования короткие, и можно бросить в любой момент, свобода и определенность. часто в академии люди не чувствуют важности того что они делают, потому что многие области очень абстрактны и не транслируются в прикладной результат сразу - это основной фактор приводящий к выгоранию и расстройствам психики очень редкие моменты градификации, и океан работы. если вы закончили магистратуру и хотите продолжить двигаться по академическим рельсам то вам не стоит идти в аспирантуру если вы хотите зарабатывать деньги на уровне свободного рынка - забудьте об этом важно иметь запасы самодисциплины, их вы будете сжигать годами. моя рекомендация про аспирантуру (в ml/ai) - идите туда когда ничего другого делать не можете, или не хотите, это путь который рационален только для идеалистов или тех кто готов потратить очень много времени на издержки связанные с академией взвесьте все плюсы и минусы. pydata from home pydoma сейчас идет стрим рекомендую к просмотру. derp learning. я не читал, можешь кинуть ссылку на твиты?. завтра постараюсь рассказать про тяжкую жизу аспиранта, как не повторять мои ошибки, и не свихнуться потому что делать phd серьезный work hazzard для двинуться башкой. cdise, в группе с евгением бурнаевым. если вам интересно как в современном deep learning ресерче на pytorchе люди организуют код, могу предложить обзорный семинар моего авторства о фреймворке pytorch lightning на русском других видео про этот инструмент нет. каким алгоритмам?. забыл ссылку добавить  разробатывают отличные люди в том числе миша свешников, очень талантливый инженер. всем кто делает модели для предсказания чего либо, рекомендую распечатать и рядом с монитором повесить нельзя забывать базовые вещи, иначе ничего сложнее не построить. не проходил intro курсы поэтому тяжело сказать наш ods ml course open конечно стоит, потом начать с людьми общаться и делать реальные проекты вместе. ds это огромный зонтик под которым много специальностей спрятано, и такие специалисты всегда нужно, любой бизнес оперирует на информации и ценность из нее извлекают аналитики как раз ds - никогда не устареет, это эмпиризм в it форме. лекала есть конечно, в виде комбинаций открытых продуктов они не во всех свойствах могу сравниться с продуктом гиганта амазона, но для своих целей годятся, стоит посмотреть что делает zyfra, и ods проект ebonite. если хотите обсудить любые вопросы связанные с чем угодно в отрасли или снаружи ее, напишите мне под этим сообщением, я отвечу. сейчас я вместе с нашей группой в сколтехе готовим статью на neurips (дедлайн очень скоро) поэтому времени свободного не так много, но я найду его, что бы написать суда самые сочные истории и сплетни. 6/? я в ds/ml отрасли с курса 2-го бауманки, уже ~11 лет свой накопившийся опыт я также предоставляю на продажу в виде консультаций с почасовой ставкой, если у вас есть проблема в этой отрасли, я могу помочь, техническими решениями и опытом людей которые были в такой ситуации. 5/? также я иногда выступаю как спикер, или mc на мероприятиях одс (есть видимо жажда сцены какая то) и веду изредка ods introspect хакатоны, которые теперь больше как часть pet projects инициативы и личные исследования ребят из ods. 4/? для ods я организую data science завтраки в москве, уже 5 лет, каждую неделю по средам (за все время пропустил наверное мероприятий 30), сейчас их проводим в зуме в тоже время как и обычно эти мероприятия дали мне очень много опыта о отрасли и людях которые в ней работают. 3/? у нас был и свой слак с сотнями людей когда я познакомился с лёшей натекиным, было достигнуто молчаливое согласие что нужно объединятся я закрыл все аккаунты и попросил всех перейти в одс многие другие группы/митапы/сообщества к нам присоеденились. 2/? с 2015-го года организую мероприятия в , тогда у меня было свое сообщество про ds/ml, называлось midsm (moscow independent data science meetup), independent потому что мне тогда казалось что все митапы были очень рекламные от корпораций. 1/? я на 4-м году phd программы сколтеха, делаю диссер про 3d реконструкцию и анализ сцен с помощью нейросетей, вероятностных методов и многих других методов из ml, и cs. всем привет на этой неделе я александр нотченко (мой основной аккаунт ) буду рулить этой лодкой если вы участвуете в ds/ml/ai движухе то возможно вы меня уже знаетещас я расскажу чем вообще занимаюсь по пунктам. на этом моя неделя заканчивается всем спасибо, что читали! но мы остаемся на связи, мой твиттер ещё я веду канал в tg c кратким обзором dl/ai статей и страницу в instagram про dl/ai статьи в картинках. 2/4 как следить за dl/ml новостями, полезные источники как я читаю статьи ресурсы для изучения deep reinforcement learning про мое путешествие в top50 на kaggle. compile. 1/ по традиции, метатред от 1 обо мне и моей лабе о phd жизни как оно, делать deep learning в академии? в индустрии лучше?. compile. друзья, я не успел дорассказать вам мой путь каглера и моя неделя подходит к концу потому жду вас у себя на странице , где продолжу рассказ. а как ты генеришь эти твиты?.  : я не хочу быть гражданином, я не хочу пить водку, я не хочу пить водку, я не хочу умирать. в nature и science стоит больше $1000, если правильно помню в перечисленных журналах по cv публикация бесплатная только за чтение платят читатели но можно залить на arxiv и все ок. прикол в том, что я как-то в барухзом летел в самолете на соседних креслах из франфурта в минск я тогда его не знал а сейчас сопоставил факты крутая лекция!. да но я сразу вычеркнул из рассмотрения людей, которые не знают, что делают в универе с ними то все понятно. 4/ шкура медведя уже была поделена но медведь убежал, и нас выкинуло на 4 место на private leaderboard после cистемного тестирования было неприятно, но что ж это все-таки был первый опыт в реальном соревновании я подробно описал наше решение на хабре. 3/ довольно быстрыми рывками я оказался в top2, а мой друг в top3 а потом мы объединились в команду и назвали ее dl sucks решение у нас было довольно тривиальное просто делали многомерную регрессию по картинке но работало хорошо, и мы закрепились на 2 месте на паблике. 2/ но как раз начиналось соревнование по подсчету морских львов на алеутских островах по снимкам с дронов и мы решили взяться за это все шло как по маслу благо опыта в deep learning в моей голове тогда уже накопилось немало. конечно нетвсем вообще плевать на это в универе ведь это не фундаментальный ресерч там ты оттачиваешь свои практические скилы все только для себя. как-то маловероятно, что без какого-го либо образования можно системно выучить всю базу, которая нужна для глубоких исследований но есть и самородки, навернякаесть у тебя и так единолично 10 статей на neurips, то тебе phd не обязательно. 1/ в апреле - мае 2017 мы с моим другом (по совместительству моим мастер-студентом) решили поучаствовать в реальном контесте на  до этого я решал только несколько учебных в относительно расслабленном режиме в то время на каггле было не так много соревнований по зрению. расскажу немного про и как я выбился в top 45 в глобальном компетишн рейтинге. что именно?. 7 spinning up in deep rl workshop (3hours) video material deep rl sho course rl course from by hado van hasselt. 4 s подкаст david silver: alphago, alphazero, and deep rl david silvers lecture on alphago and alphastar weekly zoom meetup intro to rl with discussions by. ресурсы для изучения reinforcement learning во время карантина1 richard suttons book reinforcement learning: an introduction лекции david silver (deepmind) лекции (uc berkeley). но в журналы не так часто посылают новую работу обычно это расширенная детальная отшлифованная версия того, что было опубликовано на конфе. есть несколько топовых журналов по computer vision отсортированы по рейтингу:- tpami (ieee transactions on pattern analysis and machine intelligence)- pr (elsevier pattern recognition)- ijcv (international journal of computer vision). сымые топовые журналы - это, конечно nature и science туда нужно либо что-то совсем прорывное, либо, что-то, что затрагивает очень ширукую публику. хорошо когда пишешь статью на конференцию есть дедлайн, и ты угробишься, но статью отправишь то ли дело журналы работа, которую можно сделать за 2 недели, может растянуться на 3 месяца всё потому что дедлайна нет. если кто-то интересуется deep unsupervised learning, то есть отличный онлайн-курс от uc bekeley c видеолекциями course will cover two areas of deep learning in which labeled data is not required: deep generative models and self-supervised learning. 11/ ну и конечно же slack #aicle_essence - неплохое место чтобы почитать короткий пересказ статей. 10/ еще есть подфорум на реддите про ml нередко можно побеседовать и обсудить статью с авторами. 3/ люблю когда, статья хорошо написана если язык плохой и куча опечаток - то это хорошее прокси, что статья не очень и писалась в попыхах может и эксперименты делались на скорую руку не хочется такого. 2/ интро и релейтед ворк читаю , если тема новая и хочется понять, откуда ноги растут тогда еще нужно пооткрывать несколько статей из референсов, на кторые больше всего опираются авторы текущей статьи читать глубоко не обязательно - главное понять суть статей из референсов. 1/ я обычно не читаю статьи полностью, если только она меня очень не заинтересует сначала читаю абстракт, потом смотрю на картинки и эксперименты, потом читаю заключение далее, если мне кажется, что есть что-то стоящее, то читаю более детально метод. 0/ но статей так много! как их все читать? расскажу свой подход. так и есть я свои статьи тоже тут пиарю). 9/ еще из полезного - это сайт от  сайт парсит можно найти похожие для конкретной статьи а так же он обучает классификатор по сохраненным тобой статьям и потом может выдавать только те, что тебе интересны. 8/ я решил создать страничку, где рассказываю про актуальный ресерч на уровне идеи (то есть не вдаваясь в технические детали) можно в метро листать:). 7/ в инстаграме по deep learning ловить особенно нечего там только индусы рассказывают что такое backpropagation и как обучить линейный классификатор. про тот континент ответить не могу ). 6/ также есть несколько каналов в телеге, за которыми я слежу - мой канал, где я коротко пишу про смысл интересных мне статей. 51/ soumithchintalajcjohnssrsalakhuylecundrfeifeihugo_larochellegoodfellow_iancarsten_rothernatashajaques. 5/ вот список из нескольких влиятельных людей из ai/ml/dl/cv/rl, на которых я подписанilyasutriedelcastro_rocktkemelmipabbeellexfridmanfhuszarseb_rudergdbrelja_workakanazawaantoinebordesmattniessnersvlevinemichael_j_blacknatalianeverovacsprofkgdhardmaru. 4/ основной источник новостей и новых статей - это твиттер нужно подписаться на ведущих ученых в интересующей сфере и мониторить, что они пишут. так и есть, нужно искать какие-то стипендии/фелоушипы, либо подаваться на гранты самому. я думаю, в европе никакой дискриминации по возрасту не будет тут начинать phd в 30 - нормально немцы, например, очень долго учатся в школе и универетак что твой успех в меньшей степени зависит от возраста.  :. 3/ сейчас как раз мне упала ещё одна статья с eccv20 для emergency review emergency review - это когда другие ревьюверы профакапили дедлайн и кому-то другому приходится в скором порядке ревьюить статью за них, чтобы не сорвать конференцию. 2/ тут еще круто, что ты можешь прочитать что-то потенциально новое раньше других, и можешь схлестнуться с авторами, если есть сомнения и вопросы это не твиттер, и авторам по-любому придется отвечать. 1/ один из источников новых статей - это быть рецензентом (ревьюером) для конференций там много шлаковых статей, но бывают и очень интересные орги всегда стараются назначить тебе статьи в области твоей экспертизы, когда это получается, то я кайфую тогда это очень интересно.  : ∂hello/∂world!this is the dev team for higher, a library by which facilitates the implementation of gradient-based meta-learning algorithmscode:. завтра расскажу, как я слежу за новостями какие статьи читаю, и как их фильтрую. 19/ второй минус связан с первым - не очень много вычислительных ресурсов научная лаба, это не гугл и не фейсбук по количеству ресурсов, к сожалениюу нас в группе около 100 gpu а юзеров человек 30 жить можно, но недолго. 18/ так, ну продолжим про минусы phd и академиинаверное, основной минус - мало платят!если бы платили по-божески, то я бы тут и остался а так приходится в индустрию бежать. тред с моими ответами. ну, вот вам ответ про оплату и условия труда phd студента. если взять срез нашей группы, то где-то 70-75% людей делали у нас магистерскую работу, и им потом предлагали остаться на phdизвне были наняты за 5 лет только я, итальянец, и 2 немца. думаю, что если есть 1 публикация первым автором, то твои шансы сильно повышаются еще хорошо быть олимпиадником по математике (даже в школе) это ценится. честно, не знаю по каким критерия выбирались те двое, что извне у одного из студентов был 3х летний опыт разработки (20 часов в неделю). за последние полгода мы набрали 4 новых phd студента из них 2 делил магистерскую с нами и имели как минимум одну публикацию на cvpr два других были наняты извне, и в маге работали с нейронными сетями как-то (не уверен, что очень глубоко), и публикаций у них не было никаких. по итогу голосования большинство считает, что phd не нужно для работы в ml/dl оно, наверное, так и есть но если хочешь работать в ресерче тогда нужно для позиции reasearch scientist это вообще маст для research engineer это тоже часто нужно у многих re в фейсбуке есть phd. в германии зп phd студента регулируется государством, ты как гос служащий это где-то ~48k eur в год до налогов что, думаю, соостветсутет средней зп софтвер инжерена по стране но в некоторых лабах тебя утсраивают на 50% ставки или 75%, тогда получается меньше.  : we were all inexperienced &amp; unskilled at some point we have all made mistakes, and we will all make more mistakes in the future but being a jerk is a choice dont be a jerk. 17/ в общем, phd - это твой стартап и ты его ведешь к ipo если выстрелит, то ты успешный если нет, то останешься без степени. 16/ приведу еще такое сравнение когда ты делаешь phd, то ты сам себе такой mini-ceo решаешь все вопросы и за все отвечаешь можешь привлечь кого-то в команду из других студентов, можешь обратиться за внешним советом к профессору можешь добыть доп финансирование сам. 15/ не знаю, что еще более конкретного кроме выше перечисленного думаю можно еще раз повториться про свободу выбора проекта и направления. 14/ но опять же я немного biased здесь, потому что я не работал в компаниях среднего размера в конторе в минске у нас была наверное 1 видеокарта, а в fair очень много (неприлично называть число даже)в стартапах обычно все более скудно. 13/ попросил рассказать разницу конкретно в dl между индустрией и академией тут наибольшая разница это в ресурсах если работаешь в крупной фирме, то у тебя наверное есть доступ к большому кластеру на несколько тысяч gpu в универе у нас на всех порядка 100 gpu. попытаюсь ответить. ради интереса кто из читателей занимается наукой или опубликовал хотя бы одну научную статью по ml/cv/nlp/rl ?. я посмотрелю на самом деле там объявидся именно автор статьи и скинул код с модификациями там у них куча доп регуляризаций, про которые в статье они умолчали. i mean why those tricks are not written in the paper?. so what is the take-home message? why didnt include all the regularization tricks required to replicate the results in the paper???. но этот парень не автор стать он просто грид серч сделал и разобрался в чем проблема в официальном коде вроде бы так хотя на такие вопросы должны отвечать авторы статьи. what? for real?. ive just read it as phd is my present, past and future. и все стало воспроизводиться?. зависит от того, сколько лет он студент:) не знаю среднего распределения но, когда я спрашивал у меня было меньше 50, наверноеу моего профессора ~1500, для сравнения. 12/ но благо, если ты знаешь людей, то вроде бы абсолютное число не так важно главное, чтобы у тебя не было совсем до безобразия мало цитирований, и чтобы ты сам(-а) по себе шарил(-а). 11/ я в один из первых своих лет в аспирантуре подошел к рекрутеру из googleai на конференции и знаете что он мне сказал? у нас планка в = 300 цитирований для студентов из европы и =500 для америки у меня тут немного челюсть упала. 10/ на arxiv заливаются сотни новых статей в день стоящих прочтения из них единицыи потом китайцы, индусы, русские, американцы (нужное подчеркнуть) цитируют сами себя, чтоб набрать цитирований. 9/ но один из самых больших минусов академической среды - это гонка за цитированиями и количество публикаций иногда количество берет верх над качетвом и люди клепают инкрементальные или вообще невоспроизводимые статьи. 8/ может публичность и фейм не все нужен но мне например приятно, что моей работой могут пользоваться другие люди и строить свои вещи на основе моих разработок. 7/ и никто не узнает где конкретно твой вклад в развитие отрасли, кроме твоих коллег fair, deepmind, openai и другие r&amp;d отделы крупных фирм в этом плане сильно приятнее там твои публикациии останутся под твоим именем, и ты получаешь заслуженную публичность. 6/ грубо говоря, всё, что ты делаешь - ты делаешь для себя и останется при тебе даже когда ты уйдешь из академии в индустрии же все, что ты делаешь приналежит компании (кроме отдельных случаев, когда ты работаешь в ресерч отделе типа fair, deepmind, openai и публикуешь статьи). так я же перечисляю плюсы почитай тредзарплата - это основной минус, но я до этого еще не дошёл. i believe a lot of people in the ai community would be ok saying it publicly has no idea what he is talking about when he talks about ai there is no such thing as agi and we are nowhere near matching human intelligence #noagi. 5/ + катаешься по конференциям - это понятно там тоже тусовки, новые знакомства и немножко новых знаний+ учишься самоорганизовыватсья и быть своим собственным проджект-менеджером и тимлидом+ манажишь студентов магистров =опыт руководства у меня до 5 человек за раз доходило. 4/ + при всем этом остаешься студентом (если ты делаешь phd) и можешь участвовать во всех студенческих тусовках все совсем по-другому, когда ты уже не студент+ ведешь практические занятия у студентов прокачиваешься объяснять сложные вещи на пальцах расширяешь круг знакомств. 3/ + погружаешься в выбранную тобой отрасль и можешь стать мировым экспертом в ней+ практикуешься делать публичные выступления потому что постоянно можно выступать на семинарах, конференциях, ездить в другие научные институты с докладами. 2/ + нет надоедливых дейли и прочих регулярных митингов если есть что сказать, договорился с профессором на нужное время и поговорил+ соответственно, не нужно бежать в офис на утренний митинг, да и вообще не нужно, если не хочешь (привет #covid19 ). 1/ сначала пройдемся по плюсам академической работы+ как я уже говорил, в академии больше свободы ты можешь сам выбирать над чем работать. сегодня поговорим про разницу между deeplearning в академии и индустрии скажу сразу, что опыт с ml в индустрии у меня был только в одной небольшой фирме в минске до моего phd и на стажировке в facebook ai research но мне есть, что сказать. а пока сделаю перерыв на дописывание очередной статейки скоро вернусь stay tuned!. 14/ это чувство можно слегка сравнить со сдачей сессии в университете только вот к экзаменам я редко готовился больше 3х дней а статьи пишу по полгода минимум поэтому радости от такого на порядок больше. 13/ отослать статью на конференцию после 30 часов работы, потом на утро не пойти домой, а пойти отмечать сабмит, и после всего этого залечь спать на сутки вот это кайф! такое чувство удовлетворения!. 12/ без жесткого дедлайна написание статьи может растягиваться на долгие месяцы дедлайн - это волшебный пинок и катализатор кроме того, всегда есть какие-то новые интересные эксперименты, которые можно делать бесконечно нужно уметь остановиться!. 11/ понимаю это не здорово - скажете вы но такова цена за то, если ты реально хочешь поставить точку в проекте ведь статья - это такое логическое завершение проекта, когда ты подбиваешь все результаты и делаешь логические выводы из работы. 10/ такой режим мне подходит но, конечно, большая часть работы делается за последние 2-3 недели до дедлайна тут индустрия курит в сторонке мы с коллегами можем работать сменами по 20 часов с циклом в 30, вместо 24 а последние 2 дня вообще не спать. 9/ мне нравится как организована работа в научных лабах (во многих) у тебя в год несколько больших дедлайнов - это крупные конференции neurips, cvpr, eccv, cvpr, iclr обычно ты выбираешь какие-то две то есть раз в полгода пытаешься что-то сваять и отослать на конференцию. как раз, то, о чем я тоже собираюсь с вами поговорить позже даже такие умы как лекун и бенжио не успевают следить за всеми новостями.  : thanks and yoshua bengio for a fun &amp; enlightening conversation at the turing session #iclr2020 ! recordings will be available online soon stay tuned! in the meantime, read feynmans qed, kahnemans thinking fast and slow, and watch 2001: a space odyssey :). 8/ конечно, свобода она условная ведь есть профессор, которого периодически нужно убеждать в правильности тобой выбранного направления ресёрча но это тоже полезный навык. 7/ еще один аспект - это свобода выбора, чем заниматься, и изучать попутно новые вещи можно выбрать одно направление и бить его 5 лет, а можно каждый год-два немного отклоняться и пробовать новые вещи. 6/ так же хотелось по максимуму погрузиться и углубиться в одну область, чтобы стать экспертом в ней phd такую возможность дает, в отличие от индустрии, где тебе нужно уметь все и сразу и проекты могут часто меняться. 5/ мотивация сделать phd у меня была следующая я хотел заниматься чем-то более наукоемким, чем просто писать код на плюсах писать на плюсах хорошо - навык нетривиальный, но мне хотелось чего-то большегохотелось создавать что-то новое с нуля.  : exclusive material on the early ussr work on aificial intelligence that has been largely forgotten. но первое впечатление о профессоре может быть иногда обманчивым. нормально:) на самом деле известность твоего научрука очень влияет на то, как ведутся дела в группемолодые профессора больше времени проводят в лабе и более активно вовлечены во все проекты а более опытные, с большим именем часто так заняты, что мало времени уделяют студентам. 4/ я еще не знал тогда про google scholars (да, это правда), поэтому группу выбирал не по цитируемости, а по интересу к направлению группы и личному расположению к профессору. 3/ в хайдельберге я был и до того город очень живописный тут самый старый университет германии (с 1386 г) и он мне понравилсяв довесок, тут живет очень много немецких мультимиллионеров например, я часто проходил около мини-замка карла бенца (это тот, что мерседес). 2/ в германии нормальная прктика - вообще не отвечать на письма, если неудобное время или просто например сейчас нет свободных позиций к этому привыкаешь хотя теперь, я уже и сам таким грешу влияние среды. 1/ так получилось, что я решил делать phd по компьютерному зрению и мой выбор пал на германию разослал пачку резюме пришло с десяток ответов, из них примерно половина сделали офферы. сразу хочу извиниться за чрезмерное использование английских терминов в постах на мой взгляд, некоторые вещи лучше доносят смысл если их не переводить🧐. считаете ли вы, что для успешной работы в ml/deep learning желательно иметь релевантную степень phd?. 4/ очень примерный план:пн: зачем делать phd и как выжить если уже начал(а)вт: разница между академией и индустрией в mlср: как читать статьи, быть в курсе всего и не поехать кукухойчт: основная работа и kaggle - нужно ли?пт: стажировка в facebook ai researchcбвс: экспромт. eсли нужно, то код нашего решения carvana image masking challenge есть на гитхабе. 3/ и image &amp; pattern analysis lab больше углублены в теорию и не очень любят нейронные сети. 2/ наша группа занимается cv без определенной привязки к области- image analysis and learning lab  занимаются cv для life sciences и плотно коллаборируют с биологами- visual learning lab на пересечении классического ml и cv. 1/ я работаю в computer vision lab наша группа принадлежит одному из крупнейших иснститутов германии по обработки изображений heidelberg collaboratory for image processing (hci) hci включает в себя 4 научные группы. привет! на этой неделе с вами артём, еще известный как asanakoy в ods или я phd-студент по computer vision в ( германия) и kaggle competition master (top 50)о моей научной активности можно почитать здесь. написать этот тред мне стоило больших усилий признавать ошибки публично очень нелегкопожалуйста, не повторяйте моих ошибок!. я надеюсь, что моя история будет хорошим примером, что нужно думать, прежде чем писать или говорить сказанное может быть интерпретировано по-разномукак я писал ранее, коммуникация является самым важным навыком, и этот пример очередной раз это подтверждает. мне очень сложно поставить себя на место женщины, но я понимаю, почему сообщение оскорбительно и не является приемлемым. моя попытка пошутить была интерпретирована, как издевательство над дамами — что они не могут быть докладчикамиэто не то, что я хотел сказать мои слова обидели большое количество людей мне стыдно за это и я хочу извиниться за написанное. вот что вышло сложно сказать, чем я думал в тот день, но очевидно, что эмоциональный интеллект в этом сообщение на нуле. мне эта ситуация показалась необычной: не каждый день появляется возможность выступить на митапе для ледиу меня в руках был телефон с открытым ods и я решил, что поделиться этой новостью с сообществом — отличная идея. компания, в которой я работал, спонсировала митапы: предоставляла площадку, а взамен могла заявить своих докладчиков, чтобы что-нибудь рассказатьоднажды мы помогали митапу pyladies и искали докладчицу, но тогда у нас не было дата саентистов леди, и доклад попросили сделать меня. напоследок, хочу поделиться историей, за которую мне до сих пор стыдно спасибо за напоминание — я еще раз задумался по поводу этой ситуациия хочу перед всеми публично извиниться, и рассказать, какие выводы я из этого вынес.  : как вы относитесь к тестовым заданиям на дом?. тред за выходные: поиск работы и собеседования. compile. на этом про собеседования у меня всё, удачи с поиском и хороших офферов!с вами был. напоследок порекомендую ходить по собеседованиям хотя бы несколько раз в годумение проходить собеседование — тоже навык, и его надо поддерживать в тонусе. я веду табличку со всеми собесами, на которых был за последнее время пока там 46 строк большая часть собеседований заканчивалась без оффера. и вторая отличается от первой тем, что не призывает играть в игру “кто первый назовёт цифру — тот проиграл” в этой статье рекомендуется озвучивать ожидания как можно раньше по моему опыту, для европы (берлина) такой подход работает лучше. у меня две любимые статьи про то, как торговатьсяпервая. если вышло получить два или больше оффера — поздравляю, теперь можно торговатьсяс одним оффером сложнее, но попытаться тоже можно. получили оффер — отлично но сначала нужно довести до конца все другие процессыпоэтому сразу же всем другим компаниям пишем про оффер. у процесса 2 исхода:- отказ — ничего страшного, бывает- оффер — ура (но сразу не соглашаемся). для каждой ситуации используем star формат:s: ситуация — библиотека х не работала, никто мне не мог помочьt: задача — проблему нужно исправитьa: действия — прошел онлайн курс и научился пользоваться хr: результат — исправил проблему и научил этому других. лучший способ подготовиться к таким собесам — взять ценности от какого-нибудь амазона и по каждому пункту придумать 2-3 ситуации с работы (или учебы). на behavioural раунде проверяются софт-скилыэто вопросы типа “расскажите про ситуацию, когда вы” (tell me about time when )- не согласились с начальником- затащили проект- менторили джуна- поспорили с кем-то в команде.  : осмелела и спросила, можно ли прислать тестовое задание для другой компании? сказали 💯 да и вы смелейте). еще есть хорошая книга, в которой рассматриваются основы проектирования распределенных системона будет полезна всем, кто программирует — не только для собесов. для подготовки к систем дизайну еще можно использовать гуглищем “system design x”, где x — система, которую мы хотим спроектировать на ютубе много хороших видео. как говориться к систем дизайну? проектировать системы самостоятельно — то есть работать работу по учебникам это тренировать сложнееу людей без опыта проектировать системы обычно не просят. отличие от задачек (use cases)в систем дизайне фокус на последний этап процесса - на фазу deploymentв use cases фокус больше на первые этапы. в задачах на систем дизайн обычно рисуем схемы на доске обсуждаем следующее:- какие компоненты есть в нашей системе- откуда и куда идут данные- где тренируется модель- как мы её катим в прод- как справляемся с нагрузкой. дальше поговорим про мл систем дизайнэто задачи типа “давайте спроектируем систему для ”- обнаружения спама- рекомендаций- автокомплита- рассылки маркетинговых предложений и тп. минутка рекламы: статья про crisp-dm на основе материала из моей книги. как готовиться к задачкам: - придумываем какую-нибудь проблему (или берем с кагла)- вспоминаем про crisp-dm- расписываем решение этой проблемы по шагам. иногда бывает раунд с задачками (use case)собеседующий описывает какую-то гипотетическую (или не очень) ситуацию и нужно предложить решение. почему я так не люблю тестовые?потратил на них слишком много времени, и почти без толку — оффером это закончилось всего один раз. обычно это не работает и компания посылает куда подальше =) но у лично у меня пару раз сработало. от тестового можно отъехать:у меня, к сожалению, нет времени его выполнять, но будь время, я бы подошел к решению задачи так: (объяснение)вы можете посмотреть примеры моего кода у меня на гитхабе (ссылка)мне вакансия очень нравится, я бы очень хотел продолжить общение. плюсы тестовых для кандидатов:- нету(ну, если не считать еще один проект в портфолио). минусы тестовых для кандидатов:- занимают много времени- невозможно понять, что от нас хотят- возможно, уже есть кандидаты на более поздних этапах процесса (оффер уйдет им). в некоторых компаниях тестовые — неотъемлемая часть процесса в моей тожецель — проверить, может ли кандидат только языком трепать или руками тоже знает, как работать. теперь про тестовые ненавижу. кстати, если есть желание принять участие в проекте, есть задачка, до которой я никак не доберусь:нужно сгенерировать данные, чтобы упражнения по sql было проще выполнять. ответы тоже есть, но как обычно — это ответы от сообщества, поэтому используйте их аккуратно. подробнее про технические собесы я писал в статье. некоторые проверяют знание алгоритмов — задачки уровня easy/meduim с leetcodeсамый простой способ подготовиться к этому — решать задачки на литкоде. питон тоже надо проверитьмоя любимая задачка для скрининга — написать rle:дано: “aaabbcca”надо сделать: [(“a”, 3), (“b”, 2), (“c”, 2), (“a”, 1)]. дальше идут технические вопросы дата саентистам нужно знать sql, иначе как мы сможем самостоятельно достать данные для модели? поэтому этот навык проверяется на собесах. да, такое было шутка вышла из-под контроля ничего плохого в виду не имел, перед оргами извинился и потом имел очень непрятный разговор с начальством (который сам инициировал)надеюсь вы меня когда-нибудь простите. ответы тоже есть, но они от сообщества и не всегда правильные используйте с осторожностьюответы, правки и комментарии приветствуются внизу есть ссылка на гитхаб репозиторий — можно создать issue или pr и поставить. для тех, кто готовится, я не так давно сделал статью с вопросами. можно долго спорить о полезности таких вопросов, но такие раунды есть и стоит быть к ним готовым. на собесах по теории обычно проверяются знания по млэто обычно проходит в форме вопрос-ответ:- чем рандом форест отличается от gbm?- как работает adam?и подобное. на первом собесе нужно быть готовым говорить про зарплатные ожиданияможно попытаться это отложить на самый конец процесса, но для опытных спецов полезнее иметь заготовленную цифру, чтобы всем сэкономить время. не встречал еще компаний, готовых платить за тестовое. у нас тоже.  : после получения оффера.  : кто должен назвать вилку/ожидания по зп первым?. нисколько за тестовые обычно не платят. как вы относитесь к тестовым заданиям на дом?. на созвоне с рекрутером надо уметь рассказать про себя лучше подготовиться и заранее придумать историю на пару минут. раунды на собесах бывают разными:- созвон с рекрутером- теория- кодинг (sql, питон, иногда алгоритмы)- тестовое- use case- систем дизайн- behavioural. отказали — ничего страшного это тоже полезный опыт проводим ретроспективу и учимся на ошибках. после каждого собеседования проводим ретроспективу:- какие вопросы были? - мои ответы на них — ок или нет- что можно сделать лучше в следующий разлучше всего это делать в письменном виде. нет времени заниматься своими проектами?можно рассказать о рабочих проектах, поэтому пишем статью, выступаем на конфах, рассказываем про это в соц сетях. чтобы повысить шансы получить письмо от рекрутера или hiring manager-а, надо быть на виду - делаем проект (кагл, курсач/диплом, пет-проект)- выкладываем код на гитхаб- пишем статью на хабр/медиум- делимся статьей в соц сетях. обычно в вакансиях описываются идеальные кандидаты: такие кандидаты не существуютпоэтому откликаемся на вакансию даже если профиль не совпадает на 100%.  : как часто ходите по собеседованиям?. хинт для желающих переехать: ставим “берлин” в профиле и начинаем получать письма от рекрутеровдля германии такой вариант работает- от компании ничего не требуется, чтобы сделать визу- типичный notice в it компаниях 3-4 мес, так что ждать работников в любом случае долго. для снг (в странах, где linkedin не забанен), думаю, алгоритм похожий не забываем про канал “jobs” в ods. как искать работу?для германии:- заводим профиль на linkedin- ставим галочку “ищу работу”- откликаемся на вакансии и отвечаем рекрутерам - регистрируемся на glassdoor, создаем job ale и получаем вакансии в ящик каждый день. сегодня про поиск работы и собесы — для дата саентистов и не только с вами опять. начал готовить материал на завтра, и понял, что получается слишком многопожалуй, поменяю план на выходные:сб собесы и поиск работывс собесы и поиск работыпро персональный бренд расскажу как-нибудь в моем личном аккаунте, поэтому подписывайтесь на. напоминаю: сегодня поговорим про карьеру, присоединяйтесь, кто не будет спать. про хард-скилы. после получения оффера. кто должен назвать вилку/ожидания по зп первым?. как часто ходите по собеседованиям?. compile. пожалуй, у меня всё на сегоднязавтра поговорим про поиск работы и собесы:- какие раунды бывают- какие вопросы- как готовиться- как торговатьсяподписывайтесь на. основные советы из книги “чистый код”в чистом коде:- понятные имена для переменных, функций, классов- функции короткие — не больше 20 строк- код отформатирован- есть тесты. код должен быть читаемый у дата саентистов часто с этим проблема, у меня тожемоя любимая книга про это — “чистый код” от дяди бобакак минимум стоит прочесть первую треть книги, остальное уже на своё усмотрение. самый простой способ написать интеграционные тесты — использовать docker composeвсе сервисы от aws в интеграционных тестах можно подменить на localstack. как минимум, нужно иметь два набора тестов:- юнит-тесты: используем nose, unittest или любую другую библиотеку- интеграционные тесты: тестируем нашу модель как черный ящик, запакованный в докер. теперь про код и лучшие практики не забываем писать тесты =). что делать, если админы — вахтёры и не дают деплоить? убеждаем, что нам доверять можно: - сначала деплоим под присмотром- просим помощи когда надо- стараемся не косячить (иногда бывает — ничего страшного)навык убеждения — не хард скилл, поэтому сегодня не про это =). если используется aws, то обычно вся инфра поднимается не кликаньем в веб-интерфейсе, а библиотеками типа terraform или cloudformationпоэтому рекомендую обратиться к админам и попросить у них помощи в изучении этих инструментов (или других, которые у вас используются). сам я проходил курс с udemy от stephane maarek курсы платные, но у нас в компании бизнес-подписка на udemy, поэтому я проходил бесплатно. было бы интересно узнать, как надо подготовить код для админов. если используется облако, то полезно знать основные сервисыдля погружения в aws отлично подходят курсы по подготовке к сертификации от aws — сам сертификат можно и не сдаватьслышал что этот курс хороший — и его можно пройти бесплатно. после миникуба можно поиграть с настоящим кубернетесомнапример, взять кластер на любом облаке — google cloud, aws или azure вроде у яндекса и мейла тоже естьговорят, что на digitalocean можно бесплатно попробовать, но я не проверял. конечно не издевательство! админы важны и нужны, и их часто не хватает. твиттер вынуждает быть лаконичным =). простой способ научиться пользоваться кубом — поиграть с minikube:- ставим minikube и kubectl- пакуем модель в докер- создаем ямл файлы- kubectl applyвот неплохой туториал (но наверное есть лучше). понятно, что много чего может пойти не так, но не значит, что не нужно пытаться. сейчас многие используют kubernetes для управления инфраструктурой если ваша компания тоже, то есть смысл научиться им пользоватьсядля деплоя моделей достаточно:- написать yaml файл- выполнить kubectl applyэто покроет 99% потребностей. берем деплой в свои руки и изучаем:- aws (или что у вас там)- основы девопс (всякие infrastructure-as-code тулы). можно не во фласк, а еще куда-нибудь, главное чтобы модельку можно было как-то использовать из других сервисов.  : как часто вы тренируете мл модели? (на своей основной работе)если не работаете или не работаете в дс - не голосуйте =).  : для дата саентиста важнее. шаг “отдать админам на деплой” занимает больше времени, чем хотелось бы: они люди занятые, все от них что-то хотятнадо им помогать. да, они помогают с первым пунктом, готовят данные, чтобы жизнь дата саентистов была проще. на самом деле, я приятно удивлён - ожидал, что в основном будут голоса за последние два варианта. проголосовашие за первые два варианта - где вы работаете?. этого вполне хватит, чтобы1) собрать данные2) натренировать модель3) засунуть её во фласк4) отдать результат инженерам/девопсам/админам на деплой5) наблюдать как наша модель улучшает kpi компании и несет счастье всему миру. это не набор навыков, необходимый для найма скорее это набор навыков, необходимых для выполнения большей части задач самостоятельно. базовый набор навыков для дата саениста примерно такой:- работа с данными, sql- git- кодинг на питоне- numpy, pandas, scikit-learn- тренировка и валидация моделей- микросервисы, фласк, докер. с вами , сегодня мы поговорим про хард-скилы. к сожалению, больше 4-х вариантов нельзя выбратьпока результаты такие. выбираю баланс. как часто вы тренируете мл модели? (на своей основной работе)если не работаете или не работаете в дс - не голосуйте =).  : в качестве подготовки на завтра: что для дата саетистов важнее?. для дата саентиста важнее. тред сегодня: коммуникация и прагматизм. compile. по теме софт-скилов у меня твиты закончилисьзавтра поговорим про хард-скилы:- инженерные практики- инфраструктураподписывайтесь на. такой подход я называю “прагматичным”:- начинаем с простого- часто итерируемся- приоритезируем: выбираем самое важное- вовремя останавливаемся, если проект нужно прикончить. в итоге мы быстро получаем сервис, который более-менее работает, проверяем наши идеи, убеждаемся, что они работают — и только в этом случае усложняем наш проект. мне нравится вот такой подход от дяди боба: - make it work: определяем те самые 80%, быстро пишем код, срезаем углы, получаем работающую систему/модель - make it right: причесываем код и архитектуру- make it fast: оптимизируем. всегда помним про принцип парето (он же 80/20): мы можем получить 80% результата вложив только 20% усилий- создаем список всех фич- помечаем каждую как must-have, should-have, could-have- фокусируемся на самых важных must-have. прототипирование — эффективный способ проверить, что мы двигаемся в нужном направлении - отводим неделю на создание прототипа- демонстрируем или тестируем на пользователях- убеждаемся, что проблему поняли верно (или нет). давайте теперь немного поговорим про планирование и приоритизацию — как раз обсудим, как такие ситуации сделать наименее болезненными. часто случается, что пообщались, проблему вроде бы поняли, все согласовали, придумали план, начали работатьа через некоторое время оказывается, что на самом деле нет, нужно всё делать по-другомузнакомо?. чтобы подготовиться к важной встречи или докладу, я заранее пишу основные идеи, которые хочу донести даже если эти слайды или заметки не потребуются, это упорядочивает мысли в голове еще одна хорошая статья от того же автора. написание писем и документации — тоже важный навыкэффективное письмо начинаем сразу с сути дела, а потом перечисляем аргументы это называется “the pyramid principle”вот хорошая статья про это. с ростом проекта такой журнал переезжает в confluence, который не такой удобный для редактирования, но удобный для поиска (и продакты его любят больше). еще один способ коммуникации — документация для проектов я веду journal document — гугло-док, в котором записываю- цель проекта, решаемые проблемы- заметки с митингов- письма от стейкхолдеров- результаты- возникшие сложностикаждый пункт с датой и участниками обсуждений. митинги — один из способов коммуникациичасто бывает, что что-то обсудили, но в итоге не понятно, о чем договорилисьчтобы этого избежать, во время встречи я всё записываю, а потом шлю:- notes: о чем говорили- action points: конкретные действия (+ имя). коммуникация нужна чтобы:- понять проблему- предложить решение- объяснить решение (простым языком)- понять, правильную ли проблему мы решаем- интерпретировать результаты- договориться с другими командами- рассказать о наших достиженияхи не только. для проверки софт скиллов обычно использут behavioural interview, я немного затрону эту тему в субботу. для проверки софт скиллов обычно использут behavioural interview, я немного затрону эту тему в субботу. коммуникация — самый важный навык для дата саентиста. этот список я придумал не сам, а надергал из разных мест в интернетесегодня мы поговорим только о нескольких из них — в основном о коммуникации и немного о планировании проектов начнем с коммуникации. интересная мысль! видимо, резюме - это место для проф навыков и достижений?. полезных софт-скилов много:- обучаемость- креативность- ответственность- работа в команде- коммуникация- умение слушать- умение делегировать- эмпатия- умение давать обратную связь- планирование времени- приоритизация- гибкость- системность. сразу скажу, что я далеко не эксперт в этой областия относительно недавно осознал важность этих навыков и сейчас пытаюсь как-то развиваться в этом направлении. с вами , сегодня мы поговорим про софт-скилывики подсказывает, что soft skills — это важные для карьеры “надпрофессиональные” навыкито есть, все что важно для работы, но не является хард скилами — это софт скилы. результаты опроса: большинство решило, что хард скилы важнее.  : кстати, интересно, как вы себя определяете?. сегодняшний тред: карьерная лестница. в качестве подготовки на завтра: что для дата саетистов важнее?. compile. на пока это всё завтра поговорим про софт-скилы:- коммуникация- планирование и приоритизация- прагматизмподписывайтесь на. я сам не менеджер и никогда не был, так что эта часть у меня на уровне теориибыло бы интересно попробовать, поэтому стараюсь хорошо делать свою работу и жду удачного момента =). занять свободное место менеджера не всегда простосамое главное в этом процессе:- сказать своему начальнику, что интересно стать менеджером- активно прокачивать необходимые навыки — обязанности сеньера часто этому способствуют. много раз видел, как сеньеры становились менеджерамиобычно это случается естественным образом:- превращаешь требования в задачки для джунов- делаешь это хорошо- появляется свободное место менеджера в другой команде - становишься менеджером. с менеджерской веткой немного проще:- data science manager управляет дата саентистами из 1-2 команд- head of data science управляет несколькими менеджерами (на уровне отдела)- director of data science управляет несколькими отделами. как только стану принципалом — расскажу подробнее =). в моей компании всего два человека на экспертном треке на уровне выше лида (оба не дата саентисты)они туда попали, затащив серьезные архитектурные и инфраструктурные проекты, требующие скоординированных усилий команд из нескольких офисов. главное отличие приницала от лида:- лид действует на уровне одного отдела - принципал — на уровне нескольких отделов или даже офисов. я не так много знаю людей уровня выше лида, поэтому сложно сказать, что именно ожидается на следующем уровне и как туда попасть. как обычно — чтобы стать лидом официально, нужно сначала стать неофициально, поэтому:- ищем возможности для взаимодействия с другими командами (лучше несколькими)- убеждаем их делать то, что нам нужно :). чтобы сеньеру стать лидом, обычно нужно- скоординировать работу нескольких команд для важного проекта- хорошо знать что происходит в разных командах- еще больше общаться со стейкхолдерамито есть надо качать софт-скилы. главные отличия лида (стафа) от сеньера:- ведёт несколько проектов в нескольких командах- меньше работы руками- больше коммуникации. следующая должность после сеньера везде называется по-разному: это может быть lead, staff или principal. кстати, в эту пятницу поговорим про карьеру - кто не будет спать, подключайтесь. из описания видно, что сеньер — это техлид на проекте поэтому в некоторых компаниях разветвление на менеджера и эксперта начинаются раньше — уже после мидланапример, похожая схема в wayfair и zalando. часто в компаниях для повышения есть формальное требование — дотащить 1-2 проекта до прода и повлиять на ключевые kpi это тяжело: я видел, как готовые сеньеры не могли официально получить промо из-за неудачного проектачто делать? искать другой проект (или компанию). для дата саенса, мидлу еще следует прокачаться в разработке:- следовать лучшим инженерным практикам- влезть в инфру — уметь самостоятельно выкатывать свои сервисы в продпро это подробнее поговорим в пятницу. да, не много, но часто работы всегда больше, чем людей поэтому сеньеры обычно рады, когда часть их работы кто-то берет на себя. то есть, чтобы мидлу стать сеньером, нужно- много общаться со стейкхолдерами (не знаю, как по-русски)- переводить требования на понятный джунам язык- целиком взять на себя какую-то часть проекта и не бояться принимать там все решения. чтобы стать сеньером официально, надо сначала стать сеньером неофициально. предварительные результаты. ключевые отличия сеньера от мидла:- больше общения- больше ответственности. сеньер — как мидл, плюс- менторит джунов и мидлов- ведёт один или несколько проектов в команде- превращает абстрактные требования в конкретные таски, общается с нетехническими людьми- разработка минимум на уровне мидла-программиста. мидл- справляется с задачами самостоятельно- активно участвует в обсуждениях, планировании и приоритизации- может целиком сделать фичу без присмотра- помогает джунам. самые главные качества джуна- желание учиться- умение спокойно принимать критику. кстати, интересно, как вы себя определяете?. начнем с джуновджун умеет справляться с хорошо поставленной задачейпроявляет инициативу, участвует в обсуждениях, не требует присмотра — повышаем до мидла. с вами , сегодня среда, поэтому говорим про карьеру и карьерную лестницуу нас карьерная лестница выглядит так (но тред будет не про нашу фирму, а индустрию в целом). не очень работать намного выгоднее, чем книги писатьно есть косвенная выгода: строчка в резюме, возможно даже узнаваемость думаю это может оказать позитивное влияние на зпкак допишу - расскажу :). сегодняший тред: автобиография, часть 2. compile.  : our new paper, truncated quantile critics, improves sota on mujoco by 20-30% !  with tf and pt code credit to  and dmitry vetrov video: page:. кстати, у нас уже 15к твитов!. на этом всё, завтра поговорим про карьерную лестницу:- обязанности джунов, мидлов, сеньеров- как получить повышение- что такое сеньер и что делать дальшеподписывайтесь на. в какой-то момент со мной связались люди из издательства manning и предложили написать книгуя долго думал: написание книги — процесс нелегкий в итоге решилсясильно рекламировать не буду, вот тут можно почитать больше. еще подкину статей: вот тут я рассказываю про деплой моделей, про работу лидом и про то, кто такие full-stack дата саентисты. самым сложным в работе лида оказалась работа с людьмиу всех свои взгляды на то, какой должна быть система, но надо всех этих людей усадить в одной комнате (сейчас в зуме) и заставить договориться. после года работы меня повысили с сеньера до лидая сместил фокус на помощь коллегам, менторинг и синхронизацию между командами. про поиск дубликатов я делал презентацию на — видео с доклада не так давно выложили в открытый доступ. параллельно я работал над системой для отлова дубликатовопыт участия в кагле опять оказался полезным для получения проекта, но фокус был опять на инфре: обрабатывать 10 млн картинок в день — не так уж и просто. в olx я познакомился с kubernetes и terraform и через пару месяцев монстр франкенштейна уже был в проде потом мы много чего там улучшили и запилили инфру для деплоя других моделейя даже по мотивам написал статью. в первый же день мне дали модель (вернее, ансамбль из трех моделей) для определения качества картинокэто был огромный докер-образ, в котором помимо tensorflow зачем-то был еще texlive и много всякого другого барахла, а на инференс тратилось 20-30 секунд на cpu. так я и оказался в olx, где и сейчас работаю. и тут я заметил: на берлинском рынке опыт построения инфраструктуры для мла очень ценитсяно по деньгам оказалось выгоднее подаваться на вакансии дата саентистов и продавать себя как дса с умением катить модельки в прод, а не как инженера, знающего мл. в какой-то момент мне понадобилось самому натренировать модель и я осознал — теперь для меня это нудный процесс:- поменять параметр- подождать какое-то время- посмотреть на график- опять поменятьинфра вдруг оказалась интереснее!. там я с нуля построил систему для обработки данных и тренировки моделей на aws, spark и luigiмоделями занимались мои коллеги, а я пилил инфру для этого. тем временем я оказался в стартапе, занимающимся рекламой и bобъемы данных — десятки тб в день воротить такие данные тяжело, поэтому я постепенно переключил фокус с машинного обучения на дата инжиниринг и построение инфры для моделей. еще во время учебы я начал рецензировать книги от packt publishing однажды нашел у себя в ящике письмо от них“ты круто рецензируешь, не хочешь написать книгу?”я решил, что хочу в результате появилось вот это. следующие полгода я плотно подсел на кагл, решая все новые соревнованиязакончился этот марафон соревнованием от avito по поиску дубликатов, где моя команда оказалась в золотепосле этого пошли картиночные соревнования и интерес с каглу как-то пропал. первое соревнование на кагле открыло мне глаза: я совсем не умею готовить мли магистратура, и онлайн курсы совершенно к этому меня не подготовили, а теоретические знания оттуда оказались бесполезными. в этой же компании я познакомился с одним известным каглером (сейчас 4х грандмастером), который меня подсадил на иглу кагла. там я познакомился с контент-маркетингомкопирайтеры работают так: получают задание “написать 15к слов по теме сыр”, смотрят выдачу в поисковиках и пытаются повторить результат моя модель им помогала: выдавала ключевые слова, обязательные для попадания в топ гугла. с вами опять , продолжаю писать авто-биографиюна первую фулл-тайм работу дата саентистом меня взяли из-за опыта в джаве: дс команде нужна была помощь с интеграцией моделей в прод. биографии, оказывается, читать интересно! но я бы в любом случае продолжил, не выкидывать же подготовленный материал =). пока готовил сегодняшний материал, возник вопроса эти авто-биографии вообще кому-то интересно читать?. тред за сегодня. compile. на сегодня, пожалуй, всёзавтра расскажу про- первую фулл-тайм работу в дата саенсе- кагл- как я перестал быть дата саентистом (но все ещё им назывался)- мою текущую работу в olxподписывайтесь на. к выпуску у меня уже было- 3 года опыта на джаве- 10+ онлайн курсов- 15 года опыта в мл на фрилансе- пара курсовых и дипломный проект- коммиты в apache mahoutжелающих нанять людей с таким багажом было много и phd уже был не так нужен в аспу решил не идти. так я и оказался в берлине, где и по сей день живу. я выбрал специализацию в tu berlin там мы изучали large scale bi, делали упражнения на apache flink и даже писали свою бд почти с нуля. в итоге меня взяли на it4bi — программа по business intelligenceпервый семестр в бельгии, второй во франции, третий и четвертый — германия, франция или испания на выбор(я тогда не знал, что bi имеет мало общего с дата саенсом). похоже, что всем нужно было phd но у меня не было даже магистра, поэтому решил таки добить это и начал искать, куда податьсяподавался в основном на программы со стипендиейвот список программ на которые я отправил документы. вместе с курсом на курсере начали появляться первые вакансии дата саентистовтипичный диалог на собеседовании в то время: “у вас же даже phd нет, давайте вы лучше к нам джавистом, пару лет поработаете, а потом посмотрим”. в люксофте я работал на ubs — это швейцарский банк моя работа состояла в перекладывании большого количества xml из одной очереди в другуюв это время появился тот самый курс по machine learning на курсере я его посмотрел и понял, что хочу заниматься mlом, а не xmlом. внезапно вмешался военкомат, деньгами проблему решить не получилось, поэтому было принято решение уехать куда-нибудь из россиив итоге я оказался в офисе luxoft в польше, в кракове. в какой-то момент я решил продолжить учебу и устроился в магистратуру в нижегородский политех, он же нгту, на интеллектуальный анализ данныхна первом семестре мы писали какие-то алгоритмы на wolfram mathematica и что-то делали на 1c. со второй работой повезло больше: я устроился в небольшую фирму пилить приложение для продажи гудков на телефоны (да, ими кто-то пользуется)писал фронт на jquery и бэк на spring, было весело, мне доверили всё приложение, дали в подчинение помощника и даже обещали сделать лидом. в итоге я очутился в одной аутсорс компании на должности джава-программиста (джаву я не знал) с зп в 20 тыс рублейтам меня научили проходить собеседования и продали заказчику как мидла а потом уволили, когда я не смог справиться с нагрузкой. больше всего запомнил собеседование в инновационную фирму с одним сотрудником: офис в гараже, вечер, фонарей нет, ничего не видно, вокруг бродячие собаки, собеседование на английском, с проверкой sql и алгоритмамина вопросы не ответил, но получил оффер решил не принимать. в 2010 году в нижнем был сильный кадровый голод, поэтому с руками отрывали всех, кто мог связать два слова и подавал хоть какие-то надежды. после бостона в биробиджане задерживаться не хотелось, поэтому после получения бакалавра, двинул покорять западначал с нижнего новгорода — на москву денег не было. собеседование в boston university было интересное: меня спросили, могу ли я программировать, я ответил, что могу на этом собеседование закончилось договорились на $11 в час. в бостоне работу найти оказалось очень легко: достаточно было оставить объявление на craigslist и предложения сами посыпалисьв итоге устроился в boston university писать программки на бейсике. во время учебы я узнал про программу work&amp;travel и поехал в сша работать на ярмарке аттракционов было весело, я даже немного начал говорить по-английски, поэтому потом поехал еще раз — в бостон. в вузе я вдруг осознал, что учиться интересно, записался на кружок по математике, и несколько раз каким-то чудом попал на acm icpc, но дальше ¼ финала мы ни разу не прошли. начнем с биографиия из биробиджана — это такой город на дальнем востоке рф с населением в ~70 тыс человек там я учился в школе и в университетеэто вот здесь. привет! эту неделю с вами ololo из ods, еще известный как примерный план:пн и вт моя историяср карьерная лесница у дата саентистачт коммуникация и другие софт-скилыпт продакшн и хард-скилысб поиск работы и собесывс персональный бренд. биография ну вдруг кому-то будет нужно:. железо для дс (на самом деле dl):. инженеринг:контейнеры: в python:. работа в стартапе: как и для кого:. но, так или иначе все подходит к концу подошла и моя неделя к сожалению я не успел раскрыть тему про рутину и автоматизацию наверное раскрою ее на личном аккаунте 👉 подписывайтесь! до встречи?ну и мета-тред по традиции. последний тред вышел очень длинным вот его содержание: общие соображения по сервакам: на 4 карты: 2:. ну и вообще я считаю, что если вы прям не фанат мака и хотите остаться под линуксом, найти себе подходящий ноут не проблема, не надо пересаживаться на мак дорого и качество уже не то пощупайте например свежие xps 13, они тоже прям очень кайфовые сам сижу на latitude 7400. клава: вкусовщина, надо выбирать или привыкать. у одного было больно сидеть, у второго ок так что будьте осторожны, смотрите обзоры и убеждайтесь что шим нет. так вот, это заблуждение, не от fhd вытекают а из-за шим, который есть на дешевых экранах вот от него глаза реально вытекают, и очень сильно проверяли сами, брали 2 ноута, оба fhd, оба 14 дюймов. экран: дюймы на вкус, мне хватает 14, кому-то может нужно и 15 fullhd, все еще, не нужен вам 4к и qhd, только батарею высаживать развею популярный миф что от него вытекают глаза по сравнению с ретиной от мака. ssd: обязательно, 2к20 на дворе, очень сильно все ускоряет по сравнению с хардом разговор можно начинать от 256. ram: 16гб 8 уже сильно мало есть компактные ноуты с нераспаянной памятью, если охота засунуть 32 но зачем? разве что взять такой с 8 и поставить в него еще 8. cpu: только i5, i7 ничего не дает из-за грустных систем охлаждения в ноутах между 8м и 10м поколением может не быть никакой разницы, интел все запутал в 10 серии 9 такое же, как 8 процессоры c индексом h жрут больше. это просто терминал для воода текста, браузера, ide и ssh отладка куда софта через удаленную отладку на сервере, работает отлично. при наличии личного сервака или сервака на работе, а так же мобильного интернета, я убежден что ноуту не нужен дискретный gpu в ноуте важна компактность, легкость и автономность. про ноуты:. вот примерный набор который я бы сам купил если бы собирал тачку на 2 карты на цену не ориентируйтесь, во-первых там американские (некоторые вещи дороже, некоторые дешевле), а во вторых карты там новые а в россии только вторичка. cooler: можно не думать и брать noctua u12s, он хоть и дороже но он просто норм и работаетdisks: тоже ничего особенного. case: midi tower и больше, убедитесь что точно совметстим с mobo так же ориентируйтесь на зад, там должно быть не менее 6 заглушек pci корпуса с нижним расположением бп лучше из-за того что бп не гоняет через себя нагретый возжух дальше смотрите на вкус и цвет. psu: будет достаточно 1000вт, смотрите видео по ссылкам выше, и выбирайте выбор широкий. gpu: тут нет ограничений, берите любыеram: кит на 32гб 2мя планками более чем достаточно (2 для 2х каналов, быстрее). mobo: выбор широкий но не все способны вытянуть многоядерные cpu своей системой питания ориентируйтесь по этой табличке и обзорам для 2х карт еще нужна поддержка sli (он не будет использоваться, но это удобный индикатор того что 2 карты точно заведутся). cpu: сокет am4, ryzen 3 поколения они сильно лучше предидущих и не кусаются ценой 3700x должно быть достаточно (8 ядер) но можно и больше, если есть деньги но имхо уже 3900x это оверкилл, 12 ядер не надо. на 2 карты. disks: ничего особенногоcooler: noctua u12s-tr4 или u14s-tr4 (именно tr4!!!). из них всех сейчас в мск в продаже только v71, но может будут потом или на вторичке на худой конец будете знать на что опираться при самостоятельном выборе опять же вентилируемость, крепление для радиаторов если будете ставить гибриды, и минимум 8 заглушек pci. case: от full tower и выше или крупные cube case (это в которых мобо горизонтально лежит и тяжелые карты не создают выламывающую нагрузку хорошие модели это thermaltake core v71/x5/x9 (x5 и x9 — идеальные cube case), corsair air 740. psu: 1600вт окнорм, меньше не советовал бы хорошо зарекомендовал себя superflower leadex 1600 platinum (он же evga supernova 1600 p2) не следует брать блоки от enermax, у них стабильно работает только одна схема подключения, и то мудреная в остальном рекомендации из видосов. ram: 64гб, 4 плашки (чтобы работало 4 канала, так быстрее) можно брать 2 одинаковых комплекта по 2, у меня так работает норм но есть те кто жалуются что не заводится из-за разных партий хз, не сталкивался лично. gpu: blower style или гибриды, иначе все перегреется blower сильно шумят, учтите это наиболее жирным считается наборы все гибриды, либо 3 гибрида + обычная на 2 слота. mobo: сокет tr4, хорошими считаются asrock x399 taichi или fatality, или gigabyte x399 defignare-ex у подовляющей части одс стоят они так же можно брать asus zenith extrime, но она дороже и смысла в этом не много. cpu: threadripper 1950x или 2950x выше смысла особо нет, ниже не следует, но если очень надо то можно заменить потом сложно, товар на вторичке не ходовой если мажор — берите 3е поколение, но оно оч дорогое но крутое, наверное стоит того. итак, под 4 карты:. на обычных райзенах не хватит pci линий, будет x8 x8 x4 x4 (x4 это очень мало для dl, x8 необходимый минимум) все это железо менее массово и поэтому стоит дороже. водораздел появляется из-за повышенных требований к бп (1600вт+), корпусу, и на 4 карты нужно именно threadripper брать потому что там много pci линий и карты у вас будут работать в режиме 2 x16 и 2 x8,. если экономите на первое время можно без nvme, но иногда придется оптимизировать пайплайны считывания а может вам повезет и вы не столкнетесь с этим ну и 4+тб хард под помойку, конечно же по хардам тоже не могу ничего сказать, не изучал тему, взял первый попавшийся. в ссд тип ячеек (3d) tlc или (3d) mlc (если вы мажор) qlc не надо, быстро деградирует до фиговых скоростей и сыпется среди nvme очень любят серию evo от самсунг, но другие вроде тоже не ругают для сата в принципе покатит наверное любой вендор. берите nvme-ccд на 1тб со скоростями чтения от 1гб/с, чтобы успевать читать кучу датки и нагружать карту его же можно использовать под систему, или можно взять отдельный sata ссд для этого. case: для корпуса в целом важны просторность и продуваемость чем больше размером тем лучше нижнее расположение psu лучше верхнего, блок не гоняет горячий воздух и служит дольше подсветка и стекла на ваш вкус. psu: на бп не надо экономить инфа о том какие брать, сколько мощьности и какая вообще разница есть в этих видео. мое мнение что память с 3000мгц и таймингами 16 не такая дорогая, чтобы экономить раньше еще говорили что важны чипы (samsung b-die), но с новыми поколениями или свежими биосами это кажется потеряло смысл у меня 1900x сейчас работает на 3000 с норм таймингами не с b-die. ram: ryzen из-за особенностей своей архитектуры сильно зависит от скорости памяти (частоты и таймингов) это очень заметно в играх, на ютубе кучу обзоров про это для dl ходят споры: одни говорят 2666 достаточно, другие говорят больше тоже накидывает тайминги тоже важны. если вы мажор, то берите 2080ti из магазина, со вторичкой не надо возиться пока. ничего не должно падать или сыпать непонятными артефактами брал так 3 карты, пока все ок но наверное может и не свезти кому-то если можете себе позволить, смотрите объявления чуть выше среднего по рынку, меньше шансов купить кирпич. при покупке надо смотреть на внешнее состояние (отсутствие сколов, подтеков, пятен) и проверять софтом я обычно прихожу с загрузочным хардом с линукс, гоняю и пару сеток, в дополнение к furmark который обычно для меня прогоняет продавец. или гибридные (2 слота, из видеокарты торчат шланги с водой, на которых радиатор с пропеллером, работают тише аналогов и холоднее, но сильно больше стоят и редки). gpu: 1080ti бу с авито сейчас самые оптимальные по цене/скорости/к-ву vram в целом делятся на 3 типа: обычные (2-3 слотовые, с 2-3 вентиляторами, гоняют воздух по корпусу), турбинные или blower-style (2-слотовые, выдувают наружу),. cpu: берем amd ryzen потому что больше ядер и дешевле для задач диплернинга важнее количество ядер чем производительность одного ядра, поэтому райзены лучше интелов. основные моменты. среди девбоксов существует сильный водраздел по количеству карт: собрать машину на 2 gpu сильно проще и дешевле для 4х карт нужно совсем другие процы, матери, бп и корпуса, которые значительно дороже. - если у вас на работе свободная политика работы с данными (например вы стартап), и вы можете данные скопировать себе, то на своей машине однозначно удобнее учить потому что никто не будет мешать вам и занимать видеокарты. - у вас вообще нет видеокарт ни дома не на работе, но хочется вкатиться в dl поглубже. кому будет полезен свой девбокс:- если вы каглер, и много обучаете вам будет проще жить потому что нет ограничений на время как на кагле, или будет дешевле если сейчас вы учитесь в облаке. ниже 2 сабтреда, один про серваки (aka девбоксы), другой маленький с моим имхо про ноутыесли останутся вопросы приходите в ods канал #hardware, я () или кто-то еще обязательно ответят. поздноночный прощальный тред про железо. обоснование примерно такое же как у вас набил шишек в свое время, больше не хочу. мне к сожалению не известно никаких альтернатив для него, кроме скриптов jupyter я использую только когда надо что-то быстро повизуализировать, или когда я хочу обработать данные, но пока не знаю как, и думаю в процессе все остальное в скриптах, написанных в ide. тлдр: у ребят аккумулировался градиент и в итоге они обучились на валидации. тут в ленту только что прилетела идеальная иллюстрация зачем вообще использовать открытые популярные трейнлупы вместо своих велосипедов:академики скопипастили луп из другой статьи вместе с багом в итоге результаты у них невалидные.  : i released my cookiecutter template for your python package with a bleeding-edge project structure- actions: ci and bots- pre-commit with black, iso, pyupgrade- codestyle/security with mypy, pytest, darglint, etc- many more, check the link. дата-классы завезли в 37 в остальном да, но это уже сильно лучше, чем ничего, которое было раньше. кажется что многие мне это тоже не нравится каталист как раз пытался сделать так, чтобы копировать вообще ничего не надо было в большей части случаев вышло так себе, на мой взгляда лайтнингу не хватает небольших блоков, которые можно было бы комбинировать между собой. изначально тем, что в пайтоне есть типы а про то зачем их указывать написано в треде. в общем я верю, что мы можем лучше смотрите как сделано в чужих трейнлупах, пробуйте обсуждать идеи с коллегами, засылать pr ментейнерам пробуйте сделать свой трейнлуп как у x, только лучше возможно мы когда-нибудь получим удобный инструмент который не будет вызывать боль. еще не хватает хотя бы опционального стандартного способа все таки грузить конфиги причем я не один такой, например вот тут пилит для этого свой костыль. местами скудная документация, некоторые решения тоже очень странные: argparsenamespace для передачи гиперпараметров ( очень странный форматы ретёрнов ( гигантское количество параметров в конструкторах (. сейчас я пользуюсь lightning, и идея давайте просто писать на торче, но немного более структурированно на практике оказывается очень удобной но конечно в деталях там тоже есть проблемы. да и до этого периодически замечал что больше думаю как реализовать какую-то идею в рамках фреймворка, чем думаю над самой идеей тоже показатель того, что что-то не так не представляю что чувствуют люди, у которых никогда не было моего уровня погружения в устройство каталиста. окончательно я попрощался с использованием фреймворка, который сам когда-то разрабатывал, после того как уже будучи не в кор-тим и не пользуясь им регулярно, после очередного апдейта с трудом разобрался как сделать несколько лоссов примеров не было, документации не было финиш. коллбеки же очень неудобны из-за неявных зависимостей между ними через мутный стейт, которые вынуждают проверять их порядок и требуют костылей в виде захардкоженого order (. с конфигами мои претензии очень похожи на то что описано в этой статье если в кратце сложные конфиги превращаются в ненужный неудобный язык программирования, либо даже не покрывают достаточное количество кейсов и код все равно приходится писать. а какие-то, к сожалению, не прошли проверку временем, кмк например конфиги (в том виде, в котором они есть в catalyst), или система коллбеков. например раньше я был членом кор-тим каталиста и пытался сделать классную удобную архитектуру какие-то абстракции у нас получились удобными, и я ими до сих пор доволен, (например разделение experiment/runner). мой тейк в том, что сейчас все не очень хорошо, и мы еще только на пути к удобным абстракциям все эволюционирует, какие-то идеи выстреливают, какие-то нет. какой трейнлуп вы используете в торче. завершая поток мыслей про инженеринг, затрону вечный холивар юзеров пайторча за трейнлупы (да простят меня юзеры tf, theano и caffe если они еще не вымерли). трейнлупы. а если же в вашем коде нет ни одного класса и между функциями вы гоняете только дикты листов диктов неясного содержания, или у вас нет функций, аннотации вас не сильно спасут вам стоит начать с книги сlean сode, чтобы понять, как можно писать код лучше и почему это стоит делать. а если хотите просто прикрутить все best practices в новый проект сразу, то вам в этот стартер-проект (im a bit affilated). вообще практики разработки больших проекты на пайтоне без особых болей активно развиваются, и не ограничиваются только типизацией хороший обзор можно тренди штук можно почитать в этой серии постов. еще типы в пайтоне позволяют писать меньше кода: яркие примеры это (как фласк, только быстрее и удобнее), — argparse/fire на стероидах, который сокращает количество boilerplate. в теории в будущем можно будет автоматически проверить правильность dtype в ndarray, или выводить шейпы на выходе по шейпам на входе работы в этом направлении ведутся. статическая проверка когда: их можно использовать для настоящей статической проверки всего через mypy его так же можно постепенно внедрять в старый код без аннотаций этот инструмент сильно сократит вам количество багов и сэкономит кучу часов дебага. при помощи таких подсказок начинаешь реже сомневаться в том что делаешь, реже лазаешь по коду в попытках найти, что лежит в foo, реже переходите в браузер полистать доку и вообще лучше понимаешь что происходит нужные изменения вносятся быстрее при меньших затратах мыслетоплева. ide становится более полезной: показывает какие поля и методы есть у объекта, возвращаемого из функции, показывает какие параметры есть у методов и напоминает какие типы надо в них передавать подсветить связанные с этим потенциальные ошибки. даже тем кто никогда не писал на статически типизированных языках, или очень хочет оставить себе возможность засунуть str там где нужно засовывать int. начиная с версии 36 в пайтон завезли аннотации типами для сигнатур функций и переменных я попробую объяснить почему это круто и вам нужно начать их использовать. типизация в python. можете ли вы задеплоить весь пайплайн сами и если нет, замедляет ли оно вас?. обучаете ли вы модели в докере. 42/я когда-то делал доклад про нее (c середины) он немного устарел, часть проблем которые я там обозначил уже исправлены, но общий расклад не поменялся по крайне туманным для меня причинам, к сожалению, она почти никем не используется. 41/существует отличная альтернатива докеру под названием singularity работает только под вашим юзером, монтирует текущую рабочую директорию по умолчанию, из коробки умеет работать с гпу, полностью поддерживает образы от докера. 36/не говоря уже о проблемах с безопасностью в случае когда кто-то специально захочет что-то сломать. 35/и сделать это может как джун, вчера впервые в жизни открывший консоль, так и матерый разраб, который просто поставил пробел не в том месте и не заметил знакомые рассказывали, что кто-то подобным образом сломал ось на dgx. 34/второе веселее - эта команда не спросит, уверен ли ты, а система работать практически перестанет попробуйте на досуге в виртуалке не на реальной тачке!. 33/кто-то обязательно пожалуется, что не может удалить файлы, созданные в контейнере, находясь снаружи него, и что ему нужно sudo а получив его, обязательно сделает rm -rf / или сhmod 777 -r /. 31/отдельная проблема это root-права, которые включены по дефолту особенно когда речь идет об общем кластере, что в глубоком обучении довольно распространено, каждому под стол тачку с 4мя картами не поставишь. 22/если вам приходилось что-то обучать в нем, вы наверняка чувствовали боль, когда каждый раз прописывали команды запуска контейнера, чтобы примонтировать все нужные вольюмы, дать доступ к гпу, прописать правильного юзера, etc. 21/при этом конкретно к докеру у меня неоднозначное отношение во-первых, проект не очень быстро развивается в последнее время во-вторых, для работы в интерактивном режиме докер не подходит вообще. 15/нужно было лишь потратить время на написание скриптов-надстроек и помощь коллегам на начальных этапах, что быстро окупалось. 14/ну и конечно унификация кодовой базы с тем что в проде сильно упрощалась поддержку этого монстра. 13/исчезал огромный оверхед на коммуникацию и косяки, связанные с человеческим фактором не нужно было ждать пока кто-то обновит твою модель, или бояться что пока ты считашь со своей моделью сквозные метрики по пайплайну кто-то заменит другую его часть. 12/у нас после внедрения сборки и запуска средствами docker и docker-compose, благодаря которым их мог сделать каждый, разработка в команде ускорялась в разы - каждый человек становился гораздо более автономным. 11/я обожаю контейнеры они радикально упрощают настройку энвайромента как для обучения (нужная версия куды, питона и всех остальных либ), так и пайплайна в целом (взаимодействие между моделями, сбор метрик и тп). контейнеры. вчера не успел начать про инженеринг, прошу прощения начнем сейчас это будет набор разных мыслей, связанный с разработкой в дс сразу предупрежу: ожидается немного капитанства, немного набросов и оценочных суждений не соглашайтесь и бомбите в комменты, будем дискутировать!. и вообще вопрос что такое плохо довольно философский и сильно зависит от точки зрения особенно в дс модель с 97% точности это хорошо или плохо?. иногда — безусловно однако большая часть фейлов все таки лежит за пределами технических вопросов хотя бы потому что писать рабочее по человечество более или менее умеет, а точно предсказывать реакцию рынка не может никто. 84/исключением могут быть те, кто перебирается в дс из разработки но в таких случаях советую быть очень внимательным в выборе команды, высока вероятность, что вы опять будете заниматься разработкой, только потому, что вы умеете делать это лучше своих коллег. 83/джунам - не очень советую этот путь: как минимум будет мешать учебе, а если не повезет - будет мало работы непосредственно с дс, или из-за пункта 6 вас будут гнать, и не позволят научиться делать работу хорошо, но медленно. 82/если вы уже умеете решать задачи, хорошо понимаете свои возможности, способны принимать взвешенные решения по широкому кругу вопросов - в стартапе вы быстро прокачаетесь дальше, сильно расширив свой скоуп, попробовав много всего, и если повезет, неплохо заработаете. 81/подводя итоги, я считаю, что работа в стартапе лучше всего подходит молодым амбициозным сеньорам и мидлам, уже не обремененным учебой в вузе, но еще не обремененным семьей. 73/но в то же время ваш график гибкий: и посреди дня можно отлучиться по делам, взять выходной, и в отпуск отпустят когда попросишь - без бюрократии и прочей фигни главное чтобы задачи делались. 72/ будет и работа по выходным, и поздним вечером, и в ночь перед отпуском для особенно упоротых будет и в отпуске). 71/для многих стартап — это полное отсутствие work-life balance — прилетающие посреди спринта срочные задачи, личное чувство ответственности за результат (а как же, фантики же сгорят!!!), проблемы с оценкой сроков (так как придется делать малознакомые вам вещи). 64/вернуться назад времени уже не будет это относится как к коду и архитектуре, так и к работе с данными. 63/слишком поторопился и сделал говно на палке — продолбаешься в следующей итерации, оказавшись под завалами рухнувшего технического долга, или просто похоронишь перспективную идею из-за багов, тормозов и человеческого фактора. 62/в стартапе время — это реально деньги: не успел — продолбал клиента, не поднял инвестиций → умер. 61/а еще стартап это очень хорошая возможность научиться инжинирингу на грани — научиться делать вещи так, чтобы с одной стороны через месяц вы все еще понимали что там происходит, могли вносить изменения и поддерживать, а с другой — чтобы оно было готово к вчера. и снова здрасте)сегодня закончим тему про стартапы, а вечером начнем про инженеринг stay tuned!. tbc. 53/кстати, поспорю с мнением, высказанным выше : ai в поверпоинте это скорее не про стартап, а про консалтинг там это сплошь рядом. 52/к сожалению, по статистике, зачастую то, что вы сделаете отправится на свалку истории не потому что оно плохо или не работает, а потому что гипотеза оказалась не верна, и это нормально. 51/работа в стартапе — это классная возможность создать то, чего раньше не было: в отличие от устоявшихся компаний, где часто пилят инкрементальные улучшения в существующий продукт, в стартапах почти всегда делают что-то новое. 43/кому-то это по вкусу и не даст заскучать от смотрения на падающий лосс в тензорборде, а кто-то скажет: да ну его, фигня какая-то, пойду лучше в nvidia учить ганы. 42/написать апишку, сверстать страничку, запилить апп под андроид, или написать пару аналитических запросов в бд - хотя ты пришел заниматься cv. 41/помимо добровольных активностей, у вас наверняка будут задачи, которые сильно более про разработку (если конечно вы не совсем сырой джун с 0 знаний за пределами ds). 32/в случае конфликтов не получится уйти в другой отдел, или просто перестать взаимодействовать с каким-то человеком поэтому пресловутая толерантность, умение уважать чужое мнение, а так же умение аргументированно отстаивать свое — ваши главные софт-скилловые друзья. 31/вам придется научиться работе в команде, как техническим её аспектам, так и софт-скиловым людей в команде мало, все они разные и у каждого свои тараканы: кто-то веган, кто-то коммунист, кто-то верит в антинаучную дичь, кто-то не ест сахар, кто-то не любит евреев. 24/все это я делал по собственному желанию было весело, нервно, страшно, бессонно — но ни капли не жалею. 23/я прокладывал интернет в офисе, пересобирал и настраивал железки, выезжал на встречи с клиентами вместе с продажниками для демо, и делал еще много всего, что не относится к разработке и дс. 22/видите, что какие-то вещи делаются неоптимально — предлагаете как это исправить и оуните процесс знаете как можно сделать лучше — делайте. 21/если вы молоды и энергичны и уверены в себе, вы сможете набрать столько ответственности, сколько сможете унести хотите помочь настроить сервак — вперед хотите пообщаться с клиентами — пожалуйста. 12/ особенно интересно, когда разница в возрасте с таким коллегой может достигать 10 лет. 11/ стартап — огромное пространство для роста и развития в команде почти наверное найдется как минимум один очень крутой специалист, у которого можно будет почерпнуть много опыта, знаний, хаков-трюков и просто житейской мудрости. скорее всего такой компании от 0 до 2 лет не берусь утверждать, что во всех компаниях ваш опыт будет похож на мой, но в кулуарных беседах довольно часто делятся подобными наблюдениями возражения/дополнения/вопросы — велкам в комменты. буду рассказывать про стартапы на ранних стадиях — небольшие компании (с технической командой до 10-20 человек), не обязательно с венчурным финансированием (мне известны исключения), у которых пока нет четкого понимания какой продукт они делают, нет большого количества клиентов. 0/ итак, стартапыпогнали!!!. ладно, с биографией вышло дольше чем я ожидал, но зато мы плавно подошли к теме, что такое работать в стартапе. кстати во время работы в dbrain я успел побыть core-developer помогал делать различные архитектурные улучшения, чтобы фреймворк был более дружелюбным и гибким. а, ну да, забыл упомянуть сейчас я учусь в магистратуре мфти. поэтому я решил уйти в in3d, к диме ульянову в тот момент всем еще казалось, что мы будем реально делать публикабельные вещи я хотел, чтобы за время обучения в маге я наберал достаточно публикаций, чтобы попасть на хороший phd это было осенью прошлого года. доходило до того, что в некоторые моменты я вообще не занимался моделями как таковыми а меня тем временем все более тянуло в более академический рисерч. поначалу занимался там просто обучением моделей для разных задач но по мере превращения одного проекта из технодемки в реальный продукт, мои навыки разработки становились все более востребованными. так я оказался на позиции junior ds в dbrain (спасибо где успел поработать с некоторыми прошлыми авторами этого акка, а так же кучей других крутых людей, у которых многому научился. в середине третьего курса мне окончательно надоела разработка, и я понял что пришло время менять работу. конечно все это было параллельно с учебой в мгу, где после второго курса надо было выбирать кафедру я выбрал кафедру ммп, которая специализировалась на мл и анализе данных. в итоге это вылилось в 25 года сотрудничества, в ходе которых, я глубоко погрузился в разработку на java, работу с бд, администрирование и даже немного в менеджмент мы сделали несколько успешных проектов. почти сразу же мне стало скучно и я решил пойти работать через одногрупника на меня вышел человек, который хотел делать мобильные аппы на заказ, и ему нужен был бэкендер я ничего не зная о бэкэнде, но будучи очень уверен в себе взялся. в 11 классе я решил сосредоточиться на поступлениинесмотря на это моих баллов не хватило на фивт мфти и я оказался на вмк мгу. помимо программирования в тридцатке всегда была сильная математика и физика в частности почти вся математическая база, которой я сейчас пользуюсь, была получена еще там. ставьте лайк под этим постом если тоже ходили к витсану или просто учились в тридцадке. там я 2 года программировал сначала на c, а затем на c++ занимались 3д графикой, алгоритмами обработки видео и изображений, и даже дедовским сv, например некоторые из нас реализовывали алгоритм виола-джонса. там я сразу же начал ходить в крутейший кружок по программированию cgsg (сomputer graphics suppo group) под руководством галинского виталия александровича. мне 21 мой путь в программирование начался в 14, когда я поступил в один из топовых физ-мат лицеев питера, фмл №30, в 9й класс. начнем по традиции с рассказа о себе. вот примерный план на неделю:1 работа в стартапе, каково это?2 краткий курс в железо для дата-сайентиста3 борьба с ежедневной рутиной: инструменты, автоматизация4 инжиниринг в мл и околоплан примерный, порядок может меняться, привязки к дням недели нет потому что вот. привет! у клавиатуры всеволод полетаев сейчас я занимаюсь тех-лидством и исследованиями в стартапе  in3d в ит работаю уже 5 лет, в дс 2 года. например, недавно мне пришлось искать во фреймворкаюе на тысячи строк нужныц кусок кода, чтобы добавить возможность регулировать точность и полноту я могла бы потратить на это несколько дней, но спросила у создателя фреймворка в документации этого не было. также важно общаться с коммьюнити это источник новых идей, обмен знаниями о трендах, возможность найти интересные проекты и можно иногда напрямую спросить у создателей какого-то фреймворка смысл их метрики или место в коде где её можно заменить на другую. на мой взгляд, вкатываться в ds нужно прежде всего через проекты математику знать на уровне профессора не нужно, если вам интересует промышленный ml достаточно понимать работу алгоритмов под капотом настолько, чтобы можно было изменить что-то в исходниках библиотеки под себя. помимо этого, веду консультации по чатботам и использованию be если интересно пообщаться на профессиональные темы – стучитесь в твиттере , в тг  кстати, зовут меня алиса хорошавина. далее были проекты для зеленого банка в магистратуре и проекты от знакомых разработчиков с митапов, которым не хватало экспертизы в ml наиболее интересный - чатбот для американской компании потом я ушла на фуллтайм в крупную соцсеть сейчас в компании, которая занимается иб. потом мне предложили там проект по анализу новостей для крупного сми свыше миллиона новостей нерешенная математическая задача тематического моделирования было интересно посмотреть, как работает библиотека bigam в проде, поэтому я согласилась перейти в команду заказчика. как вкатиться в data science? у каждого свой путь я в свое время читала статьи проф константина воронцова и написала ему с вопросами он разрешил мне приходить на его семинары в шад каждые выходные я моталась из питера в москву очень нравились атмосфера и контингент семинаров. пример статьи, объясняющей в терминах теорката, как запрогать нейросеть на функциональном языке: рассматривается как метод, зависящий от выбора размера шага и функции ошибки, а сами нейросети как метод определения параметризованных функций. поговорим немного про фп и ml есть такая неизбитая исследовательская тема – применение теории категорий для описания архитектуры программ / нейросетей. как только очередь перестает расти, логично обработчики гасить, по одному, пока не останется один чтобы не съедали процессорное время. суть такая: если обработчик успевает разгребать очередь, то смысла поднимать новые потоки нет а если очередь растет, то логично, чтобы ее обрабатывали в несколько потоков.  : - некоторые говорят, что прыгнут и ждут реакции окружающих, мы были из тех кто прыгает(с) нейронные сети. один из примеров использования готовых инструментов: для фичей dvc, для метрик ml flow для прода уже можно через airflow раскатать. пример своего:• динамическая многопоточная модель• брокер сообщений - rabbitmq• балансер смотрит на длину очередей, и при необходимости, поднимает новые потоки обработки, разгребающие очередь параллельно как только очередь пустеет, потоки убиваются – все, кроме дежурного. один из наиболее интересных вопросов для меня в последнее время что у вас используется для доставки данных к моделям и их предобработки? свои инструменты для пайплайна пишите или тащите либку?. ссылочки по nlp: - поиск статей - неплохой курс - инструменты (там не про все конечно, область меняется очень быстро) , - тг-каналы. во втором случае:+ для хороших результатов не нужны огромные датасеты+ для решения k задач нужны всего она тяжеловесная модель и k легковесных моделей (например, be / fasttext + 2(3)-слойный перцептрон или logreg / xgboost / knn / k-means / etc)- качество немного ниже. в первом случае мы получаем:+ превосходные результаты на больших датасетах- затратно по вычислительным ресурсам: для k задач нужно держать k моделей на сервере- долгое время обучения (например, be дообучается месяцы на gpu, дни на tpu). в зависимости от требований к соотношению качества и вычислительных мощностей, выбирают вариант fine-tuningа языковых моделей (word2vec, fasttext, be - имя им легион):1) дообучают всю модель под конкретную задачу2) вывод модели используется как фичи, она сама не изменяется. могут в качестве а/в-теста выпустить в прод модель, где f1 выше 05, и смотрят на изменение внешних метрик если улучшение качества модели по времени будет затратнее, чем увеличение прибыли от дальнейших улучшений качества модели, ее принимают такой какая она есть. в кровавом энтерпрайзе чаще используют классический ml, типа лог регрессии и xgboost требования к небольшим затратам вычислительных мощностей важнее качества, которым можно было бы низвергнуть остальные sota. также надо выяснить, что является шумом в данных и важнее точность или полнота например, в карточном антифроде и мониторинге угроз иб важнее полнота, а в антиспаме важнее точность. иногда приходится ориентироваться на критерий человеческого восприятия, отдавая вывод модели на суд гастарбайтерам с толоки и улучшать качество итеративно (с каждым релизом модели приближать ее вывод всё больше к человеческому решению). внешние метрики зависят от доменной области - именно их и озвучивает менеджер иногда бывает, что нет бейзлайна - качества текущего решения, которое нужно превысить тогда нужно обмазать сервис логами и померить текущую эффективность, чтобы смотреть, улучшит ее или ухудшит ее ml. 3) критерий - это про метрики, внешние и внутренние внутренними (accuracy, precision, recall, f1) тоже лучше не грузить менеджера, у каждого своя работа имеет смысл сводить эти метрики к бинарным (auc roc), потому что их легче изобразить на графике, а менеджеры любят графики. 2) найти - что должно быть на выходе модели, насколько важна интерпретируемость по сути это перевод с языка поставки бизнес-задач на язык математики определив, какую целевую переменную мы оптимизируем, не обязательно грузить этим менеджера :). 1) дано - у большинства компаний на вопрос о данных ответ: у нас много данных🤟 приходится уточнять, какие данные есть, каких не хватает нужно ли размечать какого они качества лучше просто пример запросить иногда в итоге приходится делать прототип на открытых датасетах. о постановке и оценке задач в ds• наиболее эффективно формулировать задачи для дата саентистов в форме дано - найти - критерий• лучше, когда это делает сам дата саентист, обсуждая бизнес-задачу с продуктовым менеджером / заказчиком. зависимость от данных. - если все с крыши прыгнут ты тоже прыгнешь?- да(с) машинное обучение. думаю, что можно достичь баланса не каждый день, а в целом за неделю это вопрос умения договариваться например, у меня на неделе плотная работа, выходные – время для близких и для самой себя но в будни я нахожу хотя бы несколько минут для тех, кто мне важен.  : а, вы заметили? ну, я иногда пишу на профессиональные темы из-под мужских аккаунтов думаю, важнее не аватарка, а интересно людям обсуждать со мной рабочие темы или нет).  : кстати, изначально на аватарку было поставлено лицо, сгенерированное нейросетью (взято с имя - какалька yan goodfellow. • аналитические выводы без экспертных оценок – модели нужна интерпретация• зависимость от субъективности, заложенной при разметке• зависимость вообще от данных (например, модели машинного перевода, обученные на религиозных текстах, иногда выдают перевод с сакральным оттенком. ограничения nlp:• сарказм, ирония• фейковые новости -- нельзя детектировать несоответствие фактам реального мира (эта задача эффективнее всего решается с привязкой модели к сайтам перепроверки фактов людьми). специфические задачи декомпозируются на тривиальные, чаще всего – на классификацию но в последнее время наблюдается тренд решать задачи нейросетями с end-to-end архитектурой. 2) специфическиепостроение устойчивых к шуму векторных представлений слованализ тональностиnamed entity recognitionизвлечение фактовразрешение неоднозначностиинформационный поискперевод речи в текстдиалоговые системывопросно-ответные системымашинный переводсуммаризация. в терминах ml эти задачи декомпозируются на:1) тривиальные• классификация• кластеризация• оценка семантической близости• предсказание следующего слова• построение языковой модели. бизнес-задачи, где применяется nlp:• антиспам• поисковые системы• чат-боты• вопросно-ответные системы• сппр• машинный перевод• автодополнение• голосовое управлениевсё это разнообразие сводится к математике главное правильно понять что является целевой переменной. natural language processing (компьютерная лингвистика) – область на стыке ии и лингвистики. цитата оттуда:. век карьеры и потребления: больше поглоти, больше заработай, будь лучше других почему бы не быть просто счастливым?нравится 10-минутная лекция на эту тему:. работа - это целая компания, которая не развалится, если ты уделишь пару часов близким если развалится, то что-то не так с компанией и образом жизни а вот близкого, который может исчезнуть в один миг, ты уже не вернешь но мы не ценим этого, не видим за амбициями и честолюбием. вчера мы должны были обсуждать nlp был так занят nlp, что не было времени на соцсети,к сожалению поэтому эту интересную область мы обсудим сегодня, вместе с темой по плану постановка и оценка задач но сначала пару слов про work&amp;balance, с которым у меня проблемы. тест на возраст что вы представляете, когда слышите слово трансформер?. есть ещё sv2tts, например - синтез и клонирование речи real-time связка владелец/клон будет детектироваться плохо. отдельно на стыке ml и иб можно отметить атаки типа - фактически обман детекторов и классификаторов на примере топологии resnet50. пара вводных ссылок по теме ml&amp;cybersecurity:. также я бы рекомендовал в нагрузку к расширению общего кругозора по вопросу посмотреть следующие неплохие расширения / тулзы:. разбор актуальных статей по теме можно посмотреть здесь:. больше всего исследований на эту тему у microsoft research возможно, с интересом к генерации кода связана активность microsoft относительно покупки и дампа гитхаба. идеальное тз – это набор тестов все тесты прошли – значит, код делает, что должен делать, излишнего не делает если мы так формализуем, то почему нельзя такой код сгенерить? возможно, будущие программисты – это тестировщики, пишущие скрипты, под которые генерится код моделью. для генерации кода могут использоваться, например, реккурентные сети, использующие структуру кода для его генерации в ast или вариационный автокодировщик, позволяющий обучаться на примерах описания кода на естественном языке. существует гипотеза, согласно которой сходство языков программирования и естественных языков позволяет применять к анализу кода методы natural language processing задача построения эмбеддингов кода до сих пор остается открытой, но уже есть рабочий плагин jb deep bugs для pycharm. если подходить к этому вопросу с позиции аналитических вопросов про тьюринг полные языки, то в общем случае нельзя писать программный код однако можно взглянуть на проблему через призму машинного перевода. раз уж зашел разговор белковая нейросеть vs искусственная, предлагаю обсудить вопрос:- может ли машина кодить?в качестве иллюстрации вместо мемов:. единственное, что меня отталкивает в людях – непоследовательное поведение для меня существенно задавать аксиоматику по человеку у себя в голове когда сам человек её разрушает, у меня математическое отторжение появляется мысль, что это неустойчивая динамическая система. но потом я осознал, что технологии создают пока что тоже люди (если можно считать говнокодеров людьми) и работать приходится с людьми, выстраивая с ними минимум деловые отношения и чтобы хотя бы не выгореть от всего этого, надо инвестировать время в гармонию во всем. когда-то я думал, что вкладываться в работу лучше, чем вкладываться в какие-либо отношения с людьми отдача от работы пропорциональна инвестициям времени в неё с вероятностью 05 (взлетит - не взлетит) а люди да что эти кожаные мешки знают о вероятности?. после окончания универа с каждым годом уровень математики сокращается с 08 ^ yearвопрос: чему будет равно p(dreams|maths) через 3 года, если ты упоролся?. за универские n курсов по математике мы сокращаем дисперсию на sigma/n и увеличиваем мат ожидание на 11 ^ i для i=1n, и строим функцию условного мат ожидания уровня математики от мечты о будущем p(maths|dreams). - почему я бы рекомендовал идти в профессию ml engineer? - допустим мы все заканчиваем школу со уровнем знания по математике из нормального распределения (e, sigma). 3) не всегда можно использовать нейросетевые подходы модели используются как сппр - решения все же принимает человек, который несет ответственность есть задачи, где лпр хотят интерпретируемости до коэффициента, а не просто вердикта от модели например, карточный антифрод. сложности задач на стыке иб и мл:1) нужно постоянно дообучать модели, между киберплохишами и вендорами ведется гонка вооружений2) про sota узнаешь чаще всего в кулуарах академические статьи на шаг назад от индустрии в этой области доклады устаревают уже за время их подготовки. для экономии места на жестком диске пользователя из базы удаляются старые вирусы (поэтому их модификации могут не детектироваться новой версией антивируса) сейчас этим направлением очень активно занимается лаборатория касперского. также проблематично достать актуальные данные датасеты, которые есть в открытом доступе, устаревшие реверсить антивирус, чтобы вытащить базу сигнатур, не очень оправданно, поскольку каждые 3-5 лет она обновляется. для детектирования новых вирусов, которых еще нет в базе, применяется поведенческий анализ но это задача не для одного исследователя анализом малвари должен заниматься целыйотдел, должны быть сбор образцов, песочницы, вирусные аналитики,инфраструктура, threat intelligence. 25 детектирование вредоносного кода (задачабинарной классификации) на основе сигнатур эксплойтов или уязвимостей сейчас чаще применяется сигнатурный анализ на основе уязвимостей, поскольку он требует меньшего количества сигнатур в базе но это анализ постфактум. 23 выход из строя банкоматов / мониторинг состояния критически важной инфраструктуры (лаборатория касперского)24 антифишинг, антиспам методами nlp и fuzzy hashing (group ib и компании, не связанные напрямую с иб - например, почтовые сервисы поисковиков). 2) теперь чисто инженерные задачи поскольку задачи для прода, буду указывать их с компаниями, которые активно этим занимаются 21 аномалии в сетевом траффике (лучший антидидос у cloudfare сейчас)22 карточный антифрод как детектирование аномалий(cybeonica, group ib). для этого сначала надо формализовать страдание. при этом остальные задачи, связанные с dlp-системами, уже перешли в стадию зрелых промышленных решений, и дальше там остается только методично копать в глубину, устраняя недостатки существующих методов основная борьба чисто за то, как побольше данных с сотрудников собрать. 111 идентификация пользователей по стилистическим и лингвистическим особенностям речи метод идентификации авторства на основе анализа текста является частным случаем биометрической идентификации и применяется в dlp. 110 мультиклассовая классификация атак в waf (особенно детектирование 0day уязвимостей и bypass) раньше для этого использовали regexp, сейчас используют машинное обучение лучшие решения у wallarm есть еще у imperva проприетарное для тестирования самих waf. простите, отвлекся если на вход модели будет поступать небольшое количество данных, характерных для поведения злоумышленника, они не будут детектироваться как аномалия, а со временем точность модели понизится и атака может пройти незамеченной. 19 adversarial generative networks -- каким образом злоумышленник может повлиять на результаты работы модели, которая дообучается в риал-тайме если на вход модели будет поступать ммм как сексуально это звучит. 18 self-adaptive honeypots, основанные на теории игр, reinforcement learning и психологии киберплохишей ханипоты - это имитация реальных сервисов, они намеренно делаются уязвимыми, чтобы собирать данные о векторах атак и предсказывать возможные стратегии злоумышленников. 17 детектор синтезированного голоса и фейковых видео есть технологии, вроде lyrebird и face2face, с помощью которых можно подделывать интервью публичных личностей или использовать синтезированный голос руководителя компании для соц инженеринга при комбинированной атаке😈. 15 анализ репутационных рисков для фл и юл в больших объемах данных (текст, видео, картинки в новостях и соцсетях)16 частичная автоматизация osint (профилирование людей и групп через анализ социальных графов, поиск аккаунтов в соцсетях с помощью распознавания лиц). 12 антикликфрод (детектирование ботов, которые скликивают рекламу)13 идентификация взломщика на основе поведенческого анализа14 поиск бекдоров, которые оставляют разработчики с незамутненным сознанием (статический анализ кода, совмещенный с динамическим анализом). так, ну а теперь задачи на стыке ml и иб можете задавать вопросы по конкретным, я расскажу детальнее1) задачи на рисеч (те пока не имеющие sota):11 сбор пользовательских данных (пол, возраст, уровень дохода и пр) в маркетинговых целях (для data management platform). но этот проект оказался полезен для оценки робастности моделей!. эмуляция закупоривания сгустками крови доступа кислорода к нейрону реализована через указание минимально возможного веса нейрона воздействие dma на нейроны представлено произвольным весом на нейрон на выходе – искаженные картинки, будто глазами torch/pytorch, который торч. в некоторых компаниях используют фриковые проекты или игры вроде спортивного хакинга (ctf) для тимбилдинга в качестве friday project раз в месяц про фриковые проекты мы еще поговорим подробнее, но раз уж речь зашла про ai drugs, то вот ссылочка:. задачи на стыке иб&amp;ml можно разделить на инженерные и требующие научного поиска (как и в ds в целом) сюда я не отношу задачи, вроде имитации опьянения у нейросети, чем занимались мои знакомые безопасники хотя иногда это помогает получить полезные идеи / решения для продакшена. на данный момент работаю над проектом, в котором методами ml анализируется свыше миллиона новостей в деньна этой неделе мы обсудим:1 ml в иб2 nlp3 постановка и оценка задач4 как вкатиться в ds5 своё писать или либку тащить? 6 фп в ml7 как следить за трендами в ml. привет! меня зовут янис молодцов, я инженер, который обучает и доводит до продакшена модели уехал из россии в детстве анализом данных занимаюсь 3 года сейчас работаю в компании, которая занимается кибербезопасностью. вот и всё - моя смена подходит к концумне понравился опыт ведения твиттера, и я планирую продолжатья стратегично упустил тему инструментов ведения задач, напишу про это ну и буду постить про продуктивность, рекомендашки и ds в целомподписывайтесь на :). можно сказать, что это вариант - что-то среднее между двумя стульями :). да, хорошее замечаниелично я не занимался, но наблюдал со стороны ниша исследований в индустрии тоже есть; но она небольшая по сравнению с академией и индустрией финансируются чуть лучше, но направления исследований диктуются интересами компании. kaggle относится к индустриальному ds примерно так же, как олимпиадное программирование к работе в компанияхместо в соревнованиях простая и понятная мерка; но, жаль, она мерит не то. про kaggle выскажу ещё одно непопулярное мнение - он не эффективен для набивания резюмедля меня как собеседующего занял 50е место в контесте выглядит не так интересно, как проект, где была самостоятельно поставлена задача, собран датасет и натренирована моделька. по поводу карьеры целиком мне недавно умные люди посоветовали standout 20, но я её пока ещё не осилил, поэтому прокомментировать не могу но навскидку - прикольная штука. не могу посоветовать книжку 45 татуировок менеджера, сборник кулстори управленца учатся на ошибках, а когда они чужие, то это можно делать безболезненно. следующий уровеньэта небольшая книжка описывает вертикальную карьерную лестницу, и поможет тем, кто достиг своего потолка (спойлер - вместо того, чтобы делать продукты - обрастать знакомствами, и скейлиться - делать системы, которые делают продукты). на закуску - список литературы:. вкратце - есть три дерева скиллов, доменные знания, рисёрч и инженерия стоит сделать упор на каком-то одном скилле в одной ветке; но также иметь базовые навыки в остальных, иначе это станет ограничивающим фактором (см t-shaped people). вот более удачное разделение карьеры на ветки есть видео от алексея натекина моё развитие темы. (2/2) более абстрактными требованиями, делегирование и более долгосрочное планирование, а эти навыки относят к менеджерскойа продукт-менеджеры мне часто говорили, что им важно видеть особенности технической реализации, чтобы понимать ограничения и возможные препятствия. (1/2) второй часто возникающий вопрос - менеджмент vs инженерия - куда лучше расти на мой вкус, это не удачная дихотомия карьерыпо мере того, как ты растёшь как инженер, будет расти и зона твоей ответственности но большая зона ответственности требует работы с. индустрия: понятная карьерная лестница; больший выбор мест работы; но при этом много где задачи сводятся к написанию sql запросов для трансформации json-ин и генерации фичей, которые дальше скармливаются готовому xgboostно, хэй, зато хорошо платят. академия: есть возможность писать пейперы в интересной тебе области минусы - процесс практически безвозмездный, трудоёмкий и крайне медленный; везде одни и те же люди и мало движухиа тем, что ты сделал, будет интересоваться два человека в мире (причём оба - из индии). иногда в ds этот вопрос ставится как академия vs индустриязаниматься исследованиями - для крепких нервами альтруистов, второй вариант проще и понятнее, и люди часто перетекают из первого (и крайне редко - обратно). инженерю я давно с бизнесом тоже знаком - родившаяся на хакатоне идея превратилась в реальный продукт (anyquery) мой индекс хирша сейчас 3 - что куцо для учёного, но неплохо для инженератак что я видел ds с разных сторон баррикад поделюсь впечатлениями. 6 академия, инженерия, менеджментдавайте сегодня поговорим про карьеростроение. (2/2):те сделать фичу х - не ок; написать менеджеру просьбу уточнить требования для х - ок- все задачи должны быть в одной системе; должны быть дедлайны - не надо строить сложных иерархий задач- имеет смысл завести отдельную свалку долгосрочные идеи. что я почерпнул из этих книжек (1/2):- отделите инбокс от списка задач в первый задачи попадают сразу после возникновения, во вторую - после формулировки- сформулированная задача отвечать на вопрос какое конкретное следующее действие надо сделать. pomodoro прост и эффективен а для более интересных штук и рекомендую две книжки:getting things done - пускай она ориентирована на управленцев с бумажным ежедневником, но приёмы применимы ко всемджедайские техники - короткая и понятная компиляция работающих принципов. так, мы можем прямо сейчас сесть и задаться вопросом: что я могу сделать в ближайшие полчаса?, и составить список из него выбрать пункт, и пойти работать над ним на полчаса через полчаса обновить список и повторить процедуруэто техника помодоро, рекомендую всем попробовать. почти все прочитанные мной книги примерно про одно: все мы предпочитаем известное перед неизвестным, простое перед сложным, и бездействие перед действием; наша память ненадёжна, а мозг нерационаленпоэтому система записи задач должна быть, причём максимально простой и понятной. 5 продуктивность и планированиемоя любимая тема, иногда я шучу, что это моё хобби: время, которое я потратил на чтение статьей и лекций вряд ли отобьется этим увеличением эффективности :)поехали как у вас ведётся список задач?. подытоживая:- сейчас есть интересные статьи с нейронками- evaluation пока на симулированных данных- сама область перспективная; на практике оптимизировать отложенный сигнал нужно, и rl поможет решить вопросы типа accuracy vs diversity. касательно фреймворков оценки два стула:от criteo: в нём поддерживается только симуляциявот описание от самсунга системы, которая не обладает этим недостатком похоже, это закрытая разработка, и потрогать её не получится. естественно, если генератор и моделька совпадают по форме, то моделька в итоге выучится но нет никаких гарантий, что этот моделька будет хорошим приближением того, что происходит в головах пользователейэксперименты с реальными пользователями пока не наблюдаются. в чём загвоздка, если всё так хорошо, почему оно не едет в прод?ответ простой: для оценки качества работы используют симулятор и синтетические данные, и the simulator has the similar architecture with deers (самой моделькой). а в этой совсем свежей (опубликованы на aaai2020) статье используется rnn для кодирования последовательности объектов в сессии, и подключается информация о контексте запроса:. отличная статья 2018 года авторы предлагают deers ключевые отличия от статьи выше - глубокая сетка вместо простой формулы для моделирования награды, и использование негативного фидбека (игнорирование пользователем рекомендации). одна из статей, где настоящий rl прикручивается к рекомендашкам датируется 2007 годом тут состояние - последние просмотренные страницы пользователя, а действия агента - предложение пользователю посетить какую-то страницу агент максимизирует клики. многорукие бандиты известны давно популярный thompson sampling, был сделан аж в 1933м году тогда задача считалась столь сложной и бесполезной, что во время второй мировой были жалобы, что учёные зря на неё отвлекаютсявозвращаясь в текущие дни - что же есть интересного сейчас?. также, multi-armed bandits являются хорошей заменой традиционным а/б тестам ценой несложной инженерии мы получаем ускорение сходимости тестов. про применения rl в складской оптимизации я не слышал (да и вообще rl медленно в практику идёт)поиск статей показывает, что кто-то пытался подходить к задаче с теоретической стороны (например , но каких-то успешных реальных кейсов не нашел. это ещё не все по rl в рекомендашках завтра будет ещё пачка твитов и ссылок на статьиstay tuned!. рекомендательные системы - не исключение оптимизируемым действием, может быть, например, какой товар показать в баннере, каким цветом покрасить кнопку купить, какую картинку товара показать в превью вот, netflix оптимизирует обложки:. начнём с многоруких бандитов это ветка в rl, в которой агент должен найти оптимальное действие (руку) среди предложенных конструкция простая и эффективная, часто применяется в индустриипоподробнее про них тут:. 4 reinforecement learning в рекомендательных системахтема большая, интересная и интригующая - поехали. за наводки на статьи спасибо !. в графовых сетках легко и естественно использовать контентную информацию (а в индустрии этой информации очень много)этим воспользовался kgat, где к взаимодействиям пользователей добавлена контентная информация про объекты. а применительно к рекомендациям, пару примеров:graph convolutional matrix completion, который напрямую прогнозирует связь в двудольном графе: моделька чуть поновее и с хитрым семплированием, pinsage:. в разных моделях разные способы формирования сообщений, агрегации и лоссов на 6й страницы этой статьи отличная сводка по разным графовым сеткам:. в графовых сетях идея простая: каждый узел генерирует соседям сообщения (вектора), которые зависят от эмбеддинга и типа связи затем каждый узел агрегирует входящие сообщения, и обновляет свой вектор состояния потом - снова рассылка, и процедура повторяется до сходимости. и на закуску - пару слов про самые современные методыпрогресс и нейросети пришли и в графовые рекомендации, поэтому будут сеточки. в прекрасной статье написано, что у многие популярные модельки не воспроизводятся / не бьют бейзлайн и тут выделяется моделька slim, которая всех рвётзнаете, что под капотом slim? по сути - обучение графа похожести объектов. поэтому в индустрии и на практике они часто всплывают, иногда в неожиданных местахвот, например, pinterest случайно блуждает (в онлайне!) по подготовленному графу: одноклассники делают хитрые штуки на хитром графе. многие sota методы в рекомендашках похожи: строим эмбеддинг юзеров и товаров; считаем дистанцию между ними / между парами товаровв индустрии не нужно считать схожесть всех пользователей и всех товаров - достаточно запомнить самые похожие если это сделаем, то получим граф. отличный обзор графовых методов, основанных на случайных блужданиях вот тут:. можно эту конструкцию усложнять например - считать не просто стационарную вероятность, а если мы будем начинать блуждать с каких-то конкретных узлов (истории пользователей), и возвращаться на них жетак мы получим не один глобальный скоринг, а персонализированный. кстати, в статье про pagerank есть вот такая забавная фраза to test the utility of pagerank for search, we built a web search engine called google (section 5)а ещё тут page - это не только страница, но и фамилия автора, larry page сочно, да?. для каждого узла посчитаем вероятность того что мы в нём окажемся там в случайный момент времени (стационарная вероятности) чем чаще на страницу ссылаются, тем выше будет вероятность, и тем выше надо показывать её в поискеэтот алгоритм - pagerank, который в основе гугла. давайте решать задачу ранжирования страниц в поисковике сделаем граф, узлы - страницы; связи - ссылки между ними будем случайно гулять по нему, переходя от узла к узлу по ссылкам (и иногда прыгая на новую случайную страницу). думаю, базовая идея уже понятна из названия - мы представляем наши данные в виде разных объектов со связями между ними (те взвешенного графа), и дальше применяем к нему всевозможные графовые алгоритмы для решения задачи генерации рекомендаций. 3 графовые рекомендательные системыэто крайне обширная область, которую я для себя открыл только недавно, и сейчас расскажу про интересные штуками, которые успел нарыть. ну вотпрекрасно же - выбирай стало лучше :). на мой вкус, просто разным людям подходят разные режимы работыкто-то раскрывает свой потенциал под давлением сроков, а кому-то важна размеренная работа кому-то важен коллектив, кому-то нет кому-то надо иметь внешний стимул, кто-то ценит свободуплохого ничего не вижу. уточню формулировку - эффективного времени. можно выбрать эффективность уменьшилась :)ну а вообще - у вас же всё просто прекрасно с продуктивностью. кстати, как ваша удалёнка? после перехода на работу из дома продуктивность. последняя находка, которой я сегодня поделюсь - это про едудоставка рационов питания, как оказывается, не так дорога, и не позволит отъестся в карантин дешевле только готовить самому. другой немаловажный компонент успеха - наличие планасписок задач на день даст сконцентрироваться на важном подробнее про это будет в пятницу (символично) а график не даст циклу сна уехать непонятно куда; это ключ продуктивности согласно авторитетным биохакерам. если интересна работа из дома и удалёнка - то можете подписаться на блог trello они пишут очень интересные штуки про продуктивность, и часто затрагивают эту тему. на удалёнке большую роль играют ритуалы если мы работаем постоянно в одном месте, в офисной одежде в и в одинаковых условиях, то голова привыкает это делать, и собраться прощепоэтому удалёнщик без штанов - это неэффективный удалёнщик :). например, обнаружил, например, что если утром посмотреть какой-нибудь сериальчик, то день насмаркуа ещё однажды решил попробовать максимизировать эффективное время набрал 70 часов в неделю интересный опыт эксперимент сам повторять не планирую, но вам рекомендую попробовать:). тут помогают программы, которые отслеживают время (я пользуюсь внезапно оказывается, что из 8-часового дня мы реально работаем только часа 4 (в том числе и в офисе); становится понятно, куда уходит время, и можно почерпнуть полезные закономерности. касательно времени в удалёнке легко скиснуть, и важно быть честным с собой откладывать работу до часа до стенд-апа - очевидно плохая идея, но мозг может идти на невероятные уловки, чтобы не замечать этого ведь это видео с котиком очень милое, и всего пять минут длиной, да? :). сразу отмечу, что это не для всех почти всегда будет потеря в продуктивности некоторым тяжело без коллег рядом, которые тоже чем-то заняты, к которым можно подойти что-то спросить, и этой общей офисной рабочей атмосферыэто абсолютно нормально времени больше не становится. 2 как выживают на удалёнке?4 года я работал на удалёнке, делаю это по сей день, и сейчас поделюсь своими находками, наблюдениями и лайфхаками. будут все темы :). по метрикам есть отличный обзор. да извините, жаргонизм. поэтому темы multistakeholder rs и использование rl мне интересны они решают реальные индустриальные проблемы, так как часто надо оптимизироваться под пачку критериев сразу (выручка, оборот, остатки на складе); и многие сигналы - отложены поподробнее про это будет в четверг. никто не сидит и не имплементит коллаборативную фильтрацию до посинения, выражаясь словами одного собеседуемого :). теперь касательно индустриальной частиреальная работа над рекомендашками часто сводится к определении того, под что именно должна оптимизироваться система (=много аналитики и графиков), где система лажает (=ещё аналитика) и добавлению фичей, которые должны это исправить. по вышенаписанному, видам и типам рекомендашек - есть классный (пускай и старый) survey, где всё отлично разложено по полочкам:. коллаборативная фильтрация - у нас пользователей так много, что они образуют кластера интересов, и мы можем использовать информацию с соседей в кластере, чтобы сделать рекомендацию пользователю (те пользователи коллаборируются друг с другом для построения рекомендаций). у многих коллаборативная фильтрация - синоним рекомендашекна самом деле коллаборативная и контентная фильтрации - это предположения для построения рекомендашек эти термины очень старые - пожалуйста, используйте их осторожно сейчас все за редким исключением системы гибридные. поэтому почти все современные пейперы меряют качество именно топа выдачи рекомендательной системы (и частенько - и оптимизируются прямо под него). более современное определение - это система, которая может из большого набора подобрать необходимые объекты исходя из ситуации (пользователь, поисковой запрос, просматриваемый объект, ) да, это можно свести к регрессии/классификации, но это один из способов подойти к решению. но сосредоточиться на конкретном деле в таком состоянии сложно, поэтому я сделала перерыв и пошла привинчивать полочки в ванную вот она, работа из дома! пока привинчивала полочки, переваривала и осмысливала наши новые планы по захвату мира :). после всех разговоров мозг очень активно продолжал генерить всякие идеи не знаю, как у вас, но у меня бывает такое состояние бешеной белки, когда очень сложно усидеть на месте, потому что очень много всего интересного очень люблю такие состояния!. вообще у нас тоже есть регулярная еженедельная встреча один-на-один, но тем не менее мы довольно часто просто созваниваемся, если хочется поделиться какими-то мыслями это верно вообще для всех моих коллег можно в любой момент написать кому угодно и обсудить что угодно. потом мы созвонились с pm-ом нашей команды образовательных продуктов , я хотела обсудить одно новое потенциальное направление для наших продуктов, и одну стратегическую цель на будущее ну и просто подумать вслух на двоих. потом была встреча с командой нашего амстердамского музея это очень интересный проект! скорее всего вы еще ничего про него не слышали а он очень крутой: музей технологий для детей, подростков и всех-всех-всех: обсуждали всякие идеи совместных проектов. после встречи у меня было немного времени на обед и на то, чтобы глянуть в slack и в почту ничего особо срочного в почте, правда, много непрочитанного на прошлой неделе я была в отпуске, еще не разгребла до конца планирую этот подвиг на завтра :). сегодня довольно быстро управились, тем было немного потом еще просто поделились новостями эта встреча для меня – основной синк с командой stepik-а есть еще регулярные встречи раз в две недели один-на-один c а с pmm-ами есть синк раз в неделю. вначале была регулярная встреча по академии на нее всегда хожу я, pm команды stepik и наши pmm-ы и остальные приходят от случая к случаю, в зависимости от обсуждаемых тем темы мы знаем заранее, потому что собираем их перед встречей. время летит стремительно днем у меня было три встречи. такую статистику я смотрю аж в трех местах в итоге нашла баги в двух из трех, завела задачки в трекере на аналитиков но, в целом, предложение сработало неплохо думаю, будем и дальше сотрудничать. в конце декабря я придумывала само предложение, делала с дизайнерами флаеры для школьников, делала лендинг а сегодня смотрела, сколько школьников к нам пришло учиться. небольшое дело было такое: посмотреть как у нас сработало одно из специальных предложений на академию в рамках сотрудничества с обычно такими задачами занимаются pmm-ы, но в этот раз организаторы вышли прямо на меня, так что этой задачей занималась я. потом ноут ко мне вернулся (кстати новая макось красивая) и я поставила себе помодоро-таймер первые два слота (слоты у меня по 35 минут) – собраться с мыслями, выписать важное на сегодня, сделать одно небольшое дело. в основном дела были личные это потому, что рабочие и так уже записаны, память уже не занимают у меня есть своя miro-доска с майндмапой и канбан-доской в майндмапе основные направления, на доске задачки с планом на неделю и на ближайший месяц-два задачки привязаны к мапе. задание сегодня было про выгрузку всего из рабочей памяти надо было пройтись по специальной майндмапе и записывать все дела, которые при этом приходят в голову исписала четыре листа в блокноте :). вообще, это своего рода мое хобби – отстраивать свою систему личной эффективности, но я про это подробнее завтра вам расскажу и вот решила попробовать и марафон от максима, почему нет. и, как назло, ткнула неосторожно в обновление mac os так что еще минут на сорок отправила себя в офлайн но ничего, телефон – мое спасение пока ноут обновлялся, я сделала задание из марафона джедайских техник (. утром надо было сгонять в магазин за едой, да и соблазн выспаться без семьи был слишком велик, так что я поздно сегодня села работать, около половины двенадцатого. что-то у нормальных людей уже обед, а я только разгоняюсь итак, чем же я пока успела позаниматься. а вы как, работаете из дома или из офиса сейчас? пишите в комментариях другие варианты :). вообще у нас очень классные офисы, которых, к слову, девять по всему миру я работаю в офисе в санкт-петербурге если интересно, то про наш офис можно почитать вот тут или тут. вчера я сбежала от семьи на дачу так что сегодня работаю с дачи а в старые добрые времена я бы работала на своем рабочем месте, по которому очень скучаю. вообще мои рабочие дни могут очень сильно отличаться один от другого и никакого типичного рабочего дня у меня нет а сейчас мы уже год практически, как работаем на удаленке и мой распорядок отличается от офисного распорядка, который я все-таки еще считаю более привычным :). всем привет! сегодня у меня не совсем обычный эксперимент я попробую в режиме онлайн (плюс-минус) вести дневник своего рабочего дня. ну что же, на сегодня все спасибо всем! завтра я обязательно отвечу на те комментарии, на которые не успела ответить сегодня а еще я завтра, для разнообразия, попробую вернуться к моей основной работе :) а здесь буду вести своего рода дневник одного своего рабочего дня. таким образом наши образовательные ide – это еще и инструмент создания курсов, в которых основной фокус сделан на практических задачах и автоматической проверке кода почитать про создание таких курсов можно на. а еще вы можете выбрать интересующий курс из числа тех, что абсолютно разные авторы создают с помощью наших образовательных ide (community courses). если вы учитесь на jetbrains academy, то задачи на код и стадии проектов вы можете (а для более сложных стадий и должны) выполнять в ide вы можете переключиться из web в ide, написать необходимый код и послать его на автоматическую проверку прямо в ide. edu версии наших ide специально предназначены для тех, кто учит и учиться программировать на python, java, kotlin а плагин edutools совместим и с другими ide (android studio, clion, goland, webstorm) и поддерживает также javascript, rust, scala, c/c++, go. мы правда верим в то, что учиться программировать стоит сразу в том окружении, в котором работают профессиональные разработчики с другой стороны мы понимаем, что сразу освоить ide может быть довольно сложно поэтому мы и придумали pycharm edu, а затем и intellij idea edu. ну и последний тред на сегодня будет посвящен обучению непосредственно в ide. таким образом вы можете работать над выбранным проектом и идти по предложенному учебному плану, а можете, с помощью карты знаний, оценить, какие темы вы уже успели пройти, а какие еще предстоит изучить или найти интересующую вас тему и строить свою учебную траекторию от нее. и в топике снова будет не только теория, но и упражнения и задачи на эту теорию а еще список топиков, которые следует изучить, чтобы лучше понять данную тему и список топиков, к которым можно перейти дальше. или же можно просто воспользоваться поиском и найти интересующую вас тему а небольшие подсказки помогут быстро выбрать нужный топик. или вы просто хотите немного отвлечься от текущего учебного проекта тогда вам будет интересно посмотреть на нашу карту знаний можно побродить по дереву тем, а выбрав тему, посмотреть, какие из связанных тем вы уже успели пройти, а какие еще нет. проектное обучение хорошо подходит для тех, кто только начинает свое знакомство с языком программирования но иногда вам просто надо узнать побольше на определенную тему, например, в рамках своего рабочего, а не учебного, проекта или даже в рамках учебы где-то в другом месте. я вернулась :) теперь расскажу про карту знаний на jetbrains academy. друзья, мне надо на несколько часов убежать по делам но я вернусь и расскажу вам еще сегодня про обучение в ide и про карту знаний на академии пока можно сюда комментарием написать мне какие-нибудь вопросы. при работе над проектом мы советуем как можно раньше начинать работать непосредственно в ide а по завершении проекта, его можно сразу выложить на github и использовать потом для своего резюме про обучение в ide я расскажу в отдельном треде чуть позже. а вот пример стадии проекта:. а вот пример задачи к ней:. вот пример теории:. таким образом, как только вы выбрали проект, у вас появляется свой план обучения, который состоит из теории (топиков), задач на проверку вашего знания пройденной теории и непосредственно работы над приложением в рамках проекта топики можно пропускать, решив контрольную задачу. каждый выбранный проект подразумевает, что вы будете шаг за шагом узнавать необходимую для проекта теорию и сразу же применять эти знания в работе над работающим приложением при этом проект будет разбит на стадии, чтобы вы усложняли свое приложение, наращивая его функционал. потом вы выбираете проект определенного уровня сложности:. вначале вы выбираете один из треков:. на академии можно учиться по разному если вы только начинаете знакомство с языком программирования, то имеет смысл попробовать проектное обучение. поэтому мы пытаемся изменить сам подход и вот, что стоит за нашими образовательными продуктами вначале расскажу про jetbrains academy и проектное обучение. а еще, если вы разработчик, то вы знаете, что важно не только знать основы алгоритмов, синтаксис языков программирования и технологии; ничуть не менее важно уметь настраивать свою рабочую среду, знать все необходимые инструменты и уметь ими пользоваться. а значит нужны не тонны видео-контента, а возможность построить свою учебную траекторию и возможность сразу же применить знания на практике. например, онлайн курсы по программированию нужны сейчас и студентам cs дисциплин, и специалистам из других областей, и профессиональным разработчикам и у каждого из них свой багаж уже имеющихся знаний и свои учебные цели. мне нужна та информация, которая нужна именно мне и именно сегодня, и нужна возможность сразу применить мои новые знания на практике. сегодня мир так быстро меняется, что мы вынуждены учиться постоянно когда мне надо что-то новое узнать сегодня, мне скорее всего не нужен длинный теоретический курс. нет больше этапа накапливания знания, когда студент несколько лет только и делает, что учится; а затем этапа использования знания, когда выпустившийся студент всю жизнь работает, используя полученные знания. а все потому, что большинство онлайн курсов создано по образу и подобию курсов университетских но в современном мире мы больше не учимся так, как учились раньше. и вы не одиноки, по разным данным, до финальных экзаменов на таких курсах доходит лишь ~10% учащихся. когда мы говорим про современное онлайн-образование, мы в первую очередь думаем о mooc (massive open online courses) наверное, все уже так или иначе пробовали учиться на coursera, udemy, edx, khan academy и тд и, вероятно, многие бросали. а теперь хочу порассуждать с вами, что же не так с современным онлайн-образованием буду говорить в первую очередь об обучении программированию. а в 2019-ом мы анонсировали jetbrains academy ( – платформу для изучения языков программирования, которую мы делаем совместно со stepik платформа реализует проектный подход к обучению и интегрирована с нашими ide в 2020-ом она стала платной. и первым шагом стал единый плагин edutools ( который поддерживал уже не только python, но и java и kotlin потом появилось и специальное издание нашей флагманской ide – intellij idea edu (. я видела нашу задачу в том, чтобы выйти на более широкий рынок и уйти от концепции инструментов говоря про образовательный продукт, я имею в виду не только и не столько инструменты, я говорю о подходе к обучению, об образовательных материалах и образовательной среде. это был тот самый продуктовый менеджмент, который я искала так что я перешла в команду pycharm edu, и в 2017-ом мы отделились от команды pycharm и стали отдельной командой образовательных продуктов. на тот момент у нас уже был pycharm edu ( а наши друзья делали платформу stepik ( а еще у нас было много разрозненных идей о том, как стоит учить людей программированию, — надо было собрать все воедино. и тогда мой босс, наш marketing lead, познакомил меня с сергеем дмитриевым, сооснователем и президентом jetbrains сергей мне несколько часов рассказывал о том, что, на его взгляд, не так с современным онлайн-образованием и заразил меня темой образования, как оказалось, надолго!. результатом этого пересмотра был следующий вывод, к которому я пришла в 2016-ом: я хочу уйти из команды rubymine, но я не хочу уходить из jetbrains я озвучила этот вывод, и мы с моим боссом стали искать разные варианты. сейчас я знаю, что я прошла через выгорание но тогда мне понадобилось немало времени, чтобы разобраться, что же происходит зато это заставило еще раз пересмотреть свои интересы и приоритеты. 2014-ый был непростым годом по многим причинам, а у меня он еще стал и годом карьерного кризиса я вернулась на работу после рождения старшего сына, но все шло совсем не так, как до декрета работа перестала приносить удовольствие. подавляющее большинство постоянно учится, это здорово хотя сама я вот скорее из второй категории увы, у меня есть свое кладбище онлайн-курсов и программ но давайте я сперва расскажу, как я оказалась в теме онлайн-образования. новый день – новая тема :) сегодня поговорим про образование, а точнее про онлайн-образование и главным образом про онлайн-образование в сфере cs а начнем как обычно с переклички что скорее описывает ваше отношение к обучению чему-то новому?. на этом на сегодня все, всем спасибо! завтра поговорим про образование и обучение программированию. наверняка я про что-то забыла, так что спрашивайте про конкретные инструменты, про которые вам интересно было бы узнать я постараюсь ответить в комментариях. мы практикуем демо, как для новых фич, так и для новых идей или исследований, но для них нет регулярного расписания просто по мере готовности, каждый может рассказать и показать что-то новое команде. в команде pmm-ов, content-команде и у меня (я пока единственный продакт) есть недельные циклы: еженедельные встречи и свои канбан-доски. безусловно, разработчики у нас используют continuous integration, code reviews, tdd, refactorings и прочие техники из xp. мы пользуемся kanban-досками в youtrack-е, и вообще разными средствами визуализации. мы не проводим регулярные ретроспективы, но в любой момент любой из нас может понять, что есть какая-то проблема, и предложить ее обсудить, тогда мы просто договариваемся, встречаемся и обсуждаем. но мы не оцениваем фичи при планировании, не играем в покер и тд, мы просто обсуждаем, что мы хотим успеть в следующем релизе. мы проводим сессии планирования для edutools-плагина после каждого релиза при этом каждая подкоманда (development &amp; qa, marketing, content, product management) вначале планируется отдельно, а потом мы собираемся на общий planning. мы практикуем стенд-апы у нас в команде они не каждый день, а два раза в неделю а в три необязательных дня мы сейчас собираемся просто поболтать потому что мы сейчас работаем удаленно, и нам очень не хватает общения на кофепойнте. мы используем итерации и релизим наш плагин edutools раз в месяц jetbrains academy обновляется раз в неделю, но процесс разработки платформы сейчас в основном на стороне наших партнеров, компании stepik наши образовательные ide релизятся вместе с остальными ide три раза в год. сразу оговорюсь, что в jetbrains каждая команда сама решает, как ей строить свои процессы некоторые команды используют больше agile-инструментов, некоторые – меньше а некоторые вообще не любят слово agile ;). ну и последний тред на сегодня будет про то, что же мы (команда образовательных продуктов в jetbrains) используем из инструментов agile, а что не используем. о, спасибо за наводку! пока не читала, но должно быть интересно!. 4) но не надо использовать инструменты только ради использования инструментов. 3) хорошо знать разные инструменты, которые предлагаются в рамках разных agile-методологий, чтобы мы могли попробовать их для решения наших проблем. 2) любые изменения в процессах должны происходить от проблем если мы видим проблему, мы пытаемся ее решить. 1) мы верим в принципы agile и стараемся им следовать. но в итоге, после нескольких лет, я пришла к тому, что система shu-ha-ri хороша, но не обязательна :) и примерно с 2011-го года я очень люблю фразу be agile in being agile для меня она значит примерно следующее на практике. я не буду вам расписывать из каких инструментов состоит scrum, если вы еще с этим не сталкивались, про это можно почитать ну, например, вот тут:. и только потом можно уже какие-то инструменты выкидывать из своей практики поэтому мы с командой честно попробовали все, что есть в наборе инструментов под названием scrum. потом, когда придет понимание того, как эти инструменты работают, можно уже как-то их адаптировать под себя, под конкретные проблемы конкретной команды. согласно этой системе, я верила, что для того, чтобы следовать agile, надо вначале взять одну из методологий, в моем случае это был scrum, и постараться применить максимально точно все инструменты из этого набора инструментов. когда я только начинала свое погружение в agile, я верила в систему shu-ha-ri если вы с ней не знакомы, вот можно почитать, например, у мартина фаулера. теперь про agile-методологии если agile для меня – это определенный mindset, или система ценностей, то конкретные методологии – это наборы инструментов, которые призваны помогать следовать этой самой системе ценностей. основная идея для меня: мы не боимся и не видим никакого зла в изменениях, мы доверяем людям и строим нашу работу на этом доверии, на способности договариваться и на общем желании сделать что-то нужное и работающее. и для меня, если честно, ценности и принципы манифеста являются просто сформулированным здравым смыслом :) они с самого начала казались настолько очевидными, что принять agile было просто само собой разумеющимся. сразу скажу, что манифест – это не что-то вдруг изобретенное в 2001-ом году, это сформулированные основные ценности, к которым умные люди (список умных людей есть все на той же странице манифеста) пришли, исходя из своего опыта управления it-проектами. если вы (ну вдруг) его еще не читали, то обязательно прочитайте вместе с 12-ю принципами и. во-первых, я отделяю agile от agile-методологий, таких как scrum, xp, kanban, и тд agile для меня – это своего рода философия, mindset то есть это определенный образ мыслить, своего рода система ценностей, которая полностью сформулирована в agile-манифесте. итак, что же я понимаю под agile. дело в том, что в каждом конкретном случае, в каждой конкретной команде, изменения будут выглядеть по-разному но в следующем треде я постараюсь рассказать максимально простым языком, как я все это вижу и для чего я использовала и использую agile. потому что поняла, что мне все-таки больше хочется непосредственно участвовать в создании хороших продуктов, а не помогать командам создавать хорошие продукты хотя agile и привычка настраивать процессы осталась как мне это пригождается, расскажу сегодня в отдельном треде. но вот к 2011-му стало ясно, что если я хочу развиваться в этом направлении дальше, то надо уходить в agile coach-и, а не пытаться совмещать с работой pm-ом к тому же, как я уже писала вчера, меня все больше интересовал product management и я в итоге выбрала его. я внедряла scrum в своей команде, помогала внедрять scrum в командах внутри компании ланит-терком и иногда проводила одно-двухдневные тренинги в командах в других компаниях питера за просто так а еще ездила на agile-конференции и пару раз привозила зарубежных спикеров к нам. так мы подружились с москвичами из agilerussia и основали питерское сообщество agilepiter все это было в 2007-ом ох, хорошие были времена!. в питере тогда было не так много команд, пытавшихся жить по scrum или xp, и мы с коллегами отчаянно искали тех, с кем можно было бы обсуждать все те грабли, на которые мы вставали у себя, внедряя и практикуя scrum. и настолько меня впечатлили та легкость и гибкость, которую давали ruby on rails по сравнению с java, и scrum по сравнению с rup, что я на несколько лет стала очень ярым и довольно активным адептом agile. кроме того, примерно в то же время, благодаря все тем же датчанам, я с java пересела на ruby on rails а rails, как известно, создавался как раз под влиянием agile и позиционировался как web framework для гибкой разработки. так что я стала читать разные книги до сих пор помню бумажную agile software development with scrum, которую мы передавали внутри команды от одного к другому а потом стала ездить на разные конференции, прошла сертификации от scrum alliance и втянулась!. а когда я не очень понимаю смысл каких-то действий, я превращаюсь в настоящую зануду и начинаю разбираться кстати не самая плохая моя привычка :). начну со своей истории как я уже писала вчера, c agile  я познакомилась благодаря нашим заказчикам из дании в 2004-м году они попытались внедрить у нас scrum и вначале я вообще не очень поняла, зачем все это. итак, сегодня поговорим про agile одна из самых холиварных тем :) но давайте начнем снова с небольшой переклички расскажите, а как у вас? другие варианты пишите в комментариях!. все, что вы пишете, относится к более иерархическим организациям в jetbrains очень плоская структура так что у меня другой опыт у нас team lead-ы (они же pm-мы по своей роли) принимают очень многие решения а среда организации создается теми, кто в этой организации работает. на сегодня все, спасибо всем! завтра похоливарим про agile :). продакт: мне нравится слушать и слышать пользователей и разработчиков, учиться смотреть на продукт под непривычным углом, глазами других людей; нравится примерять на себя чужой опыт, все ставить под сомнение и расширять границы собственного восприятия. pmm: больше всего мне нравилось работать с контентом, структурировать и подавать информацию таким образом, чтобы наши потенциальные пользователи сразу понимали главное про наш продукт. pm: больше всего мне нравилось чувствовать свою команду, уметь сделать так, чтобы личные интересы и сильные стороны каждого играли на общий успех и добиваться того, чтобы всем в команде было хорошо, и чтобы команда в итоге была чем-то большим, чем просто сумма людей. разработчик: больше всего я любила то, с какой легкостью я входила в поток при написании кода а еще вот это вот волшебство, когда ты своими руками создаешь что-то работающее и осязаемое из ничего до сих пор иногда скучаю по программированию и пишу что-нибудь для себя. ну и под вечер расскажу вам, что я больше всего люблю в каждой из ролей, в которых мне удалось поработать. тут я, к сожалению, не смогу ответить я не сталкивалась с этими ролями в жизни, исключительно на бумаге, но теоретизировать мне бы не хотелось. в моем опыте pm являлся и является руководителем команды поэтому по моему опыту, нет, не такая же у вас, очевидно, это по-другому. конечно, речь не идет о том, чтобы увольнять людей, не попытавшись разобраться в ситуации и как раз разобраться в ситуации – задача pm-а. думаю, это зависит от того, насколько плоская у вас структура власти в компании. хм, кто же может уволить во взрослой компании?. маркетинговая стратегия – это важная часть общей продуктовой стратегии и поэтому pmm и продакт, на мой взгляд, тоже могут работать только в очень тесном сотрудничестве. надо сказать, что для pmm-а ничуть не менее, чем для продакта, важна обратная связь от пользователей и умение общаться с текущими и потенциальными пользователями. у pmm-а тоже есть целый арсенал своих инструментов это и маркетинговые исследования, и очень большая работа с контентом (сайт, блоги, социальные сети), и участие продукта в выставках и на конференциях, и рекламные кампании, и сотрудничество с лидерами мнений, и многое другое. можно сделать прекрасный продукт, но не смочь правильно рассказать о нем правильным людям и вот тут очень важны оба этих правильно потому что маркетинг не про то, чтобы что-то прорекламировать, а про то, чтобы продукт и те, чьи проблемы этот продукт решает, нашли друг друга. pmm отвечает за то, чтобы про продукт узнали его пользователи и чтобы они захотели и начали им пользоваться и продажи здесь – это как раз метрика того, что захотели пользоваться. после того, как продакт и pm поняли, что и как делать, хорошо бы еще понять, как именно мы будем наш продукт выводить на рынок, то есть продавать в широком смысле этого слова потому что маркетинг нужен и бесплатным продуктам тоже и вот тут как раз поможет pmm. ага, pmm-ов среди нас меньше всех :) давайте теперь поговорим про роль pmm-а и ее отличия от роли продакта. про власть есть административная власть, а есть влияние у нас pm является формальным руководителем команды он может, например, уволить или премию дать у продакта административной власти нет он не является ничьим руководителем но влияние у него, безусловно, есть. для меня кто продукт создает это необходимое условие для качества но качество тоже может быть про разное и pm и продакт отвечают за качество, но, на мой взгляд, отвечают по-разному для продакта качество – про попадание в value для pm-а качество – про соответствие ожиданиям. в целом продакт всегда больше защищает интересы тех, для кого создается продукт, а pm больше защищает интересы тех, кто продукт создает. если же роль pm-а и продакта на одном человеке, то надо очень аккуратно следить, чтобы конфликты решений между что и как становились явными как можно раньше, и чтобы ответы на вопрос что не подгонялись под ответы на вопрос как. и поэтому я считаю, что хорошо когда эти две роли у разных людей, но работающих в очень тесном сотрудничестве и успех продукта очень во многом зависит от того, как pm и продакт умеют договариваться и слушать друг друга. но знаете, что самое интересное? что оба эти вопроса, что мы создаем и как мы это создаем, зачастую связаны и могут влиять друг на друга, а еще ответы на эти два вопроса могут рождать конфликт. а еще у pm-а гораздо чаще есть административный ресурс то есть pm как правило формально является руководителем а вот продакт – совсем не обязательно, а скорее даже нет. и у pm-а тоже есть целый ряд своих инструментов методологии построения процессов, техники лидерства, подходы к работе с мотивацией и многое-многое другое. если мы понимаем, что мы хотим создать, хорошо бы понять, как именно это создать и вот тут начинается зона ответственности pm-а:* кто нам нужен и как нам собрать правильную команду?* как нам работать так, чтобы были результаты?* и чтобы это были правильные результаты?и тд. для того, чтобы отвечать на все эти вопросы есть целый ряд инструментов аналитика, опросы, интервью, прототипы, a/b тесты, эксперты, различные фреймворки и диаграммы – все то, что помогает понять, что же мы все-таки создаем такое и точно ли это кому-то нужно. то есть продакт думает о том, что это должен быть за продукт:* для кого этот продукт и какие проблемы он решит?* а почему он должен решать именно эти проблемы?* а как он их будет решать?* а это точно кому-то надо?* а кому именно?* а как им будут пользоваться?и тд. когда мы создаем продукт, мы в первую очередь отвечаем на два вопроса: 1) что именно мы хотим сделать?2) как мы собираемся это сделать?и для меня продакт отвечает на первый вопрос, а pm – на второй. чем же, по моему опыту, отличалась роль project manager-а от роли product manager-а перечислю основное добавляйте про свой опыт в комментариях!. открытых вакансий сейчас нет, но я планировала искать к себе в команду продакта через некоторое время приходите ко мне в телеграмм (), давайте поговорим про это в личке :). поэтому я не буду отвечать на вопрос, чем же отличаются все эти три роли друг от друга но расскажу, чем они отличались именно у меня и что менялось с изменением моей роли. сейчас два человека из двух разных компаний, а иногда даже из двух разных команд одной компании, могут называться одинаково, но отвечать за разное и наоборот, отвечать примерно за одно и то же, но называться по-разному. если вы продакт, pm или pmm в большой компании, то все зависит от культуры, традиций и иерархии в этой самой компании. если вы продакт, pm или pmm в стартапе или небольшой компании, то скорее всего вы на самом деле так или иначе выполняете задачи всех этих трех ролей. чем же отличаются роли менеджера проекта (далее pm) и менеджера продуктового маркетинга (далее pmm) от роли менеджера продукта (далее просто продакт)? вот на мой взгляд, нет сейчас четкого ответа на этот вопрос. теперь хочется поговорить про то, чем отличаются роли project manager-а и product marketing manager-а от роли продакта но вначале предлагаю небольшую перекличку :) отметьте, пожалуйста, к кому вы относите себя:. вначале я была скорее pmm-ом, который пытался заниматься и более продуктовыми задачами в том числе а сейчас у нас в команде есть два pmm-а, и я перестала заниматься рекламными кампаниями, контентом и тд я напишу еще сегодня как раз отдельный тред про это. да, не стала указывать, так как я совсем не активна в твиттере, а сейчас у меня он еще и suspended почему-то :( разбираюсь но мне можно еще в телеграмме по тому же нику писать!. я отвечаю за развитие всех наших образовательных продуктов и за появление новых :) и это очень интересно! про продукты можно почитать на сайте а еще можно подробнее почитать про мою работу в моем интервью. а сейчас у нас есть jetbrains academy – платформа, на которой можно изучать java, python, kotlin и другие языки программирования в формате учебных проектов и еще есть intellij idea edu, pycharm edu и плагин edutools, которые интегрируют обучение в среды разработки. про образование, и про образовательные продукты jetbrains я расскажу подробнее в среду, но, если вкратце, то все начиналось с pycharm edu, специального издания нашей среды для разработки на python, предназначенного для студентов и преподавателей. а в конце 2016-го пришло время двигаться дальше несмотря на то, что мне очень интересно было быть pmm-ом, я по-прежнему хотела в большей степени заниматься product management-ом, и такая возможность появилась с развитием внутри компании темы образования. jetbrains стала той самой компанией мечты, и она остается ей и по сей день пять лет, с небольшим перерывом на первый декрет, я проработала в команде rubymine и таки узнала кое-что про маркетинг :). и я просто им написала, не очень веря в успех, но решив, что я ничем не рискую очень мне хотелось работать над продуктами, в которые я смогу верить, и которые смогу любить и так я в 2011-ом стала pmm-ом в rubymine, среде для разработки на ruby и rails. и в какой-то момент мне попалась на глаза вакансия product marketing manager-а в jetbrains как же я обрадовалась и испугалась одновременно! потому что я вообще ничего не знала про маркетинг это с одной стороны а с другой, еще будучи программистом, я очень любила intellij idea. однако и культура компании и сами продукты оказались мне не очень близки, и быстро стало очевидно, что нам с openway не по пути я снова стала искать только в этот раз я обращала внимание не столько на позицию, или на компанию, а больше на продукты компании. и я стала искать работу product manager-ом в продуктовой компании только тогда такой профессии как менеджер продукта на нашем рынке вакансий практически не было в итоге я устроилась в openway на позицию implementation engineer, рассудив, что продуктовая компания тут важнее. но было одно существенное но я работала в аутсорсинге, и хотя я выполняла часть задач продакта, все-таки был очевидно, что надо искать продуктовую компанию. переломным моментом стало знакомство с мэри и томом поппендик на тренинге по lean в 2010-ом еще раньше я поняла, что из всех ролей в scrum меня больше всего привлекает роль product owner, а после тренинга очень четко осознала, что хочу перейти в product management. к тому же, у нас были заказчики из дании, которые где-то в 2004-м принесли нам agile я настолько им загорелась, что на несколько лет тема построения agile -процессов и воспитания agile-команд стала моим всем но об этом я подробнее расскажу завтра. где-то на третьем курсе я прочитала известную книгу фредерика брукса «мифический человеко-месяц», и она очень сильно на меня повлияла очень захотелось двигаться в сторону управления командами разработчиков так что к концу универа я уже не писала код, а была project manager-ом. устроилась junior-ом в ланит-терком, училась и работала параллельно писала на visual basic-е, потом переключилась на java, потом на ruby on rails. моя история начинается на матмехе спбгу, куда я поступила после физмат школы в школе я не особенно интересовалась программированием, зато на втором курсе я попала на спецкурс по с++ и понеслась, ооп поразило мое воображение! я решила, что пора искать работу программистом. начну я с того, что расскажу как и почему я пришла в product management и в jetbrains. а на выходных поделюсь с вами своими любимыми цитатами и расскажу, за что я их люблю и просто поболтаем на любые темы. каждый день у нас будет своя тема:пн: про то, как я пришла в product management и про разные роливт: про agile и про то, почему я не стала agile coach-емср: про образование и программированиечт: про jetbrains и мой обычный рабочий деньпт: про work-life balance. я работаю в it с 2003 года я работала в разных компаниях и проектах, на разных ролях на этой неделе я в основном расскажу свою историю, и по ходу буду делиться всякими умными (но это не точно) мыслями относительно моей работы, которые приходили и продолжают приходить в голову. всем привет! меня зовут таня, и на этой неделе буду здесь с вами :) я – менеджер образовательных продуктов в компании jetbrains вообще мы создаем инструменты для профессиональных разработчиков и не только а наша команда помогает всем желающим учить и учиться программировать. спасибо за ваше время! надеюсь, выходные у вас проходят классно 🏻🧡. для удобства тред непрошенных советов: партнёрства и команды:. во время саббатикла натренировала фокус на том, что получается меньше тревоги, больше креативности обычно, наш мозг заточен на негатив и если мы выбираем везде искать, что не так, наша жизнь превращается в 💩 круто, что в другую сторону тоже работает 🌸. и самое важное на мой взгляд: люди обязательно запомнят, как чувствовали себя рядом с вами все мы тянемся к теплу и избегаем холод. если вам приходится выбираться между «остаться в хороших отношениях» или «получить то, что вам нужно», выбирайте второе если выберите отношения, не получите ничего подробнее можно у криса восса почитать или посмотреть на. например: вместо «ты постоянно опаздываешь, значит тебе здесь неинтересно», говорим: за последние две недели ты опоздал на встречи 6 раз, я чувствую гнев и разочарование по этому поводу. вижу, вам ещё про коммуникацию интересно как выражать свои мысли: 1) основываемся на фактах2) не даем оценки происходящего 3) говорим, что чувствуем по этому поводу. редко, но в последнее время чаще я его нашла, когда начала подробнее изучать феномен успеха команд и специально искать материал. все плюшки в it работают в пользу эмерджентности ласло бок в свой книге «работа рулит» делится экспериментами, которые они провели в гугле и их результатами очень крутая. так же и с эмерджентными командами участники не просто усиливают друг друга (синергия), но и создают что-то новое и непредсказуемое, что сильно превосходит сумму компонентов системы и обычно сложно объяснить. эмерджентность – это появление у системы свойств, не присущих ее компонентам в отдельности например, ни одна деталь самолёта не может летать сама по себе. окей, давайте ещё немного про эмерджентность. а у вас эмерджентная команда/партнёрство?. несколько функциональных штук, помогающих в коммуникациях: - модель star (situation, task, action, result) - концепция пирамиды ретроспектива (простой шаблон:. на какие компоненты можем повлиять? точно на налаженную коммуникацию: - общение из позиции я ок и ты ок (то есть принятие инаковости другого человека)- алаймент среди участников (вижен, стратегия, план и тд). я не знаю на 100% как сделать партнёрство/команду эмерджентной по опыту это: налаженная коммуникация, глубокие связи между участниками, интерес к общему делу, открытость и честность если что, добавляйте). у меня были опыты со средними по компетенциям командами, которые добивались офигенных результатов и топовых, в которых крутые чуваки друг друга затеняли и результаты так себе были. сегодня про партнёрства и команды в идеале всегда стремиться к эмерджентности (1+12). я настроила уведомления по интересным темам и слушаю подкасты на эти темы очень удобно следить за расписанием и ещё классно, что там можно любому хостить/ко-хостить подкасты: интересно слушать знакомых). точного определения нет) скорее про то, что фичусь с ценностями клуба шмит16. мы с ребятами начали делать стартап напишу об этом отдельно а тут в тему окружения: тот же самый вася пригласил меня в clubhouse три недели назад и сейчас я хочу пригласить вас нужно, чтобы у вас был iphone пришлите свой номер телефона в личку есть 1 инвайт. очень круто. так началось мое знакомство с очень-очень классными ребятами-шмитами дальше была серия из пяти нестандартных интервью, на которых я все больше себя понимала как-то все происходило вовремя. мы хорошо поговорили с андреем это не было похоже на стандартное собеседование скорее разговор по душам и в какой-то момент он мне говорит: “да ты же шмит” я говорю: “кто?” я ещё ничего не знала про. мы подружились с васей на теме конференций и стали созваниваться раз в 2 недели, чтобы обмениваться опытом и поддерживать друг друга вася и есть тот друг, который передал мое резюме андрею хусиду. в 2016 я попала на свой первый productcamp и познакомилась там с микитой микадо в 2019 микита организовал митап с василем азаровым я просто сразу купила билет на самолёт и утром была в минске. окружение важно иногда какие-то маленькие на первый взгляд события приводят к чему-то крутому через несколько лет. а мне этого не хотелось просто). гештальт-терапия, в спб). честно, я все ещё обесценивала себя но все эти предложения, добрые слова поддержки от значимых людей и друзей невероятно заряжали (многие мои друзья все ждали, когда же я запущу стартап и такие «ну что, когда на работу возьмёшь?» люди верили в меня больше, чем я сама. тут еще один мой друг попросил мое резюме и порекомендовал андрею хусиду (об этом будет отдельный тред). рассталась со всеми коучами и клубами, так и не начав нормально поиск работы и тут я не говорю, что эти коучи какие-то плохие, просто туда стоит идти, если действительно хочешь строить карьеру в корпорации. у меня появился знакомый ex-harvard сказал, что у меня хороший кейс для mba я немного загорелась, так как несколько лет назад была уверена, что мне обязательно надо на mba подумав чуть глубже не нашла у себя отклика на эту идею. другой мой друг предложил открыть позицию в своей компании под меня и релокейт во францию у меня не было желания уехать бы хоть куда и во франции я себя не очень представляла разве что на каникулах). мой друг и бывший коллега предложил мне идею стартапа и инвестиции вот тут я размышляла дольше если кратко, поняла что не хочу быть наёмным фаундером и очень хочу сохранить друга это был бы его первый опыт инвестирования в стартап, а в первые раза три инвесторы учатся). мне предложили забрать блокшоу с большей долей участия (отказалась и забегая уже в этот январь: я подарила свою долю бывшему партнёру и на этом высвободилось много энергии). в тему истинных желаний с марта по май дела обстояли так:. простите, пожалуйста, что разочаровываю вас. да, это отдельная тема мне в тот момент было интересно). понимание своих смыслов ускоряет принятие решений кратно ответьте на два вопроса: что вы готовы делать/уже делаете бесплатно? а за что вы готовы платить? после нескольких итераций у меня получилось: «развитие и рост». у вас ещё примерно 30 лет работы впереди вы правда хотите их провести в текущей профессии? если позволите, порекомендую вам там как раз такие установки можно прокачать и вдохновиться похожими кейсами. в апреле менторила стартапы «со смыслами» это когда твой бизнес – продолжение твоих смыслов вот тут подробнее:. я знала как хочу жить, что чувствовать, но не понимала как туда прийти и сейчас я понимаю, что не знать весь маршрут – это ок когда есть направление, все сложится. случился какой-то новый более глубокий уровень в терапии я узнавала себя все больше и избавлялась от старых установок сильно помогал карьерный клуб и окружение. случился ковид и многие компании приостановили найм я решила притормозить с работой до апреля ещё одно классное решение. оставалась одна загвоздка: я все никак не могла понять, чего хочу. рассталась с кочуем по привычкам и начала работать с карьерным консультантом вступила в карьерный клуб ольги лермонтовой (рекомендую его очень). после поездки мы расстались с инвестором и остальной саббатикал был за мой счёт очень себе благодарна за сбережения:). через несколько дней оказалась в исландии и осуществила своё желание: я увидела северное сияние почувствовала волшебство). к третей неделе января я поняла, что не могу расслабиться в питере и решила съездить в полноценный отпуск. мне казалось, что я теряю контроль я начала трекать все, что могу: финансы, шаги, калории и тд наняла себе коуча по привычкам. 10 января было непривычно, что на работу идти не надо мне казалось, что я уже достаточно отдохнула и нужно скорее что-то делать психотерапевт направляющими вопросами помог понять, что я тревожусь и боюсь. а что именно отнимает энергию в работе? среда, компания, профессия?. очень круто! спасибо, что поделились 🏻. чтобы не ходить в выгорания: составьте список того, что вам даёт энергию и того, что её отнимает наполняйте свою жизнь вещами из первого списка и сокращайте второй исследуйте себя, пробуйте новое смотрите как вам. тред непрошенных советов. спасибо за вопрос, написала отдельный тред по теме). уходила из blockshow, потому что как раньше уже не могла в саббатикал, потому что по новому ещё не научилась. мне очень повезло с психотерапевтом с первого раза решение пойти в терапию было самым лучшим в моей жизни к моменту начала саббатикла я уже приняла и полюбила себя и могла опираться на себя. помню свой страх: «а вдруг психотерапевт не подойдёт» это была какая-то последняя надежда. в то время я не особо понимала, зачем мне вообще просыпаться по утрам внешне было все круто, внутри было ощущение, что я не живу я не знаю как, но собралась с силами и нашла психотерапевта. вот это очень интересный ответ да, когда выгораешь, делать ничего не можешь и тут мы подходим к ключевому моменту мое выгорание случилось за 9 месяцев до саббатикла не первое в жизни я уже знала, что смена проекта/компании не работает. спасибо за поддержку 🏻 выгорание у меня случилось на несколько месяцев раньше сейчас напишу об этом. ещё один организационный момент: я живу в сиэтле (-11 часов от москвы) твиты будут появляться вашим утром и вечером ну все, пошла спать, напишу вам в будущее завтра своим утром). ой, я тоже сейчас подумала и поняла, что сильно от контекста зависит например, мне вот хочется рассказать про свой опыт, но есть страх осуждения в итоге почти ничего не пишу в свои социалки ну вот как-то удачно нашёлся такой выход спасибо за возможность). а как у вас с принятием решений?. но я не была готова для меня принятие любого из тех предложений было бы из страха и желания показать, что все у меня ок а было мягко говоря не ок. честно, мне было страшно остаться без работы и денег особенно учитывая, что долгое время деньги были единственной моей опорой и я не могла себе представить жизнь без работы. тут же появились новые предложения с понтовыми должностями, релокейтами, классными командировками и всякими плюшками. мой саббатикал начался с эмоционально сложного расставания с blockshow я просто не могла больше работать с текущим ceo мы договорились с инвестором, что я ухожу отдыхать на неопределенное время, а потом мы подумаем, что делать дальше. так как это рефлексия, то конкретного расписания не будет я буду делиться своими переживаниями, выводами и инсайтами. на этой неделе на моём личном примере постараемся понять «куда приводит тотальная честность с собой и следование своим истинным желаниям?» мне бы хотелось, чтобы на выходе те, кто проживают сейчас сложные времена почувствовали поддержку и немного выдохнули. привет, я аня честно расскажу о своём опыте саббатикла будет полезно тем, у кого сейчас разваливается примерно всё :). готово). надеюсь было интересно, крутанов жду к нам в команду, остальным просто удачи и хорошего настроения xd. советы для успешного запуска: системно работать со стратегией:. ночные мысли про эффективность: фреймворк: за продукт я делаю: запускать продукт за неделю: для крутого запуска:. регулярный менеджмент:   команда, состав: команда, найм:. ну что, время прощатьсясамая крутая вакансия для сильного продакта: ищем cto и unity-разработчиков!со мной можно поболтать в фейсбуке: или найти в телеге на лучшие треды в треде :). как максимум: конкретный план, как вы из своей идеи получите профит запуск нового продукта, пивот текущего, новая фича, новый канал привлечения и тд. как минимум: сделать воркшоп для команды тимлидов и рассказать к чему пришли цель — систематизировать знание, пока вы готовитесь к встрече, а также расшарить его компетентным людям, для максимизации вероятности, что кто-то придумает как его развить. короче, можно очень много разрезов смотреть, никогда не знаешь, где окажется самый полезный инсайт тут конечно я в очередной раз выскажусь за строгость менеджмента: если вы размышляя нашли какое-то важное знание, вы должны запланировать его внедрение. конечно не только так, можно изучать конкурентов и их слабые места, можно пытаться понять базовые цели всей системы рынка, на которой вы работаете вот мы делаем детское образование можно посмотреть как на систему онбординга в жизнь, а можно как на kpi министра образования. этот пример — один из вариантов рассуждений, которые могут быть у вас на strategic time по сути вы с нуля придумываете продукты, чтобы затем понять, как это можно использовать в вашей ситуации. легким движением руки, у нас получился стартап, где нужно построить швейную машинку и написать алгоритм расчета траектории иголки внезапно, научная фантастика становится детальным планом по достижению цели есть еще проблемы с отторжением электрода, но их можно решить химией. ок, нужна сверхточная швейная машинка, и сверхдетальная карта мозга, чтобы построить алгоритмом по ней маршрут, для иголки с электродоместь ли с этим проблемы? карту мозга делать уже умеют, есть сканеры специальные, а вот машинку еще не создавали, не нужно было. это не похоже на фундаментальную проблему, нитку в желе можно засунуть с помощью иголки, можно ли это использовать в случае мозга?да, но мозг это очень деликатное желе, в котором очень много сосудов, чтобы провести туда нитку, нужно обойти все сосуды, обычная швея промахнется. ок, есть ли другие варианты?есть мягкие электроды, они не вызывают такой реакцииок, в чем проблема их использования?в том, что электрод нужно поместить достаточно глубоко, а мягкий электрод это нитка, очень сложно нитку в желе засунуть глубоко. в чем тогда проблема? в том, что никто пока не придумал, как поместить электроды в мозг, чтобы дальше все заработалоок, почему это проблема? потому что твердый электрод, если его засунуть в мозг, вызывает реакцию и вокруг него образуется что-то по типу мозоли и мозг умирает. как считать из мозга информацию: уже давно известно, что есть особые волны, их можно улавливать и в дальнейшем расшифровывать на компьютере окесть ли датчики, которыми можно считать эти волны? да, можно сделать специальные электроды, они поймают волны и передадут их дальше. идея: сделать максимально быстрый интерфейс мозг - компьютер задача стоит давно, пока самый быстрый интерфейс это клавиатура, но он пипец долгийначинаем искать проблему, почему интерфейс до сих пор не создан можно ли считать информацию из мозга?. ниже я приведу пример рассуждения, который мне очень нравится примерная схема рассуждений илона маска о том, как придумать neurolink она отлично иллюстрирует суть подхода к поиску фундаментальных проблем и анализу возможности их решить поехали. чтобы думать таким образом, лучше вообще не начинать с продукта можно начинать с базовых циклов на вашем рынке всё время рекомендую визуализироватьрисуйте карты взаимодействия субъектов в системе, анализируйте их цели и ищите базовые проблемы, которые двигают рынок. ваша задача на этот слот — не думать про ваш продукт сегодня необходимо с нуля анализировать рынок, пользователя, его проблемы, конкурентов искать средства монополизации, нечестные конкурентные преимущества, новые способы решить проблему в 10 раз эффективнее. после старта продукта, очень легко завязнуть в экзекьюшене недельных и квартальных планов, напрочь забыв про долгую перспективусамый простой способ этого избежать, на уровне календаря забронировать себе минимум трехчасовой слот в неделю strategic time. как сделать крутую стратегию продукта я не расскажу, потому что у каждого продукта, на разных рынках она разная однако, последний тред будет про то, как встроить регулярную работу над стратегией в рутины менеджера. ща будет, как до москвы доеду. ну у нас не на фейковых данных, но да, мы не школьники но все решаем домашки, все равноно помимо этого каждую неделю общаемся с учителями и учениками, именно по поводу болей а использование продукта это скорее ux/баги. последний день веду этот аккаунт напишу немного про то, как работать со стратегией продукта и буду заканчиватьа пока заранее опроскак вам неделя?. потому что после управление более чем 6-8 людьми не эффективно. нет не это ещё раз, суть не в переработках, а в фокусе на цели вместо работа ради работыесли программист считает своей целью написание кода — это херовый программист хороший программист создаёт продукт и достигает целей. ну я много очевидных вещей не пишу всю неделю выкинуть функционал это первое, чему учат на продуктовых курсах. снова какие-то догадки :). всем выплатили большую премию и отправили в отпуск дополнительный. так и я же как раз про короткий рывок. ну это ваша интерпретация, в моих сообщениях этого не написано. если что, у нас в команде не было ни одного человека, которого попросили работать сверхурочно но конкретно в период запуска многие работали больше 40 часов. нет я если что сам не одобряю переработки но я понимаю в чём разница между работать работу и достигать целей работать работу можно не достигая цели а ради цели можно например не работать или работать чужую работу. наши результаты я тоже знаю :). ок :). полностью согласен, но одно другому не противоречит разовый рывок это не постоянные переработки мы точно знали зачем это делалиболее того, есть категория людей, которые без такого как раз выгорают :). 7) идеальное команда строится под руководством тандем из сильных продуктового и операционного менеджера вероятность, что это один человек — сильно мала. 6) абсолютно все в команде должны общаться с пользователями и использовать продукт на регулярной основе помимо этого, очень важно настроить канал сбора фидбека от пользователей пространство, доступное всем в команде. 5) будьте жесткими по отношению к несработавшим наработкам всё время ищите фичи, которые надо удалить из продукта неиспользуемая фича — затраты удаленная фича — знание. 4) проводите ресерч на самых ранних этапах продукта и не останавливайте его никогда минимального времени на ресерч не существует можно сделать за 4 часа и уже получить ценное знание делайте пивоты. 3) празднуйте маленькие победы первый релиз, красивые цифры, публикации отмечайте это, пишите эмоциональные посты, заряжайте команду. 2) с самого начала трекайте движение к этой цели ежедневно, еженедельно отслеживайте в красной или зеленой зоне находитесьжесткий регулярный менеджмент с самого старта дает команде понимание, что есть только один сценарий — достичь цель. 1) поставьте амбициозную измеримую цель и считайте её императивом не протестировать рынок и узнать, есть ли там деньги, а заработать 100 млн рублейне проверить гипотезу, что учителям нужен продукт с домашками, а 10 млн домашек к 15 июня. а теперь просто советы, как сделать чтобы запуск был успешным. 7) команда должна быть готова отдаваться запуску фултайм и большевам нужны люди, которые достигают цель, а не люди, которые работают первые пару недель мы работали по 80 часов в неделю (некоторые трекают время и это не метафора) но все сразу знали на что шли, это весело. 6) добавьте в команду тимлидов проджекта/бизнес ассистентас команд нужно снять всю орг нагрузку заказать технику, инфраструктуру, выдать доступ, собрать материалы в один файл, собрать респондентов, профасилитировать встречу миллион нагрузки снимается одним бизнес-ассистентом. 5) людей должно быть малодолжны быть покрыты по максимуму все функции, но именно людей должно быть мало, чтобы сокращать коммуникации в тоже время, не стоит одним человеком закрывать дизайн, ресерч и маркетинг человек не сможет сфокусироваться. 4) в команду нужно подобрать людей, для которых достижение общей цели интереснее, чем потешить своё эго в моментеэгоисты — это прекрасно, но эгоизм бывает разный, но если у вас будут эгоисты, которым важно быть важными здесь и сейчас — пункты 2-3 не сработают. 3) у тимлидов должна быть власть увольнять людей из команды без промедленияувольнять из команды != увольнять из компании компания потом разберется, но если человек мешает команде работать — нет времени на медиацию и прочий коучинг. 2) в каждом направлении должен быть тимлид, которого уважают и который будет иметь властьв обычном режиме работы это не так критичнов режиме спринта — может быть некогда долго спорить тимлид должен иметь возможность без эскалаций вынести вердикт, которому все последуют. 1) только синьорыдело не только в том, что они делают быстрее и качественнее — это не главное главное, что синьора можно оставить без перепроверки, он более самостоятельный и вы доверите ему принятие важнейших решений. вчера вневременно пошел спать, так что тема продолжаетсякак собирать команду, чтобы запустить успешный продукт за неделюпогнали!. итого:- микроменеджмент- детальнейший план до запуска- максимальная синхронизация- фулстечностьследующий тред про людей будет. помимо фулстечности, опять же планированиепродакт нарисовал схему интерфейса в miro дизайнер пошел дизайнить разработчики расдробили на задачи начали делать те, где меньше верстки предстоит аналитики расписали где какие ивенты и пошли делать датасорс на мок-данных. чтобы запустить продукт за неделю, вы должны минимизировать блокирующие зависимости в работелучше всего этому помогает фулстечность членов команды разработчик не всегда должен ждать дизайнера, продакт не должен ждать аналитика и тд чем более фулстечная команда — тем лучше. скучно). в первый день работы над тетрадкой, мы думали, что будем делать систему для проведения онлайн урока нарисовали архитектуру и собрали первую заготовкуоднако вечером на основе ресерчей за день поняли, что это не нужно, автоматизация проверки дз в разы востребованнее. как я уже сказал, план должен быть1) сразу до запуска продукта2) подробнымно конечно же, на ближайшие часы/дни он проработан всегда больше, чем на дальниеи самое важное! абсолютно нормально постоянно переделывать план. спасибо!пофиксим. для такого синка, нужно много коммуникаций, что опять же для многих звучит контр-интуитивно (работать надо а не болтать)на запуске, у нас были:синк всех тимлидов в 9, синк продуктового направления в 9:30, синк разработки в 10, чек в обед, демо вечером. если вы хотите запустить что-то быстро, вам придется микроменеджерить, в данном случае, это необходимость всем необходимо быть в максимальном синке и точно знать кто что делает. пока у вас нет плана до запуска продукта — у вас должен быть как минимум план на первый день в том числе, в нем должен быть план того, как получится долгосрочный план inception!. база: не важно запускаем мы новый продукт, или решаем срочную проблему в текущем, нам нужен планпричем, неожиданно, но чем меньше времени у вас на запуск, тем детальнее должен быть план, а значит больше времени необходимо потратить на его составление (и потратить эффективно). ну что, пятница!рассказываю как запускать продукты за одну неделю, а также о том, что нужно, чтобы максимизировать вероятность того, что продукт полетит!. и на тикток тоже, это же прекрасно, там много классного и полезного контента в том числе образовательного, кстати. прямо сейчас ищем продакта, руководителя разработки, unity разработчиков, ml инженера. вы удивитесь, но вопрос только в подаче и продаже контента дети любят играть, но далеко не только топовые образовательные ролики на любые темы набирают миллионы просмотров в ютубе и тиктоке, например. мы делаем не только школьную тетрадь, это был первый этап только мы делаем помощника для школьника. мы посчитали, кажется мы вполне можем их достичь а зачем иначе вообще продукт делать ). ну естественно измеряемые :). а мы не говорим только о школьных знаниях школа — это лишь способ дистрибуциинаша задача научить полезным знаниям, развить навыки, помочь ребенку понять, что ему интересно и какие возможности открыты вокруг. короче, это круто!если вдруг вам тоже интересно, запрыгивайте в ракету, есть еще пара мест. и даже если не смотреть в 2030 год планы на этот! 2021 год!освободить школьникам 15 миллионов часов, только за этот год часов, которые мы сможем наполнить актуальными, полезными и интересными детям материалами. 3) я до сих пор помню, а после интервью с детьми, вспомнил ещё ярче, как скучно было учиться в школе это наш шанс поменять ситуацию4) поднять доход выпускника школы на 30% — это огромный толчок среднего дохода в стране, а значит буст всего благосостояния страны. 1) это продукт, который должен (иначе цель не достигнуть) попасть к 80% школьников рф масштабно!2) это образование — самый сильный рычаг изменения мира (потому что меняет как в моменте, так и в будущем, за счет выращивания нового поколения). пока всё то что мы делаем прямо сейчас рассказывать не буду дальше скорее мои мысли о том, почему я лично горю этим продуктом и думаю, он реально самый крутой. цели — не всегда финансовые однако алгоритм достижения любой цели, всегда один и тот же а финансы легче считатьоднако мы отдаем себе отчет, что финансовые цели будут не у всех, а значит на самом деле дельта должна быть ещё больше. чтобы сделать нашу миссию более оцифрованной, после серий интервью детей и их родителей мы поставили смартированную цельповысить средний доход выпускника школы на 30%, сократить срок от поступления в первый класс, до получения первого дохода на 3 года. после недельного отдыха, команда собирается, чтобы решить, а что мы будем делать дальше хотим ли мы развивать продукт и как мы его видим в будущемформулируется цель команду на ближайшие 10 летвырастить поколение взрослых, которые любят и умеют достигать значимые цели. 15 июня школьники закончили учебный год за два месяца в рабочей тетради было решено 10 миллионов домашних заданий зарегистрировано более 2 миллионов школьников и 70 тысяч учителей. за неделю, был сделан 1 пивот и собран продукт6 апреля, пресс-релиз очень простой, но бьет в самую сильную боль преподавателей на карантине нужно как-то задавать и проверять тонну домашних заданий. руководить новым запуском выбирают двух супер сильных менеджеров, в тот же день они набирают команду из ребят со всей компании, которые готовы ради страны поработать в авральном режим 14/6 в течении ближайших недель. 2020 год, 30 марта, школьники рф на ковид-каникулах становиться понятно, что через неделю в школы они не выйдутв недрах скайенга совет директоров решает рискнуть и стартануть необычный для компании продукт без операционки, зато очень масштабный. завтра буду рассказывать о том, как запускать продукты за неделюа пока, я понял что не рассказал, что за продукт я делаю в треде расскажу, что такое интерактивная тетрадь skysma и почему это самый крутой продукт в детском образовании сегодня. ну и да, читайте принципы рэя далио ;). последний пункт достигается, если в систему заложены принципы меритократиипо сути, вы не только выстраиваете систему управления, которая круче вас, но и защищаете её от своего дурного влияния, если вы ошибаетесь. ну и почему я считаю, что это важно:1) система управления — сильнее менеджера, который ее построил при условии, что в нее заложены механизмы ретроспективы2) менеджер перестает быть узким горлышком3) классная система эффективно дает влияние сильным и защищает от влияния слабых. я считаю очень важным уметь визуализировать всю свою систему управления1) это позволяет вам быстро онбордить новых членов команды, потому что визуально легче понять2) это позволяет вам заметить, что у вас всё слишком сложноу нас это выглядит как-то так (подробнее не покажу). pf это часть системы управления всего бизнес-юнита это взгляд сверху на все продуктовые команды но можно и идти дальше в глубь фреймворк процессов в разработке, дизайне, ресерче на каждом уровне могут быть дополнительно свои принципы, более детализированные процессы. как можно заметить, принципы могут быть супер разные, от глобальных, до мелких они описывают наш эмпирический опыт и помогают проверить качество принятых решений, выбранных гипотез, нарисованных фичей. - каждый тимлид минимум раз в неделю общается с пользователем- экран для учителя должен быть без кастомных скроллов- для учеников мы сначала рисуем мобильный дизайн- никогда не пишем слово платный. - нельзя участвовать в стратвстрече не сделав домашку (использование знания)- на каждой странице в фигме должна быть формулировка проблемы пользователя, подтвержденная исследованием- каждый дизайн начинается со сбора референсов конкурентов. в процессе работы, мы проводим ретроспективы и находим изъяны в наших процессах накопления знания и принятия решений у нас рождаются новые принципыниже некоторые примеры. на самом старте, мы выяснили, что мы продуктовая команда, а значит наша главная задача — лучше всех на рынке знать пользователя, его потребности, его контекст а помимо наличия знания, надо все решения принимать именно на основании этого знания (кстати очень важное уточнение). и тут мы подбираемся, пожалуй, к ключевому компоненту продуктового фреймворка — правилам работы и принципам принятия решенийпо сути, система правил и принципов — это эмпирически выведенные ограничения, которые заставляют нашу команду двигаться всегда в нужном направлении. если на первый взгляд, кажется, что это всего лишь говорит о лишних тратах пары сотен тысяч рублей, на самом деле всё хужепо сути, это значит, что в команде отсутствует процесс постоянного накопления интегрального знания всей команды о пользователях и рынке а это очень страшно. вы удивитесь, но я видел кучу команд, которые тестили одни и те же гипотезы, потому что просто забывали, что уже проверили их год назад, и они не сработали. ключевые задачи этого файла:- обеспечивать прозрачность и синхронизацию всех команд по поводу того, какие гипотезы сейчас прорабатываются- хранить в себе консолидированную информацию обо всех гипотезах, которые уже были проверены. в куче компаний, для этого пытаются использовать таск трекеры (у кого-то даже неплохо получается) однако на моей практике, любой таск трекер (даже мой любимый ) оказывается одновременно недостаточно гибким и слишком сложным. артефакты, тоже знакомое, но уже более редкое явление основной артефакт нашего продуктового фреймворка — ключевой файл с гипотезамипо сути, это просто файлик, где все наши текущие и закрытые гипотезы, в структурированном виде, со всеми ссылками и выводами. продуктовый фреймворк (pf) — это комплекс артефактов, событий, бизнес-процессов и принципов принятия решений, который максимально полно описывает работу вашей команды с бизнес-процессами всё наверняка понятно, нет цели описывать их в каких-то сложных нотациях, хотя можно. задача любого руководителя, особенно высокого уровня — выстраивать систему управления об этом будем говорить сегоднямы в команде называем это продуктовый фреймворк, он описывает как мы работаем в продуктовой команде. по сути — проджект менеджмент и гипер-ответственность, самые главные скиллы ассистента если ты ищешь продакта, тимлида разработки и тд, у него могут быть другие навыки крутые, но он раздолбай и с этим ок работать но ассистент — это супер стабильность и уверенность. при этом для менеджера он продолжает быть единым окном в мир не нужно лезть и ставить задачи, не нужно заполнять и искать документ порядок в ноушене всегда гарантирован и тд достаточно написать в личку, или позвонить и дать задачу, и ты уверен, что она будет сделана. дальше ответственность прокачивается сейчас эти ассистенты — одни из самых сильных проджектов в компании организовать стратсессию, провести встречу на 20 человек и 3 часа со сложным таймингом запустить срочный проект за неделю — с таким ассистентом все крутится быстрее. у нас у фаундеров и многих топ-менеджеров есть персональные бизнес-ассистенты это такие невидимые супер-герои, которые берут на себя тонну рутинной, понятной работы ведут календари, собирают встречи, заполняют файлы, контролируют договоренности это как минимум. не должен, а можешь а можешь не скиллы прокачивать а можешь хз, в космос ракету построитья лично просто кайфую от развития, мне это интересно. составить образ отдела as-is, составит определение самый крутой отдел, проверить через полгода :). звучит как классика аутсорса, но очень грустная собственно это одна из важных причин, почему аутсорс не делает крутые продукты, только крутое соответствие требованиямно если такое в продуктовой компании — я ванную, что все очень плохо, продукты слабые, мотивации нет и тд. ну так здесь речь про продактов, а не проджектов. готов или будешь? если будешь то зачем?я не плачу за часы работы, мне важно только достижение целей, поэтому если речь про овертаймы, то менеджеру я их вряд ли оплачу (речь не про линейный персонал) за перевыполнение целей я безусловно готов платить :). 5 менторы, коучи и прочие люди помогающие но только если вы понимаете какой и к кому запрос. 4 персональный ассистентэто вообще космос, настолько оптимизировать свой фокус, как это позволяет сделать крутой ассистент — нереально без него рост эффективности кажется раза в 3-4, если ассистент крутой. 3 прокачка бытовой траты ресурсовметро — такси, уборка — qlean, готовка — кухня/яндекс/кухаркадля кого-то готовка, это лучше медитации, тем конечно не нужноно глобально, все такие мелочи в сумме освободят вам тонну времени. 2 психотерапиястоит как раз тысяч 10-20 в месяц, даёт кратный рост осознанности, а с ней много всяких плюшек, спустя полгода год, после старта. 1 обучениетут все понятно, курсы, книжки и тд. рандомные мысль, как вы можете кратно прокачать себя и свою эффективность, если у вас повысился оклад на 20-100к в месяц и кстати это хороший вопрос для собеседования, проверить насколько много кандидат вкладывается в свое развитие. и я не буду долго расписывать, но считаю очевидным фактом, что надо без сомнений увольнять:- хитрецов / интриганов- токсичных людей, которые демотивируют всех вокруг и саботируют процессы. ну и конечно же, есть движение не только вверх, но и вниз если человек не справляется и понимает это — предложите ему меньше ответственности если систематически не достигает цели и не знает что с этим делать и меньше ответственности не хочет — увольняйте. воспитывайте культуру в команде, в которой возможность расти под руководством топового чувака ценится больше, чем ярлычок, что ты самый главный тогда вы сможете собирать реально лучших людей с рынка, растить с их помощью ещё более крутых из текущей команды. если у вас нет активного найма — мониторьте рынок кандидатов на самые важные менеджерские позиции если вы найдёте супер крутого кандидата — его надо братьесли нет позиции, можно поставить его руководителем текущего лида, хотя бы на время. повышение оклада и карьерный рост очень удобно накладывать на движение по pdpа ещё это круто работает, когда тимлид функции, хочет сделать фазовый переход, например в продактыотстрой самый классный отдел ресерча — доверим тебе продукт. как и в любой другой сфере, в pdp должны быть четкие, смартированные задачи, а артефакты должны быть связаны с реальной работойя не верю в ценность задачи пройти курс по построению орг структур, без продолжения скорректировать орг структуру на основе лучших практик из курса. теперь развитие:1) у всех тимлидов должен быть pdp2) в kpi должен быть заложен pdp, чтобы не него был фокус3) pdp должен быть четко привязан к целям и задачам продукта4) pdp может быть совсем личным или направленным на развитие всей функции. чтобы понять, что человек хочет и готов расти, я спрашиваю две вещи1) на сколько и как он вырос за последний год, и насколько осознанно2) готов ли он работать больше, чем требуется/положено я не фанат больших переработок, но это очень хороший показатель того,что важно человеку. и вырасти сами конечно же!. почему я ищу таких людей: у нас очень амбициозные цели на 25 и 30г я точно знаю, что текущая команда не способна достичь эту цель сейчас также я знаю, что на рынке всего человек 10, кто это может и их почти нереально схантить зато мы можем найти тех, кто очень сильно вырастет. ну и наверно ключевое качество кандидатов, которое я ищу — охренеть какое желание расти кстати, это нужно не во всех продуктах рост — требует того куда расти, если у вас нет особо таких перспектив, это не самое классное качество. проверить этот навык на собеседовании очень просто — даёте кейс любой, начинаете в процессе челленджить решение кандидата, смотрите как он реагируеткстати, если его легко продавить на ваше решение — это даже хуже, чем если он агрессивно реагирует. классная реакция на критику и челлендж, это его отработка:- да, я рассмотрел этот риск, вот данные которые говорят, что мне решение лучшеили- спасибо, я и правда не подумал об этом, возьму задачу расписать такой вариантили даже - спасибо, но я рискну и сделаю по-своему. готовность к критике и способность держать удар есть два одинаково плохих сценария: оборонительный, да ты не понимаешь, я разбираюсь в этом и покорный, хорошо, пойду переделаю у нас в команде мы челленджим абсолютно всех, такие реакции просто заблокируют работу. проверять самоходность можно вопросами про опыт человека, где он проявлял инициативу, какие изменения организовал и тд но в целом, обычно это видно даже просто по общению и по вопросам, которые кандидат задаёт на собеседовании. самоходность: супер важный навык без которого к нам не попасть он означает, что человек не будет ждать задачу, он сам каскадирует её из целей продукта, сам проявит инициативу, и пойдет фигачитьсамоходность — основа команд, в которых руководитель не бутылочное горлышко. ключевое про найм и развитие продуктовой команды простое правило: нанимать сильных, увольнять слабых, это понятноздесь расскажу про то, на что я обращаю особое внимание. аналитики — это данные, корреляции, цифры ресерч — это кастдевы, опросы, маркет ресерч, шпионаж. открытие года: наличие выделенного отдела ресерч — огромный левел ап вашего продукта да, продакт должен сам общаться с пользователями но если у вас есть люди, которые это делают все время, а ещё собирают инфу о рынке и конкурентах, то ваше интегральное знание растет на порядки. 6 конечно же, тимлид в команде из двух человек не только менеджерит в основном он такой же специалист + небольшая менеджерская нагрузка. 5 кто есть в команде помимо программистов:design, research, analytics, qaу каждой команды есть тимлид, это важно, он отвечает за развитие команды, процессы в ней, лучшие практики он является ответственным за результат перед продактом. 4 если у вас много людей без базовых инженерных знаний, то у вас потом и количество разработчиков, аналитиков будет расти у нас есть правило, каждый тимлид должен уметь написать простой запрос к бд, собрать отчёт в табло и в идеале даже собрать себе простую админку на retool. 3 если ключевые люди это инженеры, значит вам надо растить долю инженеров в команде меньше менеджеров, больше инженеров если нужен новый менеджер, лучше, чтобы он ещё и инженером был. 2 скорее всего, вы делаете it-продукт, значит ключевые люди у вас в команде — инженеры ключевые, потому что это самый дорогой этап и единственный, который несёт ценность пользователю если продукт операционный, есть ещё операционнка, но она по опыту вне продукта. 1 продакт всему голова по моему глубокому убеждению, он должен отвечать за финансовые метрики и быть прямыми руководителем продуктовой команды это самый простой способ оргструктурно дать ему все необходимые ресурсы матрица — сразу несёт в себе огромные накладные расходы. сегодня говорим про продуктовую командукто входит, какая структура, как наниматьбуду рассказывать про то, как у нас и то, почему так. чтобы узнать как использовать читайте книжки дэвида андерсона и алексея жеглова, либо хотя бы kanban guide лежит бесплатно в интернетах. когда использовать канбан:- если у вас есть какой-то процесс и вы хотите его улучшить, и знаете про какие параметрам- если вы хотите найти узкие места в своих процессах- если у вас вообще непонятно, что за процессыкучу пользы обещаютолько все равно больно, особенно лимиты. многие знают, что канбан это не только доска, но ещё и wip-лимиты гораздо меньше знают, что это не только лимиты, но и классы обслуживания, явное описание политик и каденции, позволяющие системно улучшать разные аспекты процесса. ещё один миф, что канбан это скрам без спринтов это конечно же не верно, потому что канбан не говорит какие должны быть итерации, вполне может быть, что спринты из скрама это самый оптимальный процесс. удивительно, но чтобы достичь какую-то цель, её надо сначала поставить не всегда очевидно, но цель оптимизации не всегда скорость, иногда это предсказуемость сроков, иногда гарантия, что вы готовы быстро зарешать внезапную проблему. канбан-метод — это метод оптимизации по сути, это инструмент, с помощью которого, вы можете оптимизировать свои процессы таким образом, чтобы они лучше всего проходили под ваши текущие цели бизнеса просто!. и снова: это всего лишь инструмент не надо думать, что он вам бизнес построит. тред про канбан!сразу важно: канбан доска != канбан метод != канбан из тойоты != канбан из книжки скрам и канбан: выжимаем максимум за которую книберг потом извинялся я буду говорить только про канбан-метод, автор дэвид андерсон поддерживается kanban university. высокая степень неопределенности, это, например, запуск нового продукта когда больше чем на неделю вперёд ничего не понятно для этого скрам работает очень крутоно только если вы действительно поняли что к чему и не выкидываете лишние ретроспективы и обзоры спринта. скрам придуман для работы в условиях высокой неопределенности причем при соблюдении кучи других пререквизитов например, у вас должна быть кроссфункциональная команда, где есть все необходимые специалисты, которые работают только над этим продуктом фултайм. ещё односкрам — очень дорогой фреймворк он не ускоряет разработку, он добавляет много новых встреч и так далее и это нормально, просто не надо использовать его для ускорения. наличием метрик, а особенно формулировкой цели часто вижу, что компания ищет скрам-мастеров, коучей чтобы внедрили скрам, не объясняя им, что вообще-то цель ускориться а потом скрам-мастера выгоняют, потому что не ускорил. не-не, то что задача его, не значит, что он должен делать её)он должен цели достигать если цели не достигает — он сам должен объяснить почему не достиг, и как в следующий раз достигнет если много не достигает — увольняема рядом сидеть это в детский сад. мне непонятно зачем контролировать, что человек работает мне понятно, зачем контролировать достигает ли он цели. а он должен работать? это вообще нужно?. важно, что нужно понимать про scrum:это конкретный фреймворк организации процессов, у него есть создатели, у него есть инструкция и в ней описано, что является скрамом, а что нет не надо называть скрамом какую-то нелепую фигню, которую вы сами придумали, а потом жаловаться. тред про скрам!можно похоливарить, но я не фанатик, со мной сложно будет. самое главное, что нужно понимать про любой фреймворк/подход/метод, что это лишь инструмент не нужно делать скрам ради скрама, не нужно надеятся, что он решит все ваши проблемы если у вас медленно продукты запускаются, вам нужно искать способ ускориться, а не внедрять скрам. как и обещал, сегодня очень мало постов, потому что весь день встречино я тут, приступаемсегодня говорить будем про процессы всякие скрамы, канбаны и прочие лессы про них много говорить и не нужно). можно это делать не токсичным образом продакт должен уметь продавать, если правильно продать ценность нетерпимости этой — то всё ок будет проверено на нескольких командах. у меня нет ценза по зп, но из корпораций обычно все медленные пипец. ну я тут не фаундер, зато учил и собеседовал кучу продактови вижу что это большая редкость, чтобы продакт знал про менеджментне откровение, просто наблюдение :). ещё вариант: возврат ответственности, вместо параллельной фиксации говорите так, запиши это на стикер в миро и так каждому. назначить секретаря встречи, который фиксирует заметки, а вы ведёте встречу попробуйте, в сто раз эффективнее :). либо если ещё нет карты, то как минимум список основных рисков, которые архитектура должна предусматривать и фоллоу ап с договорённостям кто что дальше делает. я и сам бывший разработчик, очень из люблю :)пример был, про формулировку фоллоу апа, не обсудить архитектуру, а вася организует встречу с обсуждением архитектуры нового продукта до 27 январячто касается результата встречи — как минимум драфт архитектурной карты может быть. ночью еще напишу как прокачивать скилл менеджмента, а пока давайте отрефлексируем день как вам контент? в тред пишите любой честный фидбек. ну и про ведущего, как вы понимаете, если нет ведущего — нет встречи посидели, поболтали — это не встреча, это тусовка тусовки зашибись, но даже у них есть организаторы обычно, если конечно тусовка хорошая). особенно часто мы используем домашку перед стратегическими встречами чтобы принимать стратегические решения, наши нейронки в голове должны быть прогреты поэтому каждый тимлид должен освежить в памяти знания о пользователях и тдкто не сделал домашку — не допускается на встречу. домашнее задание — это структурированный документ с материалом, необходимым для ознакомления участниками встречи до встречи как и у любой задачи, у домашки есть образ результата, обычно это написанное эссе с выводами, или иной формат записанных мыслей по поводу целей встречи. супер классный комментчтобы такого не было, мы наши важные встречи прокачали, сделав домашнее задание (мы для школьников работаем, нам положено). в конце каждой встречи должен быть фоллоу апфоллоу ап это не конспект встречи, это артефакт, который описывает достигнутую цель +все договоренности, которые проговорили на встречеесли что, договоренность это кто - что сделает - когда, а не договорились обсудить архитектуру. в зависимости от сложности встречи, помимо тайминга, могут быть еще два-три варианта тайминга, который ведущий будет использовать, когда все пойдет ̶п̶о̶ ̶п̶и̶з̶д̶е̶ не очень хорошо. у фасилитаторов считается нормой потратить 4 часа на проектирование одного часа встречи это не просто так если вы проектируете стратегическую сессию, лучше вы потратите x4 времени, чем все менеджеры вместе проведут неэффективно 8-24 часа. планирование встречи должно занимать время если встреча регулярная — планирование может быть коротким (50% от длины встречи)если встреча нерегулярная — 100%-400% чем важнее встреча, тем больше времени надо потратить на её проектирование. если что, встреча начинается не когда все в зум подключились, а когда вы сели планировать её а заканчивается, не когда звонок кончился, а когда вы опубликовали фоллоу ап. моя любимая адженда, которую я запомню навсегда цель встречи: принять верное решение и всё5 лет прошло, а всё ещё смешно кстати до этого пять встреч на эту тему было. ах да, что я сразу к таймингуесли у встречи нет адженды — можно вообще на неё не приходить, всё равно же смысла нетадженда это смартированная цель встречи нет цели — нет встречи, давайте это просто как правило возьмём. если вы ведете встречи на 5+ человек, особенно большие и сложные, типа стратегических сессий — читайте книжки по фасилитации (например facilitators guide to paicipatory decision-making). чем больше участников встречи, тем жёстче должен быть тайминг и более прокачан фасилитатор блок обсуждаем почему мы не достигли цели ещё прокатит на f2f встрече, но на ретроспективе на 10 человек, это будет балаган без какой-либо пользы в конце. если нет тайминга встречи — вы не знаете когда закончиться встреча, не в курсе успеваете ли вы вовремя, не затянули ли если нет тайминга — когнитивная нагрузка на фасилитатора вырастает раз в 10, на участников раза в 2-3хороший тайминг, это слоты максимум по 10 минут. инструмент: планирование встречиу каждой встречи должны быть известны: agenda с таймингом, роли участников, как минимум роль ведущего встречиведущий встречи (aka фасилитатор, модератор) не всегда == организатор встречи (aka заказчик). не говорит, конечно, но отсутствие этих артефактов — точно говорит о том, что всё плохо. собеседовал пару месяцев назад дизайн-лида, который не смог назвать ни одной регулярной встречи (управлял командой из 10 человек) заплакал. у нас в скайенге есть огромный чек-лист, по которому можно оценить скиллно на собеседованиях как минимум прошу рассказать как ведется календарь, какие регулярные встречи есть, какие артефакты прошу показать настоящие артефакты, если цифры под nda их можно не показывать. вангую, если вы с завтрашнего дня включите режим нулевой терпимости к плохим формулировкам, то1) в конце недели процент выполненных задач упадет раза в 32) на горизонте месяца эффективность вырастет процентов на 25-100. я думаю, мысль понятна1 формулировка должна быть четкая, по sma не может быть задачи делать, может быть сделать2 у задачи всегда должен быть итоговый артефакт задача посмотрю запись, которая не имеет на выходе артефакта — не имеет смысла3 итоги всегда бинарны. еще из великолепного, примеры итогов недели:- почти успели выкатить- осталось протестировать- встретились, обсудили, фоллоу ап еще не написал- занимались этим два дня (ну охуеть, теперь, простите). если что, это формулировки, которые спокойно проскакивают у менеджеров с 3, 5 и 10 годами опытаволосы дыбом встают (теперь, раньше я тоже этим грешил постоянно)всем внутривенно рекомендую посмотреть формулировки какого-нибудь руководителя из операционки там за такое уволят. любимое из планов на неделю разных менеджеров:- набросаем варианты дизайна регистрации- приберемся в репозиториях- постараюсь успеть прособеседовать трёх кандидатов- отсмотрю записи четырех интервьюну офигенно же не?. формулировки! заслужили отдельный тредэто даже более важно, чем весь менеджмент формулировки очень важны, я смело утверждаю, что вы обязаны развить в себе нулевую толерантность к размытым, неконкретным формулировкам. плохо:- следующая встреча будет как договоримся- поговорили час и нет ни одной договоренности (такое может быть пару раз в квартал, чисто для мотивации)- договорились и никогда потом не проверяли результат- обсуждаем что в голову придет, без плана встречи и привязки к целям. давайте итоги про f2fхорошо:- встречи в одно и тоже время, каждую неделю- лог встреч в одном месте- подготовка вопросов с каждой стороны заранее- фиксация договоренностей и обязательный возврат к ним каждую встречу- челлендж ответов, а не просто ответ для галочки. помимо движения по проектам, обязательно обсуждайте на f2f встречах, как минимум раз в месяц:- движение по kpi схеме- движение по pdp / развитие сотрудника- личное состояние, атмосферу в команде. здесь кстати рекомендую всякие коучинговые механики коуч — чувак, который вообще обычно не шарит в предметной области, но за счет крутых вопросов выводит собеседника на классные идеикаждый руководитель — немного коуч. это может казаться очевидным, но я видел на своем и на чужом опыте, что в момент когда менеджер осознает тот факт, что он может не придумывать сам план решения проблемы, но при этом подсветить проблему сотруднику — становиться переломным моментом в качестве делегирования. п3:моя задача зачелленджить планы тимлида, найти в них узкие места, удостовериться, что у него есть план их расшитияне нужно делать планы самому вы просто задаете вопросы если плана расшития нет — договоренность когда он появится если нужна ваша помощь, он попросит. рассмотрим пример, как провести f2f с лидом, который ведет самостоятельно проект1) контроль договоренностей (это начало любой встречи, без вариантов)2) статус по проекту (ключевые точки, светофор по метрикам)3) докапывающиеся вопросы. ладно, это обычное дело, теперь секретыключевое в проведении f2f встреч — это подготовка у меня в календаре стоит отдельный слот не менее 50% от времени встречи для подготовки вопросов к ней. все встречи структурированы одинаковым образом:есть подготовленные вопросы с моей стороны и со стороны тимлида в начале встречи обсуждаем список вопросов, если успеваем не всё — выбираем самые важныево время встречи — фиксируются договоренности с обеих сторон. у меня есть f2f-встреча с тимлидом каждой команды: продуктовой и функциональнойс продуктовыми руководителями встречи обычно по 1 часу, с функциональными по 30 минут (бывает, обговариваем расширенный тайминг)с каждым сотрудником есть ноушен-страничка с логом всех f2f встреч. собственно, один из самых сильных, на мой взгляд инструмент регулярного менеджмента — f2f встречапо сути, ничего сложного регулярная встреча руководителя с сотрудникомоднако, если правильно к ней подходить — это очень классный инструмент. также есть проекты из разряда срочные и важные у себя в команде мы для таких проектов разработали специальный фреймворк работы такой проект может занимать у вас до 5 часов в неделю3 регулярные встречи в неделю + f2f однако, если таких проектов много — что-то идет не так. конечно, может быть необычная неделя на стадиях планирования проекта, либо когда ситуация вышла сильно за рамки зеленой зоны — может потребоваться большее вмешательство и выделение времени но это уже отдельные случаи. обычно, картина выглядит следующим образом:проект, который делегирован сильному лиду — должен занимать у вас 1-2 часа в неделю на его контроль удобнее всего в рамках f2f-встреч (30-60 минут) + возможно регулярной встречи рабочей группы проекта (в режиме слушателя). подразумевается, что у вас есть проекты, которые вы ведете сами + есть прямые подчиненные, на работу с которыми тоже нужно тратить время.  : и значит вы уже окончательно заебали всех квалифицированных специалистов и они намыливают лыжи в другие, не микроменеджерские конторы. однако, если вы тратите больше 5-10 часов в неделю на регулярный менеджмент проекта, который ведете не вы, это значит, что ваша пропускная способность как менеджера ограничена всего парой таких проектов, максимум. в остальном, это конечно зависит от- проекта и его важности для вас- компетенций сотрудника, которому вы его делегировали. однозначно правильного ответа, конечно нет зато есть однозначно неправильный — 0 если вы делегировали проект, но нет никакой функции контроля, то вероятность его выполнения ±0. если честно, конкретно на эту тему знаю очень мало книг точно можно читать фридмана, он суров, но дело говорит помимо этого — я наверно напишу ещё пост про то, как прокачивать эту мышцу в основном дело не в литературе). в скайенге ~500 человек работает, не считая масс-найма и учителей за всех не скажу у меня в команде это делают все и мы тратим большие ресурсы на рост менеджерских компетенций. а менеджеров по продажам так назвали, видимо потому что слово продавец никому не нравится я считаю, что семантически слово менеджер там лишнее. ну в целом, да, трафик менеджер тоже про менеджмент :). сначала вопросвы руководитель и у вас есть несколько тимлидов в подчинении одному из них вы полностью поручили важный проект сколько часов в неделю у вас будет уходить на этот проект, если вы хотите, чтобы он был успешен?. тред 2основные инструменты регулярного менеджментавстречи, шаблоны, рутины и тд. ещё одна причина, почему мало кто прокачивает менеджмент — это очень скучносерьезно, писать фоллоу апы после встреч, жить по таймингам, составлять адженду перед встречами, смартировать каждый проект, четко описывать таргетыпойду лучше канвас нарисую. если что, это почти универсальное правило если вы какую-то область развиваете слабо — наверняка там зарыты клады с точки зрения буста вас и вашей компании. почему это точка роста среднестатистического менеджера продукта?как мы выяснили раньше, на курсах для продактов этому практически не учатне учат → мало фокуса → эта область компетенций слабо развита → это одна из самых значимых точек роста. у нас в команде, мы смотрим на менеджмент, как на науку о том, как достигать целейпо сути — абсолютно любую цель можно достичь ограничение, лишь в management capacity — насколько комплексные, сложные, далекие цели вы можете достигать. тред первыйчто такое менеджмент и почему это недооцененный навык, который вам надо развиватья буду писать свои соображения, а вы можете спорить и не соглашаться ;). давайте даже проверимопрос для тех, кто учился на каких-нибудь продуктовых курсаху вас было что-то про то, как проводить f2f встречи, как писать фоллоу апы, как делегировать?. так, сегодня говорим про менеджмент продакт менеджер, как следует из названия он про продукт и про менеджмент вот только что-то пошло не такоткройте любой курс для продактов из сотни на рынке и вы увидите кастдев, mvp, канвасы и ничего про самый обычный регулярный менеджмент. расписание на неделюпн: менеджмент — самый недооцененный навык продактоввт: во вторник будет мало твитов, поговорим про скрамы и канбаныср: продуктовая командачт: продуктовый фреймворк управленияпт: как запускать продукты за неделюсб: стратегия продуктавс: просто поболтаем. а еще до этого — руководил в скайенге платформой vimbox. до 1 января я этот продукт запускал в роли продакта. всем привет!на этой недели с вами дима абрамов, с 1 января — cpo появившегося во время карантина бизнес-юнита интерактивная тетрадь skysma в skyeng. работа в большой компании в стартапе опыт поиска работы за границей язык для поиска работы. зарплаты и налоги в англии  и менторство contributor vs people management. work-life balance  и рефералки к собеседованиям. всем привет!подведём итоги недели :)мы с вами обсудили работу и жизнь за границей спасибо за интересные вопросы и комментарии!продолжаю писать об этом у себя в канале остаюсь на связи тут популярных тем в треде. ну вот сейчас на удаленке у меня получается вот так:1800£ / месяц - дом250£ / месяц - вся коммуналка170£ / месяц - налог на жилье 100-150£ / неделя- корзина продуктов. не, в основном все зависит от credit score, и на его формирование нужно какое-то время. там несколько разных типов счетов возможно, условия отличаются. угу, тут нет wildberries и lamoda заказываешь, а потом оформляешь возврат, если что-то не подошло. deliveroo, uber eats, все местные винные. а какой именно тип счета ты имеешь в виду?. это правда зависит сильно от зп. в революте можно спокойно переводить и хранить крипту. ещё есть ипотека в 1-3% годовых :)в общем помимо уровня цен и налогов, есть много положительных сторон. 20000£ в год можно откладывать на инвестиционный счёт, доход с которого не облагается налогами такой же счёт можно создать на ребёнка до 18 лет с лимитом пополнений 9000£ в год есть пенсионный счёт, куда можно класть 4000£ в год и государство докинет вам 25% на него. есть много вариантов tax-free инвестиций и накоплений например все пенсионные накопления и доходы с них не облагаются налогами, и человек сам решает, в какие фонды вкладываться и как распоряжаться накопленными суммами. помимо income tax, есть разные типы других налогов (с продажи недвижки, с дивидендов и тд)из удобного, для каждого налога есть порог, до которого налог 0%это существенно упрощает подсчёты и оформление деклараций. зарплаты и налогиоффер выставляется с суммой годового оклада до вычета налоговшакала налогов прогрессивная:12500£ - 0%12501-50000 - 20%50001-150000£ - 40%150001£+ - 45%вилки по офферам можно посмотреть на glassdoor и linkedin, в среднем ~ 60-110к (35-55к£/месяц). новые финансовые сервисы - revolut, monzo, free tradeудобные для использования продукты с понятным и функциональным интерфейсом у revolut есть виртуальная карта для безопасного онлайн шоппинга, она «сгорает» после каждой покупки. банкия отметила две группы банков - старые надежные и новые удобныепервые больше для серьёзных накоплений инвестиционных и пенсионных счётов функционал ограничен - переводы только с компьютера, только в рабочее время как-то они даже прислали «пейджер» для двухфакторки. доставка:за время локдауна стала очень актуальнойзаказать можно почти все и получить заказ очень быстро:амазон бесплатно доставляет товары за суткив онлайн супермаркетах продают все, даже вино в аптеках можно заказать лекарства нет только «прмерки» одежды :-(. еда:доставка готовой еды - очень дорогая минимум 20-30£оффлайн рестораны 30-50£ продукты отличные и по качеству и по цене 100-150£ в неделю огромная корзинатут я полностью перешла на «домашнюю еду» она оказалась вкуснее, здоровее и дешевле. транспорт :такси стоит минимум 6-7£, в среднем 15-20£метро - поездка от 2£ до 12£ в зависимости от расстояниявелосипед 2£ на день!город адаптирован для использования велосипедов много специальных дорожек, удобный скоростной режим на велосипеде можно ездить зимой. что касается жилья, местные 1-2 bedroom просторные с удобными планировками из-за удаленки я смотрела 2 bedroom, чтобы в одной из спален сделать рабочее место большинство вариантов таких квартир начинались от 90 метров либо можно смотреть сразу дом! (стоят они столько же). стоимость аренды около центрастудия - 1200-1500£1 bedroom - 1500-1700£2 bedroom - 1700-1900£помимо аренды есть налог - council tax от 60£ до 260£ в месяц в зависимости от района коммуналка - ещё где-то 200-250£ интернет и отопление дороже всего. про ценыпо сравнению с москвой, в лондоне сильно дороже (поэтому я стараюсь не переводить местные цены в рубли)основная статья расходов - аренда для жителей лондона нормально тратить больше половины зарплаты на аренду из-за ковида, правда, цены в центре снизились. всем привет!сегодня продолжаем тему лондона - местной жизни и локальных продуктов :)надеюсь, у всех всё хорошо take care &amp; stay safe 🖤. не все компании могут предоставить sponsorship ceificate (потому что для него нужна отдельная лицензия), поэтому список компаний, которые готовы нанимать иностранцев, ограничен. получение визы обычно занимает 2-3 месяца и требует следующих документов:- сертификат ielts ukvi (от 4 баллов)- справка об отсутствии туберкулеза - sponsorship ceificate (присылает компания)- загранпаспорт, анкета, оплата взносов- подтверждения родства для членов семьи. при получении рабочей визы, ваш партнер или супруг получает те же права, что и вы, только больше может менять компании внутри страны без необходимости менять визу и выбор компаний шире - потому что им не нужна спонсорская лицензия (то есть почти на правах местного). для получения вида на жительство нужно проживать в стране непрерывно 5 лет, и за любые 365 дней не отсутствовать дольше 180 днейдля паспорта после внж нужен год проживания в стране и не больше 90 дней отсутствия. итак, начнем с визы!рабочая виза в англии дает право вам работать на территории страны в той компании, которая вас пригласила (при переходе в другую компанию, визу нужно будет оформлять заново)через 5 лет можно получить вид на жительство, еще через год - гражданство. какие критерии для выбора страны для переезда?. всем привет!сегодня будем говорить про переезд в лондон: виза, цены, жилье, локдаун и тд еще пишу об этом у себя в канале знать, если есть какие-то вопросы, или поделитесь своими историями :)куда бы вы хотели переехать?. будет здорово!. что касается менторства, то раньше это все звучало для меня очень странно кому надо тратить на кого-то свое времяно сейчас появилась опция mentorship в fb и бот в продуктовом чате когда люди осознанно готовы менторить, это снимает много вопросов и упрощает взаимодейтсвие. мне кажется, что изучать нужно то, с чем есть проблемы в текущей практике иначе изучение уйдет в стол часто встречаю тех, кто хочет прокачать компетенцию [х], потому что надо, потому что говорят, это must-have для продакта и тд, проходят курсы и не пользуются этим. при обучении на практике есть проблема, а как понять, правильно ли ты делаешь и как сделать лучше можно просить фидбэк руководителя и команды, либо найти ментора а потом уже искать образовательные ресурсы по мере необходимости. обучение и менторство большинство в сегодняшнем опросе указали, что обучались на реальной практике я тожедля меня лучшим способом прокачаться как специалисту было попасть в сильную команду а дальше уже выбора нет - нужно быстро расти :). как вы видите свою карьеру ?. одно наблюдение, самые крутые руководители, которых я видела, разделяли ценности и цели компании, нанимали людей, которые разделяют эти ценности и искренне заботились о комфорте и благополучии своей команды. что касается people management, то, с моей колокольни, это более сложная частьи я пока не знаю, какого четкого алгоритма по прокачке, знаю, что помогает менторство других, коммуникации в команде, участие в найме, обратная связь и работа с крутыми people менеджерами. мне больше всего нравится книга рэя далио «принципы», где он описывает этапы становления своей компании, как он строил процессы, ошибался и улучшал так же в блогах некоторых компаний пишут о том, как они строят культуру и процессы внутри. в таком случае можно просить фидбэка со стороны и улучшать эти навыки с практикой(без практики не представляю, как это прокачать)если нет примера «сверху», можно изучать best practices, которые подходят вашей компании, и просить фидбэка тех, кто разбирается и уже делал то же. стратегию и построение процессов можно «прокачать» в роли pmа, когда вы работаете над выделенным направлением с командойкак правило, и стратегия и процессы идут «сверху внизу», и у вас есть «протоптанная дорожка», в рамках которой вы развиваете именно свой кусок по «шаблону». ну вот в западных да, вижу как раза в россии, кто сильнее, то и главный. и по идее, задача руководителя - помогать своей команде расти и развиваться и основной скилл - нанимать людей сильнее себя и давать им возможность работать в комфортной для них среде а так же заниматься построением прозрачных процессов и стратегии. хотя обычно карьерный рост в компании строится именно по этому принципукогда дорастаешь до определенного уровня, тебя промоутят в хэды либо ты сам туда идёшь, не видя, куда ещё можно расти но роль хэда подразумевает работу с людьми и процессами, что надо качать отдельно. individual contributor vs people manager раньше не задумывалась о том, что для head of [product/design/tech] необязательно быть самым сильным в этой области в компаниии по идее, твои хард скиллы по направлению не особо связаны с твоим успехом в роли хэда направления. всем привет!сегодня хотела бы затронуть тему карьерного развития, менторства и обучения и поделиться некоторыми своими соображениями по этому поводуделитесь своими мнениями и историями тоже :)а пока несколько опросов как вы “обучались” своей профессии?. очень полезная инфа для тех, кто собирается переезжать. а где вы смотрите эти данные ?. многие пишут, что был негативный опыт в корпорациях очень интересно понять, есть ли такое в стартапах и средних компаниях?может быть поделитесь своим опытом в треде и в опросе?мне кажется, это будет полезно для тех, кто читаетбыл ли у вас негативных опыт на работе?. на apm / rpm ?. даже так - юнит совсместного предприятия mail и сбератак как сказать корпорация и корпорация. ситимобил - это юнит я сравнивала его с почтой. да, все так. согласна, это очень сложно и запутанно. и то и то правдаочень контекстно, зависит от ситуации. и от этого можно себя обезопасить, изучив информациб заранее. да, в большой компании есть вероятность угодить в неприятную политику, оказаться с минимумом влияния и импакта и попасть под каток системыно опять же не везде. отчасти согласно, ноу меня именно в корпорации случился быстрый рост с кучей новых проектов поэтому я для себя сделала вывод, что это сугубо от юнита к юниту можно попасть в почту, где ничего не меняетсяа можно - в ситимобил, где ты катишь фичи и открываешь вертикали. мне кажется, красиво и кратко выразить мысль с матом - особый сложный скилл! я пока не умею ;-(. хм, видимо, не так выразилась )в общем до удаленки главной частью дня был офис, и от него все строилось дальше я, скорее, это имела в виду). самый непонятный для меня вопрос - это социализация и общение при переходе на удаленку в mail, не было никаких проблем, потому что все процессы налажены и команду уже хорошо знаешьно при онбординге на удаленке, все по сути понятно, но социализации совсем мало. ну это мои впечатления :)можете поделиться своими, чтобы дополнить картину. по моим ощущениям, на удаленке меньше концентрации на работе, потому что пропало много бытовых моментов надо успеть в офис к этому времени, нужно переждать пробки, нужно взять вещ для тренировки, нужно купить кофе по дорогепросто открыл ноут и все. ещё для меня очень поменялась роль дома/квартиры с переходом на удаленкутеперь ехать в офис/коворкинг, чтоб так же сесть за стол и поработать, кажется очень странной и неудобной затеейразве что для коллективных мероприятий или встреч. не бойся. даааааааа. с другой стороны в офисе к тебе все подходят решать вопросы, а на удаленке ты сам решаешь, когда тебе удобно отвечать, а когда нет. офис даёт возможность быстрее решать вопросы за счёт того, что до любого человека можно «дойти и спросить» за считанные минутыв онлайне же нужно ставить созвон или ждать ответа в почте или мессенджере. согласна поработав и там и там, кажется, что понимаю лучше контекст с разных сторонно немного переживаю, что за время в стартапе могла бы прокачаться сильнее в большой компании. а где бы хотели работать?. а вы где работаете. что касается офиса и удаленки, у меня тут нет какого-то фаворита, и мне самой интересно, чем дело кончится как вы бы хотели работать?. а! еще в больших компаниях я встретила много очень сильных специалистов, одних из лучших на рынке и у них можно многому научиться. зависит еще от карьерных целей. зависит от того, как мы смотрим на опыт в резюмесделать 5 фичей в стартапе которые дали кратный рост на 10 тысяч пользователей, либо раскатить 1 фичу в инстаграмме на сотни миллионов пользователей. ну и в общем-то внутри компании можно переходить из одного юнита в другой, если нашел то, что тебе нравится и по продукту и по темпу работы :)кажется, настоящей свободы и выбора больше. еще есть пресловутая стабильность :)карьера и развитие не так зависит от конкретных людей, а больше от слаженной системы если в компании есть менторская программа, значит ты можешь получать поддержку от крутых коллег а в стартапе, может быть, просто не до этого. плюс с поддержкой большой компании открывается возможность делать огромные проекты, которые меняют рынок условный мультимодальный транспортный сервис вряд ли можно сделать на коленке. каждый “процент” за который ты борешься, дает компании огромные приросты по деньгам и влияет на миллионы пользователей так что импакт тут тоже значимый, хоть и на первый взгляд кажется “что там эти проценты”. большая компаниямой личный фаворит по нескольким причинам крупные проекты дают возможность расти как специалисту, принимая решения и внедряя технологии, которые работают на большем масштабе это более серьезный уровень проработки и высокая сложность работы с данными. есть и положительные примеры поэтому важно смотреть внимательнее на команду и руководителей в процессе собеседований, именно от их скиллов и целей будет во многом зависеть успех стартапа и ваше развитие как специалиста не только компания смотрит на вас, но и вы на нее. про work-life balance можно забыть редко, кто может себе это позволить, работая в стартапах, которые очень быстро растут слышала недавно историю про компанию, где в среднем сотрудники работают по полгода и убегают выгоревшими компания решает свои задачи, а сотрудники - нет. еще мне кажется, что это рискованная карьерная инвестиция то есть если все получится, то выигрыш и в компетенциях и в доходе будет выше, чем при работе в корпорации, но шансы невелики. стартапс точки зрения ответственности, автономии в принятии решений и уровне влияния на продукт, наверное, идеальное место но при этом очень широкий спектр обязанностей, который не позволяет сконцентрироваться на конкретной компетенции, в моем случае на продукте. всем привет!сегодня хотела бы поделиться опытом и порассуждать о разнице между работой в стартапе и большой компании, а также между офисом и удаленкой если у вас есть свои истории по этим темам, тоже рассказывайте :). что касается торга по офферу, то это после получения оффера либо за счёт контроффера, либо просто переговорами очень удивилась, но в европе и штатах есть прям отдельные сервисы, которые готовят вас к salary negotiations. я бы попробовала пройти тренировочный собес и понять, хватает ли знаний по английскому для него. для получения визы нужен английский язык по шкале 4/9 ielts а дальше все зависит от роли и возможности пройти собес продакту надо много коммуницировать, например, поэтому нужен выше уровень англа. ещё как вариант на сервисах для мок интервью знакомиться с коллегами из разных компаний и потом просить, чтоб не совсем «в холодную». интересно, а в какие компании?можно попробовать пойти по чатам айтишным для русскоговорящий, там много ребят работают в крутых компаниях, и готовы помогать. ну то есть иногда в вакансиях пишут, что обязательное техническое образование, но указание конкретных стран не встречала. не было с этим проблем ни у кого из знакомых и hr тоже не говорили об этом. с практикой на моках не факт, что первое реальное интервью будет провальным :)может наоборот соберёте офферов и на следующих собесах будете увереннее :). когда нет предпочтений по конкретной компании, я бы тренировала product sense, product execution и behavioural interview на сайтах для моковпотом прорандировала компании и начинала подаваться в менее приоритетные. mock interview с другими кандидатами, просмотр видео примеров тренировочных интервьюможно попросить знакомых пособесить и дать фидбэк. москва, лондон, остин - все разные. не встречала таких случаев а что имеется в виду, например?. давали несколько кейсов, нужно было расписать, как бы я их решала например, как бы вы улучшили retention новых пользователей на glassdoor есть больше примеров. лучше иметь план и готовиться заранее в спокойном режиме можно даже карьерный трек строить с прицелом на переезд, например, прокачивать какие-то конкретные компетенции. #5 мои выводы по поводу поиска работы за границейесли нет визы, то на джуниорские позиции попасть сложнее но можно! есть google apm и facebook rpm программы если виза есть, то вы будете на равных с местными. когда большая часть фидбека была проработана, я подалась снова, прошла по тому же сценарию, и в этот раз прошла в моем случае, я уже была знакома с процессом интервью и готовилась к нему. в общем-то в тот раз ничего не получилось :)но! я попросила фидбэк, и мне все подробно рассказали, исходя из чего я спланировала следующие шаги перешла в большую компанию с большим продуктом, стараясь прорабатывать слабые стороны, которые мне обозначили. прошла скрининг сходила на интервью в офис в москве, мне супер понравилась команда, и у меня прям загорелись глаза что-то делать следующую неделю фуллтайм я делала тестовое (а не перед дедлайном) потом был еще созвон и финальное четырехчасовое интервью в лондоне. тогда у меня еще не было опыта с продуктами с миллионным mau и миллионов профита от экспериментов, поэтому я особо ни на что не рассчитывала просто отправила резюме без всяких “хаков” и забыла об этом потом сижу как-то на кухне, ем бабушкин борщ, а тут звонок из лондона. #4 как было у меня давным-давно я предполагала, что для развития как продакту нужно будет устраиваться в международную компанию с большинм масштабом и переезжать мне приглянулась англия - ближе сша и меньше заморочек с визами из знакомых компаний там был основной офис badoo. в общем и то и то прекрасно, разные компании - разный подход главное - спокойно в них разобраться. в текущей компании вы было, наоборот, супер подробно мне помогли разобраться с данными, инструментами, процессами, постаивть цели и первое время я чуть ли не плакала от умиления никогда не сталкивалась с таким саппортом. в mail мой онбординг занял минут 10 : мы просто шли по офису, выцепили нескольких разработчиков и попросили их присоединиться к моей “новой команде” из целей мне сказали - деливери в общем-то так началась самая забавная рабочая история с кучей проектов, команд и релизов. прочитать стратегию, рисерчи, обзоры экспериментов и основные дашборды качество решений во многом зависят от понимания контекста онбординг - лучшее время для его формирования познакомиться с командой именно эти люди могут дать вам больше контекста и помочь. #3 онбордингважно узнать, какие ожидания от вашей роли и как будет измеряться успех в одной компании - это скорость деливери, а в другой проработка - дискавери, в третьей - работа над стратегией поэтому нужно хорошо понимать, как устроена компания, чтобы быть в ней полезным. в общем-то через n повторений, когда вы чувствуете себя уверенно и спокойно отвечаете на тренировочные вопросы, это хороший знак, что вы на верном пути :) дальше вам решать, когда вы готовы к реальному собесу. также можно записываться наблюдателем на такие тренировочные собеседования, чтобы разобраться, как это все работает и послушать фидбэк. когда мы собрали и структурировали информацию, можно переходить к практике есть специальные сервисы, которые позволяют проходить mock-interview с такими же кандидатами, как и вы например, exponent или stellar peers начинать можно с любого уровня, чтобы замерить уровень. для большинства компаний на glassdoor можно посмотреть структуру интервью и примеры вопросов с ответами от контрибьюторов у крупных компаний типа google есть свои гайды по подготовке с подробным описанием требований и на youtube много примеров mock-interview. #2 подготовка к собеседованиямпо моему мнению, готовиться можно и нужно, и как можно больше во-первых, потому что английский язык за счет многократный повторений улучшится лексика во-вторых, вопросы похожи по структуре, и у вас будет меньше стресса при реальном собесе. hr советуют писать сопроводительное письмо под каждую компанию с описанием, почему эта компания и почему подходите когда мы искали продактов в mail, это особо не влияло но подозреваю, это может быть важно для mission-driven компаний, которые строят определенную корп культуру. для каждого места здорово указать вашу зону ответственности и ключевой вклад, чтоб при “сканировании по диагонали” замечали самые интересные моменты в целом лучше делать акцент на результаты и их влияние на бизнес знакомые hr говорили, что ключевые навыки тоже важно добавлять. посомтрелатам пишут просто bachelor or master degree, но без указания страны в некоторых компаниях и правда пишут про degree, но вроде все меньше и меньше встречается. резюмекогда мы обеспечили себе просмотр резюме, можно его составлять :)так как наши компании не очень известны на международном рынке, то здорово указывать описание каждой компании и числовые индикаторы ( mau, market value ), которые позволят оценить масштаб бизнеса. оо, а есть примеры посмотреть?. как найти рефералки?- спросить знакомых и их знакомых- поискать по чатам сообществ- пойти в linkedin из важного - многие готовы помогать и вы ничего не теряете, если попробуете :)если написать хорошее интро, то по опыту знакомых, конверсия в ответ и рефералку - 80-90% :). реферальная программа позволяет сотруднику компании порекомендовать вас тогда резюме идет напрямую hr и получает какой-то определенный ответ в течение определенного времени то есть это не влияет на положительное/отрицательное решение, только на факт рассмотрения и скорость. #1 резюме и рефералки как правило, в популярные компании поток кандидатов очень высокий, поэтому резюме читают не всегда и отвечают еще реже поэтому наша первая цель - сделать так, чтоб наше резюме прочитали лучший способ - отправить резюме через реферальную программу. вы искали работу за границей?. всем привет!сегодня поговорим о поиске работы за границей и онбординге в новой компании )обсудим следующие пункты:1) составление резюме и поиск рефералок 2) подготовка к собеседованиям3) онбординг4) как было у меня5) выводыесли есть какие-то вопросы, дайте знать :). тоже вариант :). ну у меня выборка, конечно, не очень репрезентативная может быть, это мой байес, чтоб оправдать переезд :) буду дальше разбираться. thats it for todaylet me know if you have any questions :)have a good evening !. в итоге от продакта требуется сгенерировать value asap и это нормально но я очень редко слышала про «миссию компании, видение и стратегию» и о том, что эта value asap должна соответствовать миссии, стратегии и продуктовым принципам. мое субъективное впечатление от российских компаний, в которых я работала, что всё очень про «здесь и сейчас»: «давайте выкатим до конца квартала, акционеры попросили, надо отчитаться или [подставьте ваш вариант]». #4 продуктовая культура она есть и это здорово большинство людей живет в одной системе координат и оперирует одними и теми же понятиями и ценностями это значительно облегчает коммуникацию и принятие решений а еще все очень cкилловые, и каждый день можно чему-то учиться. интересный поинт первое до сих пор понять не могу, интересно, почему так второе, а такой режим постоянной работы получается эффективным?. а, то есть дело в смене языка, а не в смысле/тоне текста?. отличный поинт про то, что не писать/говорить одному человеку того, что не сказал бы всемочень честно. дело привычкиесли привык к одному, другое удивляет и наоборот по факту ничего плохого нет в прямолинейной коммуникации (если она без реальной грубости и оскорблений)и в российском и в местном подходе есть свои плюсы/минусы. речь о том, что не понимали друг друга?. как вам комфортнее коммуницировать с коллегами?. заметила, что российский вариант общения стал казаться грубоватым и чем больше говорю по-британски вежливо, тем более спокойно я размышляю и реагирую на вещи кажется по аналогии с экспериментами, когда людей просили улыбаться и замеряли, что они стали чувствовать себя лучше. раньше я много работала с дизайнерами, поэтому давать тактичный фидбэк - уже часть моего днк и моя детская травма и я искренне верю, что без жести и пинков люди могут эффективно расти теперь же так думаю не только я, но и большинство людей вокруг :). #3 коммуникацииочень вежливо, тактично, с уважением при этом абсолютно искренне в россии: привет, выкатили фичу х?в англии: hi hope everything is well and you had a good weekend is there any news on task x? let me know if you have any questions happy to help. в быту особенно! это в моем рейтинге даже выше шуток ;)коллеги, которые живут тут 5+ лет, не все еще легко могут формулировать в бытовых вопросах. кажется, мне нужно больше трех лет, чтобы въехать. мне кажется, у всех по-разному я часто слышу, что британский акцент сложно воспринимать, а американский легко а у меня наоборот, чистый британский акцент звучит понятнее всего (кроме русского акцента, конечно)но у нас и в школе был британский английский, может, оттуда. воооот да, мне кажется, это самое сложное ¯\_(ツ)_/¯. какой у вас уровень английского. следующий этап роста - уметь непринужденно и смешно шутить на английском ;) для этого правда нужно больше неформального общения, что при локдауне становится чуть сложнее. с каждой встречей или презентацией (за счет повторений) становилось легче и все выровнялось через несколько месяцев причем мне кажется, что тут не нужна никакая advanced грамматика и дополнительные уроки и с intermediate за несколько месяцев в среде можно сильно улучшиться. наблюдая за собой, заметила точки для улучшения- скорость речи (чем выше, тем сложнее - стала замедлять речь)- произношение (мозг не успевал контролировать и лексику и произношение, пришлось выбирать)- стресс (на презентации говорю хуже, чем на 1-1 - потребовались повторения). у меня был upper-intermediate/advanced и я думала, что этого хватит на первой рабочей неделе от скорости речи, количества разных акцентов и новой лексики мозг немного кипел для любой встречи, документа или письма требовалось раза в полтора два больше усилий, чем обычно. #2 английский языкза английский язык я переживала меньше всего, думая, что разберусь по ходу ну собственно, пришлось разбираться мой краткий вывод, что наверстывание пробелов на реальной практике - лучший рецепт для экспресс-обучения. я бы оценивала по спросу на 1 вакансию продакта приходится 5-6 вакансий разработчиков но я все жду возможности потестить эту гипотезу на своих товарищах из разработки ). что касается джуновых позиций, туда сложнее попасть без разрешения на работу, потому что компаниям не всегда хочется заморачиватьсяно есть примеры тех, кто устраивался нужно поискать подходящие компании с релевантными вакансиями и подготовиться к собесам (тоже расскажу завтр). поняла, расскажу завтра подробнее, что удалось узнать :) в моем случае был конкретный фидбэк о том, что надо идти в продукт с большим масштабом (миллионы mau), что собственно и сужает круг компаний. дааааа, а еще вот это будет ли у тебя время на этой неделе? или у нас осталось пара минут до конца встречи, давай подведем итоги, чтоб тебя не задерживатьтакое уважение ко времени. вы перерабатываете?. к новому формату нормальной работы я привыкла быстро поначалу казалось, что успеваю меньше, но со временем увеличилась долгосрочная эффективность меньше стресса, больше сна и огромная благодарность команде, которая показывает, что вот так и должно быть. надо сказать, это было весело и интересно всегда быть на драйве и в контексте чаще думаешь о продукте получаешь больше информации принимаешь более качественные решения есть и обратная сторона про усталость, выгорание и  эмоциональную привязанность к работе. и даже, если я понимала, что что-то не так, сложно было это поменять потому что все коллеги и руководители делали то же самое а значит соблюдая рабочие часы, я бы не успевала за темпом компании. в россии у меня была отдельная рабочая телега, куда писали, если что-то срочное или чтоб получить ответ побыстрее в целом мы часто списывались/созванивались по работе на выходных и всегда после 18 в будние дни. #1 work-life balanceникто не пишет после 6 вечера, на выходных или когда ты в отпуске поначалу, я думала, что дело во мне, и что-то не так но потом оказалось, что большинство коллег так работают, и это норм. итак, начнем со впечатлений от работы в англии!в основном они делятся на следующие категории: - work-life balance- английский язык- коммуникации- продуктовая культура. если есть какие-то вопросы про переезд, поиск работы и продакство за границей, о которых бы хотелось почитать подробнее, дайте знать ;). вы работаете продактом?. хотели бы вы переехать за границу?. о чем будем говорить:пн: впечатления от работы в англии вт: поиск работы за границей и онбординг в новой компании ср: стартап vs корпорация | офис vs удаленкачт: карьерное развитие, менторствопт: переезд в лондонcб: примеры местных продуктоввс: мои кейсы и выводы. вдруг она к собесу готовится :-). всем привет и хорошего начала недели! на этой неделе с вами екатерина подольская - менеджер продукта в badoo, ex-mail ru. а если просто хочется чего-то по теме почитать, то выбрать можно здесь читать-не-перечитать :). когда была джуном мне помог сильно go practice, но про него и так все знают а еще вот этот курс: местами рассказывают очевидные вещи, но все равно по итогу в голове образовывается очень понятная структура, на которую потом ложатся все остальные статьи. очень полюбила шаблон описания продуктовых требований от ани булдаковой активно использую в работе, заметно, как мозг напрягается, когда его заставляют заполнять каждый раздел, хотя вначале было: а чего писать, все ж и так понятно. ну и напоследок поделюсь немного материалами, которые лично я после прочтения в итоге использую. 3) как мотивировать пользователей генерит контент: сегменты пользователей в продукте: как выбрать команду, которой сможешь быстро расти. надеюсь, кому-то кроме меня это было тоже хоть немного полезно :)что получилось обсудить за неделю?1) как обосновать продукт, если нет влияния на метрики компании? этапы обработки ugc. сегодня последний день моей недели :) это мой первый опыт, было интересно не знаю почему (это ж очевидно!) оказалось, что ведение соц сетей - такой же навык, как и любой другой и если это делать первый раз - получается так себе и долго. хм, интересно :) можешь развернуть мысль? почему именно такая связь?. рада, что вы нашли комфортные для себя условия работы. меня удивляет, как людям в течении жизни удается сохранять категоричность в суждениях :) эх, если бы наш удивительный мир и бесконечное разнообразие обстоятельств можно было поместить в емкое правило про продуктивность удаленки. я в свое время смотрела файл, где расписаны окр-цели команд (но тут мне повезло, тк переход был внутри компании) внешним для компании людям, конечно такое не покажут. опять-таки есть ограничение: это полезно в том случае, если повезет найти/или будете искать нацелено уже сработанную команду. это имхо лучшая демонстрация того, как работает команда - это не на собеседовании 1 час продержаться милыми и разумными :). если нет информации в интернете, можно попросить на этапе знакомства с командой показать что-то, что выходит за рамки nda что там искать? то, что важно вам из примеров: структурность, аккуратность, стройность причинно-следственных связей, последовательность. и последний совет - это каким-либо образом найти результат работы команды не продукт (мы не репрезентативны, и будем оценивать со своей точки зрения, а не с точки зрения ца), а какой либо документ/доклад/описание фичи/ whatever. важный момент, что закладывать риски, что не все люди будут объективны редко у кого получается работать так, чтобы нравиться вообще всем я в таких ситуациях стараюсь опираться на мнение тех, кому доверяю в человеческом и профессиональном плане. в выборе руководителя все тривиально - постараться максимально собрать фидбек от работающих с ним людей обычно это очень красноречиво дает понять о том, как сложится работа потом. это имхо идеальная ситуация, когда ты можешь учиться у своего руководителя продуктовым хард-/софт скилам. дальше, один из наиболее для меня важных пунктов - это руководитель если у команды можно учиться смежным навыкам, команда не будет пропускать заведомо плохие решения и в обсуждениях будут рождаться лучшие, то руководитель для меня по сути (модное нынче слово) - ментор. если в ответ на ошибки получаешь фидбек, что ты - идиот, то в итоге это может плохо отразиться и на итоговых результатах работы, и на самоощущении. другой важный на мой взгляд компонент - это поддерживающая атмосфера человек может быть прекрасным профессионалом, но быть при этом очень токсичным у такого очень тяжело учиться, тк в процессе обучения неизбежно делаешь ошибки. хотела пояснить свою мысль - настораживающий, если вы хотите работать в уже сыгранной команде странно, если в команду вливается новый человек, при этом саму команду не спрашивают - а вам вообще норм будет с ним работать?в другом случае и с другими процессами - обычная практика. возможно я просто не умею это готовить я все это время находилась в стадии отрицания, и мантра была: сейчас это все закончится) стоило бы разобраться в существующих практиках, возможно там есть решение. онлайн общение имхо со временем отдаляет: это лучше, чем ничего но гораздо менее эффективно, чем офлайн общение может со временем все адаптируются, но пока я ощущаю все так ещё рутинные или знакомые задачи делаются онлайн, а вот креатив с ним плохо стало совсем. а раньше это поддерживалось общими встречами и общими целями по сути, решения принимались только после общего обсуждения дизайнер мог челенжить аналитика, аналитик дизайнера и тп и проблема рассматривалась всегда с разных сторон. плюс у нас в юните увеличилась нагрузка (спасибо мошенникам), поэтому приходится выбирать - работать или общаться. стало больше встреч: в офисе повернёшься, за 5 минут обсудил, и дальше работаешь сейчас, чтобы обсудить голосом нужна встреча встреч становится больше, поэтому сокращается количество общих синков( чтобы сократить количество общих встреч) в итоге каждый занимается своей задачей. да, кстати, настораживающий момент, если до офера не было знакомства с командой, которой можно было бы задать эти вопросы. кроме команды, как таковой, важны люди на собеседовании вряд ли получится близко со всей командой познакомиться могут помочь вопросы типа: как вы решаете, что гипотеза о решении плохая? в какие моменты приходит понимание, что решение плохое? кто челенжит решение?. я пришла в команду, которая уже работала, как команда на этапе собеседований можно узнать, как строится дискавери процесс, когда какая роль участвует и подключается, чтобы понять, как обстоят дела в конкретной команде. ощущение команды сильно помогает в работе - каждый стремится сделать хорошо продукту, а не закрыть задачи в джире с переходом на удаленку не удаётся это поддерживать, как раньше, поэтому вспоминаю с ностальгией. первое важное слово в теме - это команда у нас в дискавери команде продакт, аналитик, дизайнер, ux-исследователь в это и правда команда, которая вместе идёт к общей цели. последняя тема этой недели: поделюсь своим опытом, как выбрать команду, чтобы с ней быстрее вырасти. интересно ещё на эту тему - использование icp (построение идеального профиля пользователя) не длинный, но содержательное видео на эту тему:. в моей практике для выбора сегментов использовали просто опыт или качественные исследования и уже аналитикой их подтверждали. ещё примеры, где использовали сегментирование: какие сегменты продавцов генерят плохой опыт у покупателей; какие сегменты покупателей генерят некачественный контент. пример влияния сегментов: продавцам не нравятся негативные отзывы, где используется слово «мошенник» отклоняя такие отзывы (если при этом на аккаунте действительно нет мошеннических действий), мы радуем продавцов, но расстраиваем авторов отзывов а потом и читателей. и правда, я про грамматику даже не подумала). я не находила пока блога продакта, кто писал бы именно про ugc-продукты ни на русском, ни на английском. дополню еще про много отзывов с 1 аккаунта: какое-то время такие товарищи были, и жили весьма хорошо пока мы не начали это отслеживать, они и не парились энергоэффективные :). юзерагент/fingerprint легко меняется: те, кто продают отзывы делать это умеют, к сожалению на эту проверку попадаются не часто. но рано или поздно точно попробуем потестить были у нас кейсы, когда даже глазами было заметно: там во всех отзывах была фраза по приезду :) по приезду, менеджер александр бла бла бла ). отвечу по порядку на длиный тред :) 1) nlp для отзывов не пробовали еще использовать есть гипотеза, что отзывы для этого алгоритма слишком короткие у нас - обычно не более предложения плюс есть эффект фрейминга - прочтя отзывы на продавца, авторы начинают отмечать тоже самое. спасибо, что поделился интересно, что отзывы на продавца уже используют, как отзывы на аккаунт (выступает в роли и продавца и покупателя). на практике их все отслеживать имхо невозможно, особенно в крупном продукте поэтому я бы выбирала сегменты, за которыми хочу следить, исходя из задачи, продукта и исследований по влиянию на метрики. какие могут быть сегменты в других продуктах? канал трафика (люди находятся в разном контексте), на сколько активно пользуются продуктом, на сколько давно пользуются продуктом, пол/возраст/любые другие социально-демографические характеристики. чем хорош в этом плане продукт рейтингов - сегменты очень наглядны, и все решения приходится делать постоянно балансируя о каких сегментах мы думаем, принимая решения: автор отзыва, продавец (кто получает отзыв), читатель отзыва. набежал один сегмент - конверсия подросла, набежал другой - упала для одного сегмента улучшили продукт, для другого - сломали сценарий. ну и последняя тема про продуктовую разработку - это сегментирование пользователей в любом продукте сегменты пользователей очень важны - тк в зависимости от сегмента, метрики в продукте будут отличаться, особенно все конверсии. сложности в саппорте отзывов всегда возникают из-за фродеров мир, и регламенты саппорта , был бы проще, если бы нас не пытались постоянно обмануть в попытке защитить себя усложняются регламенты, и страдают обычные пользователи, которым не поверили часто грущу из-за этого. одна сторона прислала птс, договор купли продажи (где были все данные владельца авто, не продавца), стс другая сторона прислала птс, договор, стс и карточку из гаи о владельце авто все документы проходили проверку на фотошоп до сих пор интересно, как такое могло произойти. некоторые кейсы обращения в саппорт расследуем всей командой из интересного - на продавца по одной и той же машине прислали два отзыва: один положительный, другой отрицательный мы запросили доказательства сделки. после модерации контент попадает на сайт после чего включается работа поддержки у нас так называемый defect rate (отношение обращений в саппорт к количеству собираемых отзывов) в районе 1% это не высокий показатель, но хотелось бы ниже. удешевить ручную модерацию также может помочь сервис от яндекса - толока там сидят много людей, и выполняют элементарные действия за небольшие деньги вполне можно использовать для простых кейсов. но это не наш случай, тк получить отзыв на себя обычному человеку - очень эмоциональная ситуация. кажется, что часто можно принять риски, и опубликовать контент, в котором алгоритмы сомневаются - и избавится почти от полного потока на ручную модерацию модерацию тогда можно делать постфактум, если много пользователей пожалуются на опубликованный некорректный контент. итак, продолжим про этапы обработки контента отзыв прошёл автоматическую модерацию алгоритмы возвращают значения: опубликовать (все точно ок), отклонить (все точно не ок), на ручную модерацию (что то я сомневаюсь) и часть отзывов уходит на ручную проверку. всем, кому не ответила - сегодня завтра отвечу :). соррян, вчера была не в строю, хорошо, что по плану сегодня свободный день ✌️успею закончить тему про ugc, и вчерашнюю :)офтоп: если едите устрицы, оставляйте день через сутки свободным доп инфа в интернете по запросу «норовирус». 2) если делаете отзывы, будьте добры делать их максимально честными юридических рисков нет, репутационные - большие и мы постоянно улучшаем регламенты и продукты, чтобы такого не повторялось. один из ярких примеров: 1) если публикуется мошенник - то негатив в сторону нас, хотя мы как-бы юридически не несем за это ответственность но фактически - несем, и иногда в ущерб себе делаем решения, чтобы пользователей защитить. вначале убиваемся, чтобы собрать каждый первый отзыв: можем использовать вплоть до звонков покупателям с просьбой оставить отзыв (супердорогой инструмент) но иначе сложно раскачать этот ком. и в зависимости от текущего объема контента работают разные механики: то, что не работало вначале, работает сейчас и наоборот: то, что используем вначале, становится не сильно эффективно потом. когда давно еще только запускали рейтинги, сначала действовали очень аккуратно и тестово запустились на один мааленький регион за месяц-другой собрали ровно один отзыв :) сейчас собираем более 50к в день в среднем. поэтому на нас сильно влияет эффект снежного кома - чем больше человек сталкивается с чужим полезным для него контентом, тем скорее и он создаст его самесли покупатель при покупке читал отзывы - он скорее сам оставит отзыв и наоборот поэтому сложно набрать начальный объем. из интересного, что замечали по ходу: важно понимать мотивацию пользователей в генерации контента у нас - это помочь другим, таким же как я, или помочь бизнесу, который хорошо отработал. в самую последнюю очередь остается мотивация с помощью баллов, которые можно потратить на площадке имхо это уже последний шаг, если все предыдущее уже сделано хорошо, но все равно не хватает. планируем добавить геймификацию - но это ресурсоемко, поэтому пока есть эффект от первых двух пунктов - развиваем их. нам пока хватает самых простых механик: 1) сделать оставление контента максимально простым2) попроситьэффективность в обратном порядке ). все это приводит делает задачу сложной, трудоемкой, но очень интересной сейчас работают модели, которые анализируют поведение пользователя на площадке, и модели, которые статистически проверяют нормальность пользователя. при этом в авито около 17 крупных категорий, а под- и микро-категорий в общем лень считать :) с другой стороны, есть пользователи, которые делают 1 покупку раз в полгода, а есть перекупы - которые за месяц оставляют отзывы десятками. в первом случае ты полгода ходишь по сайту, 100500 раз смотришь объявления, звонишь, во втором случае ты заходишь на сайт, тыкаешь в одно объявление и через 5 минут сделка произошла. основная сложность при разработке моделей - очень разные товары, пользователи и их cjm на авито можно купить от квартиры до скинов в фортнайт (отзывы на скины обычно сводят меня с ума) или промокоды в пятерочке. сейчас работают более 10 моделей для поиска накруток, и постоянно добавляются новые хотела бы подробнее писать про модели, но не могу - информация о моделях дает информацию о том, как из обходить. накрутки делают с пустых аккаунтов, аккаунтов друзей, взломанных аккаунтов, а также создают специальные аккаунты для массовых накруток и для разных типов накруток приходится разрабатывать разные алгоритмы. интереснее обстоит дело с поиском накруток накрутки сейчас ищутся только с помощью автоматических алгоритмов - глазами их искать стало уже очень тяжело. алгоритмы автоматической модерации контента у нас разрабатывает отдельная команда, состоящая из дата сайнтистов часть алгоритмов реализуется через обычные регулярки, часть на ml-алгоритмах на самом деле, именно модерация текста по большей части строится на обычных регулярках. а такое вы бы отклонили?) отличный пылесос, сосет намного лучше моей бывшей!. регламент по оскорблениям один из самых сложных вот несколько примеров неочевидных оскорблений: разводит собак в крошечной клетке, гитлер!, чудик, с кукухой не дружит, обманщик ребята, помогите сдохнуть побыстрее этому владику!. и, если компания может пережить фразу в отзыве неадекватная фирма, плохо делает свою работу, то фраза неадекватный человек, опоздал на 5 минут этим самым человеком воспринимается очень негативно. очень интересно модерировать отзывы на оскорбления отзывы у нас на продавцов, а продавцы часто - это частные лица, те обычные люди. если упростить, то мы проверяем каждый отзыв на мат и оскорбления, запрещенные к распространению материалы, рекламу, контактные данные и ссылки, персональные данные и, наконец, накрутки. теперь более подробно по каждому из этапов: хотела начать с автоматической модерации, но на самом деле все начинается с регламентов. семплирование отзывов для проверки - тоже интересная тема если останется время сегодня, по нее тоже расскажу. ах да, а еще отдел контроля качества - ребята, которые просматривают семплы отзывов с решениями автоматической и ручной модерации и отмечают ошибки без них все это работало бы просто ужасно чтобы понять масштаб - каждую неделю ребята проверяют семплы из более 1000 отзывов. я бы даже сказала регулярно 😬. в теории да но, если ты крупная компания, то это не только юридические риски, но и репутационные - юридически мы не несем ответственности за мнение наших пользователей, а фактически периодически огребаем :). команды автоматической модерации, ручной модерации и поддержки работают по регламентам поэтому кроме уже перечисленных ресурсов нужны ресурсы на разработку и поддержку в актуальном состоянии регламентов. в случае рейтингов добавляется еще и третья сторона - продавец, который задается теми же самыми вопросами) почему вы положительный отзыв на меня не опубликовали, и почему негативный опубликовали. кроме модерации, контент занимает и ресурсы службы поддержки если контент публикуется безотносительного кого-либо, то тут есть две стороны и проблемы: почему мой контент не опубликовали и почему вы это опубликовали. это означает, что любой контент, перед тем, как он появится на сайте, проходит проверку = модерацию модерация бывает автоматическая (слишком дорого проверять каждый отзыв вручную) и ручная, тк любой алгоритм работает не со 100% точностью и полнотой. ugc - это очень, очень дорогая фича для компании, особенно крупной основные риски - ты даешь публиковать на своем ресурсе контент, и начинаешь нести за него ответственность. сегодня расскажу детальнее про ugc - контент, который генерят пользователи если у вас есть по ugc вопросы, или хотелось бы детальнее почитать про что-то, пишите, я постараюсь ответить. есть некоторые механизмы, про которые я не могу писать, но все они весьма невысокую полноту имеют. а что от чего ты хочешь отличить с помощью машинного зрения? продавец продает реальные наушники airpods - у него фотки из интернета (так красивее, чем самому фоткать), другой продавец продает фейковые наушники, и у него тоже фотки из интернета как их отличить по объявлениям?. бота от человека - да, честного человека от человека-накрутчика уже сложнее мы подобную задачу решаем для выявления накрученных отзывов, и пока точность и полнота моделей весьма средняя поделись опытом, если есть опыт в разработке подобных алгоритмов). буду рада, если поделитесь еще способами, о которых читали или использовали :). 4) самый кровавый, самый дорогой и самый точный способ: дождаться, когда данных будет достаточно, и провести обратный аб-тест в нашем случае, это в тестовой группе скрыть все рейтинги и посмотреть влияние этого изменения на метрики :). 3) предположить, что если наша гипотеза верна, то, к примеру, usage-метрики должны быть примерно такие откуда брать бейслайн? это могут быть бенчмарки конкрурентов или расчетные значения, ниже которых вы не будете дальше инвестировать в разработку. 2) какие исследования мы используем для проверки?тут ничего нового: внешние исследования (покупатели часто читают отзывы перед покупками в интернете), аналитические исследования (каково влияние факторов на решение о покупке уже сейчас), какую информацию ищут в отзывах (интервью). когда декомпозировала гипотезу, становится уже гораздо легче придумать способ проверить каждую из ее частей и часто это возможно не с помощью аб-теста, но и с помощью исследований. в последней фразе тоже несколько гипотез: покупатели читают отзывы до сделки, ищут дополнительную информацию о товаре/продавце в отзывах, сейчас выбирают только на основании описания товара, фотографии и цены получение дополнительной информации до сделки имеет ценность для них. например, рейтинг продавца сделает рынок более прозрачным декомпозируем: что значит прозрачным? покупатель сможет выбирать продавца не только за счет красивого описания и фотографии и низкой цены, но и дополнительной информации в отзывах. как в таком случае подтверждать гипотезы, которые сделали при формировании видения и стратегии?1) мне больше всего помогает декомпозировать гипотезы. почему у нас так происходит? чтобы запустить тест - нужны данные, чтобы собрать данные (а в нашем случае созданный пользователями контент) – нужно сначала разработать все и подождать какое-то время например, от полугода до нескольких лет. привет! сегодня по плану, как мы выходим из ситуации, когда для теста гипотезы нет данных. а что делать, если не юзеры отмечают фейки, а конкуренты?). на горизонте года-двух да но на горизонте аб-теста, которые длятся редко больше 3х недель - неа. это сложная и болезненная ситуация и для нас поверь, если бы это было возможно сделать - это бы уже сделали сейчас многие команды фокусируются на улучшении контента, и это долгая история с большим количеством разрабатываемых продуктов по ходу. что понимаешь под обычными рейтингами, не совсем поняла?) стимулируем отзывы писать изо всех сил на сколько позволяют пока ml-алгоритмы, и терпение покупателей :)про модерацию контента расскажу в среду, там же будет и про контроль фейковых отзывов :). еще пример: ответы на отзывы для продавцов снимает сильный негатив продавцов, когда они не согласны с отзывом но значимого влияния даже на метрики продукта рейтинги и отзывы (не говоря уж об основном продукте) речи не идет. из примеров: рейтинги продавца - сначала вообще не влияет (нужно набрать довольно большое покрытие, чтобы значимо влияло на метрики) а потом не можем доказать влияние, тк оно идет либо через churn rate покупателей (в тесте не увидишь), либо через улучшение сервиса продавцов. не совсем так если что-то слишком слабо влияет на метрики, то вопрос - а зачем это вообще делать?тут скорее верим, что на метрики или влияет (хоть мы и не можем это доказать) или повлияет в будущем. 3) отзывы пользователейздесь, кажется, все просто: любые отзывы - хорошо если отзывы хорошие - отлично! если плохие - тоже неплохо если пользователям продукт или фича не полезны - они не напишут ни хороший, ни плохой отзыв. в случае рейтингов, это контакты с хорошими продавцами, и опять чтение отзывов до сделки. в этом случае, обычно достаточно доказать зависимость один раз с помощью аналитического исследования и дальше отслеживать только те метрики, которые мы можем посчитать. 2) метрики, изменение которых влечет изменение основных метрикесли продукт уже работает, можно провести исследование, которое покажет зависимость между метриками продукта, которые вы можете посчитать, и основными метриками. в случае рейтингов продавца - это, например, покрытие продавцов рейтингом, чтение отзывов до сделки. 1) usage-метрикиusage-метрики показывают, как часто пользователи используют продукт обычно их не сложно построить и отслеживать их изменение если упростить, чем полезнее для пользователей продукт или фича, тем чаще они его будут использовать. если весь пазл сложился, описаны видение и стратегия продукта, найдены внешние исследования, найдены референсы у пиров, то в исключительной ситуации можно считать, что продукт можно разрабатыватьно как тогда отслеживать успешность продукта?. в случае рейтингов продавцов, есть исследования, которые показываю, что люди поступают лучше, если знают, что их оценят улучшая поведение продавцов, улучшается и опыт покупателей правда, ни на каких метриках подобный эффект мы опять-таки заметить не сможем :). 4) наличие внешних исследованийиногда, обосновать фичу помогают внешние исследования. но если планируется фича, которой нет ни у одного из конкурентов или пиров, не реализована подобная фича у компаний в других сферах - это хороший сигнал и повод задуматься почему в таком случае я была бы более насторожена при планировании разработки, и обозначала это как риски. 3) подсмотреть решение у конкурентовналичие похожей фичи у конкурентов почти ничего не значит: находясь вне контекста тяжело восстановить предпосылки и цели фичи наличие фичи у конкурента не означает, что она хорошо работает возможно, у них просто нет ресурсов на выпиливание. например, мы можем доказать, что чтение отзывов уменьшает churn rate покупателей в исследовании даже можем понять на сколько, но экстраполировать эти данные на полное множество будет некорректно. иногда похожесть когорт аналитически строго доказать невозможно, и приходится идти на компромисс в любом случае, через аналитические исследования получается получить подтвердить или опровергнуть гипотезу о влиянии, но именно оценить влияние фичи часто невозможно. ок, мы не можем посчитать retantion в аб-тесте, но можем сравнить когорты пользователей задача гораздо сложнее, чем запустить аб-тест, тк нужно аналитически доказать похожесть когорт и исключить факторы сезонности (если берутся когорты до запуска фичи и после). вчера не успела продолжить, поэтому заканчиваю сегодня :)итак, пункт 2) аналитические исследования. да, скорее всего для какой то узкой ниши это действительно могло бы стать популярной фичей :). я могу предложить тебе перейти в личку и разобрать проблемные кейсы :) то, что ты описываешь - или ошибки, или краевые кейсы, про которые хотелось бы узнать буду рада, если согласишься потратить свое время :). жирный плюс. чуть уточню - конверсия в контакт с продавцом (очень малая часть сделок проходит через он-лайн транзакции и может быть отслежена) нет, рейтинг продавца на конверсию в покупку не влияет :) или влияет настолько незначительно, что это не видно в аб-тестах (те дельта меньше 1%). блин, точно еще один продукт без детектируемого влияния на понятные метрики 😭. спасибо за фидбек! в списке объявлений то, по которому общались, как правило, будет в самом верху точка входа есть для продавца: он может запросить отзыв из чата для покупателя: слишком мало пользователей,кто переписывается в чате, относительно тех, кто хочет оставить отзыв. у нас в компании почти все курсы на udemy бесплатны, поэтому не знаю, к сожалению. еще у ани булдаковой неплохой цикл статей про стратегию продукта:. поделюсь материалами мне понравилось, как про стратегию и видение рассказывают на этом курсе:. в итоге, начав с более очевидного и размытого: улучшаем жизнь покупателям, мы перешли к ликвидности, которую получают хорошие продавцы по сравнению с плохими. второй вариант сделали уже за 2 месяца пришлось все менять, тк под первый вариант не получалось разработать метрику, по которой можно отслеживать успех продукта меня тогда очень удивило, как разработка метрики подтолкнула пересмотреть стратегию и цель продукта. первый вариант стратегии мы разрабатывали полгода так долго, тк продукт влияет на многие сценарии, на покупателей и продавцов при этом влияние неоднозначно: должен пользователь читать отзывы, или ему должно хватать рейтинга? ок если покупатель контактирует с плохим рейтингом?. у нас тестировалась он-лайн оплата товаров: он-лайн оплачиваешь, но деньги перечисляются только после твоего подтверждения, что товар тебя устроил при встрече с продавцом если коротко - не пошло. в нашем случае рейтинг продавца - это способ сделать рынок с прозрачными правилами игры от этого выигрывают, как продавцы, так и покупатели (и тут опять без метрик ) больше продавцов с лучшим сервисом у них больше покупателей у большего количества покупателей лучше опыт. наличие обоснования в виде стратегии или видения, конечно, не делает продукт автоматически хорошим по ходу разработки нужно проверять основные гипотезы, что продуктом/фичей пользуются с нужной частотой, она удобна для использования и не ломает другие сценарии в продукте. если продукт или фича помогают (предположительно) приблизиться к описанному видению, являются необходимым шагом в сторону цели - это может являться основанием разрабатывать фичу или продукт. 1) видение и стратегия продукта в этом случае становятся особенно критичны видение - это описание того, каким будет мир и продукт в нем через 3-5 лет (или другой период времени, который лучше подходит продукту или компании)стратегия - как сделать видение реальностью. итак, как обосновать важность продукта или фичи, если она не влияет на метрики?начнем с обоснования важности и расскажу свой опыт. а вот с точки зрения метрик ничего не померить: ни в одном тесте мы не сможем увидеть увеличение количества покупателей на площадке (одна из важных метрик компании) увеличение retention покупателей в аб-тесте тоже увидеть не получится-нужен слишком долгий тест, nps - мимо итд. на авито ты совершаешь часто сделку с незнакомым человеком: он может обмануть в описании товара, не прийти на встречу, предложить при общении другую цену и тд модель classified не подразумевает участие в сделке компании, как арбитра: сделка проходит в офлайне без третьей стороны. начнем с примера - мой продукт хорошо иллюстрирует ситуацию, когда не видишь влияния на основные метрики компании с точки зрения здравого смысла рейтинг продавца - это must have для продукта типа авито (мы относимся к классифайдам). разрабатывая продукт, ты целишься в то, что ты улучшишь основные метрики компании улучшаешь - успех, не улучшаешь - гипотеза не подтвердилась, работаем дальше. в теории все просто: у основного продукта есть дерево метрик, которые отвечают за успех продукта и компании на первом уровне самые главные метрики, на втором уровне метрики, которые влияют на них и тд уровень вложенности может быть сколь угодно большим. наконец можно начать первую тему можно ли делать продукт, если не возможно посчитать его влияние на основные метрики компании?. какие люди :). о, даня! привет :) рада тебя хоть здесь видеть. понимаю тебя  сама иногда ругаюсь, когда использую  . с помощью рейтингов в том числе и с этим боремся :). хочу прокомментировать тему субботы я продактом работаю только два года и ещё свеж в памяти переход в продакты мне очень повезло выбрать команду, с которой я работаю это помогло быстро вырасти, поэтому хочу поделиться, как можно выбрать такую команду. пн - ок ли, если нет детектируемого влияния на метрики компании? вт - что делать, если нет данных для теста гипотез?ср - этапы запуска ugc-продуктачт - про сегменты пользователей пт - день для свободной темы сб - как выбрать команду вс - подведение итогов. отзывы - это ugc (user-generated content), и часто классические подходы нам не подходят о том, какие возникают сложности, и как их решаем, расскажу на этой неделе. всем привет! на первой рабочей неделе в этом году с вами я - оля конякина, менеджер продукта рейтинги и отзывы о продавцах в авито. 4 развитие продуктового майндсета в команде книжечки по стратегии о мотивации и убеждениях про mission statement связи: желаю бодрой недели, пока!. моя неделя подходит к концу, спасибо всем! кратко о том, что было:1 история jetbrains и её принципы: развитие продуктологии внутри jetbrains о продакте и менеджменте в инженерных компаниях. на этом всё, если кто-то уже с этими работами знаком - дайте знать, насколько по вашему они актуальны для формирования вышеназванных артефактов организации. сейчас вариации mission statementа проходят командное ревью, наверное уже кто-то из моих коллег в последствии поделится результатом но что интересного было найдено - это работы в франкла, в частности, воля к смыслу, помогающие при работе над виженом, миссией и ценностями. удовольствие - следствие реализации смысла; власть (лучший перевод - могущество) - предпосылка для его реализации получается естественным образом интервьюируемые коллеги по проекту охватили все эти три понятия, и, кажется, стало ясным вокруг которого следует фокусироваться. разбираясь с этим дальше, мне вспомнился труд виктора франкла воля к смыслу в нём, если кратко, ницшеанская воля в власти и фрейдистский принцип удовольствия рассматриваются как производные по отношению к изначальной воле к смыслу - базовой движущей силе человека. в моём случае получилось три кластера, характеризующие нашу деятельность как:- расширение во все области, становление там лучшими, захват мира - принести удовольствие пользователям, сделать их счастливыми- совершенствование продукта как явления и процесса его применения. как результат получили стандартную канву, обработав которую нужно было дать несколько формулировок на итоговое суждение команде обрабатывать решили по-отдельности, для более разнообразного итогового списка. решили опросить не всех 100+ коллег, но остановиться, когда ответы стабильно начали совпадать с высказанным ранее хотелось, конечно, продолжать, если б не время - многим, и нам самим, было приятно на время оторваться от конкретных задач и поговорить о таких общих и важных вещах. мы сформировали исследовательскую группу и скрипт для интервью с коллегами по проекту, где каждый рассказывал бы, что им движет, что мотивирует в работе над проектом и ради чего, на его/её взгляд, здесь вся работа происходит. - при дальнейшем онбординге пришедшему иногда проще идти на контакт с коллегами из-за ощущения общего дела - опять же, на нашем масштабе эта потребность стала чувствоваться - раскрытие вижена, помогающее в его дальнейших использованиях. зачем, мы стали этим заниматься:- на текущем масштабе стала заметно проявляться разность во взглядах команд проекта на общее направление движения одним mission statement это не решить, но всё же шаг в эту сторону- это хорошая проверка на culture-fit при хайринге в обе стороны. в принципе, все эти годы проект шёл вперёд и без сформированного стейтмента, его вели люди с боевым духом и горящими глазами у коллег внутри был ответ о миссии, у каждого свой, и задача была скорее в том, чтоб его получить и агрегировать. несколько месяцев назад во время очередного рефреша вижена, и пересмотра продуктовой стратегии, мы решили в первый раз на уровне всего проекта ответить на вопрос о миссии. продуктовый вижен котлина зрел пока в jb развивали ide под java и другие языки копилась экспертиза в области языков программирования, и неизбежно наступил момент когда мы решили написать свой - прагматичный язык для индустрии (и нас самих), агрегирующий накопленные знания. прежде было много слов про jetbrains в целом, но работаю я конкретно в проекте котлин это полноценный самостоятельный проект внутри jb в ноябре 2020 года отмечал 10-летний юбилей от первого коммита в проекте трудятся чуть более 100 человек. привет! сегодня хочу поделиться находкой, пришедшей во время работы по формулированию mission statementа. смотри, я только за себя скажу эта мысль создаёт ощущение, что всё в моих руках если чёт не нравится, то я могу над собой поработать и это измениться если не буду работать - значит я ок с этим это как бы убирает чувства тщетности и безысходности. делитесь своими мыслями, приёмами и лайфхаками тема, кажется, будет актуальной всегда. если я не в настроении и уставший сотворил какую-то дичь, то тема не в том, чтобы держать себя в руках, а в том, чтобы до плохого настроения себя не доводить я здесь кто в конце концов, причина или следствие?. 3/3 в дополнение к прошлому - умный решает проблемы который мудрый не создаёт 🎓если я нахожу себя в решении проблем - то полезно подумать - а как вообще эти проблемы ко мне пришли. иными словами, что происходит - то и цель крайне полезная позиция применяется экологично, с наилучшими побуждениями. и если не ок, то опять - как часто это вообще происходит, какие договорённости привели меня сюда, техника 5-ти почему и др =) или ещё пример: супруг(а) регулярно проводит мало времени с семьёй, из-за завала на работе 💼 завал на работе - навожу порядок дома. 2/3 заклинание два: причина и следствие - поменяйтесь! по сути, обобщение первого например, про те же эмоции: я испытываю эмоцию не в результате событий извне, а конструирую события таким образом, чтобы испытать привычную эмоцию. становится прям интересно - как я вообще здесь оказался включается внутренний исследователь и жизнь кажется лучше. 1/3 итак, заклинание первое: я являюсь причиной всех следствий в моей жизни конечно не буквально, но как жизненная позиция прям вытягивает, когда возникают плохие эмоции или какая-то стрёмная ситуация. тема не редкая, но раз решения, скорее, индивидуальны, то я за то, чтоб пробовать новое и развивать что нашёл для себя в моём, например, случае это скорее про убеждения их сложнее принять, но в дальнейшем как-то проще получается - они сами строят поведение, реакции и эмоции. привет! предлагаю сегодня делиться мыслями о том, в чём секрет энергии кота бориса 😼другими словами, что помогает сохранять мотивацию и боевой настрой в условиях ультра-многозадачности. да, естественно, это навык и проф задача, сохранять системность и ясность, насколько это возможно. вспомнил ещё топ-2 - франсуа жюльен - французский философ, провёл сравнительное исследование китайской и европейской стратегической мысли основные труды:- трактат об эффективности- путь к цели: в обход или напрямик. хэй, как праздники проходят?. нет, очень сильно разнится у всех есть разработчики других (не-jetbrains) продуктов, есть engineering менеджеры, есть фаундер без опыта разработки. да, всё так; я бы сказал обогащать, расширять в сторону общего пересечения. секунду, кажется мы разные смыслы в это слово вкладываем под картой понимается то, как один человек видит/воспринимает окружающий мир (в противоположность тому как на_самом_деле) получается в каждой карте они свою роль играют, верно?. есть, преимущественно тулзов для разработки, и автомэйшн вокруг этого. про карту пользователей - хороший вопрос хоть у них и разные ожидания по их реквестам, наверное поисследовав это можно распределить на типичные персоны, и с ними тоже засинкатьсяуточню, речь ведь не о том, что в их реквестах,а о том, что в принципе с реквестами делать,так?. в том что взглянув на ситуацию (с реквестами, например) каждый из нас исходя из своей карты либо:- знает что делать- не видит хорошего решения- вообще не считает что нужно решать- и речь о том, что бы через открытые вопросы вести путь до точек соприкосновения. от себя назову эдварда люттвака:стратегия логика войны и мира - разбирает манёвры войн 20-го века на разных уровнях, выводя закономерностиcтратегия византийской империи - в рамках тех же законов описывает как восточная римская империя почти на 1000 лет пережила западную. а поделитесь своим топ-материалом по стратегии 🎮 книги, статьи, видосы, что угодно. если нет - то скорее всего я узнаю что-то новое и полезное если да - побрейнштормим, найдём решение из совместного опыта. я за то, чтоб это естественным образом происходило упрощенный пример - репортят в чью-то систему в 10 раз больше фича-реквестов чем человек может дать, спрашивают за них, написывают есть смысл, как случай выпадет, узнать - беспокоит ли это оунера системы. челленджить друг друга на решения и гипотезы заметно проще, и, кажется, результативнее уже в пространстве общих понятий и взглядовпо итогу это получается небольшой шаг от построения процессов и управления продуктовыми задачами в сторону сетевого взаимодействия 🤜🤛. 3/3 по минимуму бросаться оценочными суждениями, тк они могут не попасть в карту коллеги. 2/3 помнить, что спор - это ситуация когда люди не просто не соглашаются по теме, а именно не соглашаются друг с другом, осуществляя взаимный наезд; и работать в сторону понимания позиции собеседника. на это тоже можно влиять:1/3 сначала добиться взаимопонимание по ключевым словам - что мы вкладываем одинаковый в них смысл. таким органичным образом, объединяя экспертизы свою и собеседника, формируется *общее множество понятий*, как расширение карты каждого формируется не быстро, каждый строит дорогу со своей стороны. рабочий же, на мой взгляд, путь - это открытые вопросы, которые мы друг другу задаём при обсуждении общих целей и непоняток на 1-1 созвонах они запускают внутренний поиск и дополняют карту его результатами. и если эту карту представить как в тч набор ассоциаций вопрос ответ, то развитие майндсета - это изменение и дополнение этих ассоциаций. все мы знаем, что у каждого есть своя репрезентация этого мира (карта), построенная из индивидуального опыта принимая решение человек выбирает наилучший вариант в рамках имеющейся карты. делиться знаниями не сложно - это например презентации, рассказы о своих исследования и результатах добиться чтобы знания повышали качество ежедневно принимаемых решений каждым человеком - более интересное дело. вообще здесь есть два параллельных направления: знания самой дисциплины и их применение в нужный момент. рабочий вариант был рядом - иди и общайся разговаривай с коллегами о сложных/проблемных местах в их работе - у нас общие цели, мы команда свобода принятия решение создаёт множество вопросов и непоняток и в тч их решение и есть наша совместная задача. ошибкой два было находить слабые места в принятии продуктовых решений внутри команды и пытаться их исправить новыми договорённостями новые методы слабее старых привычек, и если это не решало боль именно участника договорённости, то договорённость редко когда длилась долго. иными словами, тоскание вёдер заместо строителства трубопровода. пара слов о том как это не получалось в начале:- ошибкой раз было моё решение, разобравшись в теме, вписываться в обсуждения вопросов, рассказывать о решениях с позиции продуктологии это могло решить именно те вопросы, но дальше пользы не несло и к майндсету отношения не имело. почему я решил отдельно раскрыть эту тему: - вижу в ней большой потенциал масштабирования деятельности продакта- не вижу как можно иначе в компаниях с высоким уровнем свободы принятия продуктовых решений. (в перерыве с хаккерских аттак) привет! сегодня расскажу о моём взгляде на развитие продуктового майндсета команды (с учётом меня в тч), и что в повседневной практике работает, а что неоч. на этом пока всё завтра планирую завершить эту тему разговором о развитии майндсета команды хорошего вечера!. менеджмент из единой классической структуры уходит, как-бы в мета-структуру, передавая свою продуктовую экспертизу команде, адаптирую и совместное развивая наилучшим образом к привычным задачам добавляются новые, дико-интересные челленджи 🔥. вчера как-то в тему вышла статья на хабре про описание внутреннего устройства инженерной компании valve ( где, кмк, применяются или могли бы иметь место принципы продуктового менеджмента о которых я пишу здесь. 3/3: развитие продуктового майндсета продакт - главный ответственный за адаптацию и развитие продуктологических практик внутри компании. и здесь менеджмент - это в первую очередь менеджмент задач, своих и относящихся к себе (их систематизация, построение процессов, создание продуктовой команды и их делегирование). 2/3: в сетевой орг структуре нет общей иерархии постановки задач - продакт не руководит командой разработки или продаж, и задачи ставят во всех направлениях. что друг от друга ожидать, чем друг другу помочь, и в каком порядке в каком-то смысле мы разворачиваем небольшие исследования в направлениях от продукта к каждой из сторон и выясняем боли и потребности всех причастных. что тогда в данном случае менеджмент:1/3: установление связей: что для начала важно сделать продакту - установить доверительный контакт, построить отношения с командой разработки, сервисными командами и стейкхолдерами, а так же пользователями, комьюнити и партнёрами. таким образом, продуктовая роль, ранее бывшая у команды разработки и/или руководства распределяется на разработку и продакта, а роль стейкхолдера идёт в руководство компании. 5/5: если компания выпускает более одного продукта, то, вероятно, внутренняя организация имеет хоть сколько-то сервисный характер, и подразделения маркетинга, продаж и тд охватывают (оказывают сервис) группам продуктов задача продакта - наилучшим образом настроить с ними связь. по сути, первые три пункта - это поиск ответов на вопросы или проверка гипотез о продукте и точках его роста, которые продакт генерирует вместе с командой проекта. 4/5: развитие продуктового майндсета команды проекта (куда могут входить разработчики, дизайнеры, тестировщики и другие, если они действительно её часть, а не обособлены в сервис). в чём тогда заключается продуктология и в чём - менеджмент? в скоуп продуктологии я бы включил:1/5: итеративное прояснение что ценно и важно для пользователей - классика;2/5: работа с партнёрами, комьюнити;3/5: обзор рынка, анализ конкурентов;. в любом случае, со временем задач по поиску путей дальнейшего развития и по поддержке того, что есть, становится больше и требования к качеству продуктовых решений из-за роста становится выше приходит на помощь фулл-тайм роль продакт менеджера. причём я верю, что это могут быть случаи- где основатели сами разработали свой продукт, который взлетел, и впоследствии строящие структуры вокруг по мере необходимости;- где предприниматель загорелся идеей и организовал группу с определённой культурой, которая идею воплотила. что такое инженерная компания здесь, в это понятие я вкладываю следующее - продуктовые решения преимущественно принимаются инженерами разрабатывающими продукт, или занимающимися менеджментом. всем привет! сегодня буду делиться наблюдениями из индустрии про то, такое продакт- и что такое менеджмент в инженерной компании. завтра предлагаю чуть оторваться от конкретного кейса компании и попробовать общими словами определить продакт менеджмент в инженерной компании. такая вот картина интересно будет знать ваше мнение, чего может быть здесь не хватает а от коллег, кто внедрял/развивал продуктологию в компаниях с уже устоявшимися линейками продуктов - схоже ли это с вашим опытом. а компания же в целом - это сбалансированное сочетание, образно говоря, учёных которые пытаются заработать деньги на своих изобретениях, и бизнеса, который ищет что именно нужно и просит изобрести и один из ключевых здесь навыков менеджмента - чувствовать баланс и сочетать. здесь может видеться как-бы обратное движение по классическому на сегодняшний день процессу создания продуктов. иными словами, это в том числе свежий, беспристрастный, общий и в частностях взгляд на продукт, который мы вместе с командой формируем он порождает вопросы, в тч описанные выше, на которые мы потом пытаемся ответить. и это нормально - как часто люди в принципе себя дополнительно спрашивают - почему я делаю именно это, какова перспектива такого выбора? а какие ещё есть варианты? к чему в итоге я хочу прийти? и тд. а, собственно, продуктовая работа - это итеративное прояснения вопросов о продукте, пользователях и стратегии, а так же упорядочивание и представление этих знаний команде занятный факт, что у команды продуктовые вопросы сами по себе возникают не так часто как ты можешь ожидать. по сути, продуктовые стратегии, количественное представление поведения пользователей, аналитика и качественные исследования вышли уже из этих вопросов как естественная потребность. продакт менеджмент стал полноценной ролью, ищущей ответы на эти вопросы и берущей во внимание другие продуктовые аспекты наших решений, которых раньше касались скорее по случаю, и где могли находиться точки дальнейшего роста (речь идёт о периоде примерно 2010 - 2015 годах). для большинства продуктов в начале развития было ясно, какие фичи несут основную ценность далее вариантов развития становилось больше, а ясность в том, что делать следующим падала таким образом, потребность в продакт менеджменте формировали требования к продукту и приоритезация. первые вопросы начали появляться когда мы стали заходить на территории, в которых сами пользователями не являемся помогала развитая коммуникация с кастомерами и вообще комьюнити как таковое. долгое время, отдельная роль продакта просто не требовалась - каждый разработчик, условно говоря, был продактом писали решения для себя, валидировали об коллег, слушали пользователей и хорошо их понимали. привет! сегодня будем говорить о развитии продуктологии внутри jetbrains. да конечно поменялось, как и само время в принципе - доступность образования и stackoverflow, образно говоря , возросшая ценность навыков разобраться и сориентироваться и тдесть какой-то топ универов из которых приходят, но он точно не компанией формируется. что-то готовят там не буду пока раскрывать тайн. да, в тч об это буду говорить сегодня/завтра в jb сейчас 1000+ сотрудников, 28 выпущенных продуктов менеджменту действительно стало уделяться больше внимания чем раньше, но не за счёт вытягивания структуры. примерно, спустя год у коллег было много эмоций, когда фичи ij идеи вскоре появлялись в эклипсе но мы тоже что-то заимствовали, и заимствуем по сей день руководство вообще положительно относилось к обмену знаниями, тк по итогу оба продукта становились лучше для пользователей. приятно слышать! благодарность больше всего остального заряжает меня и коллег 😃. деление на вышеперечисленные принципы на самом деле условно - они пересекаются и являются частью друг друга такая вот картина завтра поговорим о специфике продуктовой деятельности внутри компании хорошего дня!. 4/4 плоская орг структура: в таких условиях большая иерархия не требовалась, её и не создавали jb по сей день - инженерная компания, где менеджмент является, скорее, сервисом это интересная тема, и завтра мы в неё погрузимся чуть глубже. 3/4 дог-фудинг: главный принцип внутри компании - использовать свои продукты для разработки продуктов, на сколько это возможно спроси меня каким я вижу идеальный мир - я бы распространил этот принцип на все производства и соц учреждения где это применимо. ребята получали больше практики, некоторые из них продолжали проф деятельность в jb важно отметить, что одним из самым лимитирующих факторов в hightech рынках являются люди, способные и желающие решать сложные задачи, стоящие перед продуктами. 2/4 наука и образование: слаборазвитый на тот момент отечественный hightech рынок обуславливал отсутствие заказа для вузов, выпускавших сильных специалистов создание и поддержка научных центров при вузах дало студентам лучшее представление о реальных задачах в индустрии. 1/4 культура: открытые, доверительные и дружеские отношения, ощущение тусовки единомышленников, что компания создана для сотрудников (в противоположность работы на дядю) и многое другое мотивируют давать лучшее что человек может. это позволило оставаться компании на плаву но ни одно из продуктов не был принципиально новым в своей нише главной задачей стало - выбиваться в лидеры единого мнения о том, как это получалось нет, поэтому попробую здесь сформировать своё:. ответным решением стала диверсификация - во-первых инструментов редактирования кода, во-вторых стали разрабатываться продукты для смежных с написанием кода задач - билд-сервер, таск-треккер, другие collaborative dev tool, и, ни много ни мало свой язык программирования - kotlin. как и водится на рынке, спустя год ibm выпускает аналогичную ide под именем eclipse основное отличие - она бесплатна вложения оправдываются целью - разработка на разных языках под платформы ibm для jetbrains это первый серьёзный конкурент. вторым решением был движок для поиска использования элементов в коде вскоре это всё сложилось в единую ide - intellij idea - продукт гораздо более умный, чем существующие на тот момент решения к слову, в феврале продукт празднует своё 20-летие 🎂. в итоге, трое ребят, в скором будущем - основатели jetbrains, решили сделать собственный тул для автоматического ренэйма элементов кода вижен на тот момент был ясный - софт должен максимально освобождать разработчика от рутинной работы, давая силы на интеллектуальное творчество. у инженеров возникало много действительно крутых идей, реализовать которые было проблемно из-за сложной структуры менеджмента и сложившейся продуктовой линейки. будучи разработчиком тулов для разработчиков ты хорошо понимаешь свои потребности и чувствуешь чего тебе не хватает топовое ide на тот момент не сильно отличалось от ноутпада++ с приаттаченными компилятором и дебаггером. это было оч крутое место для выпускников тех вузов, по началу офис рос и процветал но всё оказалось не так просто, и в кризис конца 90-х руководство решило перевезти core-команду (около 50-ти человек) в европу, а именно, в прагу. дело в том, что когда-то в далёких и лихих 90-х, когда бывшие советские и новые русские граждане учились делать бизнес как могли, в питере открылся филиал американской компании togethersoft, специализирующейся на modelling dev tools (uml и иже с ним). поехали, друзья! в первом треде познакомлю вас с jetbrains компания была основана 2000-м году в праге и, кстати, по сей день является чешской, хотя конечно, корни у неё российские. сб - оставляю пока день без темывс - о миссии и вижене - опыт их прояснения, формирования и транслирования. чт - личные наблюдения о том что помогает сохранять мотивацию и боевой настрой в условиях ультра-многозадачностипт - развитие продуктового майндсета в команде - это сейчас моя задача №1 - сам в ней разбираюсь и очень надеюсь на ваш фидбэк =). каких тем я планирую коснуться: пн - дам свой взгляд на принципы, благодаря которым наша компания и её продукты ценятсявт - поговорю о специфике продакт менеджмента в нейср - попробуем подытожить - что такое продакт и что такое менеджмент в инженерной компании. всем новогодний привет! надеюсь, праздники продолжаются и смена деятельности заряжает вас позитивной энергией =) с вами антон ялышев - я из jetbrains, второй год занимаюсь продуктовой стороной поддержки языка kotlin в средах для разработки софта intellij idea и android studio. расскажу!. спасибо — это самая оригинальная оценка :).  : на новый год 2019-2020 вел аккаунт вел яа спустя год, в 2020-2021, его ведет какой-то новый продакт-иесуспосле абсолютно отсосного года продактов aka без меня вы все не сможете срать - как глоток свежего воздуха. подписывайтесь на мой телеграм-канал по теме cx/sd, сейчас он несколько притих, но я постепенно накапливаю новые материалы:. тема проектирования услуг и customer experience громадна, я слегка вас погрузил в эту тему повторюсь, что она стремительно набирает актуальность, и через пару лет будет дикий дефицит специалистов так что дерзайте — у вас есть возможности оседлать волну!. также о кано по-английски (люблю этот ресурс):. по ссылке описания методики кано с примерами на русском:. один из методов для измерения планки: модель кано опыт клиента разбивается по отдельным атрибутам и регулярно проводится анкетирование среди клиентов, чтобы понять, какие характеристики услуги (или продукта) являются, новыми и перспективными, а какие обязательными. характерная особенность слуг: планка качества подвижна, а лояльность клиентов к конкретному бренду не высока стоит конкуренту сделать услугу чуть лучше, как планка качества моментально повышается необходимо регулярно замерять текущую планку, чтобы не пропустить этот момент. парадигма изменилась — согласно исследованию агентства pwc от 2018 года практически все потребители готовы платить на 16% больше за более качественные услуги. если вы обращались в поддержку apple, то знаете, что там все не так сразу понятно, что специалист призван решить вашу проблему, а не формально ответить на вопросы и умыть руки уверен, зарплата зависит не от скорости, а от качества за такой сервис клиенты готовы переплачивать. со мной было не раз, что я обращался в службу поддержки по нескольким вопросам и не успевал задать второй вопрос, так как сотрудник технично закруглял звонок и вешал трубку по той же причине сотрудник мотивирован перекинуть мой запрос другому специалисту как горячую картошку. например, многие специалисты службы поддержки, а к ним обращаются, когда все идет не так как надо, сидят на сдельной оплате, их зарплата зависит от скорости ответа на звонок клиента чем быстрее закончится звонок, тем лучше так как можно ответить на большее количество звонков. нынче абсолютно все сервисные компании заявляют, что они клиент-ориентированные для меня один из главных критериев, является ли компания таковой, это зависит ли зарплата сотрудников от счастья клиентов? почти всегда это не так. так, салаты доедены, шампанское выпито, сделаем первый рывок в новом году! продолжаю рассказ про cx и проектирование услуг сегодня поговорим о качестве услуг. все на сегодня еще раз с наступающим новым годом! желаю читателям захватывающих проектов в 2021 году!. все результаты мы постоянно показывали представителям банка в aiable можно комментировать любую запись в базе, а также делать различные представления таблиц для тех или иных целей. также мы присвоили барьерам и решениям разные признаки типа критичности, частоты (взяли из анализа поведения клиентов), тематики и влияния на опыт клиентов, то есть, мы откатегоризировали, отприоритизировали и отсортировали эти данные. выявленные барьеры и предлагаемые решения мы выгрузили в aiable для того, чтобы можно было легко манипулировать этими данными внутри этой базы данных мы связали барьеры и решения так, чтобы можно было легко переходить от одного к другому и ничего не забыть. решали и обратную задачу — как мотивировать начать использовать программу в как можно большем количестве точек контактов с клиентами. наконец на третьей карте отобразили механику программы лояльности, которая фактически одинакова для всех клиентов цели этой карты: найти все проблемы программы, а также найти все способы, как программа может мотивировать использовать как можно больше услуг банка. вторая карта с опытом клиентов, которые открывали кредит или депозит, нам нужна была, чтобы понять, как их мотивировать использовать другие услуги банка как оказалось, довольно многие из них открывали счет только ради выгодных условий, а не для ежедневного обслуживания. отличались, например, способы получения карты — студенты или те, кто на зарплатном проекте, получали банковские карты не в банке такие клиенты страдали от недостатка информации так как работодатель не заинтересован в том, чтобы рассказывать, как работает программа «ярко». на картинке без деталей показана карта №1 мы серым фоном отметили те моменты опыта, которые совпадает у всех сегментов это, например, покупка товаров с помощью банковских карт или снятие наличных цветом показаны моменты, которые сильно отличаются. и на карте №3 опыт использования программы лояльности далее подробно о каждой карте. в итоге у нас получилось довольно много сегментов и, соответственно, респондентов мы гадали, как их опыт разложить по картам и пришли к такому решению: на карте №1 опыт всех клиентов связанных с использованием карты, на карте №2 опыт тех, кто берет кредиты и открывает депозиты. студентов вообще пришлось искать в пабликах и группах соцсетей, иначе они просто не выходили на связь. рекрутинг был сложным мы пробовали несколько вариантов, но самым лучшим оказался использование баннеров внутри личного кабинета и в мобильном приложении люди видели баннер, кликали, попадали на анкету с нашими вопросами, по ответам на которые мы отбирали респондентов. всего решили побеседовать с 40 респондентам банковские услуги пронизывают почти все аспекты жизни людей, поэтому, поверхностными исследованиями здесь не обойтись. на самом деле, чтобы не тормозить, мы начали проводить интервью не дожидаясь окончательных сегментов потом мы этих нескольких респондентов просто отнесли к одной из полученных групп. также, чтобы познакомится с командой, провести так сказать разведку боем, мы провели воркшоп (семинар) вместе с ключевыми сотрудниками банка, где прямо с колес создать несколько ad hoc карт с путями клиента вот одна из карт. да, как и прошлом проекте мы провели серию интервью со специалистами банков, в основном, чтобы понять о всех нюансах программы лояльности и понять, что уже с ней было сделано, а что нет и, конечно, чтобы узнать о всех ограничениях, которые перед нами стояли. для этого мы запросили обезличенные данные с тем, как ведут себя клиенты: какими суммами оперируют, какими услугами пользуются, и как именно нам нужно было понять, кого нам надо было нанять, чтобы провести глубинные интервью и без сегментов ну никак!. даже звучит не так чтобы просто для начала надо было сегментировать клиентов, то есть, понять, на какие группы удобно их разбивать, чтобы потом создать минимальное количество карт с максимальным покрытием все вариантов поведения. среди клиентов — люди получающие зарплату, пособия, пенсии и так далее нашей задачей было улучшить программу лояльности для b2c клиентов, которая называется «ярко» чтобы улучшить, надо было понять, что не так и предложить решения. здесь я могу назвать заказчика — это банк «санкт-петербург» мощный банк в северо-западном регионе обслуживает множество государственных и частных организаций. всем привет, с наступающим новым годом! несмотря на такое экранирующее событие, все же расскажу еще об одном совсем недавнем кейсе если сейчас некогда, перечитаете потом!.  : making final preparations for the data dump of all* prior travels of the fsb poison squad as promised, we will make it available tomorrow for all media to work on*we will redact out only 2 trips on which we have ongoing investigations that might be affected if disclosed early. то есть, конечный результат — набор задач на исполнение и список исполнителей карту создавали два человека, заняло это все примерно 2 месяца нетто (в реальности больше). на последнем воркшопе мы прошлись еще раз по всем решениям, чтобы: 1 оценить, сколько надо времени на реализацию решения; 2 приоритизировать по критичности решений и по влиянию на результат; 3 назначить ответственных внутри команды заказчика. эти две карты показали заказчику на воркшопе, чтобы обсудить как барьеры, так и предлагаемые нами решения, накопить вопросы и сделать вторую — чистовую версию карты, которую представили на следующей неделе. мы взяли интервью у 13 координаторов и 6 закупщиков, рекрутингом которого занимался заказчик в итоге получились 2 карты, где часть точек контакта совпадает, так закупщику нужен координатор, чтобы сформулировать требования закупки и в других ситуациях. нам повезло, что не надо было сегментировать клиентов заказчика они были четко определены: закупщики услуги (обычно он каждые два года ищет нового исполнителя на командировки) и так называемые тревел-координаторы, который отвечают в своей компании за все командировки. также мы узнали о застарелых проблемах — когда мы находили барьеры, с которыми сталкивались клиенты, то лучше понимали источник проблем, в том числе, когда они находились внутри бизнес процессов моего заказчика. также в начале проекты мы взяли интервью у сотрудников моего заказчика так мы узнали как выглядят проблемы клиентов со стороны сотрудников это дало нам бесценную информацию о разнице между тем, что видят сотрудники и тем, что на самом деле происходит с клиентами. кстати, я и сервис своего заказчика проверил, прикинувшись потенциальным клиентом. но после паузы с моей стороны все равно дали доступ к лк понимаю, что некоторым неприятно прикидываться кем-то другим, в этих случаях стоит делегировать многочисленным агентствам подобную работу. некоторые компании распознали во мне конкурента, так как домен был слишком свежий (2 недели), поэтому запросили у меня карточку юридического лица, чтобы понять, что я реальный покупатель. для конкурентного анализа я зарегистрировал пару доменов, зарегистрировал на них emailы, придумал легенду и представлялся закупщиком услуги делового туризма если бы я делал это сейчас то сделал бы это на два месяца ранее и вот почему. эту информацию попросил собрать директор по маркетингу ему надо было сделать новую коммуникационную стратегию так как в этом был бардак, например продавцы использовали презентации с устаревшим оформлением. также была частная цель — по пути собрать все артефакты, что видят клиенты: скриншоты сайтов и приложений, бумажные буклеты, презентации, emailы, сообщения и так далее очень удобно во время исследования собирать подобную информацию. цели проекта стандартные: выявить барьеры их клиентов и провести конкурентный анализ личного кабинета то есть, получить доступ к личным кабинетам конкурентов и посмотреть что там. это проект для компании, которая предоставляет b2b услуги делового туризма то есть, это одна из тех компаний, которые покупают авиа и ржд билеты, оформляют визы, бронируют гостиницы и вообще оформляют командировки для крупных и средних компаний. сегодня расскажу о кейсе из моей практики, где я применял cjm, и о том, какой урок он мне дал. посмотрел по статистике, вчера статью посмотрели в 2 раза больше обычного так что для новичков (а их поверьте много) она до сих пор актуальна планирую за предстоящие каникулы сделать апгрейд, он, конечно, давно назрел. на сегодня все! завтра будет продолжение!. примеры других целей: скомбинировать лучший клиентской опыт на рынке; зафиксировать скорость выполнения разных этапов осуществления услуги; найти барьеры внутри эпизодов, которые находятся на стороне ваших партнеров. 4 наконец выпишете цели самой карты, то есть, для чего вы ее создаете? в начале внедрения cjm цель обычно простая — найти барьеры на пути клиента и их исправить но вы можете захотеть с помощью cjm представить коллегам идею новой услуги, или привлечь их внимание к проблеме. если вы шлете карту для руководителя, то используйте карту для того, чтобы руководитель принял нужное решение для этого выделяйте существенную информацию и по максимуму убирайте «воду». 3 кто будет пользоваться картой? важно ответить на этот вопрос, тк карта, в том числе, — инструмент коммуникации, поэтому надо выбирать оптимальный формат сегодня раньше я уже писал, что если вы шлете коллегам для частной задачи, то надо карту обрезать до необходимого минимума. но вы можете захотеть рассмотреть частные случаи: как происходит переход с одного тарифного плана на другой; процесс онбординга; почему клиент уходит и так далее лучше с этого и начать — отработать все на простом примере, а далее масштабироваться до полной картины. 2 надо понять, какой опыт мы будем картировать — надо определиться с фокусом нашего внимания если интересен весь путь клиента, то карта будет начинаться с того, что у клиента появилась потребность, потом он находит нас, пользуется вашим продуктов или услугой и уходит. специализированного софта для оцифрованный cjm пока нет (по крайней мере не сталкивался) можно использовать, например универсальный aiable. персоны — один из вариантов сегментирования есть и другие :). это приём personas так сложно описан, сорян?. если опыт сегментов сильно отличается, то я так и делаю если же в опыте много пересечений, то делаю одну карту, где все совпадает и другие карты для различий часто помещаю все это на одну карту и цветом фона кодирую совпадающие и несовпадающий эпизоды. 1 самое простое и самое сложное: чей опыт мы картируем? к моменту создания карты у вас должна быть некая сегментация клиентов встает вопрос — как опыт этих сегментов распределять по картам? идеально, когда каждая карта отведена отдельному сегменту. теперь разберемся с целеполаганием поначалу у меня было много проблем, с тем с чего начать, но еще больше проблем, когда закончить чтобы таких вопросов на возникало, надо было просто правильно поставить цели далее расскажу о каждой группе целей. если вы отдаете карту кому-то другому, то сделайте специальную версию карты например, если вы хотите, чтобы кто-то вам помог дополнить карту, то уберите лишние эпизоды и моменты и уберите лишние информационный слои этим вы сильно облегчите ему задачу. следующая проблема — все эти разбиения условны так как опыт непрерывен неприятное может произойти в промежуточной зоне, которую мы не описали часть информации всегда скрыта «между строками» необходимо специально проходить по всем стыкам и проверять, не забыли ли мы чего. я правильно понимаю, что за 7 лет никаких открытий в cjm, чтобы перестать ссылаться на тот труд?. над этим и тружусь в этих твитах. полезно выделять моменты, в которых клиент получает некую пользу (эпизоды), и использовать их для начального разбиения опыта клиента также стоит разбивать эпизоды на более мелкие моменты (точки контакта), чтобы видеть, что происходит с клиентским опытом более детально. то есть, опыт клиента — фрактальная сущность можно рассматривать его издали и мерять время годами, а можно вблизи миллисекундами вы выберете подходящий масштаб и правильную грануляцию детализации в зависимости от того, какую вы себе проектную цель поставили. но проблема еще в том, что на самом деле нет никакой точки контакта есть момент внутри пути клиента, который может длится долю секунды (в тендере при поиске партнера), а может и год (при выборе автомобиля или недвижимости). ответ зависит от того, с какой грануляцией вы исследуете опыт клиента далее расскажу о грануляции более детально. первое — это понятия канала и точки контакта их очень часто путают для меня канал — это тип точки контакта но возникают дурацкие вопросы типа считать одним каналом приложения на android и ios или это разные каналы?. итак, сегодня расскажу о картировании опыта клиентов (cjm), но постараюсь не пересказывать свою же статью лохматого 2013 года, а расскажу о проблемных моментах, с которыми вы столкнетесь на практике кстати, вот моя статья:. в вашем определении cx в разы шире ux и отвечать за него должен скорее человек от бизнеса, который бп может менять. да, теперь такие люди появляются в компаниях, но их днём с огнём не найти и ситуация будет только усугубляться но можно работать на более низком уровне иерархии и приносить пользу. это очень интересная тема. хочу спросить про вас был ли у вас опыт проектирования услуг?. но, оказалось, что скорость изменений такова, что старые методы создания и улучшения cx плохо справляются, а новые, в виде современных универсальных дизайн-методов, работают отлично! по этой причине, миграция в эту область хоть и не простая, но вполне возможная для продуктовика. раньше я занимался исключительно ux, то есть проектировал и тестировал пользовательские интерфейсы область cx выглядела заманчиво, но не совсем доступно, так как это более масштабная область с большим количеством неизведанного. как видите, cx существенно шире область cx — это нечто, что парит над продуктами и связывает их между собой а также интегрирует продукты (и услуги) в жизнь людей. часто эту роль пытаются нести маркетологи, но они традиционно фокусируются на процессе покупки и плохо разбираются в остальных аспектах услуги. источник проблемы в том, что редко в компании есть человек или некая сила, которая отвечает не за отдельный продукт, а за всю инфраструктуру, которая его окружает или в которую он входит. очень часто бывает так, что сам программный продукт шикарный, но у него, например, отвратительная поддержка или хороший продукт является частью услуги, в которой имеются существенные изъяны думаю вы сможете назвать много таких примеров. большинство услуг до сих пор осуществляется людьми и качество услуги напрямую зависит от того, как отработают сотрудники компании именно по этой причине в область интереса cx специалистов входит не только опыт клиента, но и опыт сотрудников это новая тема для продуктовиков!. мне лично для этого больше нравится термин brand experience (bx), он пока не прижился, но думаю все впереди то есть, cx/bx — абсолютно весь опыт, который дает компания своему клиенту начиная от ожиданий и предвкушений и заканчивая полученной (или не полученной) пользой. у любого человека есть свой жизненный опыт, то есть life experience (lx) когда человек взаимодействует с услугами или продуктами некоей компании, то он выступает в роли клиента такой опыт (кусочек lx) называется customer experience (cx). но если вы нулевой человек в этом вопросе, то изложу свою точку зрения с моей колокольни cx ux, то есть ux включается в cx ux — это про взаимодействие с отдельным продуктом или услугой, а cx — это более глобальная история давайте разберемся чуть более досконально. для начала, что такое cx, чем это отличается от ux и как соотносится с sd (service design) постараюсь обойтись без терминологических войн, так как пытаться долго и много разбираться с терминами — это последнее на что стоит тратить свое время (тред). привет всем! с вами алексей копылов — независимый ux/cx консультант я тут на неделю, расскажу всякое про проектирование услуг это то, что меня увлекает последние лет 5 (а первый интерес возник в 2011) и то, на чем удается зарабатывать (а были сомнения) поехали!. всем пока :) будут вопросы, можно тут -. о правде и мифах в b2b инвестиции - и деньги - фокус - роли фаундера -. ну вот, моя неделя все :) кратко о том, что было:про standuply - идеального продакта - b2b saas на продуктовых платформах -. по тому сколько работаешь, по ощущениям это все время, кроме сна даже если не на работе, то все равно всегда думаешь на рабочие вопросы это самое тяжелое, очень трудно отвлечься, не важно в отпуске ты или может выходной все равно мысли о задачах, вопросах, проблемах всегда :(. с майклом повезло оказаться на одном приватном мероприятии в хельсинки, тоже к конференции приуроченному а основателя zendesk просто питч запомнил на  с ним лично глубоко не общался. с десом повезло познакомиться на , там была крутая программа одно время, когда можно было записться на индивидуальную консультацию к самым крутым чувакам мы попали к десу оказался очень крутым, потом просто нам всегда легко отвечал на вопросы, которые мы слали на email. но к себе такое не применимо для себя нет понятий не нравится, не хочу, не близко так как обычно в этимх плоскостях лежат решения стоящих перед компанией проблем и сильно рискованно надеяться, что их найдет и решит кто-то другой. когда ты работаешь с командой, ты постоянно пытаешься раскопать, а какие ожидания у того или иного человека что лежит в истинном векторе его развития, что сфокусировать его только на нем и не распылять на то, что ему делать не нравится, не по душе и тп. и вопрос даже не в лучше, а в выборе того, что нужно сейчас и цикл это не скончаемый на каждом новом этапе - новые процессы и вызовы, и во всех ты должен сначала разобраться сам нужно делать супер много немасштабируемых вещей, чтобы в итоге найти нужные масштабируемые. в стартапе фаундер это человек, который сам должен разобраться и запустить почти все процессы довести их до момента готовности к масштабированию и только потом передать это человек с самой сильной мотивацией никто не сможет на ранеей стадии сделать многие вещи, лучше него. поэтому как-бы это странно не звучало, одно из следствий роли фаундера - быть всегда больным здоровый и удовлетворенный фаундер - потерявший свою продуктивность предпринимательство - это творчество, где лучшее рождается как следствие сильных переживаний :). этот посыл, по итогам нашего почти часового общения, врезался мне в голову больше всего позже, аналогичную мыль рассказывал нам , когда я уже и на себе ощущал этот пресинг бесконечной гонки затем и многие другие более близко знакомые фаундеры. потом они думали, что все поменяется при достижении 1m$ mrr - но не случилось, проблем открылось только больше сейчас у нас больше 10м$ mrr, а мы все так же боремся за выживаемость, как когда у нас было меньше 100к. я, наверное, на всю жизнь запомню один разговор c , когда он поделился, что когда intercom был маленьким, они думали, что все станет хорошо, когда они перешагнут 100k mrr но этого не случилось, так как вместе со взятой планкой пришли и новые вызовы. в последний день хотели поговорить о роли фаундера я заметил, что завершать неделю принято темами около mental health тематик я тут вообще не большой специалист, что называется сам сильно болен и лечиться не хочу :) это такая в принципе особенность большинства фаундеров. ну или еще хороший вариант - просто иметь, что имеешь не каждая компания должна быть единорогом, но каждая может быть успешной просто у каждого свой уровень, и это естественно. те в условиях большой неопрделенности идти сначала от общего к частному по метрикам понять, какое частное дает результат, и от него обратно двигаться к общему, расширяясь изначально в рамках заложенного вектора. и в этом контексте, лично я больше люблю дедуктивный подход, который, кстати, не отменяет индуктивный метод, как многие считают. а горе как говорится от ума, точнее от амбиций поэтому если хочешь развиваться в рамках одного продукта, то хорошо бы выбирать нишевое позиционирование в рамках расширяемой модели. если взял деньги, то будь добр расти хотя бы по 10% month over month а когда ты на своем узком юзкейсе понимаешь, что так расти не можешь, то что деалешь? правильно, говоришь, что ты платформа чего-то там и просишь еще денег:). у нас даже в slack было несколько конкурентов, которые начинали раньше, имели хайп и фиансовый успех, а в итоге развалились, не оценив адекватно золотые горы, которые на этом юзкейсе можно вынести а дороги назад уже нет, если ты заставил в эти сказки поверить еще и инвесторов. я знаю множество примеров, где компании, перейдя через доилну смерти на узком юзкейсе, но который особо дальше не масштабируется, понимая это, начинали городить вокруг юзкейса огород мифов про то, о чем их продукт. но проблема в том, что если вы хотите завоевать мир, а большого (не высасаного из пальца в последующем) вижена у вас нет с самого начала, то потом вы рискуете прометь свой неплохо работающий мелкий или средний бизнес на мираж. не часто ведь слышишь, что-то подобное: мы проект делаем как небольшой хоум-бизнес у него не высокий потолок, поэтому мы просто его выведем на уровень автопилота, а дальше скорее всего начнем что-то новое не популярная позиция:) мы завоюем весь мир, звучит круче :). но заключается в том, что у этой узкой ниши часто не бывает такого объема рынка, чтобы удовлетворить тем амбициям, с которыми ее начинают осваивать потому что фокусироваться и сужать амбиции, как сужаем позиционироание научились еще не многие :). ну те на ранней стадии стартапов про какое-то масштабирование в будущем обычно никто не думает патерн обычно такой - я возьму вот эту узкую нишу и улучшу ее, буду делать лучше, чем конкуренты и заберу свой кусочек рынка с этим все ок, но. про фокус про необходимость фокусировки сейчас говорит либой продакт, примерно так же часто, как и про то, что продакт - это про деньги но вот я не частно слышу, что фокус на узкой ниши без широкой картины - тоже может быть плохим решением. а остальных набирать просто как хороших специалистов, понимающих суть дела и умеющих работать с метриками у меня ответа, на самом деле нет, если вы его ждали :) просто мысли в слух а так продакт - это про деньги :). и я подумал, что если по-настоящему про деньги - это те, кто делал что-то свое, то таких же очень мало стоит ли их действительно выискивать для каждой продакт позиции в компании или достаточно иметь несколько vp с такими качествами?. а какая же бездна лежала в свое время между мной и мной, работающим в корпоративной среде, уверенным, что я только про деньги и начавшим делать свой стартап и вскрылись многие глубинные вещи, где ты реально про деньги, а где играешь в эту игру по написанным правилам в компании. но относительно недавно, думая о масштабировании компании и анализируя, а где брать вот таких вот предпринимателей, какими я вижу идеального продакта я подумал, вспоминая свой прошлый опыт. в бытность моей работы в крупном корпорате, проходя очередные обущающие курсы, по-моему от , я впервые услышал мысль от коача, что продакт не обязательно должен думать о деньгах в основном, конечно, речь шла про po, но все же тогда это не нашло отклика. продакт и деньги я не буду повторять избитое много раз, что продакт должен быть нацелен на финансовый результат и только это главное я с этим согласен, но недавно посмотрел на вещи с другой стороны, хочу поделиться. ну немного да в b2c на самом деле труднее инвест фонду на ранней стадии просчитать возможный исход в b2b сильно меньше неизвестных на самом деле, тут все очень алгоритмично, одна сплошная математика с меньшим влиянием теорий вероятностейэто, кстати, одна из причин моей любви). если честно нет, не рассматривали покачет даже и статьи такой не припомню :) хотя может и была в рамках контент-маркетинга, не знаю ). ну тут только в нем и дело :) он отобрал агрессивно рынок, у слека остался потолок, не отвечающий целям компании, вышедшей на ipo :). поэтому инвестировать выгодно практически всегда крупным фондам успех - ты в плюсе, неудача - ты не в минусе, просто на примерно столько же меньше налогов заплатишь соответсвенно и фондов просто это как план на выполнение - найти кому дать, с +- трекшеном :). а причина в том, что vc практически никогда и ничего не теряет законодательства большинства стран выстроены на стимулирование инвестиции и в случае провальных проектов, это все легко просто списывается в расход и уменьшает налоговую базу компании, которая вложилась в фонд. ну это не то, что удивление просто не сильно нравится такая модель суть даже не в том, что ставка на рост, экзит или ipo, я же вообще ничего против не имею инвестиций в здоровые компании речь про то, что большая часть инвестиций в тех,кто никуда не дойдет и это понятно сразу. уперлись в потолок, инфа 146% ;) это был вынужденный экзит. так как сформируется просто уютный коллектив, который подавил свою внутреннюю мотивации и с каждым годом теряет кпд, а стоимость увеличивает :) вот и вынужден ты тоже тогда закрывать раунды, чтобы не отставать от моды :) такая вот эволюция. а иначе, если решишь давить деньгами, реальную мотивацию и ожидания сотрудника в борьбе с инвест-переманиванием, то плохо будет и сотруднику и бизнесу. потому что истории с medium, про бест практис, способы развития и мотивации команды, в такой модели не работают тут работает больше готовность к сменяемости, и выращивание замены к моменту ухода специалиста и так рекурентно. но фаундеру это важно понимать, потому что если ты не готов бежать за миллиардом, то будь готов выстраивать другую модель развития компании, где обязательным фактором будет сменяемость core тим в цикле до 3х, максимум 5 лет. а так как большинство специалистов на самом деле не волнует, да и не должно волновать, какие реальные финансовые результаты таких интересных проектов, то у них находится отклик в сердцах :) и в целом, все правильно, так как их вектор развития лежит поодаль от плоскости денег. там больше коллектив, а следовательно возможностей коммуникаций с коллегами уровня выше там постоянный хаус, который оборачивается в различные интересные проекты и возможность попробовать разные технологии. а такой инвестиционной поток вокруг тебя влияет очень на многое ты, как фаундер, хочешь, чтобы с тобой была классная команда, но когда рядом деньгами покупают, а не акселирируют рост, то это создает такие компании-магниты которые на короткой дистанции могут предложить больше. в идеальном мире, где так не читирят, беря деньги, когда их нельзя брать, нормальные стартапы бы жили комфортнее :) у нас есть не прямой конкурент, на том же рынке мы были в их крутом офисе на манхетане, и офигивали, что у них с 17млн$ инвестиций показатели ниже чем у нас. даже когда у конкурента не готов продукт под scale, ты понимаешь он просто встал на дорогу выгорания, но в эту burnup пятилетку он сильно влияет на твой, здоровый рост ну и ты вынужден, по-сути, больше защищаться, беря свои инвестиции. но поговорить я хотел чуть о другом вообще, трудность роста без инвестиций связана больше с тем, что рядом с тобой их кто-то постоянно берет и активно нападает на твой рынок причем на всех стадиях развития. сегодня хотели про инвестиции поговорить тема, конечно, актуальная мы сами сейчас в большом раздумье, брать или не брать но как я уже говорил, в b2b на свою дельту прибыли, даже с полностью откалиброванным продуктом расти трудновато. компания в сша, как и 50 процентов клиентов еще 30 в европе и 20 - остальной мир реагируют в целом хорошо, но наше позиционирование в блоге, как история стартаперов из тайги, как-то попросили сменить если не выпячивать, то работать можно :). а мы вообще в центре сибири сидим, прибыльные, гордые и независимые, но знали бы вы как трудно продавать сеилз-команда медведей в ушанках вообще не справляется :). но если перешагнули долину, то в целом, у вас всегда есть небольшая (или большая, у кого как) очередь из фондов, готовых инвестировать большинство из которых тоже помогут выйти на демо с большими лпр в компании. и в этом ключе, акселераторы для b2b стартапов ранней стадии - хорошая помощь попадая в тот же yc или 500, это дает выход на возможность продаж для b2c - это больше инвестиционная история, а тут еще и конкретная польза в самой механники продукта. upd: мы вчера даже не откатывались, поэтому еще 1 твит в догонку вчерашней темыв b2b сильно решают персональные контакты и личные продажи в этом контексте, если ты живешь в долине и можешь вылавливать больших лпр, то это сильно повышает шансы. соответственно, растешь по количеству пользователей, растешь по среднему чеку, увеличивая lt растешь по прибыли из-за куммулятивного эффекта продления старых и появления новых подписок не растешь по количеству seats - сильно высок риск, что приходит конкурент и тебя двигает. поэтому, чтобы расти в b2b, нужно постоянно увеличивать lt подписок за счет масштабирования на количестве пользователей в рамках одной компании это защищает от конкуренции, так как переходить с одного b2b продукта на другой, это не как в b2c - где за минуту снес и установил new. рост среднего чека возможен только за масштабирование на количестве людей цены фич - потолочный путь, из невозможно поднимать бесконечно, чтобы постоянно расти + постоянно появляются конкуренты, которые готовы предложить твои же фичи, но бесплатно. у нас сегодня новогодний релиз, по традиции это самый масштабный релиз года с кучей всего, поэтому я, скорее всего, на сегодня все :) еще откатываться :). ты и при разработке вроде постоянно чему-то учишься, и от кастомеров, следя и анализируя, а как другие в отрасли работают, и что используют#doubleshoot. но вообще, для меня лично, главной особенностью b2b разработки, которая перевешивает все сложности, является сама аудитория проводишь тот же касдев, и не понятно, кто кого касдевит :) очень круто делать продукты для людей, чаще всего из твоей же профессиональной сферы. те ты знаешь какие каналы дистрибуции ты будешь прокачивать, сколько это стоит, какой эффект это тебе даст с твоей экономикой, когда наступит примерный потолок, где ты будешь через n период, и какой roi к концу этого периода ты получишь это тригеры того, что ты готов и надо 🚀. имеется ввиду, что продукт готов к вливанию денежных средств и вся экономика сводится при этом жизненый цикл продуктов у всех одинаковый, этап масштабирования - это когда ты перешагнул долину, у тебя есть подтвержденное решение и чтобы тебе вырости, тебе нужно просто ускорение. сложные продажи в b2b saas начинаются после того, как вы хотите начать закрывать сделки от 10k$ до этого все очень лояльно нужно быть готовым решать массу сложностей: конракты, order formы, security assesment, аккаунтинг, инвойсинг и куча policies на согласование. качество в b2b сильно выходит на 1й план только на стадии масштабирования поэтому бояться тут особо нечего, особенно стартапам дойти до масштабирования - это уже большая победа, а там и качество будут ресурсы подтянуть если проблема реальная - будут пользоваться и через боль:). это как в реальной жизни, если вы занимаетесь силовым экстримом и можете тащить за собой паровозы, грузовики и тп, то в целом, можете ощутить, что скрыто во фразе трудно разогнать, касаемо этого b2b поезда поэтому про стариков вообще не уверен :). про b2b saas часто говорят, что это как паровоз - трудно сдвинуть, но если разогнался, потом долго тормозит поэтому подходит людям более размеренным считаю фраза очень точно передает суть в части паровоза. работать на рост продукта в b2b на базе индивилуального юзкейса - очень сложно свои личные деньги там никто не готов тратить, а зайти с команды - задача не из легких по моему опыту, трудностей в b2b относительно оплат - больше а инструментов монетизации меньше. про платящую средний чек то может, конечно, и сильно выше, да вот объем рынка и число (+ сложность выхода на) лпр сильно меньше, чем в b2c поэтому плюс платежеспособности, часто невелируется этими сложностями. на своем опыте, работая и много в b2c и сейчас в b2b могу сказать, что не понимаю, что такое требовательная:) и там, и там все идет от проблемы, которую вы решаете просто в b2b ты чаще строишь более сложные технические решения и как следствие барьер адопшена выше. продолжаем про b2b люблю фразу меня часто спрашивают, но ко мне она не относится, поэтому я часто слышу ;), что:-в b2b более требовательная аудитория-более платящая-b2b saas - бизнес для стариков-качество продукта в b2b - это все-в b2b сложный цикл продажчто правда?. я об этом хотел чуть больше в другой день углубиться. 2 а если бежать к миллиарду, то добежишь ли вообще?*работать на exit - очень рисковано, он обычно как следствие идет, либо большой удачи, либо провалаи сложность выбора тут в том, что выбор любого из пунктов требует серьезные изменения во всех областях. и в этом ключе, ты вынужден решать много разных сложных задач:1 оставаться ли просто на том же уровне, без внешних обязательств, но быть постоянно готовым бороться с игроками, которые зайдут на твою нишу (а они точно зайдут), но с большими, чем у тебя ресурсами. ну а в целом, конечно, делать b2b saas без инвестиций можно только то стидии готов к scale, это чуть дальше, как вы перешагнули долину смерти в жц вашего продукта дальнейшее масштабирование своими силами, за счет дельты прибыли, почти невозможно. то тебе не надо пороги обивать в получении разрешений, но и если кто не хочет, достаточно просто отправить реквест на почту, и нет проблем. ну мы используем такую схему: по умолчанию вставляешь в свои tos, что ты имеешь право использовать материалы клиентов в своих маркетинговых целях, до получения реквеста, что данная компания просит исключить себя из под действия данного пункта. более сложный вопрос, если вы как все 98% стартапов с амбициями стать миллиардной компанией, то тогда, платформенные решения тоже могут помочь на старте, но входить в них нужно с другой парадигмой тут схема фокуса на узкой ниши, а затем ее масштабирование может не🚀. и уже в этом контексте, если мы сложим п1 и п2, то формула становится более понятна я секретов алгоритмов расскрыать не буду :), но идущий - осилит это реальный инструмент как сразу конкурировать с топами, отбирая у них свой кусок рынка. 2 ну, не секрет, что качество - это вторичная вещь перед наличием канала так вот, в таких продуктовых сторах, как следствие медленного развития платформ, обычно довольно простые алгоритмы паразитирования на aso что для молодого стартапа - золото. весь вопрос только в объеме если ты не целишься в единорога с самого старта, а хочешь средний бизнес, то до 3-5m arr вполне реально раскачаться за 5-7 лет без допинвестиций. и делая решение с нормальным ретеншином, в итоге ты свою аудиторию накопишь это не так, как если ты начнешь новый таск-трекер пилить, где в принципе и так уже с 10-ок нормальных на рынке. это связано с тем, что рынок мал, новые лидеры там появляются медленно так как деньги единственный стимул развития а те, кто быстро не получает окупаемость - продукты перестает развивать соответственно, спрос новых пользователей всегда выше предложения. что про плюсы b2b saas на базе продуктовых платформ, в частности на slack, то есть работающая стратегия:1 если у вас хороший запас прочности по инвестициям, то за 2 года, взяв, пусть даже уже занятый юзкейс, сфокусировавшись на качестве решения, вы сможете стать в числе лидеров. но и плюсы свои тоже, есть куда без них об этом, чуть попозже сегодня. на экосистему это, конечно, влияет потому что с точки зрения пользовательского экспириенса, если он шагнет куда-то вправо или влево от лидеров топов, то получит неработающий софт в большинстве случаев что, конечно, влияет на развитие и общее восприятие. но в отличии от apple или android сторов, тут сильно мало инструментария, чтобы вытеснить тех, кто уже занял лидерские позиции в итоге развиваться продолжают те, кто и так развивался, а новые игроки быстро оставляют свои продукты, так как не находят финансовой отдачи. если брать слек, то все в итоге так или иначе сводится к опросам (не берем нотификационные интеграции отдельно стоящих сервисов), а платных юзкейсов опросов, за которые компании готовы платить - не так много в итоге все начинают биться на одном и том же поле. одна из основных проблем, что на узость рынка накладывается фактор узости юзкейсов под этот рынок ну, те по факту, можно себя, конечно, тешить мыслью, что та или иная идея найдет свою аудиторию, но в реальности аудитории не так много, чтобы ее хватило на все нишевые идеи. в каждом таком сторе есть те, кто был раньше, быстрее и теперь снимает все сливки, с относительно неплохой доходностью но большая проблема второго эшелона, которому супер трудно потеснить лидеров. рынок этот супер маленький и это основная проблема в прочем, как и большинство рынков на продуктовых платформах, типо jira, trello, salesforce, miro и тд построить там коммерчески успешный продукт - сложно но это не значит, что своих чемпионов там нет. всем доброе утро, идем по плануначну с серии твитов про бизнес в slack это была наше стартовая платформа сейчас мы вышли(-одим) в ms teams и в принципе имеет отвязанное решение от платформы ввиде q&amp;a, но стартовали мы как бот для слека. ну мы не категорично в этом вопросе) правильней будет сказать, что мы осознанно на него сейчас не работаем но варианты смотришь всегда все. там цифра с учетом еще и просто команд, теразные команды, направления в рамках одной компании я их отсек, оставив только уникальные компании. а для фаундера этот список еще и не полный, но об этом мы в последний день договорились поговорить :) теперь можно холиварить, но не сильно, пожалуйста :). я сильно люблю, когда в компании мало просто мыслителей, стратегов, руководителей и прочих менеджеров, но много тех, кто что-то делает еще и рукамимы у себя в принципе выстраем компанию без отдельных ролей 2, 3, 4 5 - как в описании, у нас объединены. 9 это hr, кто понимает кто ему нужен в команду и в том числе сам их активно ищет, собеседует, онбордит, развивает и мотивируетэто основные вектора умений, которыми должен владеть продакт в моем мире, в каких-то на достаточно хорошем уровне, в каких-то на самом высоком. 6 это сеилз может не только придумать, но и продать, то, что придумал кастомерам знает базовые техники и сам их применяет7 это маркетолог постоянно думает, находит и развивает каналы дистрибуции + контент и pr8 это немного ux дизайнер ставит задачи своими скетчами. 3 это аналитик, который все данные достает сам и анализирует тоже сам касдев отсюда4 это тестировщик, который полноценно владеет основами манки-тестинга и тестирует все сам5 это кастомер саксес и саппорт кто ежедневно часть времени уделяет работе с запросами напрямую. считаю, что хороший продакт - это обязательно сочетание нескольких профессий и кучи навыков:1 это предприниматель, главная метрика которого - это всегда деньги2 это высококлассный менеджер, который владеет методологиями управления проектами, людьми и фреймворками разработки. ну со standuply вроде познакомил, теперь с собой чтобы было понятно, что от меня ждать тут всю неделю :) не имеет смысла рассказывать свою био, я лучше тезисно накидаю мои философские взгляды на профессию от них будет проще оттолкнуться :). в итоге все это сохраняется во внутренню q&amp;a и при ее накоплении, при повторных и схожих запросах, standuply просто моментально всегда выдает уже ранее полученные или сохраненные ответывот, если кратко - такой себе siri для работы :). это когда любой свой проблемный запрос человек адресует standuply, тот в свою очередь задает его правильным, подключенным к сервису экспертам, собирает с них ответы и дает их пользователю, в мессенджере те по любой проблеме ты просто всегда пишешь standuply, а он разбирается. помощь в решении задач осуществляется через создание внутренней q&amp;a системылюбой человек в команде может добавлять в standuply как внутренние юниты-информации: повторяющиеся вопросы, доступы до сервисов, описание проектов, ответы внутренних экспертов, так и внешние знания. подробнее про часть автоматизациис помощью нас ставят на полу-автопилот такие процессы как: стендапы, ретроспективы, беклог грумминги и planning покеры, опросы 360, трекинг настроения, построение burndownов и прочих agile чартов, на данных подключенных к standuply тулзов. топ 1 - по запросам автоматизации стендапов, ретро и прочих agile штуктоп 2 - среди всех slack-based приложенийтоп 10 - просто среди абсолютно всех приложений и интеграций в сторе1m$ arr, 9 человек команда, 35к компаний - пользователей без инвестиций, но готовые к scale. что по standuply мы верим, что это цифровой помощник для управления проектами, но вы можете называть его ботом машина не обидется :)концепция состоит из 2х модулей:1 автоматизация процессов2 помощь в решении рабочих задачмы стартап, за 3 года добились следующего:. фидбек уровня - опубликовал, что то в роадмепе, тебе в саппорт начинают писать, а как оно будет работать, или будет ли там вот это вот в итоге что-то ценное всегда да и выносишь к начала реализации той или иной фичи, что отражается в ее разработке. ну тут несколько причин:1 это один из элементов как держать фокус внутри команды на пути продоуктовой разработки всегда 1001 соблазн куда-то, да и свернуть какой-то публичный комит помогает себя держать в векторе2 это один из инструментов получения дополнительного фидбека. ну и не буду оригинальным, если что пойдет не по плану, то так все равно задумано :). четверг - про инвестиции с колокольни фаундерапятница - рубрика добей избитого: должен ли продакт быть предпринимателем? суббота - про фокус о чем не модно говорить :)воскресенье - о роли фаундера в стартапе. итак, что по расписанию :) today - ну, наверное, согласно бест практис, больше про standuply и менявторник - про b2b saas без инвестиций, бизнес в slackе и на других продуктовых платформахсреда - хочу продолжить про b2b, но в контексте разрушения некоторых мифов. привет принял эстафету от андрея :) я - артем, основатель и директор по продукту в standuply буду неделю с вами вещать про b2b saas, ну и не только :) полетели🚀. спасибо всем, с вами был андрей михайлюк, почти все время было весело! жмите лайки, ставьте колокольчик. нормальная выдалась неделька подвели итоги экспериментов на +7,5% revenue, подведем итоги и тут:про flo продукт продактов подписки команду. и совсем неожиданная штука, про которую я узнал во время ковида - wim hof и его дыхательная гимнастика не пожалейте один раз 10 минут, попробуйте оказывается, кислород жуткий наркотик. тут главное не сорваться на свой обычный рабочий настрой, а то получится как на картинке (которой меня регулярно травят друзья). я вот второй год перевожу на русский непереводимые комиксы нейтана пайла про странную планету стопроцентное переключение, ноль продуктовой работы. банальность 1: хорошо иметь хобби банальность 2: pet проект - не хобби исключение: если на pet проекте вы не продакт, а дизайнер там или разработчик - главное чтобы переключались на совсем другую деятельность. когда с подхода “непонятно как решать задачу” переключаешься на “просто следуй инструкции”, наступает какое-то особое медитативное состояние вроде не думаешь совсем, а результат приближается непривычно, расслабляет. если вы из тех, кто постоянно сражается с неопределенностью и ищет новые решения - чудодейственный эффект в досуг привносят инструкции гулять по городу по туристическому гайду клеить модельки или собирать lego готовить по рецепту (тут спорно). тут очевидных польз целых две отвлекаешься от своей ниши, удивляешься как еще бывает - это раз подрезаешь в отдельный todo интересные практики, которые можно адаптировать и перенести к себе - это два. круто помогает кругозору постоянно смотреть новые приложения не прямых конкурентов, a top movers из всех категорий сторов кто влетел в топ 10 и задержался там на несколько дней - на тех стоит насмотреться, попробовать дедуктивно объяснить причину роста. но ничего, замена едет, а значит скоро полегчает хорошо бы и голову иногда можно было менять по гарантии, но пока приходится справляться с ремонтом самостоятельно. букву т. (вы кстати не представляете как на этот самый хелс сейчас влияет макбук, ставящий два пробела вместо одного и временами игнорирующий букву ). я так посмотрел многие под конец нелели пишут про рассудок, так и я напишу mental health тред - иди!. disclaimer! все вышенаписанное актуально для продактов, про собеседования разработчиков я ничего дельного рассказать не могу. а в конце испыта руководитель сводит все оценки от коллег и принимает решение - совпало ли “как я буду делать” и “как я делаю”. при оценке обязательно приводить примеры, как именно проявились качества нового сотрудника “некоммуникабельный, мне не нравится” - не прокатывает “при описании этой фичи не задокументировал важное требование, меняли решение уже в спринте” - уже ничего. если интервью успешны - наступает испытательный срок на него описываются конкретные задачи, конкретный результат для каждого из трех месяцев в конце - оценка по тем же 4 шкалам от 3-4 коллег, с которыми взаимодействие максимально. важно, что собеседование - это по сути ответы кандидата на вопрос “как я буду делать” если человек сразу плохо это понимает или не способен это внятно объяснить - это блокеры для найма. и вот так за час набирается от 20 до 50 оценок в среднем продактов обычно собеседуют 2-3 человека, у всех разные подходы и своя экспертиза в спорных случаях устраиваем консилиум после всех собеседований и решаем, “скорее да” или “скорее нет”. есть конечно и красные флаги, которые видно мимо кейса если кандидат в продакты смотрит в пол и односложно отвечает на вопросы - это 2/5 сразу, никакого effective collaboration тут не получится. например, сейчас продакты формулируют гипотезы от метрики, на которую она повлияет - это ожидаемый средний уровень если кандидат сразу планирует прокси- или health-метрики - это четверочка если еще и описывает место метрики в дереве дюпона - близко к пятерке. правильных ответов нет, но есть хорошие и плохие один вопрос - одна оценка если по практикам делает так же, как продакты из текущей команды - это три из пяти. какого уровня задачу себе ставит кандидат - подвинуть кнопку или переделать полприложения? на чем основана его гипотеза? понимает ли ограничения, как намерен обходить? будет делать mvp, как его составит? двигается от метрики, на которую хочет влиять или вспоминает о ней позже?. кейс сквозной, то есть содержит задачи, отражающие уровень кандидата по каждой из шкал мы проходим весь путь от ideation до production (и даже чуть дальше) для примера расскажу как получить оценку по одной из шкал - product impact. я почти никогда не спрашиваю про предыдущий опыт, обычно сразу даю сквозной кейс предлагаю кандидату оценить знакомое приложение и предложить улучшения или исправление проблемы результат не важен, важен подход. если рассматривать найм как эмпирическое исследование, на собеседовании мы можем наблюдать и сравнивать база для сравнения - текущая команда, для которой зафиксированы средние показатели. есть ли способ вообще за час получить точный профиль кандидата, который предскажет его результативность хотя бы на горизонте года? справившийся с такой задачей озолотится, истинно вам говорю! пока лучшее решение: грубый фильтр собеседования и более тонкий - испытательный срок. выше я твитил наш док про оценку performance, там указаны 4 шкалы: product impact skill level &amp; professional ability effective collaboration productivity &amp; autonomyможет ли один собеседующий получить точную оценку за час по всем шкалам? хотелось бы, но нет. как оценить? никто не питает иллюзий, что на собеседовании можно все понять о человеке на собеседовании можно врать, приукрашивать, стараться понравиться. таким образом, чтобы кандидат оказался выше среднего, он как минимум должен быть синьором и уже затем его можно сравнивать со средним и понимать - этот конкретный senior bar raiser сейчас для команды или нет. не путаю ли я bar raising с наемом синьоров? нет, не путаю если долго нанимать сотрудников выше среднего уровня в команду, средний уровень в команде поднимется до senior даже если никого не увольнять. больше всего вопросов вызывает рекрутинг, так что тред сегодня будет про него. так-то я на него уже семь твитов ответа написал. не уверен, что мы одинаково трактуем понятие эмпирический я кандидатский по философии 12 лет назад сдавал, могу не все помнить, но кажется эксперимент - лишь один из методова про метрики вот, ничего не утаить. поддержали контентом и виртуальными ассистентами кейсы ковид и зачатие сделали бесплатными курсы по mental health ну и трафик само собой подскейлили, пока цены упали могу что-то уже и забыть, вечность назад дело было по ощущениям. расскажите нам тогда, пожалуйста, что такое bar raising в компании, где средний сотрудник уже senior. что-то я уже начал уходить в дебри спросите может вопросы какие, и я буду на них (медленно и печально) отвечать на выходных или можно ткнуть. мы следуем принципу land and expand для каждого потенциально интересного домена делаем mvp силами текущей команды, срываем все низковисящие фрукты и затем начинаем нанимать новую команду на развитие направления. так что неожиданный челендж - когда продукт растет в несколько раз за год, сложнее всего поддерживать рост команды, не теряя эффективности. эта структура с повышением уровня абстракции работает и дальше на уровне всей продуктовой организации лидирует сро, инедавно мы пересекли опасную границу в 8 человек в его команде теперь часть команд уезжает в новую продуктовую организацию - growth, к cgo. в стриме интересы продуктовой команды представляет продакт (разработчики ему это делегируют) итого на ритуалы стрима приходят по продакту от каждой команды, дизайнеры, аналитики, ux-ресерчеры - снова приехали, снова битком. продакт, пара клиентских разработчиков, пара беков, пара qa - и вот уже приехали, полна коробочка на стендапе несколько продуктовых команд приходится объединять в value stream, который лидирует продакт-директор (или vp). картинка про то, почему компактные команды лучше особенно на удаленке. добиться того, чтобы толпа талантливых людей синхронно катила продукт куда договорились - сказать куда проще, чем сделать одно из решений - компактные команды, 7-8 человек на одно направление. кажется, что продакт-директора и сро не очень-то и нужны но предыдущий твит описывает именно их работу в процессе планирования и если спросить меня о самой выматывающей части моей работы - я скажу “держать фокус”. практически полная свобода, за исключением того, что нужно проверить зависимости от других команд и убедиться, что все запланированные инициативы покрывают все запланированные окр уровня компании, и стратегически не ведут в никуда. продакт вместе со своей командой оценивают их суровым взглядом и пишут окр уровня продуктовой команды чтобы достичь результатов описывают и скорят инициативы потом они разобьются на эпики, а эпики на стори. “дальше цели пошли вниз по иерархии, на каждом уровне обрастая подробностями и теряя смысл” - написал бы я, работая в какой-нибудь другой компании у нас во flo окр с пылу с жару достается сразу продактам. общаемся мы в основном языком окр *тупая шутка про то, что это одновременно и методология, и диагноз*. общаемся мы в основном языком окр *тупая шутка про то, что это одновременно и методология, и диагноз*. для меня это а⃫д⃫ добавляет работы как для people-менеджера раздавать задачки как в армии не работает, с каждым продактом свой ритм, свои аргументы, свой подход в общем но это и великолепно, потому что любая задача встретит свежий (иногда недобрый) взгляд. про команду тред мы все очень разные объединяет всего пара вещей:1 каждый непременно в чем-то талантлив2 среди нас нет “пассажиров” (по меткому выражению нашего сто романа). также спрашивали про книжки, что почитать, чтобы сразу синьором стать универсальный ответ - определите свои слабые стороны (хоть сами, хоть прости-господи с коучем) и прокачивайте их я сейчас качаю прогнозирование, у меня в читалке тетлок, сильвер, талер. “есть ли оценки как скоро вы скорее всего не сможете больше поддерживать постоянный подъём планки? какой план после этого?” мы вот буквально намедни вышли на рынок труда в европе, и кажется на горизонте нескольких лет новый план не нужен. “придерживаетесь ли вы принципов меритократии при этом?” я лично принципов меритократии придерживаюсь, даже когда с ребенком lego собираю во flo скиллы и желания самого человека помогают найти ему оптимальное место. “как долго вы собираетесь это продолжать?” пока это будет целесообразно экономически как только это перестанет быть целесообразно экономически - тут же прекратим. лидер обязательно собеседует людей в свою команду он хорошо знает своих direct repos, так что обычно способен понять, как среди них будет выглядеть кандидат хотя ошибка выжившего возможна из-за тех, кого не взяли по эмпирической оценке, а они-то на самом деле огого!. “также интересно было бы узнать каким образом эта планка измеряется“ по текущей команде - ежегодно на performance review по 4 шкалам по кандидатам - эмпирически на собеседовании, на review в конце испыта по 4 шкалам. примеры senior developer реализует фичу за час, вместо дня код такой, что потом другой команде не придется тратить время и называть его некрасивыми словами продакт лежит с ковидом, но команда понимает как и что делать и не теряет velocity. “зачем мы придерживаемся политики bar raising при найме? какие задачи бизнеса это решает?” команды, сформированные из синьоров, стоят дороже, но способны решать задачи качественнее и быстрее а еще в таких командах меньше риски. ну что, дорогие мои хейтеры, приступим к ответам на вылежавшиеся с понедельника вопросы. хотел вам рассказать про value nuuring текстом, но рабочий график заставляет выбирать между твитером и едой (а есть я люблю) так что придется слушать. это как с культуризмом спортивное питание и здоровый образ жизни помогают, спору нет но если при этом нет физических нагрузок - результат предопределен. а я и отвечу, у нас там и план где-то висит. кажется, что существующими методами задачу subscription retention в лоб не решить думал я, пока не познакомился с дисциплиной value nuuring. более здравая идея - превратить customer suppo в customer success и послать их на помощь маркетологам но и тут есть засада даже в сша сотрудники поддержки часто либо ненавидят обращающихся к ним карен, либо сами считают, что их продукт ужасен (ведь на него столько жалуются). заставить вас снова купить bmw - в этом маркетинг разбирается отлично объяснить рационально, зачем вам продлевать абонемент в спортзал - уже так себе. многие компании особо не думая переиспользовали для удержания пользователей классические маркетинговые коммуникации но обычно маркетологи умеют либо апсейлить, либо улучшать слабо измеримые показатели вроде силы бренда. а вот что делать с теми, кто уже вам заплатил? как поддерживать подписчиков, убеждать их остаться? над этой задачей человечество продуктивно работает всего-то лет 50. продажам как дисциплине уже тысячи лет все процессы отлажены, принципы не особо изменились с неолита что каменные наконечники для стрел впаривать, что saas - в основе знакомые всем коммуникации. и тут мы нападаем на интересную проблемку продукт-то может улучшаться, но пользователи про это не знают (или знают недостаточно) как думаете, почему так?. не работает этот принцип только с налогами, но там у продактов другие kpi и инструменты для сокращения churn rate. но никакие подписки не заведутся без понятного journey долгосрочного удержания и фундаментом его будет непрерывное улучшение продукта люди так устроены, что если платят за что-то постоянно, то непременно хотят видеть положительную динамику. идея посылать всем пуши, кстати, не самая плохая тот случай, когда минимальными усилиями можно добиться какого-то (возможно хорошего) результата. покупать умеют многие активировать тоже, хотя и поменьше а вот с “ждать” дела плохи кто-то вообще воспринимает эту метафору буквально и ничего не делает для удержания подписчиков а кто-то делает, но останавливается на идеях уровня “ну давайте пуши всем пошлем что ли”. сегодня - про подписки экономика подписок в общих чертах знакома всем: купил пользователя, активировал, ждешь вечных продлений и знаете в чем ключевая проблема, из-за которой к успеху приходят далеко не все подписки?. если высоко приоритизировать несложное, не останется времени делать важное. пока я начинаю работать примерно в 8, а заканчиваю в 22 - не знаю как по вашим меркам, по мне пока жара. да вот же он! я, правда, научился не в том смысле что сходил на курсы, а скорее вдохновился подходом и придумал свой. так что если и учиться чему-то, чтобы стать senior - то осознанности и entrepreneurial mindset звучит, конечно, как инфоцыганство но еще 10 выученных в теории методологий уж точно никак не подтолкнут вас в быстрорастущую компанию. ни разу не видел, чтобы на стадии middle senior кому-то не хватало фреймворков, владения инструментами - в общем процессных таких вещей обычно мешает что-то в голове нежелание лезть в детали отсутствие мотивации боязнь ответственности гордыня. “я уже умею наполнять и опустошать беклог и не спотыкаюсь о разработчиков и стейкхолдеров чего лично мне не хватает, чтобы найти и затащить с нуля не определенную никем задачу?” и обычно всем не хватает чего-то своего. сначала продакт растет процессно, учась делать какие-то базовые вещи эффективно за счет известных фреймворков важно понять, когда уже хватит процессов и можно начинать расти концептуально обычно это как раз middle senior. хорошего синьора, кстати, видно сразу у него огромная насмотренность обычно легко сочетается с критическим подходом “я сто раз видел как так делали, я понимаю, что в решении самое важное, но не буду копировать это бездумно и проведу эксперимент”. знаете, что самое волшебное? процесс решения задачи “вырастить из себя синьора” уже постепенно делает из вас синьора жаль что с retention так не работает. чтобы решить неопределенно сформулированную задачу нужно уметь собрать информацию снаружи и внутри, проанализировать ее, формализовать цель и критерии ее успешного достижения, построить майлстоуны от цели до сегодняшнего дня и начинать есть этого слона по частям. задача “вырастить из себя синьора” продуктово ничем не отличается от задачи “вырастить retention подписок” для того чтобы начать, даже не обязательно понимать, что такое retention или что такое подписки. используя свои ключевые навыки (такие как, например, любопытство, настойчивость, открытость новому) продакт выполняет одну из прямых задач продакта - делает из непонятного понятное senior - это не scrum и jtbd, это умение применить себя наиболее эффективным образом. продакт уровня middle уже явно обладает качествами, позволяющими ему работать с неопределенностями то есть ситуация “у меня нет алгоритма действий, мне непонятно как измерить результат, у меня есть только слегка сформулированная цель” такого продакта не пугает, а заводит. оценили как я хорош в нативочке?. хотя я, например, завел на всякий случай - и планирую отвечать там публично на всякие каверзные вопросы (ближайший наплыв которых ожидаю после epic growth 22 декабря). чтобы из мидла стать синьором, нужно всего-то навсего завести свой телеграм-каналнет. ответ очевиден, чтобы попасть в команду, куда берут только senior, надо стать senior и кажется, что любой продакт-middle должен понимать, как это сделать. один из самых популярных вопросов, которые мне задают после публичных выступлений - как попасть к вам в команду, если вы берете только синьоров при этом сам факт того, что человек задает подобный вопрос, выдает в нем джуна или как метко заметил меркушев “продакта-официанта”. опишите продуктовую гипотезу и как бы вы ее проверяли. ну вот же, положила!. вот он на фоне трех продактов женского пола за дайверсити и отвечает. у меня в команде один продакт мужчина. кто я такой, чтобы скрывать это от вас?. про growth я могу рассказывать часами, но лучше заткнусь и пойду ее делать у нас на одних только онбордингах в этом спринте 25 экспериментов запущено (и завершится успешно 🤞). чтобы успевать проверять больше гипотез - надо тащить проверку туда, где больше трафика то есть вверх по воронке вплоть до креативов бонус: если на идею фичи плохо реагируют даже на уровне баннера в фейсбуке - наверное не надо скорить ее высоко. чтобы экспериментов было больше - гипотезы надо дробить на атомарные я на спор за 10 минут упрощаю любой эксперимент в 2-3 раза с несущественной потерей значимости результата, у дрогана научился (и вам советую). что самое интересное, на любой стадии отлично работает главный принцип growth-подхода упихнуть максимальное количество гипотез в минимальное время. все три шага очень сложные, и на каждом обычно лидируют люди разных талантов если создавать продукт решат оптимизаторы воронки, дела пойдут не очень точно так же и если ideation-продакт возьмется за рост конверсии. 1 создать продукт с ненулевым retention 2 достать денег, чтобы раскачать привлечение 3 постоянно улучшать бизнес-модель за счет роста конверсий и ltvсхема не сложней “купи-продай” из девяностых и, как и тогда, к успеху приходит один из ста. если пользователи возвращаются, они продлевают подписку деньги от продления подписок растут, на них можно привлечь больше новых пользователей бизнес-секреты от андрея михайлюка. первый признак хорошего продукта - им пользуются даже если бесплатно, даже если по ценам ниже рынка - если есть retention, будет и revenue (возможно нескоро, как у twitter или tesla) если люди заходят один раз и пропадают, лечить надо именно это. если продукт так себе, его невозможно превратить в growth машину можно быть очень продвинутым в сероватом user acquisition, можно искусно прятать крестики на пейволах, а сами пейволы от ревьюеров apple - но это крысиные бега за короткими деньгами. я такой старый, что работал еще с подписками бумажных журналов 2001 год, хакер, хулиган - олды помнят пригодился ли мне этот опыт в digital? скорее нет, но один важный урок я вынес. честно признаюсь, что моя экспертиза в большей части касается именно subscription-продуктов кстати, зрелого продакта сразу видно, когда он со спокойным лицом говорит, что чего-то не знает или не умеет надо будет - научится. почему растут продукты вот вам для затравки картинка про flo это я скрупулезно веду подсчет активных подписчиц с того момента, как начал заниматься подписками. да. отвечу позже, как жара спадет. большинство в моей команде - до 30 младшей из продактов - 23 (привет, лиза!)насмотреться можно и за пару лет, если уметь подмечать важное а продуктовые хаки из жж и altavista в 2020 скорее всего помогают не очень. вопрос точно не для твиттера по формату, это целый дек можно сделать -). изменилась и не раз. а вы соскучились по бульканью кулера или наоборот, не намерены больше покупать штаны? как планируете работать после снятия ограничений?. когда (надеюсь) ремоут закончится, мы планируем продолжать работать в гибридном режиме офисы в лондоне, амстердаме, вильнюсе, минске свободное посещение или определенные дни для командных синков - пока не решили но 100% офис вряд ли, как и 100% ремоут. flo работает на ремоуте с марта, что удивительно - почти не теряя velocity (сам не верю, но факт) во многом так получилось из-за того, что мы быстро перестроили процессы - про это расскажу в пятницу, а пока можно почитать наш плейбук. что именно пояснить, я с удовольствием. с вниманием, но понимаем, что продукт на самом деле совсем другой. дотерпите до пятницы, у нас же расписание все расскажу, ничего не утаю. растем мы очень быстро, у меня уже концептуально хватает доменов на 7 команд (а есть всего 4) если вы уверены в себе, тянете на senior и хотите провести увлекательный час на собеседовании со мной - у нас всегда есть вакансии на. в рекрутинге мы придерживаемся политики bar raising как бы я не хотел пристроить вас по знакомству к себе в команду, нужно чтобы вы оказались сильнее, чем средний продакт, работающий во flo сейчас так каждый новый сотрудник повышает планку (и усложняет жизнь рекрутерам). продуктовая организация flo изящна, как молодая березка есть cpo, есть продуктовые директора (нас еще иногда называют непонятной аббревиатурой vp), есть продакты на несколько команд в рамках одного value stream полагается пул продуктовых аналитиков, дизайнеров и ux-ресерчеров. русскоязычные друзья часто спрашивают меня “андрей, но за что у вас так активно платят пользователи?” (на самом деле не спрашивают) лайфхак - поставив flo, переключите язык на английский там наш флагманский продукт, другие языки догоняем не сразу и русский в tier 3, izvinietie. монетизацией во flo начали заниматься в прошлом году, так что оцените динамику при этом наш приоритет - долгосрочный retention подписок, хотя и конверсию в триал мы тоже умеем растить хорошо за квартал на 25-30%, если быть точным все жду, когда же нащупаем потолок. давайте для начала торгану продуктом 150 млн инсталлов, 36 млн mau, регулярно top 1 в категории health &amp; fitness в сторах конкретно моя команда сейчас активно штурмует top grossing, в сша добирались до второго места calm тяжело подвинуть, но мы стараемся. примерно так же, как strava и fitbit к тому, что в apple health можно трекать шаги. но помним, что любой план - это только план и если в процессе становится понятно, что более ценно будет свернуть с намеченного пути - свернем не думая(ладно, думая, но недолго). говорят, нужно расписание, вот оносегодня - чуть-чуть про меня и про floзавтра - почему растут продуктыпослезавтра - почему растут продактычетверг - день подписокпятница - командный деньякобы нерабочие дни - как стимулировать полет продуктовой мысли. привет-привет! я - андрей, продакт-директор flo, #1 mobile product for womens health, как скажет вам наш корпоративный сайт неделю буду надоедать вам здесь, готовьтесь. на этом у меня всё спасибо, что читали! ваш лайк меня порадует соцсети у меня в основном закрытые и̶л̶и̶ ̶я̶ ̶т̶у̶д̶а̶ ̶н̶е̶ ̶з̶а̶х̶о̶ж̶у̶, но мне будет приятно, если вы добавитесь на fb или напишете пару слов в tg @ mbelkina. треды неделипн вт ср чт пт вс. хороший пост с картинками про здравый смысл. good strategy, bad strategy- обязательно к прочтению, если вы в том или ином виде кому-то говорите, что делать по ссылке короткий обзор, но лучше прочитать хотя бы половину). obviously awesome от (советую подписаться)- лучшая книга по позиционированию продукта, обязательно прочитайте хотя бы обзор, если не читали очень сдвинуло мне точку сборки. и еще, ребята, если вам тяжело и вы понимаете, что не вывозите (по разным причинам) и нужна поддержка, не стесняйтесь и не бойтесь обращаться за помощью психотерапия-это то, без чего очень трудно вывозить неопределенность, с которой мы все сталкиваемся на работе и в жизни. и это конечно же не значит, что теперь надо продолжать тревожиться дальше и делать это надо всем вообще наоборот: желаю нам всем не тревожиться просто мне вот от этой мысли как-то проще стало осознанно подходить к тревоге, не пытаясь ее подавлять, а направляя в адекватное русло. но где-то пару лет назад на психотерапии я поняла, что благодаря этой же тревоге я пришла к своей профессии и сделала в ней карьеру:из-за моей потребности все контролировать и предотвращать мой мозг сложился так, что я отлично управляю рисками, хорошо продумываю и общее, и детали. тред про тревогу я тревожный человек и очень не любила в себе эту тревожность с детства ну, тревога и правда мало чего хорошего приносит: постоянно на нервах, постоянно страшно, сплошные переживания и никакого наслаждения ни от процесса, ни от результатов. заболела, потому сегодня будет всякое несвязанное и немного вот например очень смешной спич про вред успешного успеха и про то, как важно отвалить от себя и профилактировать отлет кукухи от стресса два года назад очень мне помогло это видео. все получится. напоследок статья про то, в каких условиях стретч-цели применимы, а в каких лучше бы без них. вы можете сейчас сказать, что я вам сейчас рассказываю не про ноу-хау, а вообще-то про то, что надо выдвигать качественные гипотезы с хорошими критериями их проверки вы правы, все так). в пессимистичном сценарии без минимальной цели вы бы могли решить, что дело не в неверном предположении о хорошей проходимости, а в том, что вам на входе нужен человек в костюме книги, распродажа, карты лояльности и проч. в пессимистичном сценарии вы получаете 8 продаж в день, понимаете, что проходимость в этом районе хорошая только у общепита и вовремя переезжаете в другое место, спасая бизнес. без минимальной цели в реалистичном сценарии вы бы не получили заряд дофамина от первого успеха и 15 платежей выглядели бы как результат на троечку. в реалистичном сценарии вы получаете что-то около 15 продаж в день за первый месяц работы вы радуетесь своему первому успеху, хоть это и не 25 вы понимаете, что с проходимостью все хорошо, но нужно, например, продавать еще и в интернете и работаете в эту сторону. вы также ставите минимальную цель: 10 покупателей в день в среднем за месяцесли эта цифра опустится даже до 99 покупателей в день, вы твердо решаете переехать или закрыться, тк ваша гипотеза о хорошей проходимости (или хорошей покупательной способности посетителей) была неверна. например, вы открываете книжный магазин в месте с очень высокой проходимостью ваша конечная цель- выйти на окупаемость через два года, иначе кончатся деньги для этого в первый месяц вам в идеале надо иметь в среднем 20 покупателей в день, а амбициозно- 25. под минимально достижимой целью я понимаю такую цель, недостижение которой однозначно и очевидно говорит, что гипотеза о верно выбранном направлении не подтвердилась и пора поворачивать или прекращать. на мой взгляд, этого можно избежать, если в самом начале присоединить к стретч-целям их менее привлекательного родственника с другой стороны спектра- минимально достижимые цели. - цели факапятся и новые цели ставятся вышецикл продолжается, пока деньги не кончились- параллельно выгорают сотрудники, потому что им стрессово и грустнов конечном счете мы видим, как перебор с амбициозностью приводит бизнес к стагнации, долгостроям и стрессующим сотрудникам. когда новый бизнес не достигает цели, при наличии денег на дальнейшее развитие очень высок риск попасть в ловушку: - теперь мы поняли, что делали не так/не доделали, пора это сделать- мы ставим себе новую цель- ту же, которая была или даже повыше, тк надо догонять рынок. еще меньше вероятность попадания в цель становится, если вместо кажущихся достижимыми целей начать ставить стретч-цели для этого берем достижимую цель, накидываем сверху n% сложности, получаем стретч-цель метимся выше, мыслим шире, но не всегда это идет на пользу. соответственно, когда вы в начале пути ставите себе долгосрочные цели, вероятность того, что вы их не достигнете, огромна, даже если эти цели в начале пути кажутся вполне достижимыми. представим себе людей, которые делают некий новый продуктовый бизнес в новой для себя области создание продуктов в конкурентной среде- это всегда про большую неопределенность и непредсказуемость, а на старте неопределенность особенно высока. пятничный тред про то, что неамбициозные цели тоже важны будет интересно тем, кто никогда не начинал, но очень хочет начать делать новый продукт или бизнес. например, вместо 85% пользователей на юзабилити-тестировании находят кнопку покупки за три минуты и более можно сказать вот так и вовремя получить ценную обратную связь о том, что мигающие кнопки делать не стоит. хорошая новость в том, что это легко пофиксить: надо рассказать об интерпретации данных и плане действий, а потом для желающих покопаться в деталях показать таблицу. глядя на такую таблицу, один человек может решить классно, нашли победивший вариант теста, а другой решит, что заказов на пользователя слишком мало и будет думать только об этом. таблицы как результат ресерча появляются, когда уже пришлось переварить очень большой массив данных, а то и несколько, и наконец-то свести информацию во что-то удобоваримое и понятное для автора, но непонятное для людей, которые не были в контексте исследования. мы делаем исследования в продукте для того, чтобы принять решение о каких-то действиях чтобы это сделать, полученные в результате исследования данные надо интерпретировать (хорошо это или плохо? много или мало?) и на основе интерпретации принять решение о действиях. проблема 3/3: в итоге все присутствующие склеивают разные картинки из того, что услышали/прочитали/интерпретировали и в лучшем случае задают массу вопросов, в худшем молча уходят, ничего не усвоив. проблема 2/3: помимо этого на экране находится 300 единиц информации, которые надо переварить и интерпретировать в итоге мозг зрителя одновременно анализирует информацию на экране, слушает рассказчика и сопоставляет эти потоки информации, потихоньку закипая. проблема 1/3: автор исследования приносит на обсуждение с другими людьми таблицу на 15 колонок и 20 строк, выводит ее на экран и сопровождает рассказом к сожалению, даже если эти люди в контексте, способов интерпретировать эту информацию у них очень много. любое исследование делается для того, чтобы что-то узнать в контексте этого твиттера целью исследования может быть что-то про проверку продуктовой гипотезы, анализ рынка, поиск инсайтов в поведении пользователей. четверг тред для тех, кто анализирует данные, кому-то про это рассказывает и сталкивается с тишиной или глупыми вопросами в ответ поговорю о том, как можно доносить результаты исследований так, чтобы их точно поняли, и почему вообще это может быть важно. стили управления бывают разные, и необязательно кидаться в крайности типа битья по рукам или бирюзовой отрешенности). вы совершенно правы и поэтому очень важно, чтобы pm и тимлид минимум раз в неделю, а лучше ежедневно общались 1-1, и чтобы работали в команде, а не каждый на свои интересы. понимаю, довольно стандартная история но кмк тут не в отсутствии яиц дело, а в отсутствии драйва когда пм уверен, что вот это надо делать в продукте asap и без этого никуда, сразу появляется и настойчивость, и желание эскалировать, если техбэкграунда не хватает для убеждения. в заключение скажу, что во имя здравого смысла пренебрегать можно всем например, распланироваться на полтора года или наоборот на месяц- это ок, так бывает главное - помнить, что делать что-то новое сложно и рискованно, и разделять эти риски с командой. хорошая практика обсуждения новой стратегии продукта с командой разработки 3/3:-если команда говорит,что в задаче слишком много неопределенности,обсудить,как можно сделать меньше неопределенности,запланировать это-трудные задачи оценивать в коридоре пессимистично-оптимистично. хорошая практика обсуждения новой стратегии продукта с командой разработки 2/3: -рассказать, что из этого уже сделано-собрать и отработать сомнения в том, что что-то нужно делать-попросить оценить самый несделанный из пяти пунктов. хорошая практика обсуждения новой стратегии продукта с командой разработки 1/3: -целиться на то, чтобы распланировать ближайшие полгода хорошо, а остальной план оценить поверхностно-рассказать, каким должен быть продукт, который убьет всех конкурентов(5 пунктов). плохая практика обсуждения новой стратегии продукта с командой разработки: показать список из 250 фич и затребовать оценку через две недели. на этом этапе задача продакта- вдохновить и попросить экспертную оценку своих планов. теперь можно н̵а̵т̵я̵г̵и̵в̵а̵т̵ь̵ ̵с̵о̵в̵у̵ ̵н̵а̵ ̵г̵л̵о̵б̵у̵с̵ сопоставлять то, что хочется, с тем, что вы можете сделать, то есть общаться с командой разработки, отметать то, что совсем никак не сделать, и составлять приоритезированный план действий. в получившемся на прошлом этапе нужно отметить то, что из этого идеального плана по вашему мнению уже сделано отлично, порадоваться и бежать это промоутить, если еще не. после того как идеальная картина создана, я прошу по каждому из этих пунктов написать максимум по пять самых важных релизов, которых будет достаточно для того, чтобы сказать, что пункт выполнен после можно спуститься на еще один уровень декомпозиции, если продукт сложный. после того как идеальная картина написана, я прошу по каждому из этих пунктов написать максимум по пять самых важных релизов, которых будет достаточно для того, чтобы сказать, что пункт выполнен после можно спуститься на еще один уровень декомпозиции, если продукт сложный. думать так, когда ты 99% своего времени учитываешь ограничения существующего продукта, неожиданно сложно лучше это упражнение делать на пару с коллегой, который последит за тем, чтобы ограничения были и правда откинуты. в итоге мы вязнем в фичеризме и каждый наш следующий релиз все мельче и тоскливей предыдущего. это помогает избавиться от основной проблемы существующего продукта- того, что он существует) из-за страха потерять что-то существующее мы подсознательно отметаем массу вариантов развития, о которых мы бы подумали, делай мы все с нуля в изменившейся за год среде. я предлагаю всем продактам, с которыми работаю, делать такое упражнение(и сама его делаю):представь,что ты обиделся на компанию, уволился, нашел бесконечный источник денег и хочешь написать с нуля продукт, который вынесет наснапиши 3-5 предложениях по 10 слов, какой это продукт. и сегодня давайте поговорим про то, как освежить роадмап продукта при фиксированной бизнес-модели. это нужно, так как за год происходит очень много всего: -вы получаете новую информацию,-ваши конкуренты делают то же самое,-появляются новые технологии,-вы как продакт за год стали круче и можете придумать что-то поинтереснее, чем выполнять свой план времен наполеона. своевременный тред среды про обновление продуктовой стратегии tl;dr: я считаю, что бизнес-модель, позиционирование, конкурентную стратегию и роадмап продукта надо актуализировать в идеале каждые полгода, в крайнем случае- раз в полтора года, реалистично- раз в год. поставка треда среды запланирована на утро четверга, а пока вот хорошая статья про горизонты планирования. - надо с кем-то еще посмотреть продуктовые планы, чтобы взгляд со стороны получить мне и моим коллегам часто казалось, что все огонь, а людям со стороны было непонятно или не выглядело вдохновляющим- посоветоваться с тимлидом лично, как видит проблему и в чем причина. - если мало доверия, могут делать вид, что все классно и понятно, а на самом деле непонятно и потому фигня с планированием- по той же причине могут не сказать, что неинтересно. можете мне написать в tg , подумаем вместе) без контекста (как задача выглядит, сколько легаси в системе, давно ли все этим продуктом занимаются, какой уровень доверия между pm и командой) могу только варианты накидать здесь. подытожу: если вам надо, чтобы кто-то что-то делал самостоятельно и без вашей помощи, в первую очередь прекратите эту помощь навязывать, если о ней явным образом не попросили и подумайте, а нравится ли вам то, чего вы хотите добиться с помощью этих людей. если продакт ждет от разработчиков самостоятельности и проактивности и одновременно забирает у них эту самостоятельность и проактивность, требуя не результата, а каких-то процессов и верно поклеенных стикеров, ничего кроме активного или пассивного сопротивления не получится. про сомнения но они же стикеры по доске не двигают/релизы на прод не настроили и если я за этим не прослежу, они же все испортят: это взрослые самостоятельные люди, не испортят а если испортят, то, понимая, что выплывать надо самим, справятся сами. в общем, если вы продакт, пожалуйста, всегда задумывайтесь, а будете ли вы гордиться тем, куда приведете продукт через год только тогда ваша команда тоже сможет этим гордиться и интересоваться. так происходит, потому что, когда продакт хочет одного, а делает другое, получается ерунда: продакт не вдохновлен, команда не видит в продакте уверенности и не верит в то, что делает что-то классное, в итоге все в апатии, неуверенности или скуке. и еще один хороший вопрос: будешь ли ты гордиться тем, что получилось из запланированного на год? если нет, опять же пора менять стратегию. если ответ есть, я прошу представить идеальную ситуацию, где нет никаких ограничений и все возможно, и спрашиваю, какие цели были бы у продукта в таком контексте? если ответ расходится с первоначальным ответом, как правило, тоже пора менять стратегию. поэтому первый вопрос, который я задаю недовольному командой продакту (и задавала себе) : опиши, пожалуйста, в одном предложении- куда должен попасть продукт через три месяца/год/два? если ответа нет, пора менять стратегию. невозможность сделать одну цель спринта проистекает из отсутствия долгосрочных целей или из-за того, что целей слишком много или из-за того, что страшно что-то бросить в общем и целом это означает, что стратегия продукта либо отсутствует, либо безнадежно стухла. но бывает так, что в продукте надо столько всего сделать, что кажется, что невозможно сделать одну цель спринта- страшно ничего не успеть что делать, поговорим после перерыва. примерно в половине случаев этого уже достаточно для того, чтобы команда разработки, получив понятное направление движения, начала классно релизить. например, если цель спринта- повысить конверсию главной страницы в регистрации, не должно в спринте быть задачи поменять механизм чекаута любой человек, которому поставили много разрозненных задач, когда-то начинает себя с ними чувствовать как волк в игре электроника. если целей больше одной или задач, не относящихся к цели, больше одной, постарайтесь спланировать как минимум три спринта так, чтобы в каждом была только одна цель и только задачи, относящиеся только к этой цели. чтобы продиагностировать проблемы с фокусом, вспомните, есть ли у вас каждый спринт его единственная цель и есть ли в спринте задачи, не относящиеся к этой цели. начать с себя- это про то, что всегда в такой ситуации самое важное- это убедиться, что вы даете команде четкий фокус и вдохновляющие, понятные и достижимые цели я не могу вспомнить ни одного случая, когда команда не перформит, а с фокусом и целеполаганием все идеально. а еще важно отстать, так как только таким образом вы освободите себе время на то, чтобы заняться более срочными вещами: фокусировкой и приведением ваших планов в порядок. отстать- это значит убрать давление и прекратить: - требовать все поправить- заниматься их процессами- делать то, что команда может делать без васэто важно, так как зона ответственности продакта в первую очередь- продуктовая стратегия и планирование ее выполнения. итак, универсальный рецепт, который еще ни разу меня не подвел: если вы в отчаянии от ваших инженеров, отстаньте от них и начните с себя. сегодняшний тред может быть интересен тем продактам, у кого были или есть какие-то недовольства в отношении команды разработки например, если команда по вашему мнению работает очень непредсказуемо/медленно/поставка продукта низкокачественная. например, для меня это значило, что я себе не даю допускать ошибки (быть глупыми) и отдыхать(лениться), поэтому я вешала на людей такие ярлыки надеюсь, ответила). в качестве финала могу сказать, что собеседование- это для меня во многом про взаимные честность уважение, и если я в конце дня чувствую, что меня все бесит и в любом диалоге лицо как у бурерожденной, я извиняюсь и прошу перенести собеседование вот бы все работодатели так делали. и тут кстати тоже вот почва для размышлений: если вас бесят условно глупость или лень или упрямство, за этим обязательно стоит какая-то неожиданная для вас причина, рекомендую поразмышлять об этом, если будет время. позволяет понять, насколько прокачана осознанность у кандидата и как он/а действует в трудных человеческих ситуациях. кейсы не очень люблю, но один всегда спрашиваю сначала мы выясняем, что кандидата раздражает в людях потом рассуждаем, что она/он будет делать, если разработчик в команде- вот этот раздражающий человек. что-то меня понесло, давайте вернемся на собеседование люблю спрашивать, за что бы кандидат уволил продакта тоже помогает понять, как человек видит эту роль и как видит себя в ней и̶ ̶з̶а̶ ̶ч̶т̶о̶ ̶я̶ ̶с̶м̶о̶г̶у̶ ̶ ̶е̶г̶о̶ ̶у̶в̶о̶л̶и̶т̶ь̶. вы тут можете спросить, а что, тогда, по-твоему, продакту нельзя доносить бизнес-цели до команды? можно и нужно, просто это не должно быть ее/его главной задачей а как средство достижения своих целей- конечно, надо доносить. это я к тому, что связывать людей с компанией и прочий пипл менеджмент сам по себе ужасно трудозатратен и тяжел если этим как следует заниматься, сил на построение зубастой продуктовой стратегии не останется, поверьте, я так делала- это не кайф. кстати, если в вашей картине мира команде продакт нужен в первую очередь чтобы связывать их с компанией, подумайте, может быть, вам в идеале будет комфортнее в роли скрам-мастера/проджекта/тимлида? кого-то, кто больше про людей и меньше про бизнес. вообще люблю эти вопросы про зачем человеку человек вместо как вы понимаете свою роль: зачем продакт нужен команде, зачем продакт нужен компании, зачем продакту юиксер таким образом мы с кандидатом не тратим время на цитирование теории из пройденного недавно курса. если вы менеджер продукта и сейчас подумали, зачем вам руководитель, и не смогли найти внятную причину, то подумайте, а для чего вам надо идти в найм может, вам давно пора переквалифицироваться в серийные предприниматели, а вы себя мучаете офисной работой? just sayin. быть руководителем менеджеров продукта вообще сложновато, а если менеджеру продукта совсем не нужен руководитель, то и чуть менее чем полностью невозможно поэтому я обязательно спрашиваю, для чего кандидату нужен руководитель. перерыв ставьте классы!. не люблю ответ я люблю делать пользователей счастливыми, потому что это немного штамп и с такой мотивацией перегораешь мигом ребята, счастливых пользователей на интервью выцеплять сложно (у них все хорошо), а вот поток недовольных никогда не иссякнет и будет вас расстраивать. заканчивая тему мотивации, спрашиваю, за что кандидат любит работу продакта это важно для меня, потому что нелюбимой работой заниматься не надо по возможности никому это не значит, что мне нужен комсомольский задор в глазах, но некой искры хотелось бы. лучше мы на собеседовании поймем, что желания и возможности не совпадают, чем будем друг друга терзать в некомфортных рабочих отношениях полгода. продолжаю про мотивацию: прошу перечислить 1-3 характерстики работы мечты по каждому пункту спрашиваю, почему это важно очень слежу за тем, могу ли я это предоставить как работодатель если не могу, сразу говорю об этом и спрашиваю, что думает кандидат. настороженно отношусь к историям, когда причина смены работы- плохой начальник в такой ситуации спрашиваю, что делали, чтобы руководитель понял, что неправ- таким образом можно понять, руководитель безумен или (увы, чаще) менеджер не смог объяснить свою позицию. спрашиваю, почему кандидат меняет работу обычно тут рассказывают 1-3 причины и мы обсуждаем каждую в деталях моя цель здесь- понять, что демотивировало человека на предыдущем месте работы это много говорит о мотивации и о том, как кандидат выстраивает рабочие отношения. за полтора часа нам с кандидатом надо узнать и оценить друг друга очень хорошо, поэтому первое что я делаю- для экономии времени я не прошу рассказывать про свой предыдущий опыт это долго, скучно и неловко в 90% случаев. понедельничный тред про то, как я провожу собеседования на должность продакт менеджера думаю, вам понравится, если вы нанимаете продактов еще можете использовать этот тред как почву для рефлексии, если вы продакт с опытом и когда-то собираетесь менять работу. сб: беды с башкой в продуктовом цехувс: что-то стихийное. расписание: пн: что я спрашиваю на собеседованиях вт: универсальный рецепт мисс белкиной для решения всех проблем с разработчикамиср: о пересмотре продуктовой стратегиичт: легкий способ понятно рассказывать про свои ресерчи, стратегии итдпт: пропаганда неамбициозных целей. что нас ждет: буду делиться тем, на что насмотрелась или чего поела за те 10 лет, пока руководила проектами, продуктами и продактами. привет! сегодня и всю неделю с вами маша белкина, head of core product. вот и моя неделя подошла к концу всем спасибо! было интересно ✨. метатред недели:. день 6:продукты студии — 7:отдых, хобби, отпуска —. день 3: этап «документации и проектирования» — 4-5:этап «дизайна» — «разработки и тестирования» — про найм —. метатред недели:день 1: обо мне — 2: инструменты для коммуникаций — — знаний — инструменты —. летнее для меня хобби — катание на велосипеде в этом году поездку с коллегами я пропустила, но в прошлом году у нас получится очень клёвый трип по финляндии. покататься можно с большим удовольствием, чем в парках также с музыкой, но посвободнее. зимой, как сезонный спорт, можно сходить на катки но я бы рекомендовала не популярные и забитые в парках, а в спортивных комплексах, которые круглый год с вечерними-ночными катаниями. также хороший способ заняться чем-то новым это разные мастер-классы рекомендую, сходит и сделать тарелочку из глины есть из тарелки, которую сделал сам ещё вкуснее :). за жизнь сменила больше десятка увлечений самым любимым остаётся конный спорт, который занимает особое место в моей жизни остальные приходят и уходят. летом был доступен на свежем воздухе яхтинг, но уже не сезон тут жду весны для возобновления. раньше ещё ездили с сестрой играть в четыре руки на фортепиано, пока играем дома (ну она играет, я ленюсь немного). сейчас единственное, для чего я выхожу на улицу, кроме простых прогулок, это тренировки — конный спорт и растяжка 😷. в период самоизоляции дома помогал nike training, который составляет тебе программу занятий дома и позволяет не сидеть за ноутом 24/7. ну и, конечно же, то, что будет приносить удовольствие это может совпадать со спортом, а может быть чем-то спокойным. в идеале чтобы хотя бы одно из хобби было связано с активностью (хобби я считаю любое регулярное увлечение, но они могут сменяться). в рамках рабочих дней также важно найти для себя хорошее переключение от работы. так с wizzair из питера можно клёво слетать в будапешт, лондон и другие города примерно за 5к. идеально работает с какими-то дешевыми авиабилетами чтобы стоимость самолета относительно дней отпуска была адекватной. тратишь мало отпускных дней и тогда к двум большим отпускам (две недели и неделя) можно добавить ещё таких несколько за год между. считаю, что многие очень недооценивают трех-четырёхдневные отпуска (когда добавляешь к выходным). в рамках самоизоляции также важно найти любую возможность сменить пространство для отпуска — в питере половина друзей съездили в карелию, многие отдыхали летом с палатками, просто дача или база это супер, главное не дома. остаётся обычно физическая усталость, она восполняется первой рабочей неделей, но эмоционально зараженность полная. для меня в обычное время идеальный отпуск это с, по возможности, максимальным числом впечатлений чем больше мест успеваю посмотреть, потаскаться где-то, поездить на поездах, тем лучше. к сожалению, не все умеют отдыхать некоторые могут провести отпуск дома, просто ничем отличным от обычной жизни не занимаясь и возвышаясь на работу они выглядят и чувствуют себя не то что не на подъеме энергии, а наоборот. думаю, что большинство будет согласно с тем, что для отдыха требуется смена деятельности а для хорошего, если мы говорим об отпуске — и места. итак, завершающий день с темами — отдых, хобби и отпуска 🦥🚲🌴. про фичеринги в разных странах нам пишет в чат appfollow, очень удобно также как и об отзывах. а ещё в том году мы были приложением дня в app store более чем в 140 странах одновременно 🎉📈. разработка фичи к релизу ios это хороший способ попасть в подборку в app store. например, к релизу каждой новой ios мы добавляем появившиеся фичи – imessage приложение, команды, тёмная тема, виджеты и прочие. собственные продукты это хороший способ учить что-то новое, при этом повышая ценность продукта, а потом аппроксимируя опыт на продукты заказчика экономить во времени. последние два года приложение развивается в более факультативном формате, специального отдела нет, и весь упор сейчас на заказную разработку. основной собственный продукт студии — приложение moneon для учета личных финансов в этом году приложению исполнилось 6 лет. некоторое время назад у нас действовал собственный продуктовый отдел, в котором разработчики были закреплены за продуктом и развивали его. вчера по плану был рассказ про наши продукты, но не успела, поэтому рассказываю про это сегодня и останется ещё поговорить немного про хобби и отпускаесли остались ещё другие вопросы — пишите. 🧡. поэтому если у вас есть возможность, то всегда пишите настоящую причину отказа, а не отписки. несколько раз разработчики возвращались к нам после исправления ошибок через полгода-год и говорили, что хотят к нам, так как мы единственные дали качественный фидбэк получается, что и вклад в знания, и в лояльность. поэтому мы всегда пишем качественный ответ на тестовые задания не просто отписки, а что именно не понравилось в коде таким образом наш ревьюер тратит немного больше времени на оформление замечаний, но кандидат получает фидбэк по которому он может дальше расти. мы считаем, что вклад в сферу это очень важно, но так как мы небольшие, то больше чем по одному джуну на платформу одновременно мы взять не можем, чтобы хватало времени на качественный рост, а не просить на самих себя чаще это какой-то последовательный процесс. у нас обязательно есть код-ревью, есть тщательное ментерство для джунов, но и для опытных разработчиков обсуждаются возможности роста. мы стараемся чтобы разработчики делились опытом друг с другом и если кто-то запилил виджет для ios14, то он не будет это делать во всех приложениях теперь, так как расти должны все. у всех приложений разные потребности, поэтому это нормально, если где-то не требуется бэкграунд работа, нет in-app покупок, виджетов, расширенных уведомлений и подобного но в сумме разные проекты дают очень разнообразный опыт. я считаю, что аутсорс это очень клевое место для роста и развития за год поработав на трех проектах ты можешь увидеть и попробовать сделать своими руками или в команде кучу разных фич, которых в продукте может так и не появиться. недавно в писали про стереотипы про аутсорс, от которых стало довольно больно в сердечке, причем некоторые плюсы общие достались только продукту и буду говорить именно за то как у нас, за всех не в ответе. и немножко хочется поговорить о найме 👥. после релиза переходим в режим быстрого реагирования, чтобы если что-то пойдет не так, то быстро исправить но в 99% случаев все заканчивается успехом и релиз живет своей жизнью. также мы часто настраиваем заказчикам дашборды с аналитикой в amplitude, чтобы можно было удобно наблюдать за использованием приложений и также планировать по ней фичи 📈. финальные тесты в testflight и google play (внутреннее) и можно выпускаться :). заранее мы запрашиваем у заказчика нужную информацию и заполняем все в сторах самостоятельно подготавливаем скриншоты, а также рекомендуем как лучше подготавливать тексты с точки зрения aso. подготовка к релизу 🎉. если по итогам полного рана все в порядке, то можно считать сборку готовой к публикации если же есть проблемы, то возвращаемся к циклу баги-правки до полного исправления ошибок, потом возвращаемся к полному рану. когда уже вся функциональность готова, то альфа сборки заменяются бетами и далее идет цикл тестирования с исправлениями после того как все проблемы исправлены (именно по таскам), то сборка становится релиз-кандидатом и по ней уже проводится полный тестовый-ран по всему. когда становятся доступны сборки с полноценными разделами, то они идут на тестирование только после завершения тестирования всего раздела все баги идут в итерацию на фиксы чтобы разработчики не скакали между разделами слишком часто. а с началом этапа разработки стартует описание тест-кейсов по проекту для подготовки к будущему тестированию сборок. тестирование начинается на самом деле еще на этапе проектирования и дизайна, когда мы смотрим на экраны с точки зрения ux. такс, продолжу описание процессов перейдем к тестированию 🐞. обсуждаются также и моменты связанные не только с организацией работы, но и непосредственно с изменениями процессов разработки и тестирования добавляя какие-то правила для задач в итерациях или еще каким-то вопросам. хотим еще добавить такую доску для всего протяжения проекта, чтобы можно было прийти в любой момент и добавить стикер, если есть желание что-то отметить сразу в процессе и не забыть потом. для итогового ретро по проекту делаем более глобальный опрос, результаты которого теперь добавляем на доску в miro и обсуждаем всей командой для совместного принятия решений и их фиксации. сейчас у нас итеративная разработка – в начале итерации мы обсуждаем фичи, разработчики делают оценки, мы планируем итерацию; в конце проводим демо, где разработчики показывают что было сделано; а также проводится мини-ретро с пониманием того что было хорошо, а что не очень. это один из плюсов работы над проектами — каждый из них ты можешь с нуля строить по новому и смотреть результат в продукте, кажется, что так тоже можно делать, но для этого нужно выделять какой-то старт для изменений процессов и снимать результаты по какому-то объему работ. непосредственно процессы на этапе разработки и тестирования меняются постоянно думаю, что за последние два года не было двух проектов с полностью одинаковыми процессами каждый раз проводя ретроспективу мы стараемся их как-то улучшать. дизайн всегда готовится до старта конкретного экрана в разработке, поэтому тут риски только в изначальной оценке этого экрана тут их стараемся уменьшить начиная дизайн с самых сложных экранов. наиболее рискованный момент это api, так как разрабатывая на заглушках (особенно локальных в приложении) мы получаем очень большой риск получить букет реджектов задач, когда api оживет. мы стараемся стартовать этот этап когда у нас есть полное тз, готовый дизайн и полностью рабочее и протестированное api к сожалению, это не всегда так получается. этап разработки и тестирования ✨. после того как весь дизайн отрисован осуществляется полная оценка разработки и переходим к следующему этапу. иногда для согласований помогают кликабельные прототипы, которые лучше позволяют понять как будет выглядеть экран на реальном устройстве и уменьшает вероятность того, что на этапе разработки потребуются какие-то правки. чаще всего после согласований первой пары экранов все дальнейшее согласование идет довольно гладко. тут мы просим заказчика предоставить нам все дизайн компоненты, которые у них есть (иногда это только лого, а иногда полноценный многостраничный брендбук) а также стараемся узнать предпочтения по приложениям в целом, чтобы было больше данных для старта. первые согласования по дизайну очень важные, так как по факту от первых 1-2 экранов зависит весь стиль. так как дизайн очень сильно влияет на разработку, а точнее на её сроки, то оценку разработки без дизайна мы даем только предварительную и предупреждаем, что она может измениться. этап дизайна 🎨. если же что-то существенное, то обсуждаем с бэкендерами можно ли будет данные получить, обычно с этим проблем не возникает. да, если рекомендации по api отдаются до этапа дизайна, то мы предупреждаем, что в процессе работы над дизайном могут как-то изменяться запросы но чаще всего это уже мелочи, по типу дополнительного поля у сущности для отображения данных на другом экране. сейчас уже поздно, так что завтра расскажу про этапы дизайна, разработки и тестирования :). таким образом разработка api ведется параллельно работе над дизайном, чтобы к старту разработки приложений api уже было реализовано полностью или в достаточном для старта объеме. также дополнением на данном этапе может быть написание документации с рекомендациями по методам api, которая упрощает работу бэкенду и уменьшает вероятность того, что api придется потом изменять. карта экранов проектируется в самом начале этапа так как она позволяет визуально увидеть как в будущем будут распределяться функции по экранам и избежать пропуска какой-то функциональности или неоптимального распределения по ней уже описывается тз. в техническом задании также прописываются функции например: shocuts позволяют увидеть перечень из таких-то разделов при нажатии на которые приложение сразу открывается в выбранном разделена этапе дизайна отрисовываются иконки для них и в тз разработки идёт уже вместе с ними. или заказчик сразу знает, что хочет в дальнейшем развивать приложение у себя в команде, а с нами будет реализована только первая версия чтобы получить опыт это тоже хорошая позиция, чтобы не сделать ошибок при разработке первой версии. но также возможны варианты, когда проект взлетает, все хорошо и приложение забирают на развитие в собственный it- отдел уже получив достаточную экспертизу от нас и получив качественную базу. наша цель — выпустить качественный продукт для заказчика, которые будет успешен, чтобы и дальше развивать проект совместно. например, решения связанные с виджетами, шорткатами, расширенными уведомлениями или чем-то подобным, что может упросить жизнь пользователям, но при этом не так очевидно. также делимся какими-то идеями не только относительно базовых функций, но и в особенности какими-то платформенными фичами (или возможностями мобайла), которые будут полезны. на этом этапе мы изучаем сферу, конкурентов и формируем совместное представление о продукте с заказчиком стараемся узнать как можно больше полезной информации. тут сразу настраивается инфраструктура для взаимодействия — общий с заказчиком воркспейс в slack и настраиваются внутренние сервисы — тайм-трекинг, канал во внутреннем slack, проект в clickup для фиксации сроков. для большинства проектов чтобы реализовать первую версию мы проходим этот этап у нас и далее работаем по его результатам, а именно — тз на дизайн и разработку, а также карта экранов. этап документации и проектирования 📃. при этом это супер интересно, когда тебе для работы над проектом надо понять как работает сфера так я разбиралась со сферой строительства, медициной, сервисами для юрлиц и другими и так накапливаю полезный опыт и для будущих проектов. то есть все очень индивидуально и зависит от сферы кто-то может написать: «мне нужно приложение, как вот это вот, но под нас», и этого достаточно а в какие-то сферы приходится погружаться довольно глубоко, чтобы лучше понимать продукт и предлагать идеи. также бывают случаи, когда приходят с тз на 70 страниц, а что в итоге требуется понять сложно, так как тз пишется слишком детально в итоге все равно составляется отдельное тз для приложений. в целом единой формулы нет, бывают, что приходят заказчики с идеей, которая написана в самом письме, и её уже вместе можно обсуждать и описывать дальше, довольно быстро переходя к этапу документирования. проекты мы делим на три основных этапа — документация и проектирование, дизайн, разработка и тестирование расскажу о каждом из них, но начну с ответа на вопрос про вводные данные для старта. затянула работа теперь пришла исправляться и писать твиты по плану был рассказ о процессах и любимых задачках также это близко к теме проектов в целом, поэтому будут общие дни сегодня-завтра приступим. если есть какие-то клёвые и полезные инструменты, которыми вы готовы поделиться — пишите :). думаю, что это все из сервисов, которые используются нами регулярно в работе. для наблюдения за отзывами, изменениями приложений в сторах используем оповещения от appfollow удобно быстро реагировать, видеть предыдущие отзывы пользователей и новые. если требуется что-то посмотреть в запросах на девайсе или как-то изменить ответ для проверки, то используем charles. тестируем api мы при помощи insomnia (некоторые больше любят postman и используют его). для работы с тест-кейсами пользуемся testrailом он прошел на замену табличек, которые были много лет. для макетов мы используем sketch с синхронизацией в облаке — sketch cloud а разработчики работают с дизайном уже в zeplin. это были какие-то общие инструменты которые не особо зависели от сферы применения теперь коротко о том, что используем дополнительно если будет интересно подробнее — пишите, я опишу дополнительно :). второй — отправляет всем стендап-вопросы каждый день и постит в общий канал. первый используется для запросов отгулов, отпусков, больничных и уведомлении о ненормированном графике инфа по нему идет в общий канал так что все знаю в какое время коллега не будет доступен. также нам упрощают жизнь приложения в slack — timebot и standuply. для тайм-трекинга мы используем everhour — есть удобные отчеты, настройки эстимейтов, архивирование прошлых версий и дашборд на котором видно текущую неделю и добавленные часы. для красивых опросов мы заменили google формы на typeform команде понравилось, выглядит приятно, и вот уже заполнение ретроспективы становится с гифками и иконками не таким скучным. в продолжении треда о инструментах, которые мы используем в работе, грех будет не сказать о google sheets работа с табличками занимает большую часть времени, поэтому их нужно любить и делать красивыми, чтобы работа была в радость :). да, перегруженность тоже ощущалась, так как очень много функций и все больше добавляют но были релзы и скрывающие с основных экранов какие-то функции, так что думаю они стараются держать баланс. а также если обсуждение без видео, то нет индикации микрофона на том, кто говорит сейчас, а если это не член твоей команды, то становится совсем непонятно фичереквест вам :). да, мы как раз её используем для проектов и удобно :) но так как она появилась совсем недавно, то распределение для опроса сделала без неё. в нём проводились последние проектные ретроспективы, включая сами созвоны единственное неудобство – нет режима сетки, чтобы выводились все участники созвона, хотя места для этого достаточно. miro сейчас используется для согласования дизайна (как внутреннего, так и внешнего) так как в нём удобно ставить комментарии по конкретному элементу и вести таймлайн доработок экрана карта проекта также ведется и дополняется в miro на протяжении разработки. даже планирование твиттера готовила в нём (без спойлеров). первым хочется назвать miro, который не так давно ворвался в мою жизнь и участвует все в большем количестве разных процессов. и финальный на сегодня тред с остальными инструментами, которые не подходили к предыдущим тредам, но они не менее полезные. если вам такой процесс подходит, то это отлично :) главное — найти инструмент помогающий в конкретных задачах, универсального для всех не будет :). он у вас прям как основной таск-трекер? давно используется? мы только как допрешение и вполне себе неплохое. что используете вы для базы знаний?. и информация по процессам для конкретного проекта (так как они часто меняются) об этом расскажу завтра). там же и тестовые данные — разные аккаунты, состояния или дополнительная информация, которая будет полезна для быстрого ознакомления с проектом. с появлением knowledge base в youtrack эту информацию стали вести в нем к таким данным относится базовая информация — ссылки на тз, zeplin, карту проекта, api, github, минимальная версия ос, ориентация (чтобы быстро чекнуть с какой версии тестировать и как). для информации по проектам раньше также использовали notion, но это не совсем удобно для разработчиков и тестировщиков так как все остальное ведется в youtrack, то и эту информацию хотелось вести там. также у нас в notion ведётся процесс по найму (воронка по собеседованиям) обсуждения каких-то новых процессов или регламентов (удобно можно по тексту комментировать) остальное по мелочам. в качестве корпортала мы используем notion в нем есть базовая информация о компании, о сотрудниках, вводная по процессам, да и в целом все то, что обычно размещают на корпортале :). еще один из необходимых инструментов – база знаний 📚. а с интеграциями разными, типа github/slack, и представлениями (список задач или борда) там тоже все ок?. для этого мы используем trello, как инструмент к которому не нужно привыкать там все очевидно, просто и так как заказчик не добавляется во внутренние наши сервисы, то это идеальный вариант. и аналогично статусы по фичам (они тут полноценными фичами, без декомпозиции на мелкие задачи, как для разработки). и отдельный для нас процесс по задачам — ведение досок со статусами задач для заказчика чтобы заказчик видел какие экраны по дизайну уже согласованы, сколько осталось, какие сейчас в процессе. пока остановились на нем и пользуемся уже примерно год, вполне устраивает и удобно, что есть macos приложение. clickup развивается очень быстро каждую неделю приходят уведомления, что появилась новая фича я не преувеличиваю –. сейчас для ведения общей информации по проектам (сроки сдачи, статусы проекта и прочие менеджерские задачи) мы используем clickup. была asana, но года 4 назад и там нам чего-то не хватало это было либо отсутствие представления задач в виде борды, либо отсутствие приложения для macos но по итогу мы её заменили. в этой роли у нас были notion (для задач нам не зашло, но мы его используем, расскажу как именно в другом треде). также мы кроме задач для разработчиков и дизайнеров организовывали отдельно менеджерские задачи кажется, что большие трекеры для этого не слишком подходят. интересно в плане организации командной работы и как корпортал с календарем, отпусками и данными по сотрудникам еще выглядит крутым space ( но они не так давно появились, попробовать не успели еще может вам полезно будет). про него речь выглядит симпатично, но кажется, что у них главная фишечка – перевод прям в чате. но когда это случается, то использую виджеты для понимания ближайшей загрузки разработчиков (что в процессе у всех на разных проектах, какая заполненность девелопа по задачам)еще пробовали для прогнозирования завершения всех оставшихся задач для релиза использовать. единственное чем я пользуюсь только периодически – дашбордом с виджетами так как 90% времени работаю с бордами проектов, то переключаться отдельно к дашборду, чтобы увидеть какой-то виджет лень. еще пользуемся новой фичей yt, которой немного не хватало – база знаний. разные автоматизации по перемещению задач — если готова, то проверяет заполнение затраченного времени на задачу; если готовы все сабтаски, то родительская меняет статус в след за последней дочерней, если потом реджект или новая задача, то родительская возвращается также. автоматизацию добавления шаблона описания задачи типа фича и типа баг — создает сразу отформатированные заголовки, места для ссылок на дизайн или для шагов воспроизведения бага небольшое упрощение описания задач. отчеты для подведения итогов по проекту и подготовке к ретро. немного добавлю про youtrack, что еще мы в нем используем, кроме упомянутого выше:. если есть активные пользователи redmine, то напишите, правда ли с настройками нужно закапываться и просто кнопочкой создать проект ты ничего нормального не сделаешь?. один раз работала с redmine, но совсем немного, поэтому однозначно что-то говорить не буду на первый взгляд показалось, что многое нужно настраивать самим на уровне плагинов, даже какие-то базовые штуки дизайн начала 2000-х тоже не очень радует, но это не критично. также на некоторых проектах мы работаем и с инструментами заказчика так работая год назад в jira, она порадовала редизайном, но все равно спустя года кажется слишком не френдли, по сравнению с youtrack, где все понятнее. в slack у нас отправляются обновления основных статусов по задачам разработки – взята в работу, готова, реджект удобно видеть, так как возможно что-то в этот момент обсудить, запустить сборку или переключить на какие-то фиксы. при сборках все таски, которые в нее попадают, получают значение сборки и переносятся в нужную колонку ручками ничего не нужно таскать, тестировщики всегда знают что уже можно смотреть. в youtrack нравится достаточная кастомизируемость полей, красивый и лаконичный дизайн, удобные интеграции с github, teamcity и slack (и другие через написание воркфлоу). 5 лет назад мы использовали pivotal tracker, который был не очень гибкий, дизайн был довольно устаревший и нам не хватало интеграций тогда мы выбирали между jira и youtrack победил youtrack и до сих пор нас полностью устраивает, а jira кажется слишком перегруженной. какой основной таск-трекер у вас?. теперь обсудим таск-трекеры – для каких целей использовались у нас различные сервисы. ms teams чисто для созвонов или у вас все чаты в нем?. тогда может дадим еще шанс созвонам в slack, так как отображение в статусе иконки это удобно спасибо). внутренний сервис – сильно а почему сторонние не хотите использовать? требования по безопасности?. а как там по интеграциям дополнительным? github / трекеры разные / боты. нам немного не хватало демонстрации конкретного окна, а не всего экрана чтобы не показывать лишнего на митингах вне командыа как по качеству сейчас? летом были заметные лаги, но вроде как из-за нагрузки и они обещали улучшить. что используется для митингов у вас?. также в начале карантина пробовали для созвонов tandem, там были комнаты, и в обед кто угодно мог подключиться и поболтать друг с другом было видно кто уже есть в комнате но в итоге его перестали использовать и завели бота для 5 o’clock tea, создаем zoom ☕️. сейчас ещё в тестовом режиме пробуем дополнение для него - circles оно выводит круги с участниками беседы поверх всех окон, что позволяет видеть собеседника и находиться в браузере при обсуждении не нужно вытягивать окно zoom где-то рядом, чтобы видеть друг друга. его недостаток это периодические тормоза, если работает совместно с xcode или android studioа также то, что статус не синкается со slack (есть костыли в виде плагинов zapier, но статус меняется только у создателя и на все время митинга, которое по умолчанию – час). для митингов мы используем zoom в целом он устраивает и по качеству связи, и по возможностям особенно удобно шарить что-то на демо напрямую с девайса ещё удобно, что если связь лагает, то пропущенный диалог он воспроизведет ускоренно, что помогает не терять нить беседы. совсем не представляю как можно вести рабочие переписки в телеге ладно хоть папки появились и какое-то разделение но все равно нет тредов, что приводит к лишнему обсуждению в личке, чтобы не было пересечений, а также нет пинов для важной информации. ещё успели временно попробовать basecamp 2 но поняли, что этот инструмент нам совсем не подходит и вернулись к slack. единственное что в slack пока что не очень это звонки, с ними часто бывают проблемы и шейринг всего экрана не всегда удобен но вариантов лучше пока не знаю. когда-то давно в команде использовали skype и hipchat, я же застала сразу коммуникации в slack и мне он кажется очень удобным. а что используется у вас в команде для рабочих переписок?. начнём с инструментов для коммуникации в команде 👥. сегодня поговорим про инструменты, которые мы использовали когда-то и которые используем сейчас. получилось довольно много, ну да ладно). тогда в начале 2018 мой руководитель предложил мне плотнее посмотреть в сторону менеджмента, посоветовал книжек и постепенно стал вводить в эту тему в середине 2018 я взяла свой первый проект в качестве менеджера и с тех пор развиваюсь на этой позиции. вот стартовый твит той недели:. у нас нет продакта для заказной разработки (я проджект) но 90% взаимодействия со стороной заказчика – это работа с продакт оунером с обсуждением фичеще у нас есть собственные продукты, которые развивались продактом. расскажу про это в четверг, когда буду писать про новые проекты. я написала тестовое нашей компании на ios-разработчика, этот же проект сдала в магистратуре, как курсовую по мобильной разработке, и на этом моя карьера разработчика закончилась. потом в какой-то момент я поняла, что тестировать и писать задачи для разработчиков мне нравится больше, чем писать код. некоторое время параллельно с тестированием занималась aso продвижением наших собственных продуктов внимательно следила за работой нашего продакта и иногда помогала описывать новые фичи на спринт. в универе темой диплома стала автоматизация тестирования мобильных приложений закончила бакалавриат, поступила в магистратуру и начала проходить курсы geekbrains по разработке мобильных приложений курсы мне не очень зашли, так что я какое-то время занималась самообразованием. тестировать мне очень понравилось так понравилось, что вступила в тогда более ламповый, чем сейчас, проект vk testers, где несколько лет тестировала новые продукты vk в свободное время. спустя месяц стажировки в умной тыкве мне сделали оффер, который я приняла и была очень рада своей первой работе в it тогда мы обусловились, что в перспективе я подучу swift и перейду в разработку (это был 2016). выдумывать практику не хотелось, поэтому напросилась на реальную в cleverpumpkin, где работала сестра условием было, что я не буду мешать разработчикам и буду тестировать приложения. в 2013 я поступила в итмо на информационные системы и технологии и думала, что стану потрясающим разработчиком, пока однажды на 3 курсе нас не попросили пройти рабочую практику в компаниях. но после переезда в питер, я забросила анимацию и программирование в мою жизнь вернулось только потом, когда я перевелась в другой лицей, где этому уделялось много внимания. вместо секции по программированию я записалась в секцию анимации в macromedia flash и даже выиграла международный конкурс с мультиком в категории до 12 лет тогда я думала, что стану аниматором. мое знакомство с разработкой началось в детстве во дворце детского творчества уфы в секции по basic которую, к сожалению, из-за непопулярности закрыли через пару месяцев. расскажу немного о своём пути, который меня привёл к текущему состоянию. надеюсь, что эта неделя будет интересна и возможно полезна 🤏если есть какие-то темы, которые интересны в заказной разработке – пишите. расписание на неделю:пн – вводный деньвт – инструменты которые используем в работеср – процессы и любимые задачичт – новые проектыпт – наши собственные продуктысб, вс – хобби, отдых и стресс. мы занимается разработкой мобильных приложений на заказ с 2011 года за это время у нас было много крутых проектов, к которым последние 4,5 года причастна и я в разных ролях об этом расскажу сегодня на небольшой вводной про меня. всем привет! на этой неделе с вами я – лада ларкина , менеджер проектов. сегодня стартанул новый андерхуд – на этот раз без рамок какой-то одной профессии!. на входе у них нестандартный разъём (не usb), угловые кабели они стали с ним выпускать чуть позженоутбук в случае подобной работы не всегда удобен имхо нужен большой экран для отображения всех этих аудиодорожек (см интерфейс аблетона например) если в студии пишешь - тем более. спасибо за компанию! передаю микрофон следующему ораторуразвития всем профессионального и личногоps если что-то из этой недели вам было интересно, полезно или просто по фану - ставьте класс этому посту :). разъём сверху огромен и в домашних условиях упирается во всё из-за этого кабель быстро снашивается: трётся об монитор, клавиатуру etc) а если подвинуть ближе, то часть висит в воздухе, что также неудобно в следующих моделях домашней линейки разъём перенесли на правую панель. продуктовый кейс от лица клиента пользуюсь такой штукой, которая при манупулировании руками позволяет создавать звуки/ритмы и работает в связке с любым музыкальным софтом (aka контроллер/семплер) главные функции выполняет отлично но как же бомбит от расположения кабеля. классический пример быстрого прототипирования: как создать и протестировать прототип google glass за 1 день в ход пошли вешалка, резинки для волос, палочки для еды. конструктивная конфронтация: как решать конфликты по схемам. один из верных способов найти инсайды для роста — выйти на передовую и общаться с клиентами напрямую как часто это делаете?. сегодня обнаружили одну из причин, по которой клиент отменил бронь, сам того не желая(цвет кнопки «да»)ой. о том, как выстраивали процессы удалённой работы. количественно: через nps + оценку путешествия (функционал на платформе) + логи команды, работающей с клиентамизвоним в случаях, когда нужно узнать причину той или иной оценки. заболевших принципами роста икс 3. * в трэвеле в 2020-м. вчера наш коллега и один из основателей впервые за долгое время посетил оффлайн it-митап в красной полянену мы немного позавидовали, а он принёс кучу инсайтов теперь готовимся к росту икс 3. видели профстандарт: 06012 менеджер продуктов в области информационных технологий? совсем недавно узнал про этот документ, утверждённый в 2014 году необходимых умений: убеждать собеседника, ставить задачиу вас так в трудовой книжке записано?. (кол-во броней * среднее кол-во клиентов в брони - недовольные клиенты ) * длительность тура. наша noh star metric - количество счастливых дней в путешествии сформулированная именно так, она позволяет все команде быть ориентированной на главную ценность для пользователся и каждому из коллег быть немного продактомподелитесь, может у вас тоже своя, кастомная nsm?. эндиэй эндиэевич не позволяет показать в другом масштабе посыл как раз-таки об этом — давайте меряться cjm’ами и количеством стикеров. в колонках: цикл взаимодействия с продуктом (выбор, принятие решения, сравнение, заказ, подготовка, сам тур, возвращение, впечатления)в строках: характеристики пользователя в каждом из циклов (действия, ожидания, триггеры, барьеры, эмоции, акторы влияющие на решения etc. выкатили mvp приложения решаем проблему отсутствия оперативной связи между экспертами в туре и клиентами c большой земли)началось с того, что мы пытались как-то ускорить ответ эксперта на заявку, в процессе чего внезапно узнали, что они постоянно в горах, джунглях, лесах etc. cjm - сущность динамическая, те не сделал и забылсейчас у нас она выглядит таксвои покажете?. крутое отличие от российских акселераторов — открытые mentors office hours, когда можно букить и проводить встречи с менторами каждый день планируем использовать возможность на максимум :). с менторами тоже повезло среди них дэн, который запускал продукты в microsoft и объездил 160+ стран!, поэтому он мощнейше нам помогает инсайтами как с точки зрения продукта, так и глубоко разбираясь в теме путешествий. сам по себе тот факт, что мы залетели на 500staups может намекать на то, что крест на трэвеле ставить рановато :) впереди 4 недели хардкорного менторства с заданиями список затрагиваемых тем прилагаю. сегодня вместе сео ольгой бортниковой поговорим о первых впечатлениях от прохождения программы акселерации 500staups georgia, куда совсем недавно пригласили программа стартовала несколько дней назад. вспомнился тест на непредвзятость10 вопросов вам нужно определить границы оценки, чтобы обеспечить 90% вероятности того, что правильный ответ будет в диапазоненашёл такой вариант, но вроде был и поудобнее:. по оценке известного агрегатора, на сегодня индекс активности путешественников по россии = 8,8 такое же значение было и в 1012020 праздники скоро, но и просадка 2-й волны видна ссылке можно приблизить, потыкать на некоторые пики, узнать новости. небольшой тест на оценку рандомного показателя как думаете, каков сегодня показатель активности российских путешественников внутри страны? 10max, просьба без гугла за границу сегодня индекс=2учитывает историю брони авиабилетов, прогноз на 2020 год без пандемии и текущий спрос. а какая сфера деятельно компании, интересно?. неистово плюсую несколько таких случаев вижу. делали в airbnb в 2020:1 фокус на локальный рынок бронирований2 фокус на внутренний туризм3 сокращение штата и бюджетаваш бизнес (или компания, в которой вы работаете) столкнулась с сокращениями в 2020?. со вчерашнего продуктового груминга:*обсуждаем mvp новой фичи*cto: - ребята, всё, что можно сделать руками, делаем рукамипродакт: - прямо девиз дзюбы какой-то. противостояние трэвела и пандемии: а вот тут мы рассказывали, о том, как пережили 1-ую волну и почему из всего этого родился новый продукт beguide (образовательная платформа для трэвел-экспертов). на этой неделе, например, проверяем гипотезу ценности направления индивидуальных туров (чем меньше размер группы путешественников - тем ниже риски и барьеры) далее планируем проработать составление необычных маршрутов на заказ, без гида. каждая неделя в - новый вызов для команды в целом и каждого сотрудника по отдельности тем более это вызов в текущей непростой ситуации, которой подверглась трэвел-индустрия каждый фокусируется на одном ключевом результате за неделю. фраза из недавнего кастдева о причине бронирования туров на 2021 год (не в россии): не могу вторые майские праздники подряд провести дома а вы говорите ковидкстати, завтра о нём и поговоримps всем спасибо за этот интро-день. пнд - день груминга продукта и разработки в представьте: разработка может взять ещё одну задачу в спринт команда оценила задачи по всем количественным методикам, набрана одинаковая сумма баллов вплоть до сотой доли решение за вами что берём?. знакомимся ваш голос важен. а я занимаюсь тем, чтобы этот мэтч происходил происходил гладко и радостно и чтобы после возвращения этот опыт захотелось бы повторить :). мы в помогаем гидам и путешественникам найти друг-друга, в итоге случается мэтч: авторский тур по необычным местам и маршрутам. это самая интересная часть, расскажем. всем привет, на связи сергей козырев! эту неделю буду показывать продуктовые будни в travel-стартапе. итого ~20 сессий, доступных в онлайн и в записи, много общения со спикерами и экспертами, выверенный баланс пользы и весельястарт 23 ноября, билеты и расписание по ссылке. вторая неделя – про техлидство:- как продать руководителю рефакторинг- как внедрить и поддерживать метрики здоровья проекта- как держать техдолг под контролеми многое другое, что должен уметь крутой техлид. на первой неделе будут сессии про:- то, как растить сотрудников, и нужно ли это делать- делегирование как инструмент роста- метрики объективной оценки команды- плюсы, минусы и подводные камни performance review. #реклама4-ый сезон podlodka teamlead crew уже в пути!старт 23 ноября, традиционно в формате двухнедельного интенсива темы недель – рост и оценка сотрудников и как быть крутым техлидом подробности – в треде!. на этом моя неделя заканчивается если вам понравилось, то поставьте лайк этому посту). 8 недавно мой коллега прислал мне ролик, чтобы меня подбодрить поэтому если у вас сейчас плохое настроение, вы считаете, что все потеряно и нет пути назад, то посмотрите его. 7 изменений в компании стало сильно много, поэтому процесс адаптации в компании не прекращается никогда это значит, что мы все на испытательном сроке к сожалению, расслабляться на работе нельзя, жизнь на автопилоте становиться невозможной :(. 6 крайне важно понимать как вам восстанавливаться и где ваши места силы мне помогает сон, плавание, помощь людям и задачи, где я создаю что-то гениальное (как сам считаю). 5 вас раздражает то поведение, которое часто свойственно вам самим я заметил, что меня расстраивает постоянные новые задачи грустно оказалось и моим подчиненных, которым я часто добавляю новых задач). 4 большинство интересных решений находятся не в россии я был на зарубежных конференциях по e-commerce/недвижимости все самое классное было на вечеринках у меня сложилось ощущение, что к нам ближе страны восточной европы и юго-восточной азии. 3 хороший продукт не сделаешь в одиночку, поэтому важна команда регулярно вспоминаю теорию команды по белбину, групповую динамику и идеального руководителя адизеса. 2 сильно помогает, если вы для решения проблемы используете подходы, работающие в кардинально других местах например, можно рассматривать свою жизнь как продукт, оценивая с помощью пирамиды метрик или как бы поступил facebook/bmw/tesla на месте нашей компании. какие инсайты были у меня:1 справедливости, правды нет для продакта важна договоренность людей, поэтому и появилась история про product/market fit, product/channel fit. инсайт произойдет за минуту, но для этого внутри вашего мозга должны сойтись нейронные связи и внешние стимулы поэтому любопытство - лучший способ подготовки к инсайтам будьте любопытным к клиентам, коллегам, что происходит с конкурентами и смежными продуктами. воскресеньечем старше вы становитесь тем все меньше событий влияют на ваше поведение и жизнь в первую очередь, продолжают влиять инсайты (озарение, ага-эффект) про эксперимента шульца можно почитать в книге андрея курпатова красная таблетка. путь к cpo сравним с концепцией путешествие героя воглера важно понимать кто ваши враги, кто наставник и какие серьезные испытания вам предстоит испытать герой должен идти сам фродо должен уничтожить кольцо самостоятельно. топовые позиции требуют высокой выносливости, страт мышления, создание команд, которые быстро выполняют твои поручения, холодного разума и умения управлять эмоциями за каждые +50% к зарплате вам потребуется +1 час работы в день важно понять, где остановиться слушайте себя. андрей дороничев из google хорошо написал про ответственность на каждой позиции в том числе за что отвечает директор. если вы чувствуете, что подходите - посмотрите опубликованные вакансии cpo например, или. самым большим откровением для меня было то, что для попадания на топовые позиции необходимо нарушать правила людей с доходом 1 млн рублей в месяц всего 11 тыс в россии топовых позиций мало топы придумывают правила, которые в том числе защищают свои позиции от поползновений. пфеффер рекомендуют следующие личные качества для топовых позиций:1 амбиции2 энергия3 фокус4 уверенность5 устойчивость к конфликтам6 самопознание7 чуткость к проблемам другихпочитайте про них и сделайте самооценку насколько вы готовы?. 4 важно брать и любить власть многие скажут, что политика это грязно и я не буду ей заниматься политика - система принципов как принимаются решения в компании для высоких позиций это нелинейное, нужно разбираться кроме того, вам необходимы определенные личные качества. 3 идти от возможностей вы постоянно челенджите свое отношение к миру, свои знания и результаты критика становиться для вас возможностью показать другой результат вы видеть возможности на пересечении целей компании, руководителя, клиента и интересов команды каждый день. 2 вы знаете свои собственные цели вы понимаете какой доход вы хотите, где будете жить, кто и в чем вы как профессионал, какие у вас амбиции также какие у вас сильные стороны, которые вы используете а также про свои слабые стороны, которые прикроет ваша команда. что позволяет head of product занять позицию cpo?1 вы мыслите как топ-менеджер вы знаете цели и драйверы роста всей компании, вы знаете как влиять на цели других подразделений в компания, где нет cpo, сео выполняет эту роль, посмотрите что он делает и займитесь тем же. субботав компании циан я был на позиции head of product потихоньку у меня росла зона ответственности, добавлялись направления и продукты однажды я пришел к директору и сказал: максим, можно я буду cpo на что он ответил - кем угодно, хоть золотой рыбкой я стал cpo постфактум. дальше главное не забывать, что требования к продактам растут каждый день поэтому важно регулярно делать оценку 360 компетенций хороший список навыков можно посмотреть на правда он уже устарел :(. для роста сотрудника подойдет модель изменений easierenvisioning — создаем ипрactivating — отправляем на курсы, даем задачиsuppoing — поддерживаем/советуемimplementing — внедряем знания в практикуensuring – обеспечиваем ресурсамиrecognizing — празднуем успех, хвалим :). 5 переход из junior в middle продакта обычно происходит при достижении серьезного результата по изменению/созданию продукта это дипломная работа всего обучения. 4 важно, чтобы материал на курсе закреплялся практической деятельностью на работе проходят custdev - пусть идет общаться с клиентами изучают продуктовую аналитику - метрики продукта ждут внимания. 3 параллельно отправить курсы для продактов сводные всех курсов можно посмотреть по ссылке:. 2 начинать нужно с небольших продуктовых задач, раскрывая всю сложность продуктовой работы рекомендую прочитать книгу юб гиппенрейтер общаться с ребенком как а также статьи про уровни рабочей зрелости. это мечта любого руководителя что же делать, если у вас junior или проджект как из него вырастить хорошего продакта?1 на входе должен быть проактивный, с горящими глазами, любопытный и ответственный сотрудник другой уйдет при первых сложности, захочет спокойную работу. пятницаоднажды к нам на позицию проджекта пришла девушка через полгода стала делать небольшие продуктовые задачки потом освободилось места продакта дальше была head of product и ушла в другую компанию стоит ли вам говорить, что сейчас она cpo, а по факту выполняет роль сео. рекомендую посмотреть выступлении дмитрия безуглого на producamp 2019 про стратегию. а в целом продуктовая стратегия это часть большой истории, которая необходимо для всей команды. а еще стратегия показывает короткий путь к цели, позволяя продакту легально использовать подход ильи красинского fff (focus f*ucking focus) для выбора что нужно сделать продакт без стратегии распыляется и хватается за все интересное - прям как ребенок в магазине игрушек. по сути стратегия - это карта, которая отвечает на многие вопросы а у карты есть свойство устаревать актуальность карты - залог эффективности компании поэтому стратегическую сессию проводят уже не раз в год, а во многих компаниях минимум раз в полгода, а то и каждый квартал. и вот из этого можно составлять дорожную карту для обсуждения, готовить презентацию для стратегической сессии сама сессия - подготовленное обсуждение что вы делаете и какой будет результат для бизнеса. с этого момента и начинается подготовка к стратегической сессии нужно предложить план с помощью как стратегических изменений в продукте/процессах вы сможете добиться цели для этого нужно собрать план инициатив и провести скоринг (например, rice). для коммерческой организации основной целью является выручка (прибыль), ее обычно спускают сверху акционеры или генеральный директор а вот декомпозицию на продуктовые метрики (цели) делают руководители подразделений это отправная точка для подготовки стратегического плана. vision поможет описать product vision canvas миссия компании рождается в обсуждении с руководителями компании помню однажды 14 февраля мы горячо спорили про миссию и ценности компании миссию утвердили и даже нарисовали на стенах офиса. все начинается с видения видение — представление во что превратиться наш продукт миссия — зачем компания существует и что она хочет достичь цели — контрольные точки с показателямизадачи — каким образом будут достигнуты целистратегия — путь (план) по достижению целей. многие считают, что стратегия автоматом рождается после стратегической сессии хочу разочаровать) у стратсессии две задачи: синхронизировать команду и принять поставленные цели а вот стратегию нужно готовить заранее как полноценный продукт давайте разбираться. четвергналичие продуктовой стратегии сравнимо с обладанием спортивной машины или заветной сумки в ней видется спасение и ответы на все вопросы вот если бы у меня была она, - мечтает продакт какая у нас стратегия, что мы будем делать в следующем году - спрашивает команда. работа в корпорации для продакта - школа жизни прям как армия для мужчины) и опасная - можно выгореть после неё точно решиться вопрос с ответственностью, появиться системность, можно договориться со всеми и понимания чего хочешь и чего точно не хочешь ;-). у корпораций есть свои законы и правила понимая их, становится сильно проще адаптироваться перед выходом на работу в корпорацию можно читать книги, например, пфеффер «власть» и адизес «жизненный цикл корпораций», джек уэлч “мои годы в ge”, друкера и минцберга по менеджменту. к собственному провалу ведёт такое позиционирование: я умнее чем команда, руководитель или клиент не выполнение целей руководителя и/или бизнеса консервативное или слишком рисковое поведение дисбаланс качество-цена-срок низкие адаптивность и толерантность к неопределенности. чем выше позиция тем больше требования к сотруднику мне нравится подход вертикального развития очень хорошо требования описаны в методичке дао лидера. отношения, правила, согласования, легаси it, нехватка ресурсов сильно выматывает поэтому важно себя спрашивать на предмет самоощущения как я себя чувствую? мне интересно? какие эмоции у меня от текущей ситуации? что у меня болит? работа в системе может украсть тебя у себя. когда я спросил своего руководителя в сбере на что мне обратить внимание его ответ: твои заказчики должны быть довольны в корпорациях много внутренних заказчиков и важно с ними проводить все тот же customer development, понимать боли и потребности, собирать обратную связь и csi. сегодня мы запустили акцию зелёный день на сбере и в процессе подготовки были случае, когда я мог не делать ряд задач, объясняя большой загрузкой но всегда думал, что я проактивно могу сделать с заделом на будущее отношения в корпорациях - важный капитал. средая пришел в яндекс, когда там было всего 70 сотрудников уже позднее я был в хороших отношениях с руководителями смежных подразделений и вопросы решались придя в сбер, мне пришлось выстраивать отношения, помогать друг другу, идти на встречу и договариваться как в жизни (:. начать нужно с целевой аудитории например, сейчас1 массовая аудитория в тревоге, она не понимает что будет, на что ориентироваться2 самозанятые, предприниматели воодушевлены новыми возможностями3 у кого есть деньги фрустрированы, тк потеряли привычный образ жизни. вторникмой друг андрей жалеет, что в начале 90x годов ему было мало лет а ведь такие были возможности уверен, что текущее время тоже будут вспоминать резкая смена привычек, угроза здоровью и жизни дает возможность создавать продукты на самом острие потребностей клиентов. на сегодня это все завтра я расскажу про возможности для продакта в постковидной эпохе. продакт - человек будущего, он умеет сочетать креативность, системность и ориентацию на результат эти критерии герман греф считает самыми важными. продакт должен не только уметь работать в неопределенности, он должен искать ее джек ма: в компании обсуждении задачи мы находим простые и неамбициозные решения, а также сложные и амбициозные первые я выкидываю в мусорку, в работу берем вторые. поэтому если кто-то из вас ищет работу продакта, то выбирайте отрасли, где высокая степень неопределенности или низкая цифровизация это золотое дно - вас оторвут с руками другой вариант - брать новые технологии и добавлять приставку продакт например, ai-продакт, ar/vr-продакт. сильная продуктовая команда сыграна на нестандартных ситуациях и умеет ориентироваться в ситуации неопределенности бывший морпех теннант, консультирует бизнес как работать в таких ситуациях причина успеха военных: многократные учения в неизвестности. хороший продакт-менеджер не ждет готового, 100% верного решения, относится к решениям как к гипотезам это сильно меняет его поведение и уменьшает стресс как отличить хорошего продакта от того, кто хорошо заучил материал на курсах? у первого сильно развита интуиция и чуйка ;-). есть концепция run, change, disrupt она напрямую связана с неопределенностью, см картинку сотрудник привык работать в высокой степени прогнозирования. понедельникоднажды ко мне пришел сотрудник, который полгода назад перешел на позицию продакта с проджекта я устал от этой работы, я не тяну можно я вернусь обратно, займусь тем, что понятно и ясноключевое отличие продакт-менеджера от проджекта - работа с неопределенностью. привет, могу только рассказать про сайты мобильным приложением не занимался). сайты. программа на неделю1 про неопределенность в продуктовой работе2 возможности covid-19 для продакта3 особенности работы в корпорациях4 продуктовая стратегия5 как растить продактов6 cpo - кто это такой и что от него ждут7 лайфхаки, истории из жизни, рекомендации. всем привет меня зовут алексей авдей на этой неделе буду я с вами. ну, всем пока! :-d. возможно, не все смотрели топовейшую презентацию gitlab с ycombinator2015 если не смотрели — обязательно посмотрите!как же круто, когда можешь за две минуты объяснить, в чём фишка и почему всё получится кстати, у них и правда всё получилось. пока нет есть годные ссылки? :). кажется, вот они:. такие декомпозиции реальности воспринимаются очень хорошо! они показательны, просты для запоминания и к ним очень сложно придраться разумеется, реальность намного сложнее и в ней намного больше оттенков, которые придётся учесть, но мы же сейчас про презентации. а однажды я был на презентации продукта, создатели которого говорили буквально такое: важна лишь техническая экспертиза и понимание, что делать, и мы хорошо умеем и то, и другое а вот наши неразумные конкуренты почему-то специализируются только в одной из этих частей. второй пример — тот самый radical candor, который в русской традиции обыкновенно переводится как радикальная откровенность там измерения другие, но их тоже два: caring personally и challenging directly читать можно прямо на. вот вам первый пример, называется ситуативный менеджмент есть два (два!) ортогональных типа поведения менеджера: директивный и поддерживающий сотрудники в зависимости от стадии своего развития нуждаются в определённой доле того и другого читать тут:. вот, например, дихотомии юнга вещь хорошая, но кто их упомнит? их слишком много если измерение одно, то в этом не достаёт новизны: и так понятно, что делать надо хорошо, а не плохо а вот два измерения — это прям оптимум!. чтобы ваш рассказ казался наукообразным, а сами вы выглядели экспертом, придумайте для объяснения два каких-нибудь ортогональных измерения (всенепременно два!) и классифицируйте сущности по отношению к этим двум измерениям. ну видишь, всё сложно я продолжаю считать, что людей полезно мотивировать к тому, что они могут делать и достигать большего но при этом важно им не вредить, и за последний год я как раз убедился в том, что навредить можно вполне неиллюзорно пока не знаю, как это совместить. не, по 16 тоже нельзя :-d. ну и хватит на сегодня! суббота скоро! гогого, суббота — огонь! отличной всем субботы! надо готовиться! :-d. другими словами: если уж слишком прижмёт и надо изо всех сил шипать, то какой уж тут коллектив и какая уж тут атмосфера, надо шипать, а потом разберёмся ну так вот: это мнение является ошибочным! и в подтверждение этому — ссылки из предыдущего треда. в русскоязычном сегменте на конференциях для руководителей разработки я несколько чаще встречал позицию, согласно которой достижение результатов и построение атмосферы — противоречащие друг другу виды деятельности. задача менеджера в современном смысле, выражаясь словами классика, — guide a team to achieve results все три части важны, так что люди должны развиваться, не грустить и чувствовать себя коллективом, а дела должны делаться и ещё и в срок. исследование от google: как сделать команду эффективной для достижения эффективности в гугл-специфичном смысле достаточно обеспечить психологическую безопасность, исполнение сроков, ясную структуру команды, ощущение сопричастности и важности работы. gallup q12 repo: оказывается, команды и бизнес-юниты, в которых сотрудники субъективно чувствуют себя хорошо, добиваются лучших бизнес-показателейтак что атмосферу мы улучшаем не просто так, а в том числе и чтобы заработать. на международном уровне команд много, разработчиков много, всего много поэтому менеджмент можно сделать типа точной наукой, с регрессионным анализом и доверительными интервалами поэтому вот вам пара исследований, научно доказывающих, что нормально делай — нормально будет. ясно, что там была и часть про то, что переработки маскируют недостатки в процессах и автоматизации, но это очень скучная часть и мы её пропустим. люди из этих культур, а равно и котички с синдромом отличника будут страдать, пока я развлекаюсь так что, даже если можешь работать по 20 часов в день, хотя бы не выставляй этот факт напоказ, иначе можешь навредить команде. а в некоторых культурах считается неприличным не работать, когда работает начальник, даже если он работает в ночь с праздничной субботы на праздничное воскресенье. правильный ответ — потому что для меня это может быть легко и совершенно экологично, а вот мои коллеги могут расстраиваться от того, что не могут работать столько же, сколько и я. на четвёртый день в своей новой компании (это был понедельник; первый день пришёлся на пятницу) со мной в общей сложности три часа разговаривали на тему почему героизм на работе — это плохо и его нужно избегать. любимое развлечение по пятницам — осознавать, какая чушь казалась очень даже хорошей идеей в понедельник!. ну а если вам хочется побольше наукообразных аргументов (например, потому что обычных недостаточно) в пользу того, что это всё вообще имеет хоть какой-то смысл, почитайте. а google мудро замечает, что hope is not a strategy. самая модная техника для руководителей сейчас называется radical candor, и мы про неё ещё поговорим а пока что посмотрите видосик: если узнаете себя или своих друзей в неправильном квадратике, - вы знаете, что делать!. разработчики, использующие пробелы вместо табуляций, зарабатывают больше имейте в виду!. а netflix придумал, как улучшать здоровье продакшена при помощи ломания продакшена! гиперкомпенсация, не иначе. про okrы здорового человека можно прочитать тут:. для улучшения настроения в команде решительно рекомендую поставить а затем практиковать, практиковать, практиковать! а если хочется улучшать настроение токсично, можно поставить. котикам с синдромом самозванца можно почитать тут не так много ответов, зато это каноничный текст, который помогает понять, что вообще происходит. если вы давно в индустрии и экологичность вашего состояния вызывает подозрения, всенепременно посмотреть доклады вадима макишвили! пользуясь случаем, передаю привет вадиму вадим, ты крутой! раз: два:. в последнем случае вполне может быть правильным смесить фокус на какой-нибудь другой аспект или какой-нибудь другой продукт ведь всем хочется делать важное и заметное!. если этого не происходит — либо мы где-то ошиблись, либо набор гипотез-улучшений не был достаточно полный, либо, в конце концов, мы достигли определённого предела, после которого заметные глазу улучшения получить уже сложно. в конце каждого цикла нужно проверять, что сделанные по новой метрике внедрения сказываются на этих примерах плохие примеры, хотя бы некоторые, исправляются, а хороших становится больше. второй трюк — обратная связь для новой метрики раз в самом начале генерируется набор идей по результатам внимательного изучения продукта, то возникает и набор примеров неудачной работы, которую хочется улучшить, а также примеров удачной работы, которую хочется сохранить. самое забавное — иногда изменения, которые были ухудшающими пару лет назад, сейчас, в изменившейся ситуации, стали улучшениями такое случается регулярно и лишний раз подчёркивает, почему важно все изменения сохранять и иметь возможность воспроизвести. на выходе получается метрика, которая наилучшим возможным образом описывает возможный спектр изменений в продукте основывать дальнейшую аналитику и целеполагание на такой основе — одно удовольствие!. в этом процессе нельзя допустить того, что в машинном обучении называется переобучением, так что лучше эту работу поручать кому-нибудь, кто хорошо разбирается в этом вопросе. и вот с определённой регулярностью все эти изменения запускаются в a/b тестирование по результатам формируется метрика, которая наилучшим образом ловит все эти изменения: ухудшения считает ухудшениями, улучшения — улучшениями. этот набор регулярно обновляется для этого используются все известные науке методы генерации гипотез: наблюдения за конкурентами и продуктами из других областей, глубинные интервью, uxы, коридорные опросы, dsatы, просмотр логов и всё остальное. рассмотрим для примера рекомендации вместе с разумными рекомендациями можно показывать немного случайных, и масштабы ухудшения будут зависеть от количества и степени случайности этих вставок можно показывать рекомендации для других пользователей или поменять цвет текста. для каждого продукта имелся достаточно широкий набор изменений, про которые совершенно точно известно, улучшают или ухудшают они пользовательский опыт такой набор придумать несложно, особенно в части ухудшений. первый трюк — регулярный пересмотр метрики kpi должен являться измеримым выражением представления о том, что такое хороший продукт это представление постоянно уточняется благодаря появлению новой информации, изменениям в поведении пользователей и тд. вообще, kpi — он не для того, чтобы хвалить и наказывать он для того, чтобы понимать, как сделать продукт лучше в моих командах для получения пользы от kpi (а не вреда) использовалась пара важных трюков, о которых и хочу вам рассказать. если вы руководитель продактов, то рекомендую требовать с них прототипов на старте примерно любой разработки, которая требует больше чем несколько дней на реализацию. если вы разработчик и прототипа в начале работы у вас нет — рекомендую начать именно с его создания и проверить о заказчика, что это именно то, что требуется. поэтому всем рекомендую любую продуктовую разработку начинать именно с прототипа чем больше времени вы тратите на прототипирование, тем точнее вы поймёте, что на самом деле получится в итоге и будет ли оно в итоге работать. но особенно классно это работает, когда менеджер всё-таки может программировать тогда он может создать прототип не просто продукта, но будущей архитектуры приложения, заранее найти источники данных, апишки и всё прочее это невероятно упрощает и ускоряет дальнейшую разработку!. лично я никогда не стеснялся делать прототипы при помощи стилуса или банального paintа. интересно, что менеджер, не обладающий навыками разработки, всё равно может создавать прототипы — да хотя бы банально в sketch, я очень полюбил этот метод в sketch можно быстро накликать красивый и вполне себе функциональный интерфейс. это гарантирует вам безопасность и позволяет экономить огромное количество ресурсов представьте себе, что для полноценной реализации некоторой штуки нужно потратить месяцы разработки, а на выходе можно получить, что идея какая-то не летящая и делать надо было по-другому. незаменимы прототипы и при общении с заказчиками и, не побоюсь этого слова, с юристами если вам нужно сделать некоторую функциональность, вы можете буквально руками собрать несколько примеров того, как она будет выглядеть, и проверить эти примеры о лиц, принимающих решения. прототипы невероятно полезны они позволяют проводить uxы и другие качественные испытания и быстро-быстро итерироваться, развивая своё понимание будущего продукта они позволяют достаточно точно уточнить задание на дизайн или разработку. это позволило показать его на uxах живым людям, показать будущей команде разработки, чтобы они поверили в идею и пошли её реализовывать. в другой раз я пытался придумать яндексрепетитор и за пару ночей написал прототипчик на питоне и html, который хорошо работал внутри сети, там были рейтинги и рекомендации, какой-то набор задач и основные элементы функциональности. разумеется, им тогда сильно помог контекст: они в целом понимали, о чём речь, им не хватало важных деталей, чтобы сложилась картинка это тот самый контекст, которого не хватает вам, чтобы понять, что это за дурацкие каракули. однажды я сформулировал продуктовое задание для дизайнера вот в таких вот терминах (разумеется, это нарочито вопиющий пример) после этого произошло чудо: и дизайнер, и разработчики, и руководители внезапно поняли, что я им пытался объяснить на протяжении предыдущих недель!. пример того, как эволюция способов измерения качества определила развитие продукта:. пример продуктового внедрения, которое потребовало проработки и прототипирования:. поэтому в любой задаче начинать необходимо с очень конкретных примеров желаемого результата эти примеры можно носить на ux и исследовать другими способами, затем можно строить прототип для проверки, что необходимые показатели качества достижимы в принципе. а даже если и получится сделать всё, что хочется — будет ли этот результат востребован пользователями?. но выбор этой функции — существенно продуктовый вопрос какие типы взаимодействий мы будем считать удачными? какого типа контент там должен появиться? на каких модельные примерах мы проверим, что модель делает именно то, для чего была создана?. во многом история таких продуктов, как веб-поиск, является историей развития функций полезности чем ближе математическая абстракция к истинной пользовательской ценности, тем лучше работает алгоритм. в процессе обучения любая модель оптимизирует некоторую функцию полезности выбор этой функции полезности — один из ключевых вопросов для продуктов, которые основаны на машинном обучении. конечно, такой ответ никуда не годится и в большинстве случаев означает, что руководитель продукта отказывается думать, а никакой ценности в результате работы не возникнет. второй пример руководитель продукта хочет внедрить ленту рекомендаций на главной странице своего сервиса какие именно элементы там будут показаны? ну, машинное обучение определит!. без ответа на эти вопросы невозможно понять, осуществима ли такая разработка в принципе, будет ли она результативной, принесёт ли необходимый экономический эффект соответственно, непонятно, стоит ли выделять инвестиции :). но ведь алгоритм в любом случае будет иногда ошибаться как эти ошибки будут детектироваться и обрабатываться? на каком уровне они могут находиться, чтобы продукт был жизнеспособен? какого рода логику этому алгоритму придётся реализовывать?. первый пример стартап хочет сделать автоматическое ценообразование для определённого типа товаров и ищет инвестиции под соответствующую разработку почему это важно? потому что специфика такова, что назначать цены вручную в нужных объёмах невозможно. за любым продуктом стоит видение того, каким он может быть для пользователя при идеальном воплощении и понимание, насколько и в каком смысле от этой идеальной картины можно отличаться, чтобы продукт остался продуктом!. вы сами вполне можете нарисовать абстрактную картину по теме; вы можете понять, какой товар релевантен пользовательскому запросу; вы можете распознать потребность, сформулированную голосом поэтому и автоматические методы в этих областях вполне справляются. машинное обучение никогда не решит задачу, которую вы не можете решить сами а даже если и решит — не будет понятно, насколько хорошо это решение и той ли вообще задачи. ошибка случается, когда от искусственного интеллекта хотят, чтобы он решил задачу, которую не может решить естественный интеллект. часто при общении со стартаперами, начинающими продактами и даже опытными разработчиками я вижу, как люди слишком сильно полагаются на умные алгоритмы и машинное обучение. таки наверняка, но зачем? я лучше в медиум напишу. расскажу, но на другой площадке и попозже: всё-таки для продуктового канала это сильно оффтоп). я не работаю в яндексе уже пару месяцев, а из новостей ушёл 7 лет назад :)скажу лишь, что новости — невероятно сложный продукт: почти невозможно добиться ощущения ого, круто, зато очень легко — что-то не то :) при этом продукт очень важный и нужный. в перерывах можно делать что угодно: заниматься спортом, гулять, кушать, смотреть кино или даже спать могу поработать 6-8 часов, потом поспать часок, а потом ещё сделать что-нибудь делать новое классное на свежую голову отлично работает!. для сохранения работоспосоности мне важно не заниматься одним и тем же видом деятельности долгое время, хотя, конечно, зависнуть над кодом на 20+ часов подряд я всё ещё способен поэтому собирать день из разнородных кусочков мне очень нравится. опционально досыпаю лекции и всякие выступления, работу со студентами, инвесторские встречи, ведение продуктовых твиттеров и прочую нерегулярную деятельность :). сейчас я день делю на несколько тематических кусочков, каждый из которых требует нескольких часов работы наиболее распространённые виды: написание кода, изучение документации (она очень объёмна и разнородна), технические дискуссии, рабочие встречи. когда нужно было подумать, что-то изучить, пощупать новые продукты, сформулировать стратегию и вот это вот всё — я делал это только утром, иногда на выходных и очень часто в командировках-отпусках тут важны свежая не нагруженная рутиной голова и фокус. вечером, когда сезон митингов закрыт, можно было устроить тимбилдинг с пиццей и просмотром футбола, сходить в спортзал или продожить писать код. после этого начинался основной рабочий день: разного рода митинги, среди которых и 1х1 с директами, и разные встречи с руководителями, но в основной своей массе встречи были ситуатавными и нерегулярными. затем при необходимости я пару часов программировал сам, пока не просыпались коллеги и не начинались встречи :) для меня было типично пилить прототипы (о которых подробнее поговорим во вторник) или какой-нибудь сложный код про ml. суммарно было вполне ок иметь 30-40 целей на полгода-год работа с целями — это постоянный поиск рисков, разного рода багов и их исправление и то, и другое присутствует постоянно, и это ок. когда я работал руководителем большой команды разработки, я вставал довольно рано и час-два в начале каждого дня тратил на работу с целями цели — это такой инструмент, в котором собраны главные высокоуровневые задачи подразделения. впрочем, моя позиция такова, что с нуля лучше начинать в другой роли: разработчика, аналитика, тестировщика требования в этих ролях более чёткие, а ценный опыт получить они всё равно позволяют превратиться в менеджера при этом вполне можно в будущем. полезно посмотреть и на другие компании тоже например, мне нравятся описания у фейсбука, типа. описания конкретных вакансий лучшим образом отвечают на вопрос, что нужно от кандидата у яндекса есть страничка там есть и описания, и материалы для подготовки. если вы можете чётко ответить на указанные вопросы, а эта польза и это новое качество ценны для команды, преград никаких нетскиллы, тем не менее, нужны, но их набор формализуется при помощи интервью. фундаментальный вопрос для любого нового сотрудника — какую именно пользу своей новой команде он может принести, какое новое качество для неё создать в первую очередь важно именно это, а не опыт и даже не конкретные скиллы. воскресенье, 8 ноября воскресенье — лучший день, чтобы обсудить героизм на работе! почему его нужно предотвращать и как это делать? как геройствовать экологично, если этого всё-таки не избежать?. суббота, 7 ноября модные фреймворки для руководителей и не только. пятница, 6 ноября: что нового я узнал об управлении людьми, когда попал в западную компанию. четверг, 5 ноября четверг объявляется днём добра! тема пока что остаётся секретной и неясной, понятно лишь одно: она будет очень доброй!. среда, 4 ноября kpi и обратная связь. вторник, 3 ноября prototype first. понедельник, 2 ноября умные алгоритмы в продукте. а вот и расписание тем на неделю!. про меня и мою работу отлично рассказывает блог на хабре: мной можно дружить в fb:. 10 лет я работал в яндексе и делал продукты, основанные на машинном обучении — яндексновости, интерактивные элементы поиска, поисковые подсказки, яндексклавиатуру и ещё кучу всего недавно уволился и отправился покорять мир :) в свободное время инвестирую в стартапы. привет, друзья! меня зовут лёша шаграев, на этой неделе я с вами в этом отличном твиттере! :). на этом всё спасибо за внимание если ко мне остались вопросы, можно задать их сейчас или написать мне в твиттер. 7 полезные телегам каналы. 6 про особенности голосовых сценариев. 5 как выкатить изменение на миллионы dau и не вызвать бунт. unmoderated remote usability testing. количественные проверки до начала разработки. 4 о проверке гипотез. помощь друзей. нестандартное применение уточки. про идеи на рисунках. про мини пресс-релиз. 3 чем полезна визуализация всего. если ничего не помогает. про фильмы и книги. технологии. разговоры с классными людьми. исследования конкурентов. аналитика. интервью. 2 поиск идеи в творческом кризисе. 1 как я попала в яндекс. темы этой недели:. делитесь своими любимыми каналами 👀. новый канал про релизы в поиске, не успеваю следить за тем, что выкатывается, так что хоть так узнаю 🤦‍♀️. руководитель продукта юлы делится опытом и обьясняет, почему менеджеры не нужны (нужны но не все). наверное, все знают про этот канал, ещё раз приложу очень много опыта от интересных людей. интересный канал про ux. руководитель группы из яндекса рассказывает про интересные кейсы управления людьми посты редкие, но очень классные. мне очень нравится название, но и контент тоже прикольный мне особенно понравится контент про построение сообществ. тут всякие интересные новости из мира it vk и tiktok меряются аудиторией, новые фичи телеграмм и все в таком духе. канал ведёт аня булдакова раньше, она работала в яндексе, в том же отделе, что-то я сейчас в фейсбуке много интересных постов из ее опыта + интервью. сегодня расскажу про телеграмм каналы которые читаю:. интересно, а расскажи, что и почему ты бы хотел отключить?. если тред заинтриговал и интересно самому попробовать сделать голосовой сценарий, можно использовать платформу диалоги. в англоязычном сегменте, с этим несколько лучше в voice ux у них есть конференции и митапы, которые этому посвящены недавно, в твиттере видела, что даже появляются книги, которые этому посвящены. в русскоязычном сегменте я не знаю способа лучше, чем общаться с теми, кто уже давно занимается голосовыми сценариями и много чего классного сделал у алисы очень классная команда, я многому научилась у них. где брать экспертизуочень многое можно понять самому, если пользоваться голосовыми ассистентами и изучать сценарии других пользователей из источников инфы помимо своих исследований всегда есть эксперты и их ценный опыт. например, про скрол новостей алиса говорит в начале это звучит как-то так: “в эфире новости, если попадутся неинтересные, смело пропускайте” - и дальше зачитывает сам выпуск а в интерфейсе приложения яндекс возможности просто перечисляются в виде подсказок внизу. чтобы пользователи понимали это, мы рассказываем им об этом либо очень коротко в начале сценария, либо более подробно после того, как ответили на основной вопрос человека. мы нашли такое решение у новостного сценария в яндекс станции почти такие же фичи как у этого сайта можно переключаться между разделами (игры, наука, политика, и тд), можно скролить ответ словами “алиса, еще” или “алиса, дальше”, можно настроить ответ. с голосовыми сценариями все менее прозрачно, потому что непонятно есть ли у человека интерфейс если есть, каким-то образом отображаем возможности и все ок а если нет? очень интересный вопрос, который можно исследовать и исследовать. если вы видите интерфейс приложения или сайта вы сразу понимаете что здесь можно сделать например, когда вы заходите в любую новостную ленту, вы сразу понимаете, что можно переключаться между разделами, скроллить чтобы увидеть больше, кликать на новости, чтобы узнать подробности. когда мы разобрались с #voicefirst и придумали диалог появляется новый вопроскак пользователям узнать обо всех возможностях, доступных в этом диалоге?. вывод: для построения диалога в сценарии очень важно определить, в каком контексте человек может пользоваться сценарием и именно от этого отталкиваться в выборе шагов и длин ответов. возьмем другую ситуацию человеку скучно и он начинает беседу с алисой например,“почему коты мурчат?” здесь наоборот, можно ему побольше рассказать о мурлыканье и даже предложить какую-то новую тему, когда эта исчерпана о котиках можно рассказать, что такое молочный шаг. поэтому для озвучки не допустимы долгие шутки чем скорее человек узнает о камере - тем лучше для него. если рассмотреть простой голосовой сценарий без взаимодействия - озвучка камер в навигаторе для пользователя очень важно вовремя узнавать о камерах и не отвлекаться от дороги в этот момент. вторая интересная штука эта длина ответа и построение диалогав зависимости от ситуации и контекста, в котором находится пользователь, допустима он ожидает абсолютно разных диалогов и разных по длине ответов. у пользователей мини-станций вообще нет возможности что-то увидеть это значит, чтобы люди могли пользоваться сценарием в любом устройстве или приложении, нужно в первую очередь продумать базовую версию, которой можно пользоваться только голосом привет, новый лозунг #voicefirst. у пользователей навигатора и автоголовы экраны тоже есть, но они не могут уделять им внимание - нужно смотреть на дорогу и в зеркала пользователи яндексстанций могут смотреть на подключенный телевизор, а могут отвернуться и заниматься своими делами. алиса поселилась даже в автоголове из этого следует, что пользователи с разными приложениями и устройствами находятся в очень разных условиях те, кто пользуется приложением яндекс могут концентрироваться на экране или переходить по ссылкам. сегодня поговорим про особенности голосовых сценариевглавная особенность очень разные приложения, а значит и ситуации использованияголосовые помощники могут встречаться в куче разных поверхностей в смартфонах, в умных колонках, в отдельных приложениях. всем хорошей пятницы!. жестковато ༼ つ ◕_◕ ༽つ take my energy ༼ つ ◕_◕ ༽つ. из минусов главное - это время если период привыкания длится неделю, то три последовательных итерации экспериментов с доработками могут растянуться на месяцы а на целиковое внедрение может уйти например пол года все цифры в примере вымышлены, но оценки по времени справедливы. плюс декомпозиции и аб - никогда не получится бунт неудачные эксперименты затрагивают не всю аудиторию и ограничены во времени самое худшее, что с может случиться - на какое-то время пользователями получат не самую классную экспериментальную выборку, но это не повод для бунта. на самом деле ни одна из проверок, которые мы проводим походу внедрения не является абсолютной панацеей какие-то выводы можно сделать только из комбинации показаний. если проранжировать все выборки из такого эксперимента на толоке с вопросом “какой вариант вам больше нравится?”, результат может получиться как совпадающим с онлайн-экспериментом, так и противоположным. на второй-третий шаг все должно получиться решение, которое можно выкатить если так - переходим на следующий шаг декомпозиции если не получилось годное решение за 2-3 итерации, стоит остановиться и подумать, какой тут может быть альтернативный план. рискованные моменты для примера- расстояние между результатами слишком большое, людям не видно нужных ответов- расстояние слишком маленькое - результаты слиплись, сложно ориентироваться- разделитель светлый и незаметный - сложно ориентироваться- разделитель яркий - отвлекает. не стоит паниковать, спокойно садимся и разбираем, почему так могло произойти генерим гипотезы как починить и запускаем новую итерацию. надо быть готовым, что с первого раза для заметного изменения что-то обязательно пойдет не так какая-то важная метрика покрасится в плохую сторону например, у леши в статье сильно выросло красное время генерации ответа оно сразу помечено красным в интерфейсе. при таком большом количестве выборок и метрик есть шанс, что мы случайно получим хотя бы одну хорошую выборку, даже на значимости 99 можно сразу запустить 2й такой же аб или после в результате получится 1-2 приличные выборки. итого, у нас есть десяток выборок и овер миллион метрик конкретно в поиске метрик порядка 8к изменения чего-угодно, что видят все, очень сильно влияют на эти метрики запускаем эксперимент и ждем пока пользователи привыкнут и поймут как этим пользоваться. о том как проводятся аб в яндексе и какие есть инструменты было несколько рассказов последний, который я видела был от разработчика интерфейсов леши хохулина. вопросы про размеры выборок и сроки опустим важно понимать, что если изменение сильное, то пользователям понадобится какое-то время, чтобы привыкнуть чем сильнее изменение тем больше времени разделитель - это очень сильное изменение. я обычно выбираю только те варианты, которые готова увидеть в проде если заранее понятно, что все будет сложно, то еще пару вариантов для исследований на тему разделителей у меня к сожалению не осталось скриншотов яндекса, но есть пример из гугла там было нечто похожее. 3 после того как декомпозировали приступаем к первому шагу составим схему эксперимента надо понять какие параметры больше всего влияют на пользовательские метрики для разделителя это высота, цвет и количество воздуха между ним и текстом результата составляем комбинации. + у разделителей есть и другие дополнительные профиты, они позволяют внедрить еще более классные представления результатов. без разделителей блок будет прилипать к предыдущему элементу и выглядеть его частью, а если разделители будут только возле него, то людям придется держать в голове слишком много параметров для ориентации на выдаче. 2 когда определились зачем нужно декомпозировать задачу на более мелкие например, чтобы внедрить блок “также спрашивают”, первым этапом лучше внедрить разделители между всеми элементами. пример ранжируемый блок “так же спрашивают” нужен, чтобы пользователи могли получить дополнительную информацию связанную с темой запроса, не уходя с текущей страницы выдачи это помогает им лучше и быстрее решить свою задачу в целом. так как же катить изменения, чтобы они воспринимались естественно?1 нужно проверить известен ли ответ на главный вопрос зачем если он известен, можно продолжать, если нет - возвращаемся в тред про продумывание идей и валидацию гипотез. изменилась шапка и ее положение, ссылки на сервисы яндекса, ссылки сайтов, появились логические разделители между ссылками, изменилось исправление опечаток и это в самом простом примере, где нет никаких богатых ответов небольшими итерациями продукт меняется очень сильно. подумайте, что изменилось в поиске за 2 года? в любом, например в яндексе на память - практически ничего, как на деле смотрите сами. посмотрите, например какие варианты шапок google могут видеть разные пользователи. на какой продукт не посмотри, яндекс, вконтакте, google, airbnb - можно заметить, что пользователи видят их неодинаково из-за множества запущенных экспериментов эксперименты итеративны и не так сильно аффектят пользователей. сложность: чем больше изменение и чем больше людей оно затрагивает, тем больше вероятность, что что-то пойдет не так поэтому самый простой способ выкатить фичу и не разрушить чей-то жизненный сценарий - декомпозировать задумку и экспериментировать с маленькими кусочками отдельно. чем больше у нас людей, тем важнее итеративностьпривет, та самая булшитная картинка со всех курсов). как выкатить изменение на миллионы dau и не вызвать бунтответ заключается в 2 словах: итеративность и эксперименты когда у нас миллионы dau важно понимать, что все пользователи уникальны и очень инертны очень сложно найти конфигурацию в продукте, которая подойдет всем. вот тут сказано, что есть даже какие-то встречные механизмы проверок. из открытых данных вижу, что в 2016 году было 270к толокеров сейчас больше чтобы следить за добросовестностью можно использовать ханипнты и отслеживать, например, время выполнения сценария тех, кто неправильно выполняет ханипоты и решает задания слишком быстро - не учитываем. не не, не реклама я действительно очень много пользуюсь этим сервисом, потому что он классный и я не знаю хороших альтернатив+ вроде, мы почти нигде не рассказывали про количественные ux, например я была в шоке, когда узнала, что так можно). я согласна, что толока не серебряная пуля как и любой другой способ проверки гипотез сорри, если грубо вышло только попросила альтернативу для конкретного кейса) вдруг она есть, а я не знаю тот же взляд например, наверное, может собрать ца по-лучше, но на опросы. конечно, если у вас есть более подходящий способ, где вы можете найти достаточное количество людей проходящих под профиль аудитории для подобного исследования, почему бы его не использовать можешь привести пример альтернативы для примера доставки? это было бы очень полезно. не согласна если боитесь накруток, можно прикрутить ханипнты (задания-обманки) и ещё какие-нибудь эвристики для отсеивания тех, кому лишь бы заработать денег повторюсь, там очень разные люди из разных социальных слоев. там очень разнообразные люди, геймеры тоже могут быть за этим и нужен контрольный вопрос я думаю толока совсем не подойдёт, только если речь про какой-то очень лакшери продукт для богатых пользователей или для людей без интернета. логика для сравнения картинок и визуальных сценариев на толоке применима и для голоса, нет особой разницы какие объекты сравнивать. для голоса все точно так же прототип может быть или человеком с ограниченным набором фраз, или предписанные с помощью speech kit фразы, между которыми переключается человек в speеch kit можно поиграть тут. чтобы отфильтровать аудиторию можно добавлять к заданиям контрольный вопрос, ответ на который известен только ца и учитывать только результаты ответивших верно да, может вы не уберете всех неподходящих людей, но данные станут заметно чище. когда работаешь с толокой важно не запутаться с ца среди толокеров не все могут оказаться подходящими например, если речь про продукт для геймеров, то вряд ли вам подойдут толокерши-мамочки. умными словами такой способ называется unmoderated remote usability testing из материалов мне понравилась вот эту статья  там даже рекомендуются какие-то сервисы, если не хочется пользоваться толокой. из готовых инструментов, есть вот такое комбинация яндекс взгляда и толоки. задания на толоке быть и более сложные например, прокликать прототип по вашему сценарию и заполнить опросник по своим ощущениями своего рода количественный ux все зависит от вашей фантазии и готовности тратить силы на заведение шаблона. получается примерно вот такая штука, как показано на картинке тут сравнивали разные варианты экрана блокировки при помощи толоки (тоже из рассказа димы, но уже на profsoux). + недавно мой друг дима описал на хабре как обрабатывать результаты, например если надо сортировать скриншоты по популярности у аудитории. для внешней аудитории толоки есть толочный шаблон для заведения таких заданий. например, задать вопрос и получить на него 100-200 ответов за пол часа или сравнить разные варианты фичи на макетах и скриншотах можно сравнить продакшн экран и экран с фичей и узнать, что пользователи думают при первом взгляде на реализацию можно сравнивать еще видео или звук. я для количественных проверок чаще всего использую толоку это самый быстрый из доступных способов быстро узнать мнение своей аудитории по любому вопросу в яндексе есть внутренние инструменты, чтобы делать задания было максимально просто. их хорошо бы проверить еще количественно до того как мы отдадим хоть что-то в разработку ну и вообще, первые опросы можно начинать параллельно с прототипами. для гипотез, прошедших стадию палок можно сделать более клевые прототипы с более близким к жизни дизайном и провести еще несколько интервью, так получается набор качественно провалидированых гипотез. это работает практически для любых продуктов вот еще пример бумажных прототипов из яндекс авто. мы клеили прототипы из бумаги, показывали их людям, сразу отметали неудачные гипотезы, в удачных понимали что доработать новый день - новый прототип и новые знания за тот ux-шторм мы успели проверить больше 20 гипотез и только в последний день сделали кликабельные прототипы. тут тоже можно начать с самых простых решений из палок и жвачки когда показываешь их пользователям они абстрагируются от визуальных решений и говорят про суть у меня был прикольный опыт, как-то мы устроили неделю ux для проработки сложной темы. о проверке гипотезкогда мы уже наигрались с визуализацией идеи и она прошла все наши внутренние проверки нашлись ответы на все вопросы или стало понятно, что они не найдутся без исследований, это значит пора делать прототип. мой любимый вопрос «как измерить успех?». например такие) или «какую проблему человека это решает?», «сколько людей с такой проблемой?», «как часто они с ней сталкиваются?»,«как они узнают, что мы умеем ее решать?»в общем, любые вопросы, про которые ты еще не подумал). и вообще стоит больше говорить чем больше классных людей, с которыми обсуждается идея, тем более продуманной она получается. можно заранее обсудить узкие места и вместе придумать как искать решение если команда заразились “той самой божественной идеей”, можно повторить варианты из первых пунктов, но для других участников возможно пресс релизы или наброски в пейнте от них прольют свет на новые вопросы. 4 к - командакогда привлекать команду? ну в принципе можно уже сейчас, но не в формате “эта идея божественна, го делать скорее!!!”, а в формате помогите найти подводные камни возможно, мне всегда везло, но у меня в команде всегда были ребята, с которыми можно поделиться идеей. немного нестандартное использование уточек, обычно они наводят на вопросы во время обсуждения идей но для меня очень подходит такая смена ролей, когда смотришь на идею со стороны, приходят в голову всякие интересные вещи. 3 уточкапредставьте, что вы – ваш руководитель, а уточка это вы уточка приходит к руководителю и говорит, что хочет прямо сейчас начать делать “ту самую божественную идею”(тм), которую надо допродумать какие вопросы вы ей зададите? выпишите их и постарайтесь найти ответы. для визуализации в голосового продукта нужен еще один человек и телефон дайте человеку смартфон и попросите его сделать что-то, что вы хотите от голосового помощника например, прочитать интересные новости или рассказать что-то про слонов сразу возникнут вопросы. вернемся к истории о фактах-картинках для вопросов про схемы ( ) для них можно нарисовать примерно такой говнопейнт сразу видны вопросы текст нужен? факт с иллюстрацией это то же самое? картинка и текст с разных источников? нужно было все это допродумать. цель упражнения – разобраться какие вопросы возникнут, сначала у команды, когда вы начнете обсуждать с ними идею, а затем у пользователей нужно быть внимательным, чтобы не закопаться в продумывание ux ux – отдельная тема, когда решены базовые вопросы. 2 поиграть в дизайнера смысл в том, чтобы нарисовать результат, как он выглядит в голове для этого не надо быть супер-художником накидайте блоков в пейнте или поправьте верстку в вебе, чертите квадраты на бумаге главное, получить картинку и помнить, это не прод. такой подход пропагандируется амазоном, подробнее можно почитать, например, тут. текста нужно как можно меньше, в идеале пара строк если не получается, возможно стоит еще подумать. визуализация продуктовых идей1 хороший способ проверить не дно ли идея – составить воображаемый пресс релиз представляете, что идея уже реализована и объясняете своей аудитории, что сделано и почему это классно. процессы я не люблю и рассказывать о них особо не буду главное, там очень помогают сетевые графики и диаграммы ганта чем больше команд задействовано в разработке, тем полезнее визуализировать процессы – сразу видно, какой план реалистичный, а какой нет. божественные идеи могут быть-про продукт например, «как классно, если бы люди могли мгновенно узнать, как они выглядят с другим цветом волос»-про процессы «мы сейчас поднажмем и выкатим фичу за 20 минут на 8 не связанных сервисов с разным релизными циклами». с первого взгляда такие идеи могут казаться гениальными, но не стоит слепо доверять себе прежде чем начинать проверку гипотез, стоит их немного обдумать мне помогает визуализация. чем полезна визуализация всеговчера обсуждали, что делать, если настал кризис идей обратная сторона медали – внезапные божественные озарения. вот именно. по-разному, суть сводится к тому, чтобы искать повторяющиеся странные и неоптимальные кусочки разных сессий. + не всегда все сценарии можно описать на cjm, в условном поиске их очень много и они достаточно запутанные. по сути это поиск отклонений от cjm для новостного сценария в алисе, одним из таких отклонений были просьбы выключить музыку посреди прослушивания новостей подробного описания я не нашла пока готовилась. да, да очень согласна, я в этом треде как раз об этом очень много классных и умных людей вокруг нас. у художников и музыкантов не может быть?). круто, подпишусь!. да ты прав, алиса криво сказала эленлил родоначальник королей гондора, а исилдур его потомок штош, за этим и надо ее учить. а что вы делаете, если наступает кризис идей? уверена, мой список можно дополнить. смена места и ежедневных сценариев помогла найти кучу классных инсайтов. дома я очень мало пользуюсь яндекс станцией в основном, чтобы послушать музыку или задать какой-то вопрос каждый день одни и те же сценарии – глаз замыливается на длинные выходные мы с подругой решили поехать в питер и я взяла с собой станцию. по-моему отпуск решает был прикольный опыт. если ничего не помогает, возможно ваш кризис идей – симптом выгорания стоит внимательно относиться к таким вещам очень советую пост нади шмаковой, про то что делать, если выгораешь. можно обращаться к кино и литературе и увидеть там что-то новое что-то, чего еще никто не сделал. 6 фильмы и книги (внезапно)идея очень простая многие вещи, которые описаны в фантастике прошлого, сейчас воспринимаются как обычные смартфоны, видеозвонки, автопилоты, голосовые помощники - все это настоящее. этого нельзя было сделать, пока не появилась технология если регулярно следить за новыми технологиями в своей области, можно вдохновиться на что-то классное. 5 технологииразвитие продукта в те или иные стороны часто невозможно без технологий например, в приложении яндекс карт стало можно ориентироваться в дополненной реальности, оно стрелками покажет вам куда идти подробнее:. если вспомнить о личных примерах, я интроверт, и у меня мало знакомых общаюсь в основном с ребятами с работы например, с надей шмаковой  еще рекомендую не ограничиваться менеджерами разработчики, пиарщики, маркетологи, тестировщики – тоже огонь. говоря коллеги, я имею ввиду соратников по it, к мнению которых вы готовы прислушаться единственное, в чем отличие между непосредственными коллегами и остальными – nda, если его нет, стоит затрагивать более общие материи, не касаясь конкретных внедрений. 4 разговоры с умными людьми (коллегами, экспертами в области)в нашем тесном it-мире есть очень много классных умных людей у каждого из них есть море идей практически по любому запросу хорошая практика для поиска вдохновения – обсуждать разные интересные вам темы с коллегами. но! стоит сначала понять какой именно смысл не надо срочно делать у себя тоже самое лучше разобраться, какую проблему хотят решить возможно, она не актуальна для вас, или есть способ лучше. 3 исследования конкурентов и смежных областейвеликие художники воруют все знакомы с нашествием сторис во все приложения, трендом на супераппы и тд если умные люди начали что-то делать, наверное, в этом есть смысл). продолжая историю про новости в алисе, с помощью аналитики мы количественно подтвердили большую часть качественных гипотез, которые появились во время пользовательских интервью. так можно находить не только проблемы, но и идеи для улучшений мы с командой таким образом придумали новый тип факта – факты-картинки, для случаев, когда человеку нужна однозначная схема например, карта россии по зонам природы или схема кровообращения человека. в итоге должен получиться упорядоченный по частоте список трудностей, которые переживают пользователи все мероприятие должно занимать не больше дня. 2 аналитикамы называем такой метод dsat нужно взять случайные и анонимные сессии из своего продукта и выделить из них повторяющиеся проблемы и сложности пользователей сессий нужно чем больше тем лучше. когда я начала заниматься новостями в алисе, у меня был шок непонятно было вообще, как это развивать, было очень много противоречивых идей тогда мы с дизайнером провели серию небольших интервью, после них сразу стало понятно — куда дальше стоит копать. например, когда-то приложения банков умели только показывать баланс и детализировать расходы пообщавшись с людьми можно было узнать о смежной боли и добавить оплату жкх в банковское приложение не знаю, кто из банков сделал это первым, но это определенно очень круто. 1 интервью с пользователями надо говорить с людьми лучше побольше основная цель — выяснить, что сейчас болит у ваших пользователей, где им неудобно, с какими трудностями сталкиваются не обязательно про ваш продукт, можно затрагивать смежные области, обсудить проблемы вообще. итак, 6 моих источников идей:. за все время работы у меня появился некоторый набор советов самой себе, что же можно делать в такой ситуации они достаточно простые, может, вы тоже так делаете где-то будет похоже на булшит с очередных курсов для продактов, но я правда так делаю. иногда я сталкиваюсь с кризисом идей это происходит в 2 случаях: - когда очередной проект близок к концу и надо думать, что дальше- посреди затянувшегося проекта, когда закрадываются мысли, а вдруг мы вообще не то делаем. сегодня хочу рассказать о поисках идей. окей поняла про что ты спасибо, унесла. чтобы не спамить профильное комьюнити продактов обсуждением потенциального бага я готова помочь, но баги - не тема этого треда сделала, что ты написал и у меня не воспроизвелось - результаты поменялисьнужно больше подробностей: платформа, браузер и тд пришли их, пожалуйста. можешь в личку подробности описать, пожалуйста? отнесу коллегам, звучит нехорошо. мораль из этого - если придумать план и приложить усилия, можно стать кем захочешь. продуктовые задачи нравились мне больше и начала развиваться в этом направлении: читать умные книги, слушать лекции шмя, изучать опыт коллег оказалось, что быть продактом, для меня прикольнее, чем математика, аналитика и все такое. с другой стороны приходилось разбираться со всяким стремным софтом, меняющим поиск по умолчанию и другие настройки в браузерах людей откуда он берется, как распространяется, что можно сделать, чтобы ему помешать только код не надо было читать самой. там было что-то среднее между тем, чем на самом деле занимаются продакты и деятельностью того самого аналитика безопасного поиска то есть с одной стороны надо было изучать людей и их проблемы, проводить исследования. еще более детально спросила про задачи у будущего начальника на собесе все поняла и мне понравилось я умела делать почти все, про что меня спрашивали, сделала задания в те древние времена в яндексе не было найма через несколько секций так что на следующий день меня наняли. потом нашла вакансию технического менеджера в отдел дистрибуции в этом отделе работал мой одногруппник уж тут-то я не повторила свой фак ап расспросила у него все, что можно было про отдел и про то, что же делает этот менеджертак я узнала, что конкретно делают менеджеры. первый вывод из этой истории прежде чем идти на какую-то работу, надо понять что на этой работе делают возможно, это не то, чем ты хочешь заниматься. вот тут описан пример задачи, которой занимались аналитики безопасного поиска - разобраться в причинах появления рекламы, разобрать поведение вредоносного кода, схему распространения софта заметная разница с моей xss). аналитики в безопасном поиске занимаются поиском поиском шаблонов в поведении вредоносных программ или сайтов для этого надо много штырить в код страниц, знать js, разбираться в типах атак и тд мой опыт и знания в тот момент ограничивались одной случайно найденной xss. я подумала, что надо выяснить, что вообще делают эти аналитики, и что поизучать, чтобы стать как они нашла на linkedin того самого чела, который меня собесил и написала ему он очень много всего рассказал, и мне стало понятно, что это совсем не то. если вкратце, это был провал оказалось, что я не знаю ничего из того, что нужно аналитикам безопасного поиска я в тот момент очень расстроилась. по образованию я математик и думала, что буду заниматься криптографией или чем-то еще, связанным с информационной безопасностью когда я пришла на собес в яндекс в первый раз я хотела быть аналитиком в отделе безопасного поиска это было на 5м курсе универа. let’s go! про яндекс:. попробуй спросить). ноуп) кинопоиском я ещё не занималась. я думаю, здесь переносный смысл, когда всех потомков кого-то называют сынами. краткое расписание тем на эту неделю1 как я попала в яндекс2 поиск идеи в творческом кризисе3 чем полезна визуализация всего4 о проверке гипотез5 как выкатить изменение на миллионы dau и не вызвать бунт6 про особенности голосовых сценариев7 полезные телегам каналы. последний год, кроме поиска, мы с командой развиваем новостной сценарий в алисе а еще учим ее быть умнее и отвечать на разные вопросы например, она знает почему арагорн стал королем или в чем смысл криптовалют. еще люблю алису голосовые ассистенты появились слишком недавно, можно много чего улучшить и сделать что-то классное что-то, чего никто не делал до тебя. в поиске я работала над общей функциональностью продумывали с командой как должны выглядеть шапки и сайты на органической выдаче как сделать интерфейсы удобнее, проще и понятнее, чтобы помочь человеку быстрее сделать выбор. привет! я надя 7 лет работаю в яндексе за это время чем только не занималась от дистрибуции до внутренних продуктов для финансистов в последние 3,5 года нашла себя в поиске нравится, что могу помочь людям сразу с тысячами разных проблем. добавил контакты в последнем твите. а если, планируете однажды оказаться в токио, дайте мне знать, я люблю показывать город сохраните гайд на будущее. если будут вопросы по работе на японском рынке, рекомендательным системам, или просто хотите познакомиться, пишите: тг: zkid18facebook: zkid18. пора заканчивать эту неделю надеюсь, что было поелзно, правда не о всем успели поговорить меня можно продолжить читать в твиттере: и телеграмме. пару неплохих репортов на эту тему про китай. interactive commerce моего детства. жалко что такой формат не получил развития в японии тоже были свои клоны, и тоже не вышли на хороший retention. кстати про interractive commerce мне очень нравился формат и его локальных клоновна стадии интереса к этой теме писал обзор про китайские продукты. кстати, может кто знает годную книгу на тему айдолов, k-pop, j-pop и это все?. угроза большая со стороны онлайн-сервисов: в igtv теперь можно будет оформить заказ и совершить покупку комиссия с покупок – новый поток денег для instagram, зарабатывающего на рекламе. еще важно помнить, что видео-стриминг за один день не сделать местный классифайд mercari запустил тут live-shopping, но с технической стороны были проблемы, трансляция часто обрывалась. но что вижу у конкурентов – это попытки просто копировать китайскую модель, о которой писал выше хотя модель зайти себерети kol, как мне казалось должна была зайти в японии все-таки idols здесь не менее популярны, чем в китае. в японии пытались сделать live-commerce, но пока не заходитя правда, к сожалению, внутри yahoo в этом участия не принимаю, так что смотрю со сторны но мы и пока ничего не зарелизили. прямо сейчас в китае проходит canton fair, в эпоху оффлайна – крупная промышленная выставка для торговли с китаем на live-commerce в промышленных масштабах хотя сайт выглядит на удивление плохо, концепцию понять можно. такой формат сейчас побеждает потому, что это точка разумного баланса между легкостью создания и богатством нарратива в контенте- можно показать историю и как собирается товар- снижает возвраты - доверие к продавцу доверие к платформе. kuaishou популярен в 3d tier cities в китае live-commerce так взлетел, потому что оффлайн сторы бедны ассортиментов (см цифры выше), а людям хочется исследовать новые товары. kuaishou это апп с короткими видео, но с интеграцией с e-commerce они даже в рф выходили в 2018; в августе этого года сделали 500 миллионов заказов через стримы [0]это сделает kuaishou china четвертой по величине «платформой электронной коммерции»[0]. xiahongshu (小红书，red little book) решил насущную проблему taobao - фейковые и ненадежные отзывы cоциальные обязательства блогеров перед пользователи позволили xiaohongshu создать платформу, которая мотивирует людей обозревать товары фокус на beaty, apparel. для любителей статистики, журналисты заявляют про avg timespent в 72 min/day в douyin и 60 у kuaishou и xiaohongshu [0]для сравнения, avg time spent facebook оценивается в 38-40 min/day, instagram – 53 [1][0]. яркими примерами проектов, кто составил конкуренцию taobao – аппы с короткими видео kuaishou и douyin и маркетплейс xiaohongshu, pinduoduo. одна из самых интересных мыслей, которую как-то услышал, что стриминг так стал развит в китае на e-commerce из-за отсутствия интересного контента по телевизору ugc контент на тот момент выиграл конкуренцию с большим отрывом. секрет успеха — в самом начале подписать селебрити zhang yi с 10 млн подписчиков в каждой из соцсетей на нее до сих пор приходится 40% продаж ей в свою очередь принадлежит 3% акций ruhnn и 49% выделенной компании, управляющей магазинчиком под ее именем big-e. они не только с продвижением помогают, но и помогают запустить в произовдство свой бренд, например самый яркий пример – ruhan в 2019 компания лаже ipo сделала. на taobao 23 из 50 самых популярных сторов управляются kol есть специальные блогерские агенства mcn (multi-channel network) 90% китайских блогеров, чья аудитория больше 100 тысяч подписчиков, работают с mcn. потом появились инфлюенсеры, то есть пользователи, которые привлекают много пользовательского внимания, но в отличие от web-celeb-ов взрощены на платформе это beaty-блогеры, техно-блогеры и тд их еще именуют key opinion leader (kol). за селебрити пришли фанаты, которым было в целом без разницы где смотреть своего героя платформа предложила формат стриминга, и подарила селебрити новый формат заработка помимо концертов поначалу работали по rev-share, но вскоре селебрити начали продвигать свой бренд. в китае с 2014 на taobao стали заходить idols или по-другому web-celebs культурные феномен, отчасти связанный с c-pop в самом c-pop много было заимствовано от k-pop и j-pop, но вся коммуникация с фанатами была на локальных платформах, типо weibo. поброности по запросы taobao village. конечно, такая маркоэномическая метрика не исчерпывающая статистики по провинциям или хотя бы городам, я не нашел, но распределение далеко от равномерного онлайн гармонично закрывал проблемы масштабирования в регионы. ритейл-рынок в китае, в отличие от развитых рынок истоически e-commerce first из-за слабо развитой ифаструктуры даже, когда tabao был 8 лет на рынке, к 2011 год в китае retail space per capital был 39 м2, в то время, как в сшa –13 м2, а в японии — 4 м2. live-commerce сейчас на слуху обычно презентую концепт, все делают отсылку к китаю, в котором live-commerce и прадва очень хорошо развит но китайский e-commerce слишком самобытный, нужно лучше понять причины, прежде чем копировать формат. чтобы растить рекламную выдержку - нужен хороший ретеншен поэтому все чаще замечаем механики социальных сервисов в e-commerce хотя, social commerce – неудачное название больше запутывает, чем определяет природу вещей interractive или live commerce – куда лучше. за 2019 у amazon ~$10 миллиардов выручки за 2019 с рекламы (+33%)[0] в китае рекламная вырука alibaba опережает tencent и baidu вместе взятые [1] избыток предложения - доход с рекламы[0]. органичным продуктовым решением по discovery в e-commerce является live-shopping, aka social commerce. как писал выше, полезно смотреть на рекомендации в широком контексте snapchat и pinterest, например, предпочитает использовать термин discovery, в контексте рекомендаций небольшая деталь, но заставляет лучше переосмыслить природу и мотивацию. недавно делал небольшой доклад на эту тему он не идеален, но для старта, надеюсь будет полезен так, для чтения рекомендую статьи выше на гитхабе стараюсь обновлять список хотя бы раз в месяц. но пока это довольно дорого среди публикуемых работ, в основном китацы (jd, alibaba) и google редкий проект обладает схожим масштабом данных и инфаструктуры плюс, exploration дорогой нельзя показывать рандомный товар, даже если это даст больше понимания. я кстатии немного исследую область применения обучения с подкрплением к задаче рекомендаций может кому-нибудь будет полезно. долгосрочные цели могут быть и в e-commerce, но мы пока не придумали, как их формализовать, чтобы можно было какую-нибудь dummy-модель запустить. для e-commerce не так актуально, но для контентных сервисов задача оптимазации долгосрочных целей стоит довольно остро надо учитывать меняющиеся под воздействием внешней среды интересы и придумывать как сделать это натуральнее. тем не менее все равно рекомендации слегка «близорукие» вот кстати неплохая продуктовая попытка от alibab это решить. с другой стороны, та же полка в оффлайн ритейле существует с античных времен и ничего в digital видим эксперименты с интерфейсами «ленты», «карусели» и даже tinder-like механики стали привычным форматом взимодействия с контентом. с продуктовой точки зрения рекомендации сильно не эволюционировали даже с переходом в мобайл те же блоки, ну разве что, стали более требовательны к результатм ранжирования ведь, на экран телефон меньше товаров влезет. конкретно в этом примере его нет. пока не могу сказать, что решили проблему много копаем в области casual inference, но пока без значимыых результатов. с одной стороны, это норм – ведь мы ему просто напомнили с другой стороны, это не совсем честный exploration ведь, ультимативная задача это показать что-то новое, что имеет максимальную конверсию в покупку. последние пару месяцев пытаемся понять, насколько именно рекомендации являются стимулом к покупке вполне может быть, что пользователь знал про товар раньше, и видит его не впервые в блоке рекомендаций. случайно тред предыдущий отправил, не дописав до концану да ладно. как избавиться от культурного байеса – нетриваильная задача, которую можно решать как силами алгоримтов машинного обучения, так и продуктовым дизайном наверное больше всего в e-commerce сталкиваешься с gender bias. самое инетересное в рекомендациях начинается тогда, когда надо изучаешь природу байеса работая в рамках одной страны и языка, как минимум гео и языкового байеса нет твиттер, например такого позволить себе не может (скриншот отсюда. rakuten закрыл же свой глобал маркет - оставил по моему только в двух странах - тайвань и германия если не ошибаюсь. задача дизайна — увеличть количество явных сигналов взаимодействия с товарами задача аналитика – изучать неявные сигналы и пытаться их формализовать. как пример важности ux взято отсюда. если есть ресурсы — советую выделить рекомендации в отдельную команду, с аналитиком и дизайнером особенность рекомендаций в том что хороший ux может быть важнее нового алгоритма. можно отлично справляться с задачей предложения нужного товар клиенту, который пришел с уже сформированным запросом но по мере развития площадки, нельзя только удовлетворять спрос, игнорируя процесс созидания для этого и придумали рекомендации. поговорим про рекомендации они одинаковы во всем мире ну разве различаются какими-то требованиями по фильтрации. на карантине решил начать брать интервью, с теми кто делает продукты на азиатских рынках раз говорили про e-commerce с в японии стоит отдельно отметить перекупы, но с ними поверхностно знаком, может миша что-то ещё дополнит. да, много прокси-площадок, которые имеют даже официальные соглашения. ну если рационализоровать патриотизм, то есть большие опасения со стороны саппорта если что-то с товаром пойдет не так, в японии можно обратиться в поддержку, а с китем сложнее общаться. paypay, который лидер рынка qr-платежей берет 0% в надежде на захват рынка до 09/2021 в надежде на захват рынка. для платежный систем, pos-терминалов – sme главные драйверы развития c 10/2019 потребительский налог вырос до 10%, и он ложится на плечи покупателя отчасти поэтому sme долгое время не интерегрировал экварйинг, потому что надо было бы еще 115%-25% отдавать visa/mastercard. есть неплохой репорт про sme в японии на английском. сегодня наткнулся на такую визуализацию в целом, правда, хотя удивлен – открыть компанию в россии проще в японии надо:- снять настоящий офис- внести 5 миллионов йен в уставной капитал (1 йена ~ 075 рублей ) точнее не обязятельно, но желательно- идти ногами в банк. еще, если вдруг ожидаете платеж от японцев, проверьте комплаенс вашей платежной системы некоторые японцы используют местную jcb, которую могут принять только ограниченное количество стран. слышал немало историй со стороны иносторанных компаний разных размеров про процесс продаж, где точкой роста стала интеграция платежей в конбини сейчас может это меньше актуально, но даже сам так плачу счета и некоторые покупки. еще одна особенность, это платежы через konbini это 24/7 супермаркеты - 7eleven, lawson, family ma обычно тебе выписывают чек, который ты должен оплатить в течении указанного периода. да, но явно локальный рынок в приоритете даже нет какой-то базовой англоязычной seo оптимизации. да, и в последнем тезисе вижу проблему часто в сервисах вижу избыточную кастомизацию в попытках среагировать на каждую просьбу клиента. современный банк определяет не можете приложение, а подход к риск-менеджменту но японские банки чувствуют слишком комфортно, чтобы заниматься инновациями поэтому и модели старые, кэш карты минимизируют риски. в японии часто банки выпускают дебетовые карты без cvc-кода по приезду у меня была такая, я по ней не мог нигде платить такое явление наблюдал и в гонконге и в китае можно только кэш снять. пандемия ускорила этот переход даже карточек на всех не хватило. исторически страна долго двигалась от кэша вот неплохие цифры от jp morgan [0][0]. в японии идёт сейчас великая битва qr-кодовна картинке представлены: - две платежки, спонсируемые крупными корпоратами - rakuten- line- главный классифайд страны, mercari - два телекома- местный «почта банк»- китайцы alipay, wechat работающие только у 🇨🇳 туристов. пока еще не ушел спать, сделаю перелинковку меня можно вне этой недели читать и в ламповом телеграмм-каналле про азиатских tech. не, я про япония мир а не мир япония. про рост apple music в японии. имхо, не очень верю, что японцы не хотят покупать дешевые товары из-за рубежа локальный рынок большой да, но все равно есть непокрытые категории думаю проблема в конкуренции и стоимости привлечения aliexpress проще на em работать. aliexpress не очень зашел в японии хотя многие китацы стали здесь перепродавть товары с taobao на amazon еще wish com пытается выйти в японию c этого года. хотя попытки продавать ту же косметику, которая актуальна за рубежом есть и наверняка нахоядтся сговорчивые мерчанты вон даже почта россии запустила кросс-бордер. всеволод овчинников: сакура и дубактуально и в мире современного кросс-бордера. проблема японии конкретно у мерчантов которые не хотят продавать за границуабстрактному иностранный кросс-бордеру не получается убедить его, даже сделав интерфейс, где галочку просто надо поставить для листинга возможно японец боится общения на английском с клиентом. кроссб-бордеры в процентах от оборота очень маленькие вроде rakuten global market не особо летит для удовлетворения спрсоа появились прокси-сервисы, которые помогают иностранцам покупать японские товары самый популярный –. не могу понять, почему в японии не так развита международная торговля японские товары довольно востребованы за рубежом но своего aliexpress нет. 1fb достаточно слабый канал для привлечения в jp - не первая японская социалка 2 один из немногих рынков где пользователи андройда зачастую дороже и лучше монетизируются чем пользователи ios3 значительная роль инсент трафика4 очень много mobile-web источников. 1 а инста плохо работает? кажется хорошо в японии зашлаline довольно дорогой для игр, говорят. а у apple music вроде получше дела в японии, нет?быстро такую статистику нагуглил. да, помню amazon рассказывал, что они в японии лучше стриминг-сервисов на музыке зарабатывают, потому что продают cd диски разговор был в 2019 году, если что. немного про развитие spotify в японии. если есть кто из гейм-дева, наверняка работаете с японией расскажите что, да как картинка для привлечения внимания. важно напомнить, что перевод это подмножество локализации особенно это заметно в геймдеве я краем уха про это слышал, но, кто выходит в японию, не только тексты переводят, но и полностью часто игру (персонажи, уровни) редизайнят под рынок. многие японцы в браузере сидят с включённым google переводчиком если вдруг ожидаете траффик с японии, но нет времени, чтобы сделать перевод или полноценную локализацию, то проверьте, что при гугловом автопереводе у вас не летит верстка. вы над spotify работаете? интересно, мне как раз казалось, что приложение, что под японию раскатано скорее контрпример моего тезисы выше выполнено в рамках общего стайлгайда, хорошо адаптировано под японский язык и нравится японцам. поправили, rakuten не бесплатен для мерчанта. * что за ответ был?. кстати, как бы считали эффективность такого размещения? и какие товары поместили в каталог?. возвращаясь к первому дню, amazon тоже продаёт свои бумажные журналы когда первый раз увидел, сразу вспомнил «связной» и «евросеть» в детстве очень любил сравнивать модели телефонов и смотреть, какие картинки можно за смс-ки прикупить. а что ответ был?. хм, а сколько сейчас в сравнении с амазоном стоит? яхт бесплатный вроде но я с мерчант командой не соприкасаюсь, могу обмануть. у китайцев кстати убористость тоже в почете не изучал, но возможно это влияние иериглифики. иногда хочется пригласить мари кондо, чтобы на японских сервисах убрать все, что doesn’t spark joy. ещё можно вспомнить рекламные брошюры, которы кидают в почтовый ящик. да и даже в ритейлерах поменьше это отличие считывается. если были в японии и заходили в ритейл магазины типо biccamera или yodobashi могли испытать похожие ощущения вариативность в ущерб фокусу для тех кто не был:. европейскому глазу очень непривычен дизайн японских сервисов — мелкий шрифт, убористость и кричащая цветовая палитраamazon заметно отличается от yahoo shopping и rakuten сравните стартовые страницы. rakuten и yahoo shopping это такой b2b2c, долгое время складов даже не было поэтому к 2018 году amazon на пару с rakuten владел 20-30% рынка , a yahoo shopping 10% но с развитием paypay и поглощений конкурентов доля amazon, rakuten и yahoo shopping выравниалсь до 25% у каждого. rakuten конкурировал с amazon yahoo на растущем рынке плюс, он появился на года раньше amazon и на два yahoo shopping у rakuten был больший ассортимент товаров на платформе в диапазаоне от $1 до $10,000 но у amazon из тройки самый выскоий средний чек всегда был. регистрация для мерчанта бесплатна платформа зарабатывает на внутреннем продвижении бренда магазин может отправлять кастомные email-рассылки клиентам, покупать рекламу и тд то есть продвигают и бренд и товар. rakuten и yahoo shopping формально тоже маркетплйесы, но японцы их называют ecテナント型 это что-то среднее между классифайдом и маркетплейсом в отличие от макреплейса, больше внимание уделяется бренду и магазину. amazon в японии, это обычный маркетплейс, как и везде из приятных фишек, кстати есть fba для иностранцев japan - история успеха экспансии такого «тяжелого» операционного бизнеса. японский e-commerce с одной стороны похож на мировые аналоги, а с другой стороны – сильно от них отличается. the attached zip file is encrypted with a passwordthe password will be sent to you in a separate emailha-ha classic. вот как раз сегодня про это писал. сегодня отмечали повышение нашего тим-лида и впервые за 8 месяцев собрались в офисе, чтобы оттдуа пойти в ресторан рядом с работой но тим-лида посадили на 2-недельный коронавирусный карантин, так что пришлось ему присоединяться с пивом и лапшой по zoom. органически сдвигаем расписание на один день, заодно закрывая субботнюю пустоту сегодня уже ночь, про е-ком лучше со свежей головы рассказывать. да, да а ещё любят картинки в экселе слать). должна была к прошлому посту приложится нравится это реклама, хорошо отражает развитие технологий в японии. до 2008 было проще сейчас, пошлины повысили, стало дороже но когда весной был во владивостоке там поголовно правый руль кажется что каждый третий помогает в перевозе и «разтаможке» японских автомобилей. это хорошо использовалось в рассвет индустриальной японии есть хорошая книга про процессы на японских фабриках в 80-90ых годах прошлого века. японцы в корпоративной среде очень внимательно следуют правил результат - выстаивание человеческих процессов может оборудование и старое, но во-первых оно работает, а во вторых любую автоматизацию можно воссоздать дисциплиной. это забавно, но вполне можно понять опять же, результат раннего погружения в технологии старшего поколения плюс уважение к покупателю и нежелание причинить ему неудобство. на деле доля правды в этом есть, но все это соседствует с использованием и поддержкой всякого легаси, которое тянется порой с эпохи сёва (昭和) новость о создании самого быстрого супер-компьютера соседствует с новостью о превращении работы последнего пейджер-провайдера. в голове существовал образ футуристической страны, где роботы органично вписываются в повседневную жизнь. ну line вышел давно за рамки мессенджера это и стриминг, и игры, и платёжка и такси телеграмм до сих пор представлен только мессенджером и line и yahoo japan - базисные сервисы в японии поэтому и провёл такую аналогию. видел его один раз да и то через zoom, большую часть времени он что-то говорил, а я кивал в ответ сложно сформировать мнение по такому знакомству но в целом многое в его поведении импонирует занятно, что он и softbank в целом представляет самую risk-averse нацию. ну в целом наверное чуть лучше ракутен, но уступает гуглу или амазону. если нет японского банковского счёта (читай компании), то только через амазон. よろしくお願いします🤲. это как если бы яндекс и в россии объединились. новые бренд уже не сдерживает экспансию отчасти для этого в состоялось мощная сделка на внутреннем рынке, yahoo japan и line договорились о слиянии бизнесовя про это даже небольшую заметку на русском написал. это не сильно меняет ситуацию, но с 2017 года softbank, yahoo japan и индийский paytm создали новое jv под брендом paypay это попытка сделать японский taobao-alipay, маркеплейс со своей «платёжкой» и qr-кодами у каждого мерчанта. по соглашению, yahoo japan не имеет права использовать бренд yahoo для развития на других рынках с октября 2019 года компания изменила структуру управления и на данный момент 100% yahoo japan принадлежат z holding. в 2017 году медиаактивы американской yahoo проданы verizon за $4,48 млрд финансовые активы yahoo, а именно 35% yahoo japan и 15% alibaba, выделены в отдельную инвестиционную компанию altaba. по организационной структуре, yahoo japan, напоминает group продуктовая компания, с активами в разных отраслях. но компания развивалась вне поиска: e-commerce, media, tech консалтинг драйвером роста стал yahoo shopping и yahoo auctions про них расскажу ниже сегодня. google по мере развития в японии увеличивал долю поиска из года в год сейчас соотношение ~80/20 в пользу google да и то доля yahoo japan поддерживается за счёт старой базы (см серию постов выше). yahoo japan опирался на технологии и опыт yahoo в поиске и инфраструктуру softbank с первого дня основания jv, японский офис развивался без внешнего контроля со стороны американских коллег. может возникает вопрос, почему yahoo ещё жив в японии формально yahoo japan != yahoo, оригинально это было jv softbank и американского yahoo впоследствии softbank выкупил долю американской компании и стал главным акционером. особенность в том, что ~4% до сих пор ходят с такими телефонами в основном, это все-таки пожилые люди, но тебе как массовому сервису, нужно адаптировать верстку под такой экран. до прихода смартфонов, в японии все ходили с тн фичер-фонами это «раскладушки», которые поддерживали локальный стандарт 3g, имели камеру, mp3, instant-messages и тд в целом, стандартный функционал устройств в до-смартфонную эпоху. язык подкрепляет концепцию изолированности японии от остального мира для этого даже придумали специальный термин, который актуален и для цифровых продуктов [0][0]. плюс еще слабая система изучения языка в школах как и в россии, все учат его с первого класса, но очень неэффективно японцы более-менее могут читать, но говорят с трудом. про изучение языка подробнее поговорим в пятницу почему так плохо говорят по-английски? самое рациональное объяснение — локальный рынок слишком развит, и большинство не рассматривают карьеру вне японии. в японии довольно плохо говорят на английском пришлось по ходу дела начать учить японский, чтобы понимать коллег, да и просто существовать вне работы. не стоит конечно думать, что для продвижения приложения для редактированию фотографий в японии, вам надо делать такой журнал таргетинг на пенсионеров здесь далеко не сплошь и рядом в остальном все стандартно, но со своими особенностями, о которых расскажу на неделе. вот еще пример zoom. бумажные книги и журналы в японии до сих пор хорошо себя чувствуют cервисы печатают журналы и распростараняют через ритейл-сети например line показывает, как загружать фотографии и делает небольшую подобрку каналов это все равно если бы в 5ке продовался «вестник telegram-а». про то, как продают luxury бренды в конктектсе этого канала не так инетерсно, куда интереснее смотреть, как сервисы адаптируют коммуникацию под менее технически подкованную аудиторию. они привыкли к дорогим покупкам, плюс японская семья откладывает в виде сбережений более 15% доходов — в 3 раза больше, чем американская или английская [0][0]. в японии, пенсионеры - большая потребительская группа под них прорабатывают специальную маркенинговую коммуникацию это поколение которое застало период стремительного роста экономики японии. с 1990 года по 2003 год японский индекс nikkei 225 упал на 80% с 38 900 до 7 500, потом рос до 18 300, потом кризис 2008 года и падение до 7 000, потом авария на фукусиме в 2011 году в конце 2012 года nikkei 225 начал расти и до 23 360 на текущий момент,. япония — одна из самых быстро стареющих стран, людей старше 60 лет сейчас в 2 раза больше, чем людей в возрасте 20-34 лет а общая численность населения сократится на треть со 128 миллионов в 2010 году до 87 миллионов в 2060 году [0][0] (2012). в японии с начала 90-ых дефляция ни радикальная монетарная политика, ни даже отрицательные процентные ставки не помогли. прожив в гонконге, у меня возникло желание продолжить исследовать продукты в азии и лучше понять, что здесь происходит япония была интересна прежде всего с точки зрения бизнеса ниже приведу пару макроэномических фаткоров, для контекста. часто экспаты в японию приезжают из-за любви к поп-культуре но даже, прожив в токио около 15 года, я пока не посмотрел ни одного аниме, кроме работ студии ghibli и не знаю, чем j-pop отличается от k-pop да и до перезда, я не был в японии ни разу. набросал примерный план:пн рынок и пользователи япониивт японский e-commerceср рекомендательные системы чт interaction/live/social commerceпт фундаментальные науки и их важность в работе над продуктомсб, вс определим темы ближе к концу недели. а потом перебрался в японию про это и расскажу сегодня. там я поступил на год в магистратуру и параллельно работал в fintech-проекте делали ритейл инвест-продукт на гонконг и сингапур по типу wealthfront, robinhood или тинькофф-инвестициизанимался аналитикой и машинным обучением. в гонконг приехал отчасти случайно девушка на тот момент училась в китае, и я подумал, что надо как-то перебраться поближе тем более многие говорили про китайский tech-рынок, но мало кто реально понимал что, там происходит подумал, что как раз разберусь в нем поглубже. да переезда в японию я успел поработать в гонконге и москве в россии работал менеджером в сервисной e-commerce компании 24ttl ;успел поучиться в школе менеджеров яндекса ;делал образовательный стартап abitura pro во фрии. всем привет! я даня, живу в токио, работаю в e-commerce проекте yahoo japan занимаюсь рекомендательными системами большую часть работы занимает разнообразная продуктовая аналитика так что на этой неделе меньше расскажу про управление, а больше про цифры и бизнес в 🇯🇵. продактам полезно знать, чем занимаются продуктовые маркетологи подписывайтесь на новый колелктивный твиттер-аккаунт, а еще лучше – предлагайте новых авторов недели. ну что, неделя подошла к концу, спасибо всем, что читали! это был очень занятный опыт, надеюсь, и вам было интересно до конца дня я все еще здесь, буду отвечать на вопросы и комментарии, также добавляйтесь в tg / ig / fb / linkedin, там я везде до встречи!🚀. из менее очевидного: что такого в изображении белой девушки с дредами в рекламе? культурная апроприация! чернокожие пользователи реагируют на такое очень болезненно мир большой и разный. не говоря уже о том, что в промо-контенте и рекламе должно учитываться множество факторов для каждого региона из банального — не запускать christmas sale в мусульманских странах. думаю, coinbase легче оставаться в стороне, он все-таки более утилитарный, менее эмоциональный продукт. и происходящие социальные явления вроде pride или blm это уже не абстрактные инфоповоды из-за океана ваша аудитория любит и доверяет вам, и ждет от вас позиции по волнующим их вопросам нельзя оставаться в стороне. сегодня пара мыслей про специфику работы на мировую аудиторию если вы строите успешный глобальный продукт на мировую аудиторию, то в какой-то момент вы неизбежно сталкиваетесь с необходимостью обращать внимание на мировую повестку. именно!. лучший вариант как всегда посередине, то есть, в комбинировании двух подходов: привлекать юзеров на виральные и хорошо перформящие в маркетинге истории, а затем уже в самом продукте активировать в долгоиграющие инструменты и проектировать продукт так, чтобы они были. существенный минус таких функций, нацеленных на виральное распространение — это то, что как правило у них низкий ретеншн вспомните, сколько раз вы сделали фотку с маской сталина из msqrd?. некоторые компании даже осознанно выбирают такой путь привлечения пользователей — «от хайпа до хайпа» и фокусируются исключительно на выпуске виральных фич вот, например, график инсталлов одного из таких аппов стрелки указывают на релизы хайповых фич. но это только вершина айсберга, самые громкие случаи на деле хайпы разной степени силы происходят стабильно несколько раз в месяц. действительно виральный потенциал у рынка фото-видео приложений очень большой все помнят громкие истории масок в msqrd, стайл-трансфера от prisma или фильтров старения в faceapp. иногда может быть и обратное, когда фича добавляется в продукт во многом потому, что есть сильная вера, что она заперформит в маркетинге и принесет много трафика и тут мы вспоминаем про особенность мобильного сегмента photo &amp; video — виральность. это похоже на модель кано: с базовыми фичами едва-ли удастся хорошо закупать юзеров, но сатисфаеры (особенно когда наша реализация на голову выше рынка) и делайтеры отлично подходят, они описываются и отправляются на брейншторм в отдел маркетинга еще до старта программинга. привет! сегодня про маркетинг и его связь с продуктом при написании prd для каждой новой фичи в продукте отдельным этапом должно идти продумывание того, какое место она будет занимать в маркетинге. мы в компании культивируем этот подход с самого начала, и качество решений значительно вырастает на всех уровнях: продакты точнее попадают с гипотезами, qa находит неочевидные кейсы, разработчики сильнее вовлекаются в продукт и начинают предлагать классные решения. есть еще один очень простой но безотказно работающий способ понимать потребности пользователя — приучить всю команду постоянно пользоваться вашим продуктом eat your own dog food, помните? 🐶. в обоих кейсах данных уже достаточно, чтобы всесторонне оценить обстановку и сгенерировать качественные гипотезы. или ещё: саппорт доложил об участившихся feature-реквестах определенной фичи → отдел рисёрча подтвердил, что приложения с этой фичей вышли в топ сторов, сделал оценку долгосрочности тренда → маркетинг вспомнил старый тест похожей фичи в рекламе, где получились неплохие метрики. кейс из головы: команда рисёрча заметила тренд в соцсетях на обработку в стиле vhs → отдел аналитики подтвердил рост частоты использования эффекта vhs нашем продукте в определенном регионе → точечное анкетирование этого сегмента юзеров и пара глубинных интервью вскрыло причины. важное качество этих систем: они должны поддерживать и валидировать друг друга. примеры таких систем для мобильного продукта — продуктовая аналитика, маркетинговая аналитика, история экспериментов, фидбек юзеров, рисерч рынка, мониторинг аппстора, качественные и количественные исследования юзеров, мониторинг соцсетей. в продуктовой компании очень важно построить системы по получению данных о вашем продукте, пользователях и рынке это такие зонды расставленные в разных местах, которые нужны для того чтобы: сверяться с курсом; понимать, всё ли идет хорошо; не упускать встречающиеся возможности. я бы расширил эту метафору и сравнил продукт с кораблем — снаружи ветер, океан и скалистые берега, а на борту команда со своими потребностями у вас есть курс и точка назначения, но для принятия решений необходимо мониторить десятки показателей и внутри корабля и в мире вокруг. в своем блоге gopractice объясняя ценность продуктовой аналитики олег якубенков сравнивал продукт с автомобилем, а показатели на приборной панели с продуктовыми метриками. сегодня про продукт поговорим про системы, помогающие продуктовым командам быстрее и качественнее генерировать гипотезы и принимать продуктовые решения. но при этом за каждым процессом есть ответственный человек особенное удовольствие руководителя — в команде появился новый масштабируемый непротиворичивый процесс, который задизайнил и развернул вырощенный тобой сотрудник💕. не все процессы описаны в базе знаний потому что, как помните, скорость скейлинга компании слишком высокая, многое может поменяться, и издержки на поддержание документации в таком случае будет превышать пользу от ее существования только если процесс устоялся, то он описывается. сейчас в продуктовом отделе десятки процессов и систем: общая стратегия, квартальное планирование, взаимодействие продуктовых команд, генерация и валидация гипотез, процессы саппорта, growth, процессы в рисерче, сплит-тесты, процессы в аналитике и еще много всего. и вот уже на этом этапе разворачивание качественных процессов становится приоритетной задачей мы в компании уделяем этому много внимания в какой-то момент развитие процессов (и людей в них) стало занимать почти столько же моего времени, сколько работа над самим продуктом. проявляется во всем: от легаси на техническом уровне, необходимости выделения продуктовых команд, внедрения компонентной дизайн-системы до банально вырастания из начальных тарифов в сервисах (привет, amplitude) и как следствие — кратно вырастает стоимость продуктовых ошибок. кризис роста куда сложнее и интереснее кризиса выживаемости это зловещая долина, когда вы уже не маленькие и быстрые, но еще и не корпорация с отлаженными взаимодействиями. порой даже кажется, что после успешного запуска, подтверждения гипотез ценности, сведения юнит-экономики и нахождения масштабируемых каналов аквизишна можно выдохнуть и начать спокойно развиваться но нет. 3 процессы для только что зародившихся компаний справдливо утверждение: сначала productmarket fit, потом процессы и это правильно, сперва нужно быстрее решить задачи выживаемости про этот этап написано бессчисленное количество статей, отсняты многие часы видеолекций. так что нанимать немножко наперед, на 12-18 месяцев — самое оно эти ребята знают, как надо хорошо, при этом смогут вас к этому привести. с другой стороны overqualified-крутан с опытом в корпорациях 1000+ человек скорее всего тоже не подойдет: если ему и будет интересно работать в ваших процессах, то далеко не факт, что он сможет успешно в них оперировать. не лучшая практика нанимать сотрудника, который подходит по скиллам впритык или с минимальным запасом через несколько месяцев он скорее всего перестанет справляться с возросшей сложностью задач!. это связано с тем, что потребности в таких компаниях как правило растут быстрее компетенции её сотрудников и брать нужно немного на вырост. для быстрорастущих компаний есть хорошее, проверенное на личном опыте правило — нанимать специалистов с расчётом, что их опыт будет превосходить ваши процессы следующие 12-18 месяцев. и еще одно наблюдение, даже скорее небольшой фреймворк, помогающий скорить кандидатов. для сравнения в беларуси что ни айти компания, то b2c мобайл на worldwide, и общение с кандидатами проходит гораздо проще. ситуация в целом улучшается (в том числе благодаря нам), но полгода назад нередко на интервью приходилось менять картину мира, что да, вокруг мобильного приложения с подпиской можно построить компанию. думаю, отчасти дело в монополии крупных игроков: на последнем продуктовом мастер-классе, где я был, половина зала была из мтс, другая из сбера. российский рынок it-специалистов, кажется, еще не привык к растущим частным продуктовым компаниям особенно, если вы b2c-мобайл без оффлайновой части (такси или доставка еды). 2 найм я отвечаю за найм в продуктовую команду (продактов, дизайнеров, аналитиков, и тд), а еще иногда помогаю по смежным отделам, и вот пара наблюдений. во-вторых, тщательно анализируем тренды рынка, чтобы понять, где хайп, который закончится через пару недель, а где слабые сигналы, которые указывают на долгосрочные изменения. хороший вопрос во-первых, на свои сильные стороны: мы довольно хорошо знаем и постоянно актуализируем (глубинки, jtbd, анкетирование), почему юзер выбирает нас и какую работу мы делаем на фундаментальном уровне. а почему вы занимаетесь продакт-менеджментом?. спасибо!☺️. при этом, результатом такого творчества может быть не только сам it-продукт пофикшенный процесс, «подлеченная» команда, или вырощенный сотрудник — тоже считаются. наверное, у всех по-разному, но для меня продакт-менеджмент это творчество в ширком смысле создавать новые ценности и системы из идей, людей, потребностей, привычек, процессов и технологий, так, чтобы все участники стали счастливее это невероятно вдохновляет. лично я минимум раз в полгода провожу такую сверку с собой обычно это происходит после отпуска, когда удалось перезагрузиться и вырваться из контекста. мне очень понравилась эта метафора для продакта важно иметь глубокий и честный ответ на вопрос «зачем я делаю то, что делаю?» и переодически обновлять его иначе не поверят: команда, пользователи, стейкхолдеры, etc. как-то раз я ходил на курсы по стендапу первое, что сделал ведущий — крупно написал на доске букву я все шутки должны начинаться и проходить через собственное я, иначе зрители не поверят и не «присоединятся». короче говоря, в условиях переменчивости и быстрого роста вопрос самоидентификации и внутренней мотивации стоит серьезно особенно если вы продакт. и все это на сверхконкурентном и изменчивом рынке, где иногда переворачивается вообще всё, помните? и не удивительно, что переодически вас вышибает, и вы стоите перед зеркалом как зеленский в новогоднем поздравлении: «хто я? и зачем?». а потом процессы начинают взрослеть, вам нужно больше фокусироваться, развивать собственную команду, выстраивать коммуникацию с другими отделами, и бежать вместе к светлому будущему. бизнес-требования стремительно растут, в компании появляются все новые и новые специалисты, которые забирают части вашей работы и процессов, вы пытаетесь собрать нити и закрыть собой все дыры то вы за growth, то за маркетинг, то за позиционирование, то ни за что из этого. теперь представьте, вы продакт в компании из 5 человек, и заниматься приходится примерно всем подряд, разве что код не пишете и тут вам улыбается судьба — нащупан product market fit и пошел трекшн да какой! — выручка удваивается каждый месяц. без преувеличений, тикток полностью поменял рынок фото-видео обработки, также, как в своё время это сделал формат сториз, пришедший на смену фиду. начну немного издалека представьте себе рынок, в котором раз в две недели случается хайп, приносящий счастливчикам сотни тысяч инсталлов; раз в несколько месяцев выходят технологии, меняющие правила игры; а раз в 2-3 года переворачивается вообще всё!. 1 кто ты, продакт в стартапе?. 4 продукт и руководство продуктовой командой 5 маркетинг от хайпа до хайпа и не только6 как быть worldwide и социальная ответственность7 свободная тема :). план на неделю:1 кто ты, продакт в стартапе?2 найм в быстрорастущую компанию или 50 оттенков скепсиса3 процессы как метод контролируемого хаоса. топы сторов открытый источник их же в том числе они используют для эстимейта выручки аппов. сенсортауэр, например:. всем привет! я руковожу продуктовым отделом в prequel за два с половиной года мы построили одно из самых успешных мобильных приложений в сегменте фото/видео и выросли с 5 до 70 человек расскажу каково быть продактом внутри суперизменчивого мира и не сойти с ума погнали!. — книги. — делегирование. — работа с неопределенностью. — работа в новой команде. — хороший руководитель. — работа под давлением. — выгорание. темы за неделю с надей шмаковой, менеджером продуктов и процессов в поиске яндекса. дорогие, спасибо вам за эту неделю, спасибо за фидбек! теперь точно могу сказать - пишите, и ваши идеи обретут новые смыслы для вас самих. основы организационного поведения учебник про управление людьми в больших компаниях читается сложно, но информация стоит усилий на изучение оказывается, все наши модные способы организации команд и мотивации людей давно придуманы и исследованы. корпорация гениев внезапно, производство мультфильмов - это it энтерпрайз президент pixar рассказывает что важно для работы творческих людей, как настроить процессы и не навредить отдельный кайф - узнать как создавались сценарии наших любимых мультиков. дом для жизни насмотренность :) книга рассказывает как сделать ваше жильё удобным автор объясняет откуда берётся бардак и как его уменьшить без насилия помогает с новой стороны взглянуть на интерфейсы и производственные процессы. пиши, сокращай но всё равно советую люблю эту книгу за подход к тексту как к продукту с заботой о пользователях, с метриками успеха автора, с логическими обоснованиями. общаться с ребёнком как? понятная и очень добрая книга про сложные коммуникации автор - кандидат педагогических наук, доктор психологических наук, профессор книга про детей, но описанные принципы работают для любого возраста. cracking the pm interview что я встречала про нашу работу раскладывает всё по полочкам с примерами, написана на простом английском, читается легко обязательна к прочтению даже если вы давно в профессии и не собираетесь менять работу. всем привет! завершаем неделю книгами ниже мой актуальный top of mind для менеджера продукта. проверять нужно можно это делать на более высоком уровне: не каждый шаг, а результат ещё просить контролировать качество самих исполнителей, подсказать методы проверок и смотреть на их итог. микроменджмент убивает мотивацию и роняет качество итоговых решений если люди знают, что я им доверяю, и не буду перепроверять, то они с большей ответственностью подходят к выполнению своей работы. я оставляю ответственной за конечный результат за собой и поддерживаю планку качества с другой стороны, не лезу и даю людям свободу в принятии решений в их зонах. при передаче дел, отдельный интересный момент - у кого должна находиться ответственность за финальный результат. 5 «работа будет сделана хуже, если ее передать»чаще всего так и будет это даунсайд, который надо принять переведите фокус на уровень выше, ведь на самом деле для компании вы принесёте больше пользы, так как освободитесь для новых сложных задач. 4 «я потрачу много времени на объяснения, быстрее сделаю самостоятельно» в моменте это может быть так но в перспективе вы сможете сдать другие задачи в уже обученных людей и даже если задача разовая, практиковаться делегировать само по себе ценно. 3 «у меня нет подчиненных и я не могу их нанимать» это не проблема например, можно найти человека, который умеет справляться с вашей задачей быстрее, а в замен сделать работу для него а еще можно найти людей, которые хотят научиться и дать им ваши задачи в качестве практики. 2 «если эту работу сделает кто-то другой, то я окажусь бесполезным человеком»если ваша голова освободится от работы, которую вы и так умеете делать, вы сможете добраться до чего-то нового и амбициозного ведь не бывает идеальных продуктов или оптимальных процессов. 1 «стыдно грузить своей работой других людей они будут за меня страдать, а я отдыхать, ужас!»меняйте майндсет на самом деле вокруг полно людей, которые хотят расти, учиться, разобраться в вашей области, хотят амбициозных задач и тп вы можете принести им пользу. расскажу, почему делегировать не так-то просто и что с этим делать. мой любимы пример - рассказ преподавателя дизайна интерьеров из британки однажды она была вынуждена на 3 месяца отказаться от двух помощников, которым платила зп работая в одиночку и экономя на наемных работниках, она потеряла почти 60% в доходе. хотите расти и приносить больше пользы - придётся делегировать это позволяет тратить силы с большим кпд и находить время на развитие. привет! сегодня поговорим про делегирование. отличное замечание! правда, надо использовать с осторожностью и слушать фидбек. и такое бывает ;) я тут «интервью» подразумеваю не как собеседование на работу, а как разговор-консультация. 6 рассказывать идею проекта много-много раз с каждым следующим рассказом логические цепочки будут достраиваться яснее, модель будет обрастать новыми деталями. 5 собирать сырые прототипы, макеты из любых подручных материалов в любом качестве а затем тестировать, даже не обязательно с пользователями, достаточно с командой. 4 визуализировать когда информация перед глазами и не занимает оперативную память, мозг освобождается для синтеза идей инструмент может быть любой: доска, mind map, текст в блокнотике - кому что нравится. 3 заниматься хобби, учиться новому обучение в областях, отличных от работы, помогает в работе это способ растить насмотренность: обогащать мозг материалом, из которого он сможет синтезировать нестандартные решения например, мне часто помогли знания в дизайне интерьеров. 2 говорить с пользователями как можно чаще это очевидная практика забывается в суете даже если у вас нет прототипов, нет конкурентов, нет конкретных вопросов, просто расскажите про продукт общение с внешним человеком - катализатор идей. 1 интервьюировать сильных спецов в области у высокоуровневых ребят есть киллер фича - интуиция их нейросеть обучилась на огромном сете примеров из профессиональной практики и способна выдавать очень полезные идеи мы нерепрезентативны, но на деле не совсем :). в этом треде не будет теории просто расскажу, что мне помогает, когда ничего непонятно, а двигаться надо быстро. неопределенность бывает разная например: * есть ощущение, что конкретная часть продукта сделана плохо - что делать?* нужно вырастить retention - как?* у продукта нет долгосрочных планов развития - как их получить?* нужно ли браться за рисковый проект?. стажёры выполняют конкретные инструкции, сотрудники среднего уровня работают в областях с понятным результатом и средне детализированным тз высокоуровневые ребята создают смыслы, выбирают и обосновывают стратегию. профессиональный рост почти всегда сопровождает растущая неопределенность задач, с которыми человек должен справляться. привет! сегодня разбираем движение вперед в условиях высокой неопределенности. 7 раздайте ответственность в команду например, назначьте экспертов по частям проекта у вас появятся помощники, люди увидят доверие, получат возможности роста, снизится неконструктивная агрессия к новым проектам, тк в них будет вовлечена команда. 6 сделайте со всеми хотя бы редкие 1х1 встречи на них узнайте что болит, мотивацию и амбиции, что каждый человек ожидает от вас тогда вы сможете действовать в его интересах и не вредить от незнания. 5 будьте честными и открытыми сделайте ваши решения прозрачными для команды будьте последовательны в своих решениях. 4 расскажите о себе, дайте информацию, которая объяснит почему вам можно доверять расскажите о своей мотивации: почему вам нравится проект и продукт. 3 продемонстрируйте свою полезность и благие намерения решите какие-то из наболевших проблем, сделайте неприятную работу, которую команда давно откладывала. 2 задавайте вопросы, вместо того, чтобы с наскока говорить что делать. 1 много слушайте и наблюдайте в самом начале постарайтесь не лезть и не менять устоявшиеся уклады слишком рано, даже если они вам не нравятся. что помогало мне быстрее прийти к tip point. люди переживают, тк от менеджера зависит успех продукта, а следовательно премии, зарплаты и чем каждый будет заниматься тут агрессия и споры - способ заявить о своих интересах, узнать больше о новом человеке. у момента, когда команда вас принимает, есть классное название - tip point после прохождения этой точки, решения даются легче, скепсис инженеров снижается, атмосфера становится дружественной приближение tip point - важная задача на начальных этапах работы. намеренно сгущаю краски, чтоб описать как может выглядеть знакомство с устоявшейся командой техлид закидывает ноги на стол, прикуривает и говорит: «у нас такие как ты долго не держатся можем расходиться?» другие яркие примеры можно найти в этой ветке. в больших компаниях сильные управленцы нарасхват: они приходят, наводят порядок, заводят процессы, делают команду самостоятельной, а потом идут в следующую - тушить пожары и каждый раз нужно почти с нуля выстраивать доверительные отношения. сегодня поговорим про работу в новой команде расскажу типичные сложности и практики, сработавшие для меня. так, самое время заняться диванной аналитикой :)это что получается, манипуляторы прикидываются добряками?. кстати, попробуйте рассказать руководителю, что вы готовы помочь ему в формулировке планов, принесите свои предложения, расскажите где ответственность устроена неудобным образом явно про это поговорить - полезно только не ставьте задачу как - высказать этому тюфяку своё фи :). похоже на стиль «не готов быть руководителем» манипуляторы ещё могут перекладывать ответственность и риски. давай включим в «добряк» ). огонь, отличное дополнение! думаю, это во многом зависит от опыта: больше практики - лучше интуиция. а ещё, я отложила себе текст про руководителей из моих уроков английского он настолько хорош, что просто отдам вам скриншот ;). 4 наденьте кислородную маску сначала на себя иногда, лучшее, что вы можете сделать для своей команды - это начать бегать по утрам или сходить в отпуск. 3 собирайте фидбек о своей работе с подопечных. 2 говорите правду, учите говорить правду всех вокруг, доносить фидбек напрямую: будет меньше неприятных сюрпризов, меньше интриг и сплетен, вырастет доверие, взаимопомощь, гибкость всей команды. 1 доносите отрицательный фидбек: дайте людям шанс вовремя узнать что что-то не так и исправить это. классные принципы для руководителей из статьи kim scott. а теперь, какой стиль управления у вас. ну ка, расскажите, какой стиль управления у вашего начальника. стили руководства по kim scott раскладываются на 4 типа лучшим она считает «radical candor» такой начальник бросает вызовы и заставляет двигаться вперед, но при этом проявляет заметную личную заботу. мне импонируют управленческие идеи kim scott есть видео версия  или текст её рассказа. личностные качества, помогающие стать крутым боссом, на мой взгляд - это гибкость, способность слушать и понимать людей, умение четко выражать свои мысли, системное мышление, позитивный настрой, харизма что забыла?. мне повезло, у меня было 6 руководителей в яндексе и каждым я восхищалась они были примерами для подражания, растили меня как профессионала, проявляли искреннюю заботу в сложные моменты, защищали мои интересы и помогали. сегодня обсуждаем кто такой крутой руководитель. когда открывается вакансия, мы всегда ее публикуем и рассматриваем внутренних и внешних кандидатов но у новых продуктов есть особенность: менеджером часто становится тот, кто проект придумал, поэтому такие вакансии появляются реже. я старалась написать про усталость. салют!. фокус на результат надо возвращать, когда от переживаний человек скатывается в выполнение инструкций. tldr что делать, если проект горит, а команда или конкретный человек «сломались»:1 дать передышку2 вернуть уверенность 3 прояснить цели, сместить фокус с инструкций на результат4 показать заботу и защиту5 уменьшить давление в любой области. руководителям полезно знать про этот спецэффект, чувствовать порог эффективности давления и уметь переключаться в поддерживающий стиль управления подробно рассказываю про разрушительное давление в посте. я заметила, что у инициативных, творческих и целеустремленных людей есть порог оказываемого на них давления, после которого позитивный эффект челленджа заканчивается и они начинают работать очень плохов этот момент любое дополнительное давление действует разрушительно. всем привет! сегодня говорим про работу творческих людей и коллективов под давлением. класс, видно прошаренного в теме человека :) это комбинация из разных источников с доработками под себя. я начала писать благодаря тому, что меня пригласили вести этот аккаунт xd, так что пока информации мало планирую дальше писать здесь еще можно добавляться в fb. так же как и на старые - через стандартную процедуру найма :) возможно, я не до конца поняла вопрос, дополнишь?. спасииибо. списки дел с приоритетами хорошо спасают от тревожности записала свои лайфхаки в отдельный пост: делитесь в ответ своими техниками и ссылками пусть они сохранятся в треде и помогут другим людям. депрессивное состояние - не стыдно и не исключительно, такой опыт имеют гораздо больше людей, чем вы можете представить есть много эффективных методов борьбы, главное - обратиться за помощью. самое важное из поста: если вам плохо, во-первых обратитесь ко врачу, а во-вторых расскажите близким и руководителю. я написала пост про депрессию на личном опыте рассказала каково мне было и как помочь в таких ситуациях держите:. многие из нас подорвали на этом свою нервную систему с другой стороны мы работаем с живыми людьми, от настроя и жизненных сил которых, зависит успех нашего проекта. начнем с наболевшей после карантина темы - депрессивных состояний на работе быть менеджером - это риски, ответственность за проект и команду, принятие сложных решений. наши темы1 про выгорание на работе2 работа творческих команд под давлением3 кто такой крутой руководитель4 сложности менеджера в новой команде5 движение вперед в условиях неопределенности 6 делегирование7 поделюсь книжками, попробуем вопрос-ответ. я волнуюсь и в то же время очень рада, что смогу поделиться своими мыслями с новыми людьми надеюсь, вам будет интересно, а я научусь пользоваться твиттером xd погнали!. сейчас значительная часть моей работы - интеграция людей, уменьшение неопределенности и создание смысла в начале сложных проектов про это и буду рассказывать. всем привет! я 7 лет работаю в поиске яндекса, была руководителем продуктов, группы менеджеров, кроссфункциональных команд, процессов на 100+ человек больше всего я люблю людей, бардак и наводить порядок. мета-трэд за неделю:— тезисы о профессии рациональное управление продуктами метрики и их риски невозможность коммуникации продуктивные конфликты. у меня такой же ответ: сначала зафиксировать в документе наши текущие представления: все предпосылки и их основания и для каждого — уровень нашей уверенностииз этого уже получится план действий. для начала стоит всё-таки поговорить с человеком ). да, вопрос коллеги, ежедневно помогающего пользователям вашего продукта, — хороший индикатор того, что стоит присмотреться, все ли в порядке с самой фичей, не будет ли проблем у клиентовтолько сначала всё-таки стоит помочь, а дальше уже лечить ). смысл не в проблематизации квалификации юриста, а только в том, чтобы получить зафиксированный в тексте материал для обсужденияэто, кстати, тоже интересная задача: как сформулировать свой запрос так, чтобы он не был неправильно истолкован ). да, конечно, нас интересуют только релевантные знания и совсем не интересуют готовые решения/примеры— только их основания. нет, конечно ) только разные мнения все как в жизни. только после формулирования проблемы, не бросайтесь сразу дизайнить эксперимент ). 🧐 ваш коллега-продакт присылает вам письмо с перечнем вещей, которые на его взгляд можно улучшить в вашем продукте❓ как поступите в этой ситуации?. да, и не просто повестку, а ссылки на нормативные акты, саммари изменений, оценку рисков и тд — все в письменном виде иначе обсуждать такие конкретные и сложные вещи как юридические формулировки и их последствия бесполезно. в соседней ветке обсудили, что прежде чем что-то проверять самим — можно проверить, не сделал ли кто-то это уже за нас. 🧐 руководитель юридического отдела предлагает вам встретиться, чтобы обсудить изменения в законодательстве, затрагиващие ваш продукт❓сразу назначите встречу?. вы решаете конкретную задачу в определенном контекстевозможно, в похожем контексте эту очень похожую задачу уже кто-то решал и даже успел поделиться полученным знаниемначните с загляните на спросите у сообщества, наконец ). бинго! но это только первый шаг ). 🧐 сотрудник службы поддержи пишет вам в телеграм вопрос о том, как работает новая фича продукта❓ как вы ему ответите, что сделаете после?. да только очень важно, что конкретно вы с ними будете делать ). идеальный кандидат, да ) именно поэтому результатов чужих экспериментов и даже настоящих исследований на эту тему может вполне оказаться достаточноя бы точно начинал с поиска готового знания на эту тему, чтобы прикинуть применимо ли оно к нашей ситуации. прежде чем их применять, стоит удостовериться в чем-то другом ). для чего? ). вопросы отличные что с ними будете делать?. 🧐 на встрече с тремя другими фаундерами вы решаете, что пора развивать новое направление в вашем продукте❓с чего начнёте?. сплит-тесты — хорошо, но «дорого»а иногда ещё и невозможно )а иногда вовсе и не нужно ). да, в вопросе, конечно, подвох есть ). звучит так, как будто после определения метрик сразу что-то делать будете ). вас не смущает, что я вашу задачу слово в слово повторил? ;). на мой взгляд, в итоге, после всех проверок данных и расширений контекста — эксперимент, даже при том что конверсию уронили, — успешенесли мы все сделали методически верно, то точно получим новое знание. 🧐 вы решили проверить гипотезу: «форма, разбитая на несколько шагов, будет работать лучше, чем форма на одном экране»❓как будете действовать?. ок, проверили значимость данных и отсутствие технических проблем, —экперимент считаем успешным? ). цель — улучшить онбоардинг )посмотреть на изменения в связанных метриках — хорошая идея, но а) возможно придётся долго ждать б) доказать наличие причинно-следственной связи — отдельная нетривиальная задача. 🧐 вы добавили в онбоардинг дополнительный шаг и итоговая конверсия в соотв ветке эксперимента снизилась на x %❓как вы оцените этот результат? почему?. сегодня попробую предложить вам задачи: ситуации, для решения которых не будет лишним перечитать трэды предыдущих днейпосмотрим, как пойдет ). менеджер продукта, который умеет добираться до предмета конфликта, резко повышает свои шансы на успех коммуникации и получение нового знания первый шаг к на пути к этому — изменить свое отношение — сменить конфликтофобию, на конфликтофилию ). возникший, проявленный конфликт это шанс на то чтобы разрешить создавшее его противоречие, понять важные для людей границы, уточнить взаимные ожидания. как правило, конфликты возникают там где не сбываются ожидания или нарушается автономность участникови то и другое провоцирует сильнейшую естественную реакцию, которая канализируется либо в скрытое недовольство, либо в конфликтное поведение второе — намного лучше. менеджер продукта в отношениях со стейкхолдерами, командой и клиентами должен уметь за эмоциями и словами видеть предмет конфликта — что с чем на самом деле сталкивается. для начала нужно уметь разделять: материал конфликта (кто что сказал, что сделал), предмет (противоречие, по поводу которого все это происходит) и наши переживания обо всем этомкак только от слов и переживаний мы опускаемся на уровень базового противоречия — возникает польза. ⚡️ конфликт это единственный эффективный способ удерживать противоречие в процессе его разрешенияэтим он и отличается от подавленного недовольства, деструктивной конфронтации или разрыва отношенийменеджер продукта должен уметь использовать конфликтные ситуации продуктивно. худшее, что может делать менеджер продукта это избегать конфликтов или пытаться их «гасить» попытки «разруливать» (обычно в чью-то пользу) обычно тоже приводят к плохим результатам, тк основываются на представлении о том, что конфликт это что-то нежелательное, плохое. к сожалению, общество с малых лет приучает нас «жить дружно», поощряет идти на компромиссы, избегать конфликтов маркирует конфликтное поведение в целом как нежелательное — развивает в нас конфликтофобию. пока у вас есть только довольные клиенты, пока в команде все хорошо, а у стейкхолдеров нет к вам вопросов — все оквот только все это лишь слабые свидетельства в пользу того, что все действительно идет как надоо чем-то важном в таком режиме вы рискуете не узнать никогда. продуктивные конфликты — лучший способ узнать что-то новое и разрешить настоящие противоречия (трэд). и тогда шансы на то что успешная коммуникация будет случаться все чаще и чаще — немного повысятсяне больше, но и не меньше ). нужно всего лишь понимать разницу между разными режимами и способами коммуникации; уметь договариваться о понятиях; синхронизировать опыт и контекст участников; уметь слушать и слышать; хорошо формулировать свои сообщения; фиксировать результаты и оценивать успех коммуникации. после этого менеджер продукта должен осознать, что понимание проблем коммуникации и способов их преодоления — это сфера его профессиональной компетентностиэтому нужно учиться также как исследованиям, аналитике и всему остальномуа дальше все просто:. для начала нам всем нужно выработать у себя привычку оценивать успех каждой ситуации коммуникации:— по-настоящему расстраиваться (но не сдаваться), когда взаимопонимания не случилось;— по-настоящему радоваться, когда понимание произошло. иначе раз за разом будет получаться одно и тоже: мы не поняли клиента, команда не поняла нас, стейкхолдеры вообще ничего не поняли, а время и деньги потрачены, продукт сделан и результата нет. менеджер продукта, результаты которого зависят от успеха множества разных ситуаций коммуникации, — должен помнить об этом (понимание — чудо, всем проще сделать вид) и делать все, чтобы такие ситуации не оставались для него незамеченными. культура при этом дает нам кучу способов сделать вид, что коммуникация случилась и демотивирует демонстрацию обратногосказать: «я не понял, повторите, пожалуйста», — социально намного менее приемлемо, чем покивать, когда на самом деле ничего не понятно. против коммуникации: сложности на пути доставки сообщения; разные словари и разный опыт участников; несовпадающий контекст; плохие коммуникативные навыки; разные результаты интерпретации и тд и тпв итоге понимание случается так редко, что мы привыкаем этого не замечать. качественная коммуникация со всеми кто работает с продуктом (клиенты, команда, стейкхолдеры и тд) — ответственность менеджераглавное что мы должны понимать — успех коммуникации случается вопреки множеству предпосылок (то есть это практически чудо). менеджер продукта — профессиональный коммуникаторсистему знаний о продукте невозможно создать без коммуникации с другими людьми; система знаний не нужна, если ее составляющие невозможно в процессе коммуникации передать другим людям. трэд про коммуникацию, которой все постоянно занимаются, не смотря на то что она практически невозможна. — вот хорошее про первую проблему (ссылка из того же симулятора). обо всем этом можно было бы и не писать, но метрики настолько полезная штука, что лишний раз вспомнить/проговорить потенциальные риски, которые с ними связаны, — кажется никогда не повредит. «закопавшись в операционке, забыли про стратегию», — ровно об этом слишком пристальное наблюдение за метриками легко провоцирует первое и вполне может вытеснять второе. в таком режиме, к вопросу «сколько новых клиентов пришло в прошлом месяце?» добавляется не только вопрос «что нам сделать чтобы привести больше клиентов в следующем?», но и такие вопросы как «где у нас основные точки для роста?» и «чем мы сейчас не занимаемся, а стоило бы?». проактивный режим, на мой взгляд, включается, только когда мы начинаем регулярно задавать себе вопросы про будущее. задачи, которые кажутся срочными, легко и естественно вытесняют задачи, которые на самом деле являются важными так устроен наш мозг — он с радостью реагирует на актуальные стимулы, тут же забывая о более далекой перспективе. все это время уровень конверсии из регистрации в платящих клиентов никак не менялся, поэтому про него и не думали. просело количество новых посетителей на сайте, начали думать как поправить рекламу; упал средний чек, начали думать про апсейл; увеличился отток, начали думать, какую новую фичу запилить, чтобы она повысила ретеншен. третья ловушка — слишком внимательно смотреть на метрики и слишком сильно реагировать на их изменения довольно очевидно, как это может привести к переключению в исключительно реактивный режим. в первом случае вы себя убеждаете в собственной правоте (подкрепляете иллюзии) во втором — продолжаете осторожно повышать уровень уверенности в том, что проверяемая модель описывает реальность для первой задачи обычно хватает одного наблюдения, для второй точно нужна их серия. связанная ошибка — считать, что изменения метрики что-то подтверждают мне кажется, что они всего лишь дают довольно слабые дополнительные свидетельства. в самой первой главе в симулятора () есть пара хороших задач про понимание, где причинно-следственная связь, а где только возможная корреляция по мне так очень недооцененное знание, особенно в приложении к работе с метриками. самая простая ошибка: «после не значит вследствие» сделали что-то в продукте — изменилась метрика — засчитали себе win подкрутили еще — метрика просела — lose можно ли на этом основании делать какие-то выводы? кажется, что «да», а на самом деле «пока не понятно». ок, сегодня будет тема попроще — как могут вредить метрики ;). рис точно внес весомый вклад в популяризацию экспериментального подхода но и предпосылки для карого-культа создал )голдратт, купер, нильсен писали о научном подходе к производству, разработке по, дизайну интерфейсов за много лет до упомянутой вами книжки. локальную сеть рекомендую сразу, с железом не так однозначноесли готовы платить и нужен запас на случай взрывного роста — можно сразу взять сервер «на вырост»если умеете быстро перезжать без значимого даунтайма, то нет смысла платить за излишки мощности. то что мало кто говорит об управлении продуктами и тестах в связи с научным методом — для меня свидетельство в пользу того что наша дисциплина пока довольно молода ). я не против экспериментов, я опасаюсь, что мы делаем из их применения карго-культ и поэтому вместо получения знаний (снижения рисков) производим иллюзииабсолютных знаний не бывает, с этим согласен. начните с первой части «философии без дураков» александра силаева ). спасибо! постарался раскрыть тезис про научный метод с примерамипишу про и для «джунов», независимо от их стажа, тк кажется, что их чисто статистически больше чем остальных. научный метод — единственный способ получения объективного знания в управлении продуктами такой уровень зачастую недостижим поэтому пользуемся байесовским методом и строим систему знаний из вероятностных моделей, обладающих прогностической ценностью. по мере появления новых свидетельств такое знание будет дробиться: «айтишники понимают», «бухгалтеры нет» и тд но, по крайней мере, в такой формулировке мы не будем выдавать свое мнение за факт жизни и всегда будем знать, как мы к нему пришли и что нам дальше с ним делать. «[набор свидетельств] позволяет нам с [определенной степенью уверенности] утверждать, что [определенные] клиенты не понимают смысла процентного значения sla, и мы продолжим уточнять это утверждение с помощью [набора воспроизводимых в течение длительного времени действий]». и тогда, через некоторое время, вместо «клиенты не понимают, что значит sla — 99,8 %» в системе знаний о продукте появляется намного более длинная запись:. после этого фиксируем, что мы можем сделать, чтобы этот уровень увеличить, каких свидетельств нам не хватает но на этом не останавливаемся обязательно фиксируем, какие свидетельства нам позволят понять, что это знание к реальности не имеет отношения и начинаем их получать. тогда рациональным методом управления продуктами будет следующий: формируем систему знаний, в которой каждому нашему «представлению» присвоен «уровень нашей уверенности» в том, что оно описывает реальный мир. — но если на подлинную научность знаний претендовать не приходится, то всё расходимся?— нет, конечно! продолжаем работать и берем из научного метода то, что можно к нашим реалиям приложить: байесовский метод. поэтому надо честно признаться: даже если мы стремимся использовать научный метод, наши исследования и эксперименты намного ближе к психологии (с ее кризисом воспроизводимости), чем к медицине (с ее многоэтапным двойным слепым рандомизированным методом) про физику вовсе молчу. наконец фундаментальная проблема заключается в том, что мы имеем дело с постоянно меняющимися людьми, живущими в постоянно меняющихся обстоятельствах поэтому соблюсти критерии научности и произвести настоящее объективное знание нам ой как трудно. если мы прошли сквозь темную комнату с завязанными глазами — мы узнали только то, что через нее можно таким способом пройти но первое знание о том, что в этой комнате, оказывается, есть какая-то мебель, мы получим только когда расшибем свою коленку о первый попавшийся стул. вторая проблема в том, что если мы провели один эксперимент и получили свидетельства в пользу того, что наша гипотеза верна, — то мы, конечно, молодцы но если мы при этом думаем, что получили настоящее знание, то возможно мы немного поторопились. «99,8 % [уверенности в том] что сервер не упадет дольше чем на 1,5 часа в месяц» и всего «0,2 % [уверенности в том] что коля поймет эту цифру правильно, когда будет этот сервер покупать» (пример намеренно искажен). теперь про проблемы первая опасность тут в том, что нам естественным образом хочется думать, что знание булево по своей природе: «true|false», «знание есть или знания нет», а на самом деле оно всегда вероятностно. если сама модель при этом обладает прогностической ценностью, — бинго! — мы получили знание из набора таких моделей можно строить систему знаний о продукте. таким образом, с каждой проверкой, с каждым новым свидетельством, по чуть-чуть увеличиваем уровень уверенности в том, что модель действительно описывает какой-то кусок реальности (байес). научный метод это способ эмпирического получения знаний берем исходную, принципиально опровержимую, модель и с помощью серии наблюдений и экспериментов изо всех сил пытаемся найти ее границы, понять, где она ломается, в каких условиях не работает (поппер). про научный метод, уровень уверенности и рациональное управление продуктами (все сообщения в одном трэде):. «99,8 % [уверенности в том] что сервер не упадет дольше чем на полтора часа в месяц» и всего «0,2 % [уверенности в том] что коля поймет эту цифру правильно, когда будет этот сервер покупать» (пример намеренно искажен). теперь про проблемы первая опасность тут в том, что нам естественным образом хочется думать, что знание булево по своей природе: «true|false», «знание есть или знания нет», а на самом деле оно всегда вероятностно. если сама модель при этом обладает прогностической ценностью, — бинго! — мы получили знание из набора таких моделей можно строить систему знаний о продукте. таким образом, с каждой проверкой, с каждым новым свидетельством, по чуть-чуть увеличиваем уровень уверенности в том, что модель действительно описывает какой-то кусок реальности (байес). научный метод это способ эмпирического получения знаний берем исходную, принципиально опровержимую, модель и с помощью серии наблюдений и экспериментов изо всех сил пытаемся найти ее границы, понять, где она ломается, в каких условиях не работает (поппер). методогическая проблема в том, что мало кто проектирует эксперимент так, чтобы он _опровергал_ гипотезупро технические проблемы говорят чаще (валидность данных, статзначимость, подглядывание), но про критерий _воспроизводимости_, кажется, часто просто забывают. про что интересно?. ✓ при принятии решений главные задачи менеджер продукта:а) включать «медленное» мышление;б) не давать себе скатываться в воспроизводство простых паттернов и следование легким эвристикам;в) не выдавать одно за другое. ✓ решения это просто «educated guesses» — обоснованные предположения не больше, но и не меньше. ✓ главная метрика для менеджера продукта — уровень уверенности в конкретном представлении (шире, уровень соответствие модели той реальности, которую она описывает). ✓ главное содержание работы менеджера продукта — строить систему знаний о продукте. теперь тезисы-2 (буду рад если поможете мне их уточнить):✓ главный инструмент менеджера продукта — научный подход. уже узнали себя? ). карго-культ это «принимать решения», не зная, как на самом на самом деле это происходит. карго-культ это «мониторить метрики», не понимая как эти данные получаются и что с ними на самом деле нужно делать. карго-культ это «проверять гипотезы через эксперимент», по большому счету не зная, ни что такое гипотеза, ни что значит проверять, ни при чем тут эксперимент. — менеджеры продуктов должны следить за метриками, но часто они либо не знают, что с этими показаниями делать, либо думают, что можно на основе этих показаний можно что-то решать. — менеджеры продуктов должны принимать решения, но многие просто не знают как это делать. начнем с тезисов (буду рад если вы меня переубедите):— продуктовый подход должен быть самым рациональным и научным из всех, но слишком часто превращается в хорошо оснащенный карго-культ. сначала дисклеймер: дальше будет намеренная проблематизацияесли вас что-то заденет, то именно для этого я и пишупри этом я сам в разной степени «грешен» по всем пунктам, именно поэтому я думаю, что могу о них писать. ок, вчера все было достаточно однозначно сегодня попробую поразжигать про рациональное управление продуктами. если вы об этом, то для проектов обычно удобнее облако, а для продуктов it depends ). что вы используете для своих проектов?. если вам нужна будет помощь с выбором или решите потестировать что-то из наших услуг — пишите в тг (там на самом деле человек отвечает) — ребята подскажут и помогут. в целом, на рынке уже сложился набор продуктов подходящих под конкретные задачи проектов на любой стадии, от тестирования mvp до выхода на ipo вам остается только выбрать провайдера, вместе с которым вы сможете пройти весь этот путь ;). наконец, тем, кому нужно правильно хранить важные персональные данные клиентов, приходится брать серверы в аттестованных облаках или ставить свое оборудование в специальных сегментах дата-центров #152fz. для ребят, которые уже готовы инвестировать в собственное железо, есть колокейшн: приносите свое оборудование и арендуете под него один юнит, всю стойку или целый этаж в дата-центре #colocation. если ваши админы и программисты готовы самостоятельно настраивать, поддерживать и выжимать все соки из железной инфраструктуры, то выделенные серверы — ваш выбор заодно сэкономите денег #baremetal #servers. облачная платформа подходит для любых проектов и задач, но особенно хорошо заходит командам, которые пока (исторически) или совсем (идеологически) не готовы самостоятельно лезть на уровень железа #cloud. виртуальные серверы и сети вокруг них, включая балансировщик, объектное хранилище, cdn, хостинг dns-записей, мониторинг доступности — базовые составные части облака если решите жить в облаках, убедитесь, что у вашего провайдера есть весь необходимый набор #cloud. ) хорошо подготовленный человек. managed #kubernetes — для тех кто нанял себе администратора, а тот не хочет тратить время на разворачивание кубера руками как и в других managed-сервисах, провайдер тут отвечает за работоспособность, а админу остается только решать сколько подов запустить под мастер-нодами. #dbaas пригодится командам, которые не хотят думать о том, как самостояльно обеспечивать их настройку и сохранность обязательное требование — трехкратная репликация, nice to have — откат до любого момента в истории. рядом с функциями работают управляемые базы данных — #dbaas этот сервис обеспечивает настройку и бэкапирование ваших postgress, mysql, mongo, redis и любых других бд. #faas если функции будут работать постоянно (много вызовов, замена виртуалке), то это будет дороже чем арендовать сервер, но перечитайте предыдущий твит ;). #faas функции вам так же понадобятся когда ваш продукт потребует быстрого масштабирования, здесь оно случится (в любую сторону) без вашего вмешательства. #faas функции отлично подходят для проверки прототипа: загружаете код, настраиваете способы запуска, получаете результат — за тестовый сервер при этом платить не нужно (дешевле). функции (#faas) это serverless-продукт сервера нет, а польза остается платите только за пользу. поехали: продукты для it-инфраструктуры начинаются с аренды стоек в дата-центре и в своем развитии добрались уже до бессерверных функций в облаках сегодня расскажу когда и что выгоднее брать. пт, 1809 — предложу по новому посмотреть на конфликты и то, как с их помощью развивать команды, процессы, продуктысб, 1909 — пока еще не решил ;)вс, 2009 — буду постить ссылки на истории успеха наших клиентов — потому все-таки именно в этом наш главный результат. план на неделю:ср, 1609 — попробую убедить вас в том, что метрики не так важны, как вопросы, которые вы сами себе задаетечт, 1709 — заведу любимую пластинку про невозможность коммуникации (как с командой, так и с клиентами). план на неделю:пн, 1409 — расскажу про облака, серверы и дата-центры: что и на каком этапе жизни проекта вам подойдет лучше всеговт, 1509 — обсудим неочевидного кандидата в главные метрики для менеджера продукта — уровень уверенности. привет! я антон куликов — директор по продуктам selectel на этой неделе поговорим о рациональном управлении продуктами, невозможности коммуникации и продуктивных конфликтах. спасибо за эту неделю с вами была ира кузнецова из достависты было очень интересно писать для вас надеюсь, вам тоже было нескучно захотите обсудить что-нибудь, велкам! facebook:. , сейчас вам в личку скину промики на бесплатную доставку доставистой вдруг ключи понадобится передать или винишка из магаза заказать – мало ли. вот мой личный топ за неделю: - за вопросы про то, делимся ли с кандидатом фидбеком; за крутую дискуссию про важность опыта и обучения; за крутой вопрос про то, как спрогнозировать диапазон изменения метрики. ну понятненько :). а чего у вас так полыхнуло-то?. микро-тред про видение:. про найм продактов:. про то, как мы делаем эксперименты в достависте:. про ресерч в локальных командах:. про работу с командами в других странах:. мета-тред со всеми тредами недели про особенности оффлайн и b2b продуктов. на входе сейчас очень много откликов с hh, но много проблем с качеством дальше пока вход воронки не самая большая проблема. в продакты по-разному приходят: кто-то из разработчиков (у нас есть такие ребята в команде), кто-то из проджектов (и такие есть в команде) я пришла из системной аналитики, например ни у кого из нас нет официально управленческого образования. я думаю, что да: чаще в резюме ищу релевантный опыт, а не курсы иногда на текущих позициях у ребят получается взять на себя какую-то минимальную продуктовую работу — про это уже можно рассказать на собесе, и есть компании, которые нанимают джуниоров. честно, вот вообще не могу дать оценку народ, подскажите, у кого есть такой опыт?. что больше всего понравилось на неделе? дайте фидбек, что ок, что улучшить, в реплаях, пожалуйста:. не эксель у всех продактов доступ к базе и tableau, интерфейсные метрики дополнительно мониторим через amplitude, ab в мобилках запускаем через firebase, некоторые тесты - через google optimise, но уходим от этого в сторону экспериментов на беке (разедлить юзеров, записать в бд). не фокус группа, а скорее, запуск фичи на городе да, может да, большие города тоже запускаем с осторожностью но если и на мелком городе все пошло не так, то мы потеряем меньше, чем если бы запустили на большом городе. расскажите, как работаете над видением в своей компании? очень интересно собрать разный опыт. видение компании подсказывает, как формулировать стратегию, а она уже напрямую влияет на top company objectives на год и на квартал это очень удобно, что все связано. так появилось направление recipient experience этим надо заниматься, потому что доставка – единственная точка касания интернет-магаза и получателя, поэтому это может влиять на ретеншен магазина в какой-то момент крутой получательский опыт может стать конкурентным преимуществом. 4 вместе с тем, чтобы придумывать решения, также пытаемся думать о направлениях: в какие из них прямо сейчас уже стоит начинать копать, чтобы иметь хороший прогресс через 3-5 лет они могут быть неприоритетными прямо сейчас, но в какой-то момент станут. 3 думаем об упрощении: как сделать определенный процесс для пользователя легче? можно ли его вообще убрать?. в контексте последнего примера нас иногда спрашивают: нафига вы что-то делаете, если экосистемы все равно поглотят всех но на деле мы видим, как рестораны, например, уходят от агрегаторов, а бизнесы развивают собственные каналы продаж и уходят из амазона. 2 думаем о том, как изменятся индустрии, прилегающие к доставке: городская инфраструктура, жилищное строительство, робототехника, интерфейсы (например, нейро), экологические тренды, тренды рынка труда, системные тренды – например, на децентрализацию. 1 думаем о том, как скорее всего изменятся или не изменятся потребности людей через 10-15 лет пытаемся понять, как мы можем содействовать этим изменениям. не успею сделать сегодня полноценный тред про стратегию, но поделюсь знаниями, которые подсмотрела у нашего head of growth это, скорее, относится не к стратегии, а к видению будущего так что микро-тред про то, как формулируем видение. спросила у команды россии, говорят, как крупных клиентов федеральных там найдём). не наняли, потому что именно те скиллы на тот момент были для нас важны. прямо негатива не было — все-таки это последняя стадия общения но была ситуация, когда резко противоположные были мнения у двух руководителей один говорил «супер, 11/10, все круто», другой указал слабые стороны, привёл примеры, с чем кандидат не справился на работе. так вот, с такими экспериментами поступаем следующим образом: устанавливаем планку изменений, которую будем считать успехом, а дальше сравниваем с предыдущей динамикой показателя да, не очень чисто, но изменения на уровне системы позволяет отловить. во втором примере – технически настолько сложно поставить корректный аб, что проще включить на одном городе новую технологию на всех на день-два и последить за health-метриками системы в динамике. второй случай – какое-то комплексное изменение системы например, стратегия резкого снижения цены, чтобы отобрать долю рынка или новая технология назначения заказов на курьеров в первом примере эффект надо ждать на уровне рынка, а не продукта – в аб не запустить. на практике чаще дорабатываем, конечно – жалко времени разработки. в конце сраниваем группы, считаем значимость, оставляем, если стало лучше если не стало – обязательно идем в исследования, чтобы понять причину после этого становится ясно, дорабатывать фичу или убивать. прошу прощения, не ответила на реплай сразу теперь поняла вопрос есть, наверное, 2 типа экспериментов – что можно в аб запустить и что нет в первом случае все понятно: рассчитали размер выборки, длительность теста, поделили на группы, ждем. ребят, расскажите, дают ли вам работодатели фидбек по тестовому или интервью? в каком формате? сами просили?. очень круто я 100% согласна, что фидбек – это полезно очень надеюсь, что когда-нибудь сможем так же подробно каждому кандидату рассказывать, как прокачаться в конце концов, это на руку рынку труда и нам как будущим потенциальным работодателям этого кандидата. тут область субъективности, на самом деле, но для меня более ценно мнение руководителей, особенно, последнего проблем с количеством обычно не возникает: нужны и контакты руководителей, и коллег. не за упоминание, а за другие сильные стороны, которые в конкретной позиции нам не релевантны на деле, там несколько факторов: резюме, опыт, индустрия, где работал если все это говорит о том, что кандидат ок, но он не упоминает это в ответе, мы все равно продолжим общаться. вообще идея годная а вам сами фидбек прислали?. скорее, обычно достаточно фидбека по тестовому, никто пока не просил но, думаю, что можем начать делиться минус вижу в том, что могут начаться споры с кандидатом на тему выставленных оценок, а времени и так не очень много. не делимся скор-картой вообще, но по тестовому можем дать детальный фидбек по запросу когда обсуждаем тестовое, мы с ребятами отписываемся по сильным и слабым сторонам, поэтому такой фидбек относительно легко дать. хотела вытащить ссылки в следующий твит, но случайно бахнула сюда же, сорри когда редактирование уже появится?. кстати говоря, у нас открыто несколько вакансий продактов, первые две в следующем твите – в мою команду буду рада получить резюме в телеграм: ira_kuznetsova. последняя очень важная часть – это сбор референсов мы довольно серьезно к этому подходим, просим до 5-7 контактов во время сбора референсов задаю определенный набор вопросов, вот он:. всегда чувствуется, как кандидат кайфанул, когда делал тестовое это в деталях – крутая преза, тексты в интерфейсах лучше, кандидат глубже копает в гипотезы, оценку конкурентов, запускает рекламу, чтобы оценить спрос, хотя напрямую об этом не просили и тд. важная вещь после проверки хард-скиллов – это то, как кандидат прокачивается и учится, насколько искренне любит это делать вторая вещь – любопытство, искренний интерес это видно по вопросам, которые задает продакт, и даже по тестовому заданию. если не видим проявления нужных нам скиллов в опыте кандидата – даем небольшие задачки на порассуждать эти данные тоже идут в скор-карту. во время общения с командой ищем в опыте кандидата примеры, которые помогут заполнить скор-карту: говорим о предыдущих кейсах и пытаемся понять мотивацию кандидата заниматься продакт-менеджментом. - что вы не любите делать? в каких областях нужно прокачаться? (на соответствие скор-карте);- как считаете, какую оценку по 10-балльной шкале вам бы поставили предыдущие боссы? (во время сбора рефов сравниваем эти оценки, чтобы найти несоответствия или слабые области кандидата). на скрининге спрашиваем вот что: - каковы ваши карьерные цели? (крутые ребята четко понимают, как хотят развиваться в профессии);- в чем вы очень хорошо разбираетесь? (смотрим на соответствие скор-карду: если кандидат упоминает области, которых там нет, не продолжаем общение. поделюсь примером, вдруг вам тоже будет полезно:. плюсы такого подхода: 1) можно рационализировать свои ощущения от общения с кандидатом по софт-скиллам и строго оценить хард-скиллы; 2) можно сравнивать разных кандидатов, когда есть сомнения;3) объективно можно выбрать лучшего (но с софтами не работает). скор-карта помогает написать и описание вакансии по мере общения с человеком заполняем эту карту: оцениваем уровень компетенции и оставляем комментарий с подтверждающим примером из опыта кандидата шкала оценки – от a до e, вот такая:. придерживаемся процесса, описанного в книжке who о том, как нанимать a-players все начинается со score card, в которой прописываем позицию, миссию кандидата, expected outcomes и самое главное – список компетенций карту заполняем для каждого кандидата, который ушел на тестовое. как нанимаем продактов процесс состоит из нескольких этапов: скрининговое интервью, интервью с командой и руководителем (вместе), тестовое, сбор референсов если есть какие-то сомнения, в финале я прошу иногда поговорить с кандидатами нашего head of growth. ну а как же обучаться, если не следишь за тем, что вокруг в мире происходит в твоей области? не понимаю, о чем вы, если честно. опыт вместе с обучением и постоянной рефлексией, кажется, не должен привести не туда. это все к тому, что нет идеальных хэдов, cpo или продактов наша профессия предполагает постоянный рост и обучение, и это, наверное, самая лучшая фича профессии, а самое главное – это все же опыт плюсаните, у кого такое же ощущение. сейчас готовлю тред про найм продактов, который опубликую уже завтра, и очень надеюсь, что через год обнаружу, что начала нанимать сильно лучше, чем сейчас. подумалось, что через годик буду смотреть на свои треды в на этой неделе, и меня будет адски кринжить за год сильно меняется опыт, и про какие-то вещи мы можем думать совсем по-другому это классно и значит, что мы растем. вероятно, у ребят есть более строгие методы оценки, но это сильно зависит от задачи давай посмотрим твою и, если сама не смогу ответить, привлеку ребят, разберем вместе. дальше это пересчитываем в заказы в день, диапазоны этих цифр уже можно сравнивать это если вкратце давай в личке конкретные примеры разберем, если нужно. мы предполагаем, что первый сдвинет конверсию от +5% до +20% максимум, а второй может снизить отмены от -3% до -25% вот этот интервал оценивается здравым смыслом: смотрим, как менялась метрика в предыдущих похожих экспериментах чаще всего. у нас все супер-просто, мы не высчитываем подробный прогноз нам это надо, чтобы приоритизировать эксперименты допустим, есть 2 эксперимента, один влияет на конверсию в первый заказ, другой - на вероятность отмены заказа. красиво. если не очень понятно объяснила, уточните вопрос, пожалуйста можно на конкретном примере разобрать. допустим, поняли, что эксперимент наиболее impactful в текущем скоупе команды тогда планка успешности заедается, исходя из потенциального роста в заказах минус затраты на разработку и поддержание этой фичи если мы в плюсе, делаем если в минусе, нет. ну это комплексный вопрос тут надо разные эксперименты рассматривать предположим, речь идёт об а/б перед экспериментом рассчитываем длительность эксперимента, прикидываем, надо ли его вообще делать, исходя из потенциального максимального сдвига ключевой метрики. вообще да, общение недооценено! согласна :). как люди реагируют? ну то есть, у них же есть некий контекст, который резко меняется, когда ты начинаешь такие вопросы задавать :). да исторически так сложилось он легковесный, быстрее работает, чем джира нет какой-то прямо рациональной причины. наконец-то почти догнала своё же расписание на неделю. тут можно рассказывать очень долго если нужно более детально рассказать о какой-то части процесса – спрашивайте 😇 напоминаю, что топ-3 самый крутых вопроса подарю промокоды на одну бесплатную доставку). после этого эксперимент дорабатывают, запускают, ждут окончания и обсчитывают результаты приносят на тот же peer review и/или на мероприятие под названием friday wins там мы делимся победами, которые произошли за последние пару недель участвуют, опять же, все страны. - каков максимальный предел изменения метрики в этом эксперименте - стоит ли его вообще делать?- верим ли мы доказательствам того, что эксперимент сработает?- какое предположение мы проверяем? есть ли более рисковое предположение?. вот какие вопросы чаще всего мы задаем:- как это сделать дешевле?- допустим, оно сработало – какие следующие шаги и решения, которые будем принимать?- как это сделать без разработки вообще?. самое ценное, как мне кажется, в этой истории – то, что peer review не похоже на обязательное мероприятие по закидыванию идеи какахами нет цели утопить гипотезу, есть цель ее улучшить презентующие получают кучу полезных вопросов, над которыми можно подумать, и уходят довольными. для того, чтобы сделать эксперимент более мощным, собрать больше фидбека, учесть больше рисков, вы можете прийти на еженедельную часовую встречу под названием peer review туда может прийти любой сотрудник компании и дать свой фидбек – включая ceo, фаундера и growth-директора. самое интересное в этом процессе – ревью гипотез если вы делаете эксперимент, вы не можете его запустить, не показав более опытному менеджеру (продакту, сейлзу, дивизионалу и тд). а вот шаблон описания гипотезы – все будет хорошо, если опишете по нему:  он хорош тем, что мотивирует задать себе правильные вопросы – а не фигню ли я проверяю этот формат хорошо работает для нас, а вы можете его подтюнить под свои задачи. чтобы об экспериментах в компании мог узнать любой человек, собираем все эксперименты на одну канбан-доску со следующим флоу:. основные шаги процесса следующие:. после ревью вы либо дорабатываете, либо готовите к запуску эксперимент как только эксперимент закончен, нужно его обсчитать и решить, что делаем – убиваем идею, дорабатываем или выкатываем на всех о результатах обязательно рассказываем компании. вот как это работает вам пришла в голову отличная идея – вы поняли, что хотите инвестировать свое время в проверку этой идеи дальше описываете ее по шаблону, готовите обоснование (исследования, предварительный прогноз, расчет экономики на салфетке и пр) и отдаете на ревью. второй моей целью было сделать процесс таким, чтобы этим пользовались не только прокаченные продакты в hq, но и продакты в странах, у которых экспертизы меньше, сейлзы и менеджеры стран, которые про продуктовый подход могут и не знать вообще. подошла к этому продуктово: чтобы адопшен процесса был высоким, нужно решать конкретные проблемы участников – продактов, аналитиков, саппорта, кантри-менеджеров и лидов поговорила со всеми, сформулировала гипотезы, и через пару недель мы описали и отревьюили первый эксперимент. вовремя поняли, что это не та бюрократия, которая поможет нам двигаться быстрее я тогда предложила взять себе objective на квартал построить классный и быстрый процесс проверки гипотез во всей компании. стало ясно, что как будто бы такие инициативы надо контролировать возникали предложения вроде делаем комитет во главе с ceo, будем строго отбирать эксперименты, чтобы такого не было. курьеры не брали более дешевые заказы, ждали, пока включится surge – и это привело к куче подвисших заказов чтобы хоть как-то замотивировать их разбирать заказы, мы начали компенсировать стоимость заказов баллами для курьеров на них и потеряли кучу денег. начну с истории чуть меньше года назад мы сделали первый подход к surge прайсингу с наскока, эксперимент вышел из-под контроля и за одну ночь мы слили вникуда около полумиллиона рублей. в предыдущих тредах постоянно упоминаю слово эксперимент это как со словом гипотеза – можно прикрыть им любую дичь, ничего общего с гипотезой не имеющую не хочу стоять в белом пальто, но у нас дичи и в самом деле довольно сложно пролезть в разработку и стать экспериментом. это как рэндом кофе работает? :) расскажите поподробнее?. спасибо!. на деле, когда приехали, увидели этот мото-грузовик и курьеров, которым вообще норм чиллить лёжа на мотобайке и поняли, что хаб вот реально можно запустить, просто наняв 1 курьера с таким самодельным грузовичком все сильно проще. вообще это вот яркий пример того, что надо ехать туда и внимательно смотреть по сторонам мы тогда игрались с технологией микро-хабов и хотели запустить хаб для перехвата посылок рядом с клиентами мы думали, что это будет геморрой, как в россии — найти офис, снять, бумаги, то се. а ещё байк супер-грузоподъемный курьеры пихают посылки сбоку, под ногами, друг на друга или делают из байка грузовик выходит как-то так, дикая эффективность, конечно. все так, байк делает доставку сильно быстрее, и он есть у каждого плюс, международные стартапы с хорошими инвестициями, которые жгут бабки тоннами дикая плотность курьеров и заказов. короче, изобретательность нам была очень нужна опыт сложный, но интересный по итогам ресерча притащили пару технологий в курьерский продукт и вот сейчас запускаем пару новых клиентских продуктов без вьетнама мы шли бы к этому гораздо дольше такая история. с курьерской стороной было сильно проще – вызвал курьера на заказ, быстренько договорился с ним погонять за ним на байке целый день в обмен на наличку курьер конкурентов на радостях выложит тебе и скриншоты приложений, и систему мотивации, и свои беды отличный способ. ну и в конце концов, самый крайний метод – идти по улице вместе с переводчиком и заходить во все двери подряд: магазины, лавки, кафе, кофейни кто-нибудь точно захочет поговорить самый отчаянный продакт у нас и так делал было круто, говорит. неплохо работает метод снежного кома мы не ожидали, что вьетнамцы так хорошо будут рекомендовать своих знакомых а оно сработало, многие рекомендации оказались релевантными не стесняйтесь просить порекомендовать кого-то. шестое: поиск респондентов – это боль хуже поиска переводчика мы хотели говорить с сотрудниками отделов логистики и собственниками бизнеса – это капец как сложно проблему можно закрыть с помощью агентства, но в нашем случае срок подбора составил 3 недели пришлось выкручиваться. вообще чем с большим числом людей познакомитесь – тем быстрее погрузитесь я использовала тиндер для поиска респондентов и профессиональных знакомств, например :) получалось хорошо. пятое: с первых дней знакомьтесь с местными продактами и идите на митапы и прочие тусовки если говорить конкретно о хошимине, то эта культура там есть, хоть и пока только в зачатке так, например, мы познакомились с продактом из tiki и cpo ahamove. четвертое: интерком или другой чат с пользователями – ваш друг если надо набрать респондентов, пишете объявление и с помощью гугла переводите с английского на местный, делаете рассылку в интекоме – и дальше общаетесь с вашими лидами письменно. третье: когда местный сейлз обещает переводить вам по ходу разговора и говорит с клиентом на местном языке, делайте аудиозапись и обязательно потратьтесь на расшифровку и перевод на пятом интервью мы это сделали и поняли, как много информации мы пропускали мимо на предыдущих. азиаты ребята закрытые и первое время воспринимали нас как людей, которые приехали мешать им работать или того хуже – проверять, как они работают, и переучивать в конце привыкли, конечно, хотя мы и правда проверяли. второе: если едете в азию, готовьтесь к тому, что азиатской команде потребуется время, чтобы подстроиться к работе с вами бесполезно пытаться сразу договориться с хэд оф сейлз, чтобы он брал вас на все важные встречи. где искать: в facebook куча групп переводчиков, начинайте оттуда либо пойти в сообщества экспатов в том же фб и попросить рекомендаций вообще просьбы порекомендовать кого угодно на удивление хорошо работают. первое: заранее ищите переводчиков мы ожидали найти их на месте за пару дней, а в итоге на подбор потратили неделю с лишним если хотите гарантий, лучше оплатить несколько дней работы переводчика заранее, чтобы когда клиент согласится на интервью, переводчик уже был под рукой. все новогодние каникулы упорно готовились и все равно столкнулись с проблемами, которые не смогли предвидеть поделюсь основными выводами. это приводит к космическому уровню доставки заказав спросонья кофе и свежий манго, получаешь его через 10 минут у подъезда своего дома если ты бизнес и хочешь срочную доставку, курьер найдется за пару секунд, а в твоем офисе появится через 15-20 минут это невероятно. вьетнам выбрали потому, что конкурировать там гораздо сложнее традиционные курьерки и местные стартапы типа ahamove насмерть бьются за клиентов с lalamove и grab, а на пятки наступает gojek. в конце прошлого года мы решили ускорить рост продукта во вьетнаме и поехали туда, чтобы научиться у конкурентов технологиям, пощупать продукт в живой среде и понять, как расти быстрее. обещанный тред история про одну длинную командировку во вьетнам флешбеки порой мучают, да. про что писать больше?. поэтому, когда сильно надо, мы едем в командировку и исследуем на месте очень хочу про это рассказать, чтобы вы не повторяли наших ошибок, но уже завтра спокойной ночи!. минус один – качество когда исследование идет не на английском (или на худой конец, испанском), никак не проверить, насколько корректно ребята собрали данные в англоговорящих странах, например, в индии или на филиппинах, иногда подключаемся сами. тут мы поступаем просто: в hq пишем детальные гайды по исследованию, готовим прототипы, если речь идет о тестах, отправляем инструкцией в локальные команды они все переводят самостоятельно и сами же идут рекрутить респондентов и проводить исследования. последняя штука: как помочь странам собирать данные, которые нам нужны есть как бы 2 способа про первый сейчас, про второй завтра спойлер – второй круче. короче, всем советую я довольна, большие страны тоже довольны, у остальных – пока период адопшена :). лонг стори шорт: в результате даже с несбалансированными шкалами импакта (которую фиксим) беклог получился автоматически таким, каким вышел бы из моей головы после приоритизации. идея была в том, чтобы беклог разработки оказался отсортирован по единому объективному показателю, был доступен всем и каждый мог задать вопрос тому, чья таска выше: а как ты рич посчитал, ми амиго? чтобы либо разобраться, либо указать на ошибки и подвинуть свою задачу выше. после covid, манипуляций с ценами и нескольких счастливых случаев некоторые страны в азии резко выстрелили работать с квотами стало неудобно и тогда мы перешли на объективный скоринг выбрали для этого rice. короче, мы долго жили с квотами на задачи от дивизионов (азии, индии и латама), пока страны были маленькие приоритизировали посредством моей головы голове не очень, ребятам не очень, нытье, что странам не дают ресурс – невесело. следующая проблема: стран много, разработка одна как приоритизировать все добро, которое летит от них в команды разработки?. сейчас все хранится в конфлюенсе, а во флоу задачи в youtrack есть специальный статус, который не даст пропустить написание доков куча времени продактов на этом экономится. вторая важная вещь – документация (не думала, что это скажу когда-нибудь) раньше продактам постоянно приходилось отвечать в чатиках, как включить реферралку, контрактную работу или новую смску для получателей. последний вопрос самый важный часто выясняем, что нужная фича уже есть, ее надо просто включить иногда решаем провести эксперимент – тогда его опишут и отдадут на ревью, а затем разработают иногда решаем ничего не делать. у нас договор, что локальные команды внимательно смотрят эти встречи, а дальше встречаемся отдельно с азией, отдельно с латамом и спрашиваем: - есть ли вопросы по okr-апдейту? - над чем работаете сейчас? - топ-3 клиентских проблемы в стране - как команда hq может вам помочь?. так вот, чтобы это работало хорошо, каждые 2 недели рассказываем, как идут дела на встречу может прийти любой человек из любой страны и всегда есть видеозаписи. краткое отступление: каждый квартал мы корректируем стратегию компании, откуда появляются новые top company objectives все команды берут их в основу и строят свои okr, по которым бегут весь квартал. держать всех в курсе помогает система okr, как ни странно. поэтому везде есть операционщики, саппорт и продажи бразилии, мексике, турции и индии повезло больше – там есть местные продакты, которые могут собрать данные, написать задачки на интеграцию какой-нибудь платежной системы и прийти с проблемами к продуктовой команде в hq. другая страна – это не просто перекрасить приложеньку и локализовать тексты нужно искать эффективную ценовую стратегию, маркетинговые каналы, привлекать и обучать курьеров, раздавать сумки, биться за клиентов, учитывать местные законы. есть 10 стран, в каждой – локальная команда вопрос: как сохранить консистентность продукта, вовремя получать сигналы о проблемах, информировать страны о новых запусках и регулярно получать инсайты о клиентах и рынке?. весь день сегодня съел оффсайт с командой, поэтому вот вам полуночный тред про работу с локальными командами. этот реплай натолкнул на мысль, что среди вас ведь тоже могут быть владельцы магазинов, кому нужна доставка поделитесь своими болями про курьерские сервисы!. конечно! мы можем создать любой промокод с разными настройками в системе а физики и юрики не сильно отличаются в рамках системы более того – небольшие бизнесы часто пользуются нами с личного кабинета физлица :). самая заметная проблема – это sla доставки (назначение, забор и доставка в срок, вежливость курьера): он достаточно хорош у нас, но некоторые компании хотят почти 100% поэтому сейчас мы экспериментируем с продуктами с высоким sla для интернет-магазов и рестиков. есть кто-то из продуктов с большой оффлайновой частью? расскажите, какие сложности замечаете в работе над такими продуктами?. еще один отличный способ погрузиться в жизнь курьера – пойти курьерить самому в достависте есть обязательная традиция выходить на целый день в город покурьерить, когда ты только пришел в компанию еще каждый год вся команды выходит курьерить 1-2 раза чаще перед новым годом. а если еще прямо с ним встретить парочку ваших курьеров, которые не понимают куда идти, забыли паспорт или отказываются спускать тяжелые коробки – почувствуете оффлайн собственным нутром. и это, на самом деле, отлично: вы увидите человека в его естественной рабочей среде – как он создает заказы на мониторе с разрешением 800х600 среди вороха бумажек и постоянно звонящих телефонов. представьте себе дядьку или тетку логиста с двадцатью годами опыта: у него забот полон рот, курьеров надо гонять и следить за ними, маршруты составлять, следить, чтобы заказы собирались вовремя и правильно у него просто нет времени ехать к вам. третье: пригласить клиента на интервью в ваш сверкающий офис с самой лучшей ux-лабой в мире, скорее всего, не получится поедете в офис к клиенту сами на какой-нибудь огромный склад в промзоне там очень интересно!. обычное дело найти новую потребность у клиентов и собрать ручной mvp: вытащить из команды саппорта одного-двух операторов и посадить работать руками а перед этим – обучить и проконтролировать не начинаем автоматизировать до тех пор, пока не набили все шишки в процессной части. второе: часто будете экспериментировать не только в диджитал-части (интерфейсах и коммуникации), но и в процессной. надо быть осторожным и четко просчитывать длительность, риски и стоимость подобных экспериментов. однако на следующий же день ваш саппорт завалят разгневанные курьеры из обеих групп у курьеров довольно плотное коммьюнити в вк и телеграме, где они обсуждают такие нововведения в итоге, есть вероятность резко повысить курьерский отток одним маленьким экспериментом. казалось бы, берем курьеров-новичков в питере (наш любимый город для экспериментов) и делим на две группы – одной вводим штрафы, другая контрольная посмотрим на долю опозданий первой группы, на курьерский churn и retention, сравним со второй. например, не всегда возможно провести чистые a/b-тесты представьте, что вы хотите сделать курьеров чуть более расторопными и вводите новые штрафы за опоздания к клиенту. но если вы раньше не работали с оффлайновой частью, некоторые вещи в менеджменте такого продукта могут показаться странными. достависта работает по модели маркетплейса – с одной стороны у вас есть клиенты, которые размещают заказы, с другой – курьеры, установившие приложение и готовые эти заказы развозить казалось бы, ничего сложного. погнали! кстати, за классные вопросы подарю в конце недели промокодов на доставку 😇. чт: как делаем эксперименты более мощнымипт: как нанимаем продактовсб: как думаем о видении и стратегиивс: не про достависту, а про личные боли продактов в целом. примерный план на неделю такой: пн: особенности продукта доставки (b2b, оффлайн, вот это все)вт: как работаем с командами в других странахср: про процесс экспериментирования: как устроен и почему его используют все, включая сейлз-команду и кантри-менеджеров. привет! меня зовут ира кузнецова, я хэд клиентского продукта в достависте до этого развивала ответы :) на неделе поговорим про доставку, эксперименты, оффлайн, команды и ресерч в других странах, процессы и ритуалы, позадаем друг другу вопросы. я просто постоянно слушаю про уровень ответственности и власти у ceo но конкретику никак увидеть не могу и ceo с которыми я общался обычно несколько иначе разницу описывали, а местами прямым текстом говорили что хотят чтобы продакт в их организации был микро сео в своём домене. да, это прямо огонь, конечно. типа «народ, у меня многовато всего, не делать нельзя и вот примерно так я не классифицировал давайте посмотрим можем ли мы ее перераскидать тут или нам нужен какой-то специалист на это дело». у нас есть летучка еженедельная где мы операционку раскидываем и насущные проблемы обсуждаем там же и обсуждаем если операционки сильно дофига. простые и понятные - это часто или проджектовые, или оптимизации, которые особо не дадут прироста на вашу метрику, или желание «навести порядок». иногда дополнительная операционка возникает из-за того, что не понятно, что делать дальше или как это способ убежать от большой сложной задачи, переключившись на простые и понятные. а как обсуждаете?. а замечали, что в некоторые моменты сами себе организуете наплыв операционки?. что делаете, когда замечаете, что операционки стало слишком много? поделитесь лайфхаками :). много ли в вашей работе операционки?. почему нет: да, продакт должен широко мыслить но я не понимаю, почему на основании этого факта можно считать продактов мини-сео задачи на этих позициях крайне разные уровень ответственности и authority тем более. ну, тут как работу построить если функции системного аналитика и проджекта не закрывать полностью продактом + дать отвечать за бизнес-метрики, то пропорция меняется от грейда продакта, конечно, тоже зависит. ну если это маленький проект, то в целом задачи сео и продакта могут пересекаться, но а на объемах к сео вообще нет ремесленных задач, он привлекает деньги, нанимает лучших топ менеджеров, бухает с партнёрами, указывает глобальное направление и тп. тем временем 50% участников не согласны с утверждением ребята, напишите в тред свое мнение, пожалуйста?. другое наблюдение, что это ограничение (я отвечаю тут, а здесь - нет) часто только в головах какая бы иерархическая и директивная компания ни была, если продакт начинает так мыслить и практиковать такой подход, то часто у него это получается. тогда выходит, что если отвечаешь за продукт, то надо отвечать за всю цепочку и если надо влезать в работу курьеров, в процессы сейлзов, в кампании маркетинга и так далее это и есть отвечать за продукт и за результат поэтому идея с мини-сео мне близка :). формально, у него все работало а по факту этот продукт был плохим, так как клиенты не могли получить ценность от этого продукта. например, я работала с продактом, но который жил в парадигме моя хата с краю мол, у него тут порядок, а то что клиенты пользоваться не могу, это к саппорту и продажам. в такой ситуации роль мини-сео помогает добиваться результата, так как вы можете повлиять на любую точку взаимодействия со своим продуктом и здесь главное не наличие фактических полномочий, а скорее снятие ограничений у себя в голове. когда отвечаешь за бизнес-показатели часто оказывается, что лишь изменений в продукте может быть недостаточно, например, если ваша воронка убивается в отделе продаж. есть точка зрения, в которой продактов сравнивают с мини-сео согласны с таким определением?. а за бизнес метрики (например, выручку) отвечаете?. есть ли в вашей компании цели по метрикам, за достижение которых вы отвечаете? например, вырастить показатель х на 10% и тп если нет, расскажите в треде, за что отвечаете ^^. в авито есть горизонтали и вертикали вертикали - работа, недвижимость, авто и тд горизонтали - функции, проходящие через опыт всех вертикалей у нас есть горизонталь про опыт продавцов, про опыт покупателей, безопасность и тд. и еще один пятничный пост :) мы в авито в поиске сильных продакт менеджеров, сейчас есть позиции в кластере, отвечающем за опыт продавцов если хотите к нам, то напишите мне на фейсбуке с ссылкой на резюме :). ребята, всем рок-н-ролльной пятницы! надеюсь, ваше демо было огненным, а ретро ламповым :). если для решаемой задачи он нужен, его делают так, в целом, про любой анализ можно ответить, ваш тони робинсон :). при этом стратегия не готовится на страт сессиях она там скорее собирается заранее формулируется цель сессии участники заранее прорабатывают материалы и свои предложения а на самой страт сессии скорее все это готовят вместе и собирают. страт сессии проводятся обычно не в офисе, их делают выездными чтобы люди максимально сосредоточились на высокоуровневых задачах, а не на операционке. в вашей компании проводят стратегические сессии?. чтобы хорошо проработать стратегию, надо вложить достаточно много усилий это сложно сделать между делом поэтому многие компании используют инструмент стратегических сессий. у стартапов большая степень неизвестности и небольшой запас известных данных, у них очень быстро все меняется, поэтому и стратегия должна пересматриваться часто у зрелых компаний стратегия будет пересматриваться реже, например раз в год. еще важный момент стратегия - это не что-то высеченное в камне она должна уточняться, так как на каждом шаге вы уточняете будущее, появляются новые данные. вообще ключевая идея здесь - это планирование не от текущих ресурсов, а планирование от цели, из будущего так как в этом случае намного проще решить проблему перераспределения ресурсов (не у кого беклог больше, а у кого цель важнее). звучит просто но это не совсем так, сами понимаете :). сейчас на руках у вас есть цель, что вам мешает ее достигать и что помогает теперь вам надо определить, что лежит на критическом пути, определить ресурсы и сделать план по тому, как закрыть разрывы. следующий шаг - определить драйверы, за счет которых эту цель можно достичь и здесь все еще рано смотреть на свои ресурсы, они будут, но шагом позже. вам надо определить два типа барьеров- внешние (например, конкуренты, которые держат очень низкие цены, так как их страт цель захватить рынок)- внутренние (нет, команды, компетенции и тп). когда определили стратегическую цель компании (которая, кстати, зависит и от стадии продукта в том числе), дальше надо понять, а что отделяет вас сейчас от этого состояния. на этом шаге важно не фреймиться на сейчас и на ресурсы какого будет размера рынок, достаточно ли нам его размера а что еще есть рядом, сколько денег в этой нише на эти вопросы надо ответить при подготовке. первые два шага это1 сделать прогноз будущего2 определить своем место в этом будущем - на этом шаге формируется стратегическая цель компании (например, захват нового рынка или операционная прибыль). в компаниях, где я работала, был немного разный подход к формированию стратегии но если отступить на шаг назад, то он сводился к похожим шагам. расскажите про фреймворки, которые вы используете при работе над стратегией?. есть книга по теме вечно уставший и там хорошо расписано как это происходитещё важный момент связан с психотипом, если по психософии у тебя четвёртая физика то ты не просто в зоне риска а стопудово получишь проблемы в разной степени сложности. сегодня говорим про стратегию кто отвечает за составление стратегии вашего продукта?. держись! как думаешь, почему работодатель выбрал такую стратегию? и почему оттуда не уходишь?. в авито, циане, скорее всего в яндексе и других крупных компаниях это уже понимают но тут надо учитывать, что иногда работодателю ок локально сжечь часть команды, если в конкретный момент результат важнее но это кризисная мера. держись! как думаешь выходить из нее?. дааа, мне тогда мама так сказала с тех пор всегда это себе повторяю к слову, я сейчас работаю в меру, но получаю отлично + полная свобода действий и это мне показало, что совсем не обязательно надрываться. да сон еще и тревожность. но и про себя надо не забывать). но это в каком-то смысле супер-сила :) можно не ломаться об мелочи, а идти спасать мир снова и снова. это уже прямо не сигнал, а канонада!(. когда сама мысль о необходимости идти на работу вызывает отторжение и когда есть ощущение, что уперся в потолок роста интересности задач, все превратилось в рутину. мораль здесь такая, что очень важно знать, как именно вы реагируете и какие у вас паттерны поведения тогда можно ловить нужный момент до выгорания и находить способ решить ситуацию мой паттерн - это появление овертаймов а вы знаете, что в вашем поведении сигналит о проблеме?. еще было много историй про токсичное окружение здесь обычно лучше просто сбежать, если нет причины, по которой надо обязательно продержаться какое-то время именно на этом месте главное тут поставить срок, когда можно будет уйти. мда, я поэтому после такого же случая теперь всегда вспоминаю поговорку лошадь в колхозе пахала больше всех, но председателем почему-то так и не стала. сверила с прошлым опытом, когда я решала на самом деле свою задачу, а не задачу бизнеса поняла, что большая часть моих усилий идет на поддержание задач, которые очень далеки от результата, который от меня ждут их надо просто убрать, а иначе они меня сожгут. второй выжигающий фактор был про бессмысленность усилий когда моя роль поменялась, у меня появилось много новых задач и обязанностей в какой-то момент я поняла, что бегу изо всех сил, чтобы стоять на месте а это что-то совсем не то, что нужно :). при этом я не перестала овертаймить навсегда овертайм - это инструмент короткого ускорения если его применять, надо знать для какой конкретно цели ты это делаешь, что от нее получишь и когда он закончится и это только про короткую дистанцию. мне повезло, после мне попался мудрый руководитель, который меня наоборот хвалил, когда я в 1900 закрывала ноутбук :). он редко платно :) во всяком случае в продукте я таких примеров даже не встречала, кажется в разработке - да. мнения разделилисьесть еще мнение, что работодатель мечтает, чтоб все овертаймили (бесплатная работа же) так бывает но на длинной дистанции это потеря для компании, так как люди не могут долго работать на повышенных оборотах без потери продуктивности. вот эта мысль очень неплохо обьясняет. вы овертаймите?. а с другой стороны, поняла, что как бы ты не горел продуктом, надо держать баланс очень яркий триггер, что что-то идет не так, - это овертаймы. с одной стороны из той истории я поняла, как важно, чтобы личные цели от работы совпадали с целями компании (в одном из прошлых тредов я назвала это любовь и вызвала несогласие с такой метафорой ). а моя личная цель с этим не пересекалась поэтому мои гипер-усилия не давали результата и привели в выгоранию. проблема была в том, что я пыталась решить задачу, которая для бизнеса была не в приоритете поэтому моя битва с ветряными мельницами для него вообще была незаметна бизнесу в этот момент надо было вообще другое. один раз я выгорела так, что пол года потом не работала я до последнего не замечала это проблемы поняла, что что-то не так, когда получила удовольствие от мытья посуды :) в мытье посуды понятный скоуп, видишь результат и понимаешь, когда достигнешь цели. спасибо, что поделились своими историями! много ответов- про погоню за недостижимой целью- про бессмысленность деятельности- про переход личных границ (например, в отсутствии времени на жизнь). долгое время не могла достигнуть цели, перекладывая овер усилия. не было баланса между работой и жизнью, не было понимания и принятия изменений в коллективе. завис в рутине которая ничего толком не приносила во всех смыслах. два состояния 1 -когда лончишь с нуля и работаешь без выходных (живешь в продукте и не отдыхаешь) 2 - когда из-за бюрократии не можешь быстро растить. от попыток пофиксить невозможное вернее, я не знала что это невозможно и очень очень сильно старалась, но безрезультатно. хотела показать себя инициативным сотрудником, соглашалась на любую работу, да и вообще сама предлагала сделать то то, то это в итоге меня поюзали по полной — даже больше, чем я предлагала свою ошибку учла тем более что инициативность —это не «давайте я всё сама сделаю, плиз». ребята правильно подсказывают, правильнее было назвать выгорание, а не перегорание). количество усилий не коррелировало с результатом. да). ага, но нельзя отредактировать если не уверен, можно в тред написать, где сомнения. если у вас был опыт перегорания, знаете ли вы почему перегорели? если знаете, напишите свой ответ в тред. сегодня поговорим про выгорание вас когда-нибудь касалось профессиональное выгорание?. ну, нет) переработаешь - перегоришь и сойдешь с дистанции тут нет вин-вина. ага) это фича!). почему? мы же не про пивот компании говорим как раз есть возможность запускать мвп, коммуникации правда больше намного). если воспринимать любовь буквально - связи нет, за редким исключением если твоя цель от работы сейчас деньги на дом и для этого ты перевыполняешь окр ради премии, то есть матч если делаешь окр на 70%, чтобы остались силы на подработку, то скорее всего нет. твоя цель в работе какая? заработать деньги на это? набрать клиентскую базу, чтобы работать удаленно?. да). ты говоришь, что твоя цель (добиться результата) совпадает с целью компании в контексте этого треда это и есть любовь. *или адаптировать, или менять. фреймворк же не сама цель, он должен помогать если он не работает и важные задачи не попадают в топ, его надо или адаптировать, или крутить главное не подгонять ответ просто ;). в команде мы поняли, что можем сказать нет, в принципе, чему угодно не так сложно закопать почти любую инициативу, когда это компания богов критики :)  значит теперь нам надо научиться наоборот говорить да. я поэтому в опросе опросы назвала не да и нет). для того, чтобы залезать в неизвестное и чтобы рисковать, человек должен чувствовать, что его тыл прикрыт и он в безопасности но как чувствовать безопасность, если все вокруг задают каверзные вопросы? дальше напишу свое мнение. при этом, чтобы делать по настоящему прорывные штуки, часто надо делать прыжки веры принять, что везде соломку не подложить и попробовать. а это плохо для продукта, потому что замедляет поиск новых точек роста продакты начинают заниматься понятными оптимизациями, а не искать прорывные инициативы. итак про сайд-эффекты в какой-то момент в моей команде мы поняли, что иногда подсознательно откладываем какую-то тему, если заранее в ней сильно не уверены потому что очень сложно сразу отработать все возражения на начальной стадии дискавери. а в чем разница между продактом и продюссером у вас? у продюссера бюджет на маркетинг?. хм, кстати, да хороший поинт но вопросы в таком кейсе будут в любом случае, но кто у вас в итоге решение принимает?. розовых пони могут убивать все - и исследователи, и аналитики, и биздевы, но финальное решение принимает все-таки продакт, поэтому ответственность за отстрел все-таки у него. я как раз про это дальше планирую написать). это дает классную проработку задач, высокую осознанность продакт менеджеров и вовлеченность в продукт но, как и везде, есть и некоторые сайд-эффекты. и это адски сложно, потому что когда юзер или стейкхолдер тебе об этом рассказывает, кажется, что важно примерно всё но только кажется :). в авито очень высоко ценится критичность мышление нельзя просто что-то взять и сделать, не подготовив матчасть в культуре компании челленджить решения друг друга, убеждаться, действительно ли мы на верном пути. это правда) а еще бывают любимые гипотезы и мечты, которые ооочень не хочется закапывать). одна из ключевых задач продакт менеджера - говорить нет до тех пор, пока не станет ясно, почему это важно сделать и что это даст даже если какая-то идея очень понравилась согласны?. мы делали браузер и поиск для местного рынка инвестиции и часть команды русские, а большинство сотрудников - местные рынок огромный, очень быстро развивается за несколько лет они он продажи контекста по фиксу за ключ (1 слово 5 баксов, 2 - 10) смогли дойти до shared revenue. да, метафора не зашла) идея была в том, что отсутствие ориентации на бизнес результат продукта равносильно нелюбви к нему даже если сам продукт вызывает теплые чувства и наоборот. тогда их личная цель как раз бьется с целью компании (суметь сделать крутой продукт с низкой базы, например), и в продукт они вкладываются. 2 ветка - рабочая цель не соответствует вашей тогда вы или двигаетесь к своей цели все равно (и страдает работа), или идете по цели компании и перегораете, так как или забили на свою, или пытаетесь закрыть обе. ну давайте рассуждать)у вас есть цель, и у компании есть цель:1 ветка - работа соответствует вашей цели тут все хорошо, вы развиваетесь, компания получает результат. какие? примеры таких людей приводить не буду, но вижу периодически в разных компаниях. да, проблема может быть в том, что нет критериев оценки четких и человек может быть успешным формально, хотя пользы бизнесу особо не приносит до тех пор, пока что-то не стрельнет и не начнут перетрясать. вопрос твоего фокуса и ресурса наличие ипотеки не делает ее твоим фокусом, по умолчанию. я думаю, тут метафора тебе не очень зашла просто если заменить на общие цели, по идее, должно сойтись. корреляция в том, какие ты ставишь личные цели в работе может быть цель - стать признанным спецом, научившись выводить компанию на новые рынки если компания планирует выход, то цели совпадают а если цель компании показать операционную прибыль и продаться, то не совпадают. я любовь как метафору рассматриваю) в контексте треда любовь - это когда ты действуешь в интересах своей половины, компании но тебе сложно так действовать, если твои интересы совсем другие тогда это безответная любовь и ты в какой-то момент перегораешь или находишь новый смысл. свой и особый пропустили). главная проблема с продактами, которым все равно, - их сложнее увидеть (а ненавистники честны и на виду) они не токсичны, они заняты на работе делами, они решают интересные задачи их можно ловить на средней дистанции по отсутствию бизнес-результата. продакт, которому все равно, - это тот, чьи личные задачи не совпадают с целями компании например, ему надо пересидеть, чтоб отдать ипотеку или ему надо оставить силы на хобби или пет проект или он ходит на работу ради общения вариантов много, но они все не про ваш бизнес. и как быть?). но они скорее уже в стане продактов, которым все равно. вообще такие ненавистники бывают на достаточно высоких должностях, где они работают годами но если отступить на шаг назад, то ключевые рывки в развитии продукта были не в их подразделениях. на очень коротком участке да и только для пассажиров но потом придется искать кандидата на роль ретеншн водителей надо оно нам?. берите пример с безоса, выжимайте людей досуха и выбрасывайте их на улицу по другому денег не заработать!. большинство проголосовало, что продукт так не выйдет и я согласна стабильные растущие продукты живут по принципу win-win хотя в краткосрочной перспективе такой сетап может давать результат. я в такую историю верю на короткой дистанции, когда надо быстро запилить на длинной это будет выжигать команду + создавать пылесос ресурсов за счет вечных противопоставлений и битв двух команд то есть тут не win-win, а битва, кто победит. представьте, что вы пилите сервис такси пассажиров любите, а водителей - ненавидите к счастью, вы отвечаете за пассажиров получите ли вы крутой результат?. вы встречали продактов, которые ненавидят свой продукт?.  : мне кажется, те, кто поработал в дизайне, с уверенностью скажут - нет а остальным кажется мы самозабвенно картинки рисуем и получаем деньги за это. это правда системников больше поэтому им приходится как-то выживать) а визионеров единицы, но в паре с системником они меняют весь мир. если резюмировать есть два типа творческих задач в продукте и дизайне 1 про нестандартные решения поставленных задач 2 про видение будущего и создания чего-то нового но рациональной части в управлении продуктом намного больше чем выше ваш уровень, тем больше второго :). мнения в опросе разошлись :) я знаю примеры, когда продукты получались у системных и крутые продукты у тех, кто 2 в 1 или работают в паре при этом оба навыка можно развивать. ага либо поймет, чего не хватает, и найдет, где нанять нехватающую компетенцию). если про битву маркетинговыми бюджетами за долю рынка - да спутник, ёмобиль, аура, мой круг, совместные покупки мейла, браузер амиго, рамблер - деньги не помогли иногда деньги вообще могут мешать coccoc стал расти, когда сократили финансирование и спали розовые очки :). а кто с большей вероятностью сделает классный продукт?. всё так и чем более сеньёрный продакт, тем более высокоуровнево он решает задачу типа не сделать более удобным поход клиентов в отделения банка, а сделать чтобы в отделения ходить не надо было (хотел сначала пример с айфоном, но слишком боянисто). я говорила скорее о том, что за флером таинственности творчества дизайна стоят часто вполне логические решения, основные, нпр, на восприятии цвета глазом, восприятии мозга изменений, структуре понимания информации а это уже все физиология/психология и когнитивистика. есть крутая книжка «жизнь во мгле» (художественная) там решается похожий вопрос, но между наукой и инженерным ремеслом. при этом в таких задачах на самом деле много творчества, так как стандартные решения часто не работают отличие в том, что здесь решается сформулированная задача, у которой есть обоснование согласны? поспорьте со мной :). большинство наших задач - это последовательный аналитический анализ да, он начинается с эмпатии, но дальше мы должны очень взвешенно найти баланс выигрыша, стоимости, приоритетов и тд особенно если это запуск продукта с нуля. тогда можно рассматривать творчество как создание чего-то нового это история про видение, создание не существующих ранее сценариев и так далее но так ли часто мы что-то создаем? а не делаем пейн-киллеры или упрощаем существующие сценарии. и расстраиваются, что их отправляют считать воронки, а они хотели творчества но в нашей профессии творчество - это не я художник, я так вижу этот подход скорее про современное искусство :). очень часто начинающие продакты и дизайнеры приносят клевые вкусные идеи, которые очень красивые, но принесут бизнесу примерно ничего аналогия с фестивальной рекламой, которая растит рейтинг агентству, но не помогает делать продажи. ответа правильного нет, зависит от того, что вкладывать в понятие творчества. большинство ответило, что продакт и дизайнер - творческие профессии некоторые сказали, что зависит от уровня зрелость чем дальше, тем больше творчества. согласна). да, проблему качества решают 2 способами: создание загородительных мер (например, платность, проверка паспорта и тп) и модерация модерация - автоматическая (в том числе мл) + ручная какой-то фрод просачивается все-равно, конечно. а дизайнер - творческая профессия?. как думаете, продакт менеджмент - это творческая профессия?. классифайды, и циан не исключение, зарабатывают чаще всего на платном размещения объявлений + на их продвижении с новостройками циан работает по cpa медийная выручка тоже есть, но это лишь дополнительный канал. про что будем говорить на этой неделе1 творческая ли профессия продакт менеджмент?2 продакт, который ненавидит продукт3 да или нет в продакт менеджменте4 про выгорание5 стратегия и планирование из будущего6 продакт фичи или мини-сео7 операционка. #новыйаватар #новыйавтор всем привет!меня зовут маргарита алумян и моя команда отвечает за полноту базы объявлений на авито еще я монетизировала циан и запускала рекламную систему во вьетнаме на этой неделе я с вами, пишите вопросы :). cv мне на autkinaru :). обязательно пройти обучение по юнит-экономике я училась на product heroes у ильи красинского остальное можно найти тут. ozon совмещает в себе технологии и коммерцию это очень динамичная компания, быстро принимаются решения, быстро реализуются бюрократии нет). наверное есть) если честно, на все это не хватает времени и все крутится вокруг работы. ну что, друзья, заканчивается наша совместная неделя сегодня день для общения задавайте вопросы, будем просто разговаривать). у нас 3 продуктовых аналитика, у каждого свой продукт в зону ответственности входит и разметка ивентами фичей - по тз продакта, и создание дашбордов, и мониторинг корректности данных также продуктовый аналитик вместе с продактом формулирует новые гипотезы. все знают, что метрики это правильно но чтобы они появились в реальности - это качественный подход к тому, чтоб ваш продукт и ваши пользователи были размечены чтоб вы могли все посчитать. на rusbase есть отличная статья, в котрой продакты из разных сфер делятся, какие метрики важны именно по их специфике рекомендую интересующимся тематикой). мне нравится подход, когда они делятся на метрики роста и метрики здоровьяна первых фокус для развития продукта, чтобы доставлять максимальную ценность пользователювторые - более общие, показывают довольно широкий спектр взаимодейстаия с твоим продуктом. миллион статей написано уже о том, как правильно выбирать метрики для своего продукта ключевые метрики должны быть обязательно согласованы с основным бизнес-заказчиком с точностью до формулы рассчета. привет, сегодня день посвящен продуктовым метрикам имхо, менеджер продукта отличается от всех остальных участников команды тем, что как раз он и отвечает за их рост что бы команда не делала, спрос с продакта. если в команде хотя бы продакт понимает, что он должен делать - это уже заявка на успех. мы писали для себя сами). обычно они встроены как часть рекоамных сервисов для таргетинга. и я не в восторге от этого тренда. если нужна более легкая система и есть ограничение в инфре, dmp идеальнонам например для cdp нужны космические мощности, учитывая базу). dmp изначальносоздана в помощь рекламе, она ориентируется на анонимное сегментирование, а не на личные профили пользователейcdp создает постоянные профили пользователей, то есть сохраняет историю изменений и работает над актуальностью, дополняя базу новыми данными. продакт - как швейцарский нож) и по компетенциям и по ролям. всем легкой пятницы! тред дня - управление командой такая холиварная тема - загляденье! начнем с провокационного опросика продакт -. единственное пока не получается оценить риалтайм эффективность. основное предназначение - это конечно таргетирование маркет акций мы хотим увеличить количество коммуникаций на 1 пользователя без потери or и cr в корзину. для чего используется: 1 оптимизация медиа закупок2 планирование маркетинговых и рекламных кампаний за счет поведенческих таргетингов3 таргетированный доступ к фичам или бенефитам. привет! сегодня тред про dmp обожаю этот продукт! data management platform - система управления данными о пользователе, хранит и систематизирует инфо о поведении пользователя при взаимодействии с сайтом или приложениемна ней построен конструктор аудиторных сегментов. ну как нет) зависит от цели ты хочешь оборот или прибыль?. в таких продажах, рекомендации настраивают на доп продажи аксов и услуг к тачке). новый день - новая тема: рекомендательные сервисыв этом продукте критично - правильно сформулированные метрики эффективности алгоритмов и постоянные ab-тесты в хорошую неделю мы проводим 2-3 теста, связанных с рекомендациями❓наиболее важные метрики. справедливо насчет b2b, согласна. есть довольно большая и логичная группа пользователей в e-come - cherry pickers - искатели промокодов, скидок, триалов и тд они при всем желании не конвертируются в платную подписку у них другая модель поведения они будут создавать вам работу для антифрода:). подписка подразумевает доступ к чему-то реально ценному и дорогостоящему для бизнеса, и триал это чистая инвестиция надо компенсировать затраты на чем-то другом, значит какие-то другие пользователи будут кормить триальщиков. человек видит, сколько бы он потратил на то же самое и понимает реальный профит. по метрикам это повляет на конверсию в продление подписки. то, что мы запустили в подписке не сразу, но стало для пользователей полезной фичей - подсчет экономии от пользования подпиской в сравнении со стоимостью тарифа в месяц если есть возможность посчитать все возможные траты «без» - потратьте на это ресурсы. создателю и конверсия в платную версию. от чего в твоем кейсе зависит фот?. на момент сборки заказа товар не был найден вероятнее всего его по ошибке разместили не там, где было нужно такое к сожалению, не часто, но бывает. как часто менять тарифы должно их быть 100500 как в телекоме или достаточно min и max?мы оытным путем пришли, что будем ориентироваться на частотность покупок у разных групп пользователей. номер заказа дайте плз, проверим причину. and the oscar goes to. сегодня тема дня про подписочные сервисы так что это не правильный ответ, хоть и типа юмор). загадка: стоит 0р, экономически не выгодно, снижает порог входа в продукт. причину знаете?. причину объяснили?. а прям сюда!. тред #зланехватает - пишите сюда косяки в доставке озон, которые с вами случились разберемся объяснимся. угу, так как без подписки эта цена сиановится ох какой большой:). то, что генерит больше костов, будет и стоить дороже-вы же хотите покрыть расход подписка дает «бесплатный» доступ к тому, что оч дорогое, поэтому автоматически становится главной ценностью в глазах клиента. к яндексу нареканий нет за 1,5 года только один небольшой сбой был, из-за которого не проходили оплаты продления подписки за тинек не скажу. мы были уверены, что в эпоху подписок на контент, наши рекуррентные списания не станут откровением о, мы слишком плохо тогда знали своих пользователей. подписка - это рекуррентные списания удостоверьтесь, что используемая платежная система надежна очевидным образом расскажите пользователю про оплату без подтверждения и смс. подписка whatever - это всегда доступ к самой кост-образующей услуге выбирайте, что генерит вам больше всего расходов - это станет главной ценностью продукта. строго говоря, если ориентироваться только на цифры, то в опросе нет лидера факт: частенько продакт проводит неуспешеый эксп суперспособность - признать ошибочность гипотезы и не катить шлак. в эту неделю только озона). общительный лидер - а есть живые примеры? тегните, а. мне нравится, что есть мнение «продакты не нужны» 24% на сейчас это заставляет «бежать и строить» еще быстрее. интересненько, почему вариант «супер продавец себя» проигрывает? все такие «правильные» ответы лидируют) я вот знаю хороших продактов, которые супер продавцы себя а вы?. не размышляла о таком по понедельникам, но тут благодатный случай подъехал в виде этого аккаунта хороший продакт - это. не особо его веду). темысегодня - день 1: про суперсилу продактовдень 2: про подписочные сервисыдень 3: про рекомендательные системыдень 4: про dmpдень 5: про продуктовую аналитику и unit-экономикудень 6: про управление командойдень 7: общение. #новыйаватар #новыйавтор   всем привет!меня зовут настя уткина и я продакт оунер вертикали рекомендации и premium в компании ozonработаю в ozon уже два славных года, до этого шесть лет в mail эту неделю мы проведем вместе. но это же не про hr-аналитику, так что не имею ни малейшего понятия. сейчас как раз развиваем нашу систему аналитики таким образом, чтобы лучше оценивать успех/неуспех конкретных фичей для этого надо уметь понимать не только, сколько людей ее использует, а еще и в какого типа проектах и направлениях разработки. с тем же кмм будем смотреть на количество активных пользователей спустя определенное время (активный = возвращающийся месяц к месяцу), плюс качественно смотреть на то, смогли ли мы стать понятными для сегмента не пауэр юзеров. мы сейчас только начинаем учиться оценивать успех новых вещей, ретроспективно смотреть сложно из того, что ты назвал, точно не успех – k/n mm (фидбэк пользователей, изучение опыта новичков с ней). сначала на ограниченную группу, используя механизм eap –. про последующую аналитику тред не успел написать в этот раз, постараюсь через какое-то время в блоге детально рассказать если кратко – то в некоторых командах смотрим на метрики пользовательского поведения, перфоманса и использования фичей ide плюс сбор качественного фидбэка. на этапе гипотез – как получится если говорим про языковые фичи, то ничего лучше, чем текущий механизм experimental нет если про тулинг – то зависит, иногда стараемся разработать mvp, иногда может получиться провести ux-стади на прототипе иногда – только интервью. а самое главное – не теряйтесь после этой недели с вас подписка на другие соцсеточки, где я часто пишу что-то интересноеза шуточками и шитпостом: полезными заметками: годными лонгридами:. если то, о чем я рассказывал в течение недели, показалось вам интересным – присылайте свое резюме мне в telegram (etolstoy), я буду рад обсудить ваш опыт а если вакансия не для вас – то покажите ее своим друзьям!. мы продолжаем нанимать продакт-менеджеров главное, что ищем:- продуктовый опыт и наличие большого количества кейсов за плечами- любознательность в отношении технологий и готовность в них погрузиться- хороший английскийвсе детали на супер лендосе. как анализировать рынок разработчиков. как подсидеть продакта. про developer experience. как наполняется бэклог и принимаются решения о том, что выпускать в релизе. зачем нужны продакты в kotlin и чем они занимаются. сегментация пользователей kotlin. язык программирования как продукт. вводный тред – что такое язык программирования и зачем jetbrains было делать свой. мета-тред со всеми темами, про которые я писал на этой неделе лайки, шеры, вот это все!. о, я пропустил, что ты теперь с нами!. 🤪. на этом, кажется, все – накидывайте ваши вопросы. ну а что касается качественных данных, тут все совсем просто серчите нужные теги в twitter, reddit, medium, ходите по релевантным митапам и задаете глупые вопросы, слушаете подкасты про индустрию. одна из кайфовых практик – завести фейковый аккаунт и под ним забрасывать в чат сообщества волнующие вас вопросы это позволяет избежать искажений в обратной связи из-за привязки к тому, кто конкретно вопрос задает. наличие огромного количества профессиональных сообществ – одна из особенностей рынка разработчиков, которые сильно упрощают работу продакта, например, в моменты поиска кандидатов для интервью. тут отдельно спрашивали, что делать, если хочется узнать о нетехнических особенностях разработчиков как ца ответ простой – пилите опросы сами, выкупайте места в telegram-каналах или на других площадках, наслаждайтесь результатами. с последними есть полезный лайфхак если api не торчит наружу, а официальная статистика скудная, напишите мейнтейнерам реестра и попросите пошарить вам более подробные данные мне помогало!. помимо рейтингов и отчетов можно самим закопаться в api различных ресурсов вот с чем периодически сталкиваюсь я:- google trends- github- stack overflow- twitter- статистика загрузок в пакетных менеджерах. ieee агрегируют больше всего данных, позволяют поиграться с изменением значимости разных факторов наименее субъективные из всей подборки. pypl смотрит на то, как часто люди гуглят туториалы по конкретному языку критика состоит в том, что метрика сильно отстает по времени от реальности ну и сильно biased в сторону преподаваемых в универах языков. redmonk мой любимый из всех смотрит сразу на две проекции – количество проектов на github и вопросов на stack overflow основная критика крутится вокруг того, что stack overflow – не для всех языков основная площадка, а github не повторяет всю индустрию. tiobe считает популярность по количеству результатов запроса «language programming» в 25 различных поисковиках методология с первого взгляда звучит вполне ок, но на практике результаты довольно бесполезны – visual basic на 8 месте говорит за себя. отдельная история – индексы языков программирования, который в разных срезах показывают, какие языки сейчас «популярны» вот только на них надо смотреть очень критично, потому что замеряют они иногда очень странные штуки. ну это все-таки история не про данные, а про экспертное мнение. меня подтолкнула к этому кстати. про это чуть позже напишу еще. почти по всем ссылкам помимо сырых данных есть и инфографика, чтобы по верхам пройтись. например, вот такие:js:. конечно, есть еще дорогущие отчеты всяких гартнеров, форрестеров и их друзей – но я более чем уверен, что в большинстве случаев вам вполне хватит открытых данныхесли же вам нужно копнуть в какой-то сегмент поглубже, стоит поискать более узкоспециализированные отчеты. последний в этом списке – github octoverse тут аккуратнее, потому что выводы, сделанные на основе опенсорс проектов, могут быть нерепрезентативны для всей популяции. еще один крупный ежегодный опрос проводят мои коллеги из jetbrains фокус в опросе делается на те технологии, для которых мы делаем тулинг сырые данные тоже лежат в открытом доступе. а недавно они выкатили свой сервис, который позволяет поиграться со всеми данными, на основе которых строятся эти отчеты сейчас проверил – там уже 15 датасетов доступно, так что можете начинать проверять свои гипотезы с минимальным порогом вхождения. в основном отчеты платные, но посмотрите, какая мякотка – за такие можно и занести!. вот еще одни крутые ребята, slash data они специализируются на изучении рынка разработчиков и периодически выкладывают разные полезные репорты ключевой – global developer population repo, откуда как раз та цифра про 205 млн и взята. начнем с самых крупных и надежных источников stack overflow survey 65000 ответов, хорошая разбивка по географии и направлениям разработки а главное – можно получить сырые данные и спокойно их изучать самому. рынок разработчиков – очень клевый он довольно большой (205 млн), растет (+85% в год), со вменяемым уровнем конкуренции, высокой платежеспособностью, понятными маркетинговыми каналамидавайте разберемся, откуда брать данные по рынку и инсайты, чтобы запустить свой проект!. давайте выберем, про что поговорить на выходных ну или накиньте свои темы в комментарии!. 14 постоянно скидывайте продакту конкретные жалобы пользователей и упрекайте, что он их не решает а как только одну из них он возьмет в работу, пилите за то, что он идет на поводу у громкого меньшинства. 13 пройдите go practice simulator как известно, это автоматом делает вас продактом – а кто последний прошел, тот и сильнее. 12 расклейте написанные продактом prd с техническими деталями по стенам офиса и громко смейтесь, проходя мимо пусть думает, что в очередной раз спалил свою техническую безграмотность, и судорожно ищет свой прокол. 11 навсегда запомните, что pm расшифровывается как проджект менеджер и никак иначе используйте это знание во всех коммуникациях с командой, пусть бесится. для того, чтобы обеспечить себе job security, я обхожу этот вопрос стороной. 10 если он хотя бы раз использует фразу если бы генри форд слушал людей, то дал бы им более быструю лошадь, напомните, что он не только не стив джобс, но и не генри форд а вместо быстрой лошади у него пока что максимум мертвый бобер. 9 не стесняйтесь тратить хотя бы 80% времени команды на действительно важные задачи – например, распилить монолит, или склеить микросервисы обратно если продакт скажет что-то против – упрекните его в технической безграмотности и напомните еще раз, что он не стив джобс. 8 подарите ему круглые очки, черную водолазку и джинсы когда он в таким виде придет на демо и начнет что-то рассказывать, пошутите, что до айпода его новой фиче далековато еще. было про тимлида, шутки другие же!. 7 продакт – не часть команды никогда не давайте ему этого забывать если он пытается подсесть к вам в столовой, все дружно встаньте и молча перейдите за другой стол. 6 постоянно кидать в него разными вещами, к слову, вообще нормальный и надежный способ подсидеть. 5 каждый раз, когда он спрашивает тебя что бы ты хотел?, кидайтесь в него книгой спроси маму она довольно тонкая, так что можно сразу связкой из трех штук. 4 когда он в следующий раз с горящими глазами придет рассказывать вам про no-code, ответьте, что в режиме no-product вы уже давно живете, давайте хотя бы код оставим. так был про тимлида, теперь про продакта!. 3 продакты не разбираются в технологиях и обучаются новым терминам по принципу нейронных сетей начните употреблять на дэйликах названия несуществующих технологий продакт моментально подхватит их и начнет использовать в своей речи, чтобы казаться своим парнем!. 2 посчитайте, сколько стоит рабочий день вашей команды, и начните вести на вайтборде статистику – сколько прибыли принес ваш продакт, и какой бюджет бездарно прожег повесьте доску на видном месте – пусть это будет первое, что он видит утром, и последнее, что видит вечером!. 1 известен факт, что продакт – это не настоящая профессия, а просто модное название для разнорабочего в it каждый продакт в глубине души чувствует себя уязвимым из-за этого, так что давите на больное!. пятница, ретроспективы и демо уже прошли, а планирование нового спринта еще далеко за горизонтом самое время для того, чтобы составить план того, как подсидеть продакта в своей команде!по совету за каждый ретвит, погнали!. 5 чтобы понять, какие из рефакторингов конкретно чинить – взяли стату по самым частым действиям в idea, наложили на нее ответы пользователей из внутреннего опроса, получилось довольно очевидно6 чтобы зафиксировать – договорились пускать бенчмарки по внутренним проектам, пилим. 4 взяли в фокус то, что больше всего влияло на кор опыт этой группы пользователей, и про что говорили чаще/эмоциональнее – перфоманс хайлайта, ломающиеся кеши плагина, фигово работающие на стыке java/kotlin рефакторинги. ну вот прямо сейчас в процессе хороший пример:1 провели 30 интервью разработчиков внутри jb2 собрали из них большой бэклог болей (начиная от конкретных проблем инлайна, заканчивая кодстайлом)3 разложили его по примитивному cjm работы с ide, чтобы понять, какой этап чинить. слыш ну вот че ты а. бумажной почтой!. закончу тред ссылкой на одну из ключевых практик, которые помогают поддерживать классный dx в продуктах jetbrains – догфудинг если ты не используешь свой продукт каждый день и не ощущаешь пользовательские боли – никакие другие практики не помогут. you get where you’re looking for: the impact of information sources on code security – impact of developer experience in using java cryptography – of developer experience –. design framework enhancing developer experience in collaborative coding environment – experience matters – api usage obstacles: a study of ios and android developer questions –. how friendly integrated development environments are? – deserve security warnings, too – the usability of cryptographic apis –. improving the success rate of applying the extract method refactoring – that influence dx in mobile software ecosystems – testing in the ide: patterns, beliefs, and behavior –. если вам интересно побольше покопать в dx, то поделюсь ссылками на бумаги и статьи, часть из которых я сам еще не разобралprogrammer experience: a systematic literature review – dx of a gui designer –. сейчас мы измеряем dx так:- пользовательские интервью, где просим рассказать о тех случаях, когда хотелось материться на тулинг- ux-сессии, где глазками смотришь, как разработчик пытается понять твой интерфейс- лайв-кодинг или скринкасты с комментариями всего, что происходит. recognition of error вид ошибки и ее текст должны быть вменяемыми и понятными человекуhelp система помощи должна быть полной и доступной. affordance структура и лейауты должны не вызывать wtffeedback система обратной связи должна показывать разработчикам подтверждения всех их действийconstraints там, где возможно сломать что-то из-за неправильного ввода или действий пользователя, нужны ограничения. consistency визуальный стиль, возможный набор действий, получаемый фидбэк должны быть консистентныcustomization каждый пользователь должен иметь возможность настроить ide под себяvisibility на каждом этапе нужно предоставлять релевантную информацию о том, что происходит. в другой бумаге, которая больше недоступна для скачивания, я встречал набор правил, основанных на дизайне привычных вещей нормана они описывают составляющие крутого dx в ide. опять же, сошлюсь на клевую бумагу, авторы которой исследовали влияние ux в ide на состояние потока и мотивацию разработчика. ультимативная задача ide – удерживать разработчика в состоянии потока это достигается за счет его удержания в циклах обратной связи, из которых ничто его не выдергивает и не отвлекает – перфоманс, креши, отсутствие видимого фидбэка, сложный доступ к каким-то частым операциям. мы обычно употребляем dx и применительно к внешним пользователям. центром опыта разработчика чаще всего является ide – среда, в которой он проводит большую часть своего времени он использует ее чтобы читать код, писать, дебажить и выполнять разные другие операции. functionality продукт закрывает все задачи разработчика на этом уровне важно знать все сценарии разработчикаusability существующую функциональность использовать просто и удобноpleasure взаимодействие с продуктом приносит набор сильных положительных эмоций. я встречал несколько моделей, описывающих dx например, в виде пирамиды маслоу:- functionality- usability- pleasure. как измерить dx? напрямую – никак работая в авито, я пытался это сделать разными nps, csat и прочими довольно бесполезными для такой задачи метриками – и ничего не получил к dx проще относиться, как к чисто качественной истории, которая влияет на лояльность и retention. два года назад forrester провел для jetbrains исследование, насколько использование idea повышает продуктивность команды мопед не мой, но авторы топят за бешеный roi в 850% почитать точно интересно. есть исследования, которые доказывают, что dx положительно влияет на общий перфоманс команды при работе над проектом поэтому думать о нем важно для бизнеса. речь пойдет про developer experience, сокращенно dx вообще, это модное название для ux, которое мы иногда используем, чтобы чувствовать себя особенным. цель сегодняшнего треда – дать вам представление о том, как разработчики взаимодействуют со своими инструментами и чего от них ждутосновной материал для треда – собственные наблюдения и выдержки чужих исследований.  : кажется, мы стали забывать настоящий супер апп. короче говоря, в разных командах механизмы анализа и приоритизации работают по-разному отдельное время закладывается на поддержку существующих пользователей, разбор pull requestов от сообщества, 20% проекты членов команды. пример про обогащение знаний пользователи жалуются на то, что ряд рефакторингов работает нестабильно в java/kotlin проектах вопрос – как определить приоритеты помочь в этом помогает:- аналитика частотности использования фичей idea- опрос внутренних пользователей. вот как выглядел процесс:1 провести серию интервью внутренних пользователей и собрать актуальную картину их проблем2 обогатить знания о болях через аналитику3 приоритизировать с учетом актуальности для внешних пользователей и сложности4 проверить о внутренний cab. второй пример – команда, которая занимается kotlin плагином для idea помимо тех же самых источников, что и в прошлом примере, они активно занимаются сегментом наших внутренних пользователей – тех, кто разрабатывает idea, youtrack, space и другие продукты. работа продакта выглядит так:1 собрать контекст – что у пользователей болит и почему это важно2 выделить ключевые боли и делайтеры3 разложить их по пользовательскому пути4 приоритизировать их вместе с командой5 нагенерить гипотезы решенийвуаля, бэклог готов!. начнем с первая картинка – схема болей пользователей, связанных с kotlin multiplatform mobile вторая картинка – разложенные по cjm боли и делайтеры, приоритизированные командойисточники знаний о болях:- интервью- багтрекер и обратная связь- опыт команды. все команды работают, опираясь на эти фокусные зоны чтобы было понятнее, расскажу пару конкретных примеров того, как продакты в конкретных командах формируют свой бэклог и планы. пример – improve jvm server-side adoption, целевая метрика – активные пользователи серверсайда. сейчас мы активно перерабатываем процесс целеполагания есть стратегические фокусные зоны – что надо делать, почему это важно, как оценим успех эти зоны определяют, куда должна быть направлена большая часть усилий всех команд. а теперь пора поговорить про то, как принимается решение, что нужно делать в продукте и что выпускать в следующем релизе. тред про это здесь писать не буду, но на вопросы тоже поотвечать готов!. 3 пример парнерского проекта – совместная работа с google над ускорением перфоманса работы в ide или компилятора. 1 по-разному получается где-то в виде демо, где-то – ручками попробует вместе с разработчиком, где-то – сразу пробует вместе с пользователем2 в основном пет-проекты или демки какие-то продакт ide, например, подконтрибьючивает в код самого kotlin плагина. конкурент – это другой язык, который разработчик может взять для решения той же самой задачи поэтому конкуренты отличаются в зависимости от конкретного сегмента в android – java и flutter в multiplatform mobile – flutter, rn, xamarin в серверном jvm – java. это в miro. так это же первый пункт в картинке в посте. если у вас есть еще какие-то вопросы про роль – задавайте, а я потихоньку двинуть к следующему треду!.  : кстати, мы сейчас активно нанимаем еще одного продакт-менеджера – если вам интересно делать крутые штуки, пишите мне в телегу, пообщаемся!. а роли очень тесно пересекаются часть продактов на самом деле в это залезает, особенно если никого из маркетинга рядом нет для помощи им.  : а где же «90% - ведение своего телеграм-канала»??. так это активность на превышение ожиданий!. в моем понимании опыт разработки – это именно продакшн опыт в несколько лет. из моего опыта – это не так без опыта разработки можно быть отличным продактом, если у тебя есть голова на плечах и ты способен потратить много времени для того, чтобы разобраться в устройстве своей системы. в продуктовой команде сейчас только русскоязычные люди, поэтому внутренние доки пишем на русском языке все, что предназначено для прочтения другими командами – на английском. кстати, мы сейчас активно нанимаем еще одного продакт-менеджера – если вам интересно делать крутые штуки, пишите мне в телегу, пообщаемся!. бэкграунд у всех очень разный вот несколько профилей:- биоинформатика и тестирование- java, продуктовый менеджмент и девадвокатство- продуктовый менеджментмораль такая – опыт разработчика для роли продакта хоть и желателен, но необязателен. сейчас в команде 6 продакт-менеджеров и 1 аналитик:- pm1 – kotlin multiplatform mobile- pm2 – kotlin for server-side- pm3 – kotlin/js, website, analytics- pm4 – kotlin for android- pm5 – kotlin ide plugin- я – тимлид, опыт внутренних пользователей и разнорабочий. значимая часть работы продакта – проведение рисерчей вот примеры из бэклога:- simplify youtrack issue creation process- find out the detailed user scenarios for using kotlin in cli- research iot/embedded market- make stdlib help more intuituve- prepare gradle cjm. рабочие недели продактов сильно различаются в зависимости от контекста их направления – кто-то плотно работает с конкретной командой разработки по спринтам, кто-то – больше занимается исследованиями рынка, кто-то фокусируется на подготовке контента и прокачке онбординга. каждую неделю все продакты определяют 3-4 своих основных фокуса на неделю и вписывают их в общий файл это помогает нам поддерживать прозрачность того, кто чем занимается, находить точки пересечения и держать фокус на важном. выдохся!. общее правило – продакт не должен быть бесполезной прослойкой между пользователем и командой он не просто проксирует услышанную информацию о проблемах, а должен быть способен самостоятельно проанализировать ее и сделать выводы про критичность и влияние на пользовательский опыт. больной вопрос про глубину технического погружения от продакта не ожидается быть экспертом в разработке – в команде вокруг и без того достаточно крутейших инженеров но, например, хорошо бы уметь самому пользоваться дебаггером, чтобы понимать, какой ux норм, а какой не очень. информацию эту продакт обычно получает из:- самостоятельной работы с продуктом (да-да, мы стараемся сами регулярно писать код)- интервью с разработчиками- продуктовой аналитики (поведенческая + использование фичей)- чтения статей и просмотр докладов- анализа обратной связи. главная задача продакта – лучше всех знать свой сегмент пользователей, их боли и сценарии эту информацию он синтезирует, чтобы:- строить видение своей части продукта и ставить цели- приоритизировать важное и ценное- планомерно двигаться к целям- рассказывать об этом команде. сегодня расскажу, чем занимаются продакты в kotlin для начала – простая табличка ожиданий от роли. кстати, я курирую этот самый коллективный аккаунт ближайшие слоты – через пару месяцев, так что пишите мне в телеграм, если готовы поучаствовать!. вообще есть, но мы сейчас его прицельно не развиваем. одна из причин, по которым jetbrains делает kotlin – это продуктивность при разработке других своих инструментов поэтому отдельным сегментом мы выделяем наших внутренних пользователей и используем его при приоритизации бэклогов команд. из других подходов, которые периодически используем:- по уровню: новичок/мидл/пауэр юзер- по типу компании: продукт, фриланс, аутсорс- по степени участия в коммьюнити: автор библиотек, автор статей и прочее- по стране. это помогло выделить пользователей, жизнь которых мы можем сделать намного лучше (команды разработки, которые делают приложения с большим количествлм бизнес-логики) – и сфокусироваться на их боляхминус такой гранулярности – в аналитике уже эти сегменты так просто не выделишь. иногда нам требуется другой подход например, в kotlin multiplatform mobile мы сегментируем аудиторию по типу разрабатываемых приложений:- rich clients (много бизнес-логики)- thin clients (мало бизнес-логики, много ui). как мы используем такую сегментацию:- для определения стратегических целей всей команды- для классификации пользовательских запросов и болей- для того, чтобы лучше понимать, что происходит в аналитике и строить гипотезы- для планирования в конкретных командах. что интересно – они не взаимоисключающие один пользователь может легко попадать сразу в несколько сегментов, если он пишет приложение в android studio, а бэкенд для него – в idea. эти сегменты возможно выделить в продуктовой аналитике и смотреть на их поведение отдельно друг от друга делать это помогают специальные эвристики, учитывающие используемую ide, таргеты в билд-файле и еще ряд параметров. пользователи в этих сегментах очень сильно ожидаются по своим болям и ожиданиям от инструментов в каждом из сегментов есть своя экосистема, в которую мы каким-то образом интегрируемся. базовая сегментация основана на разделении по области решаемых задач например, сегменты могут выглядеть вот так:- android- server-side- frontend- gamedev- data science. мини-тред про то, как мы подходим к сегментации пользователей. про что интереснее послушать сегодня?. подобью итоги треда kotlin состоит из кучи компонентов, разрабатываемых как внутри команды, так сообществом для того, чтобы обеспечить крутой опыт определенному сегменту разработчиков, нужно не просто дать им компилятор, но и проработать все остальные сценарии. стандартные способы такие:- помочь другим пользователям советами в том же slack- пошарить свои знания, выступив с докладом, или написав статью- поделиться своими наработками в опенсорсе, опубликовав библиотеку или какой-то инструмент. тред получился длиннее, чем я хотел – поэтому быстро посмотрим на последний сценарий, самореализовываться многие разработчики хотят делать что-то помимо перекладывания jsonов или покраски кнопок, поэтому они ищут возможности в экосистеме своего любимого инструмента. задача ребят – помочь пользователю найти какой-то воркэраунд, занести информацию о проблеме в багтрекер и в случае критичности донести информацию до команды разработки или продактов вот и сам багтрекер:. если нагуглить решение проблемы не получилось, разработчик может пойти за помощью в сообщество – либо в какой-то локальный чат, либо в публичный slack, и задать свой вопрос там и вот если люди в сообществе не смогли подсказать ему правильный ответ, в дело вступает наш саппорт. кстати, про то, как разработчики используют so, есть очень классная бумага советую почитать. например, какая-то конструкция не собирается компилятором первое, куда смотрит разработчик – на ошибки в консоли в ide тут мы можем его поймать, хорошо объяснить проблему и подсказать дальнейшие шаги если понятнее ничего не стало, он ныряет в документацию или stack overflow. рядом с этим сценарием стоит получать помощь когда разработчик сталкивается с проблемой, он может найти помощь на четырех уровнях:- в самом продукте- в документации- в сообществе- в команде технического саппорта. помимо нашей команды техписов, в этот сценарий активно контрибьютит сообщество, разрабатывая собственные курсы и туториалы кстати, один из рейтингов языков программирования, pypl, оценивает популярность языка как раз по количеству доступных туториалов. основные принципы нашей документации:- helpful- easy to find- clear and concise- always up-to-date- consistent with the whole ecosystem. важный компонент, который появляется на этом сценарии – документация мы стараемся держать ее максимально полной, потому что она – первое место, куда пользователь идет, чтобы с чем-то разобраться (не считая stack overflow, конечно). основные инструменты для онбординга – сайт интерактивный плейграунд и конкретные гайды и hands-onы на сайте задача онбординга – помочь новому пользователю быстро получить первый результат и завлечь его в дальнейшую разработку. следующий сценарий – изучение своего ремесла высокоуровнево мы декомпозируем его вот так:- онбординг- поиск решения конкретной прикладной задачи- изучение способов работы с продуктом. но gradle – это слишком сложно, поэтому надо двигаться дальше вот вам пруф:. продакту важно понимать, какие сценарии использования билд-систем чаще всего есть у пользователей, какие этапы занимают больше всего времени, что работает стабильно, а что – нет это помогает в приоритизации. на gradle, в частности, лежит и другая важная задача – оптимизировать процесс сборки приложения путем кеширования промежуточных результатов а это очень круто – потому что процесс сборки может занимать минуты, если не десятки для крупных проектов. сборка итогового приложения – это многоступенчатый процесс, где компиляция – только один из шагов нужно собрать все проекты, связанные с текущим, прогнать дополнительные задачи (например, тесты и статический анализатор) в этом и помогают билд-системы – gradle и maven. в случае с котлин основная точка взаимодействия - это автокомплит и это довольно существенное отличие, скажем от python ил javascript. пользователь взаимодействует с компилятором чаще всего опосредованно через ide или билд-систему основная точка касания – это ошибки, которые компилятор выдает в случае некорректного кода тут важно сразу подсказать, а что разработчику делать с ними дальше. помимо просто перевода, компилятор делает еще много всяких полезных вещей – проверяет код на ошибки, оптимизирует его объем дико советую выпуск подкаста с одним из разработчиков нашего компилятора, где разобрали все детали. компилятор – это специальная программа, которая переводит код на kotlin в машиночитаемый формат kotlin умеет компилировать код сразу для трех окружений – jvm, js и native это значит, что технически kotlin можно исполнять практически на любой платформе, которую вы знаете. весь сценарий реализовывать свои идеи заключается именно в написании и чтении кода следующее, что с чем сталкивается разработчик – потребность этот код собрать для того, чтобы его можно было распространять и запускать на конкретной платформе. отличается не наличием/отсутствием компонентов, а их свойствами – с какими языками интеропимся, какой конкретный тулинг в ide предоставляем, какие конкретно структуры языка или системные библиотеки предоставляем для решения частых задач разработчика. в общем виде – никто, сообщество тут саморегулируется есть еще крупные вендоры вроде google, у которых на своей стороне есть огромный кусок разработки, фокусирующийся на болях конкретного сегмента – вот они уже руководствуются своими приоритетами и знаниями о проблемах. внутри команды мы разрабатываем только самые базовые библиотеки, которые, по сути, являются частью самого языка например, stdlib, корутины, сериализация все остальное мы отдаем на реализацию сообществу, и работаем над тем, чтобы авторам библиотек было удобно. сейчас официальная поддержка kotlin есть только в ide от jetbrains, eclipse и netbeans, причем доля наших ide – 99,3% реализовывать lsp или делать свои плагины для других ide ближайшие годы точно не планируем. последний большой кусок сценария, связанного с написанием кода – библиотеки задача разработчика – найти качественные строительные блоки, поверх которых он напишет бизнес-логику и получит готовый продукт чем слабее развита библиотечная экосистема, тем обычно тяжелее разработчику. это важный компонент языка, потому что:- у разработчика появляется возможность переиспользовать готовые компоненты других экосистем и не писать их самому- можно встраивать kotlin в свой проект постепенно, не переписывая все с нуля. следующий компонент – интероп для kotlin это возможность интегрироваться в экосистемы других языков например, вызывать kotlin из java, и вызывать java из kotlin. на самом деле задача языка немного другая это создание понятий в среду как раз будет лекция об этом:. да, отличный пример! кому интересно – можете послушать выпуск подлодки, где в частности про это разговаривали. по сути, ide – это инструмент, который позволяет тебе получать обратную связь о своих действиях с кодом все основное взаимодействие с ide можно представить в виде вложенных фидбэк-лупов чем глубже, тем важнее хороший перфоманс и тем критичнее разрывы контекста разработчика. помимо этих базовых операций, ide – целый комбайн разных фич, которые упрощают конкретные пользовательские сценарии например, работа с системой контроля версий, отладка микросервисов, простое управление инфраструктурой задача kotlin – качественно встраиваться в эти сценарии. правильно работать с этим синтаксисом позволяет поддержка языка в ide, том самом word для программистов, который:- подсказывает тебе подходящие по смыслу конструкции- подсвечивает некорректный код- запускает код и помогает искать там ошибки- упрощает частые преобразования. синтаксис языка – это набор правил, по которым пишется программа за набор этих правил отвечают дизайнеры языка код в первую очередь пишется для людей, которые его читают и редактируют, поэтому основная задача дизайнеров – сделать язык выразительным. начнем с самого основного сценария – «реализовывать свои идеи», по-простому – «писать код» это та задача, которая стоит перед языком в первую очередь – он должен предоставлять классный опыт по трансляции своих мыслей в конструкции, понимаемые твоей платформой. ты на очереди!. вот как устроен kotlin с продуктовой точки зрения в треде детально рассказываю про все сценарии и компоненты. есть отличная аналитическая компания по этому рынку, slashdata можно потыкать в дэшборд по их последнему отчету – ну и наши независимые исследования подтверждают такую оценку в вообще про анализ рынка будет на выхах подетальнее. другая проблема – большой груз ответственности и накопленное легаси из-за этого многим языкам сложно развиваться эволюционно, и они не успевают за изменением потребностей аудитории вот так и появляется окно возможностей вроде того, что было для kotlin на android. эти боли берутся из-за того, что многие языки – general-purpose решения, которые не очень круто отрабатывают в конкретных узких кейсах посмотрите на то, как javascript пытается зайти в сегмент мобильной разработки, например. все пункты – опосредованно. почему вообще появляются новые языки программирования? да все просто разработчики – большой (205 млн) постоянно растущий (+85% в год) рынок, у которого много болей как с решением существующих задач, так и с появлением принципиально новых. начал отвечать тут - про монетизацию отдельно будет позже. зачем вообще jetbrains вкладывает деньги в создание своего языка:- повышение узнаваемости бренда компании среди разработчиков- использование для разработки своих продуктов- потенциальная монетизация через доп тулинг- потому что делать свой язык – чертовски круто!. и различаются по параметрам скорости разработки и скорости работы конечного продукта (а-ля python - быстрее разработка, но медленнее работа системы, c - медленнее разработка, но быстрее работа системы). из важных для «продакта-пользователя» свойств еще – надежность и размер рынка разработчиков. принято! я говорил с точки зрения «продакта языка», а не «продакта команды, которая на этом языке пишет». ну параметров намного больше все-таки, не уверен, что скорость всегда самый важный. для людей не из it я обычно объясняю это так:представьте себе word вот мы делаем так, чтобы в похожих на word редакторах можно было описывать свои идеи таким образом, чтобы из этого потом получалось приложение для мобилок или десктопа. для разогрева давайте определимся, что такое язык программирования с точки зрения продакта я сейчас придерживаюсь такого определения:«это система строительных блоков и инструментов, которые помогают разработчикам выражать свои намерения в машиночитаемом формате». я привычный, меня каждый день хейтят и в личном аккаунте!. для начала, давайте разберемся, насколько вы вообще знакомы с языками программирования. ну и накидывайте ваших вопросов, буду отвечать либо сразу, либо включать в другие треды. лысый #2 как недавно выяснил опрос общественного мнения!. [пн] язык программирования как продукт[вт] роль продакта в kotlin[ср] developer experience – что это и как с ним работать[чт] как продакту стать чуть менее бесполезным технически[пт] как подсидеть продакта[сб] анализ рынка разработчиков[вс] тут много кандидатов, решу потом!. на этой неделе буду рассказывать про проведение интервью, scrum, участие в митапах и делиться ссылками на телеграм каналыхаха нет конечно. самый важный совет, который я дам за эту неделю – подписывайтесь на мой личный твиттер , там безумно хорошо и премиальный контент. всем привет!меня зовут егор, я – продакт языка программирования kotlin в и ведущий подкаста. напомню, что основные треды недели можно найти под этим твитом: если хотите о чем-то спросить в личку, то можно писать в телеграм: azimin. на этом моя неделя подходит к концуспасибо, что читали, лайкали и ретвитили :)если есть любые вопросы – пишите, постараюсь ответить. 4-6 про передачу в разработку, релиз и анализ. 3 организовать встречу по обсуждению результатов и метрик через какое-то время (обычно 1-2 недели)после этого весь описанный тут цикл повторяется:. на всякие краши и тп стоят уведомления, но не все метрики можно легко отследить на аномальность2 сформировать отдельный дашборд по анализу новых фич (особенно если это a/b тест), который можно будет проанализировать через 1-2 недели. после релиза новой версии (и фич), у pm есть несколько обязанностей:1 активно наблюдать за product doesnt work дашбордом (там собраны все метрики, которые характеризуют стабильность: конверсия в регистрацию, скорость загрузки контента, кол-во серверных ошибок и тп). когда качество соответствует нашим ожиданиям, приложения отправляются на проверку в магазины приложений, этот процесс сложно контролировать, он может занять от пары часов до n дней, но у нас есть правило: мы не релизимся в пятницу (чтобы не решать проблемы в выходные). возвращаясь к нашим процессам:после первого цикла тестов от бизнес команды, project manager заносит баги на отдельную доску и разработчики должны их править (каждый спринт на правку багов выделяется 05-1 man day на человека)после правок повторяется короткий цикл тестирования. 3 процесс тестирования не автоматизируетсяпосле того, как разработка перешла за определённую черту (стало больше жалоб от разработчиков), мы решили нанять qa, но пока процесс тестирования и релиза у нас остаются такими, как я описал выше. минусы следующие:1 у бизнес команды нет квалификации, они часто репортят проблемы, связанные с самими платформами или не являющиеся важными для бизнеса2 тестирование выполняется в конце спринта, а значит разработчик мог уже забыть как реализовывал первую фичу (если таких 2+). плюсом такого подхода является то, что бизнес команда всегда понимает как выглядит приложение и какой в нем есть функционал (что позволяет эффективнее общаться с пользователями, помогать формировать родмэп и участвовать в цикле разработки). у нас долгое время не было нужды qa, но тестирование задач было следующим:когда до завершения принята остаётся 3-4 дня, разрабочики готовят тестовую версию, а после бизнес команда (состоящая из 7 человек) тестируют приложение в течении нескольких часов. предпочтительно, чтобы на созвоне присутствовали и мобильный, и бакенд разработчикипосле задача уходит в реализацию и pm забывает про задачу до последней четверти спринта. обычно это ничего не меняет, но переодически могут всплыть интересные детали от разработчиков, что заставляет поменять местами задачи (по приоритету выполнения или исполнителями)перед выполнением, но после чтения prd задачи, разработчик может инициировать созвон с pm этой фичи. клиентам так удобнее (учесть, что мы используем swagger и api запросы и модели для мобильных клиентов генерируется за счёт серверной реализации)после распределения всех задач по разработчикам (на основе предпочтений и математики с man days) проходит предспринтовый созвон. я уже рассказал как идёт подготовка prd, аналитики и дизайна: все эти материалы заносятся в описания задач (в asana), которые будут в следующем спринте для разработчиков мы стараемся делать так, чтобы бекенд реализовывал задачи первым. сегодня я расскажу как выглядят у нас шаги 4-6 на текущем этапе развития. что именно тебя интересует по prd? я все в треде рассказал, но могу точечно на вопросы отвечать ;). пока не было фич, которые уходили за 15 md (человеко дней)ну если у нас онбординг на 3 экрана, в котором есть поля, которые ведут себя по-разному, то вряд ли комфортно в трекер что-то описыватьну я в целом в треде все описал, как у нас выглядят процессы работы с фичами. после написания, prd:1 оно проходит проверку и утверждается2 отдается дизайнеру (если надо, проходит созвон)3 дизайнер предлагает варианты, они утверждаются и добавляются в prd4 в prd добавляется аналитикапосле этого фича подготовлена. когда каждый из нас работает над каким-то набором задач, то может указать соответствующую сортировку, создать свой view и быстро обращаться к текущем задачам. одной из топовых фич таблиц в notion являются views: когда вы выводите не всю таблицу, а только определенные отфильтрованные и отсортированные критерии. если у задачи есть связанные с ней задачи, то мы часто делаем кросс линкинг через указывание related tasks. у нас qa в команде только появился, поэтому пока в проектировании фич не участвоваетпро то, как мы тестировали до этого расскажу в 5-ой части тут:. вторая таблица описывает пользовательские свойстваесли вы не знаете в чем их разница от событий, то можете почитать тут:. таблциа аналитики разделена на 2 (events и person propeies):в первой:1 название эвента2 поля у эвента3 описание эвента (если нужно) и описание полей4 статус реализацииps showed/closed эвенты работают из коробки на клиентах. вот тред про prd и notion:. заметки никак не регламентируются, и у нас проблем с этим не былостатус важен, чтобы в старых задачах, разработчик видел, что появилось нового (у компонента будет тэг new) или чтобы коллекционировать идеи, которые мы не готовы реализовывать прямо сейчас (тэг future). у requirements есть 4 основные колонки: 1 что за компонент фичи2 его описание3 заметки (например, что длинна вода ограничена 120 символами или как ведет себя компонент)4 статус компонента (у нас 3 состояния: new, implemented, future). у нас в этом плане все относительно просто: мы стараемся подготавливаем фичи за спринт до разработки. background and strategic fit: чтобы было понятно, почему мы делаем (например, подсмотрели у конкурента, юзеры попросили, должно повысить такую-то метрику и тп) полезно заполнять, в первую очередь, для самого продуктаrequirements: табличка с требованиями по фиче. проговорю про каждое поле отдельно:image: ссылка на zeplin/abstract, заполняются в будущем после того, как дизайнер подготовит ихgoals: кратко описывает, что хотим сделатьkey metrics: обычно для дизайнера, чтобы понять на чем делать акцент, но часто пропускается. вот как выглядит экран после применения шаблоназа основу мы взяли: модернизировали под себя. теперь непосредственно создании фичи, мы используем темплейты в notion, все это выглядит так:. 3 про подготовку материалов (prd, дизайн, аналитика):ps в треде есть notion. 4 статус подготовки prd и выполнения фичи5 ответственный за фичи (к кому обращаться)6 и 7 ответственный за аналитику и кто реализовал (второе полезно, когда есть вопросы по отслеживанию, с ведением 7 у нас пока сложности). у нас следующие колонки:1 название фичи2 ее категория (приложение, сервер, админская панель, утилитарная фича)3 типы, может быть несколько (части приложения, удобно для объединения фич в одну группу, про это напишу позже). после обсуждения и утверждения, начинается формальная часть, заполнение prdдля фич мы используем таблицу в notion, вот пример с одним из view (об этом я скажу чуть позже):. созвоны у нас проходят следующей командой:1 я (выступаю в роли продуктового менеджера и делюсь инженерным опытом)2 project manager (который берет на себя часть функций продукт менеджера)3 один из кофаундеров, который отвечает за тех направлениеиногда и сео приходит. во время первого этапа мы идем в features draft и кратко описываем, как мы видим фичи, буквально драфтможно и сплошным текстом можно и табличками, как кому удобноформат не важен, тк все это будет рассказываться во время созвона при обсуждении фичи. у нас в notion есть 4 главных раздела для работы с фичами:1 в целом карта приложения, чтобы ориентироваться (она у нас уже устарела, но надо будет обновить, если будут новые участники)2 таблица фич3 драфты фич4 сложные фичи связанные исключительно с аналитикой. подготовка фичи проходит следующий цикл:1 описание идеи2 созвон, обсуждение и утверждение3 описание формального prd и сверка с разработкой4 подготовка и утверждение дизайна5 дополнение prd аналитикой6 отправка в реализацию. сегодня поговорим одну из самых важных частей – подготовка материалов)написание prd, обсуждения, подготовка аналитики, дизайн и все такое. параллельно зайти в социальный e-commerceну а с самим рынком beauty у нас занимается бизнес команда, они ближе к конечному потребителю (в бизнес команде все девушки, кстати), общаются с инфлюенсерами, ведут соц сети и тп. в beauty сейчас цикл покупки очень сложный:либо офлайн, с консультантом, либо онлайн:1 подписываешься на людей с похожим типом кожи/волос/тп2 когда видишь продукты, идешь смотреть обзоры на youtube3 только потом заказываешьвот и решили упростить этот цикл. и решил делать такой продукт на европейский рынок, сначала мы думали пойти по направлению fashion и делали первый прототип в этой сфере, но чем больше мы общались с разными людьми (включая инвесторов), собирали фидбек и тп, тем больше понимали, что у другой сферы спрос больше. ну вся идея берет начало (как и любая) от прошлого опыта фаундеров, один из них был ceo в lazada (это какой большой e-commerce в азии) в тайланде, когда его купила алибаба, многих отправили по разным направлениям, вот наш фаундер анализировал феномен социального e-commerce. не всегда можно разделить эти 3 задачи на два спринта + мы заметили, что спринты чередуются, один – пуш, другой более расслабленный (иногда надо улучшить что-то с предыдущего спринта), отсюда ставить два пуш – не очень удобно. если на пальцах, то у нас есть, скажем, 3 приоритетные задачи, хотим прям в 1 релиз сделать, а суммарно они занимают 40 md на ios (из доступных 20 на фичи в неделю) значит делаем спринт 2 недели а следующий неделю, потому что надо будет замерять цифры, что-то улучшать и тп. вот пример планирования спринтов. для такой активности не требуется определенных инструментов, мы ведем все подсчеты в google sheets (довольно быстро и удобно), а переносим получившиеся задачи в отдельные project в asanaя показал пример тут:. важно сказать, что в результате такой активности получается 3-5 спринтов. 3 распределяем по свободным слотам (конечно же все хотелки не влезут в 1 спринт)4 выбираем, что и куда подвинуть из задач. 1 пытаемся понять, что нам важно сделать быстрее всего из родмапа (обычно приоритизация приходит напрямую от сео)2 думаем как можно внедрить эти фичи быстрее всего (у нас была задача, которую оценивали в 25 md, а мы придумали как проверить гипотезу за 3 md, расскажу на днях. tl;dr делегируем настройку правила на когорты (что кому слать) бизнес команде + есть всякие автоматические пушисчитай чтобы не писать свою админку для пушейя чуть больше сегодня/завтра расскажу. 1 про родмап:. 2 про планирование на ближайшее время:. после того, как у нас есть понимание, что будет в спринтах, мы делаем корректировки:скажем мы планируем спринт 2 недели, у нас есть 30 md (man days) на ios и столько же на backend из них 20 на фичи. про продуктовые процессы:. сегодня или завтра будет, пришлю суда ссылку на тред, как начну про notion). после этого идет оценка сложности реализации каждой функции, идеи как сделать ее как можно быстрее и тпс этого момента у нас есть план на ближайшее время, который разделен на спринты разной длинны (от 1 до 25 недель)по окончанию каждого спринта надо выпускать новую версию. как результат, раз в 15 месяца (ну иногда и динамично) мы выбираем себе направление, чтобы мы хотели добавить в продукт выбор базируется на:1 решениях конкурентов2 креатива (придумываем сами) направленного на определенные метрики3 фидбека от пользователей. еще одним источником вдохновения являются сами пользователи:1 мы опрашиваем наших амбассадоров и лояльных пользователей2 раз в 2 месяца мы проводим ux интервью со случайными людьми, которые еще не пользовались нашим приложением3 мы ищем аномалии в метриках. на конце каждой ветки есть ссылка на соответствующую диаграмму в amplitude (а для каждого направления есть отдельные дашборды)повышение главной метрики идет за счет работы с каждым из узлов, отсюда и задача придумать фичи продукта, которые повысят метрики одного из этих узлов. вот пример куска:мы целимся в увеличения ретеншена, на него влияют:работоспособность, интерес пользователей и тдна интерес влияет:разнообразие, возможность найти контент, его качество и тдна разнообразие: кол-во нового контента, ретеншен инфлюенсеров и тд. - вторым важным моментом в составлении родмапа являются ваши ключевые метрики: для нас (как и большинства) это retention, но есть очень много листьев, которые влияют на негоps единственной доской, что мы сделали в miro, является доска наших метрик. нас вполне устраивает, удобно, что формируется в формате списка (слышал trello месяц назад что-то такое ввели), нет перегруженных компонентовведем спринты, как отдельные projectы, каждая команда применяет на себя фильтры и видит что и к какому дню надо сделать в текущем спринте. это позволяет следить за их вектором и подсматривать какой-то функционал у конкурентов пока вы ищете свою нишу, копирование успешных решений позволяет быстрее понимать, а что же подойдет вашим юзерам. 3 какой функционал они выставляют напоказ (догадка о ядре продукта)4 обсуждения, что у них менялось последнее времятак же у нас есть отдельная таблица, где мы смотрим, какие пользовательские юзкейсы есть у нас и наших конкурентов. 1 размер их команды, инвесторы, инвестиции, фаундеры (это позволяет понимать роль конкурентов)2 сколько загрузок в месяц (у нас нет возможности платить за дорогие сервисы, поэтому раз в месяц смотрим тут:. для формирования родмапа вам в целом не нужны сторонние инструменты, но хорошо сделать следующие вещи:- собирать табличку с конкурентами (в notion или google sheets), в зависимости от их отношения к нам мы моторим следующие вещи:. начнем с самого важного: флоу выстраивания разработкиесли разбить на этапы:1 что вообще нужно (родмап)2 что понадобится ближайшее время (планирование)3 подготовка и одобрение материалов: prd, дизайн4 передача всего этого в разработку5 тест и релиз6 анализ. в итоге просто сказал, что отвечаю на все вопросы только в slack (и попросил разработчика сделать так же)уже через неделю все переписывались только там). про мотивацию, у меня есть веселая история когда мы только начинали и нас было 5 человек (из которых 2 фаундера), то общение было в whatsapp/telegram, что было очень неудобнозарегал slack, но все продолжали писать в старых мессенджерах. сегодня поговорим про наши продуктовые процессыу нас команда небольшая (в технической 9 человек + фрилансеры), и всех инструментов, про которые я расскажу сегодня, нам вполне хватает, чтобы искать свой рынок, решать задачи менеджмента и растить метрикивот самые основные:. 2 не играйте в толстого (не того, о ком вы подумали) и не пишите лонгриды в prd: только важное и по-делу, в идеале выделяйте жирным важные детали и разделяйте на пункты логические компоненты (завтра я буду про это говорить). про конфликт бизнеса и тех команды:. про майндсет (продуктовый vs маркетинговый):. про то, почему юзеры не сами дураки:. про то, почему хаки влияют на всю индустрию. про подписки:. поэтому советую следовать следующим двум правилам:1 валидируйте дизайн очень внимательно, он должен отображать весь prd (например, если текст может быть в несколько строк, не одобряйте дизайн, где во всех ячейках однострочный текст или если в дизайне нет zero-состояний). синьер разработчики еще могут позволить это делать (в угоду скорости разработки, конечно же), а вот остальные, скорей всего, буду опираться на дизайн, а prd просто пробегут глазами (особенно если там много букаф)примите и смиритесь с этим. теперь про некачественное чтение prd разработчиками: есть еще одно когнитивное искажение (не помню как зовут зверя), когда мы что-то создаем (продакт пишет prd), нам кажется, что все должны внимательно это изучить (ну как, мы же потратили свое время)но это, конечно же, булщит. в целом проблему паники со стороны фаундеров я встречал очень часто (не реже слышал про нее от знакомых), как мне кажется, характер людей из тех сферы слишком мягкий, чтобы противостоять этим паникам и контролировать процессы, поэтому именно продуктологу стоит брать удар на себя. большинство багов (даже если ceo кричит, как он опозорился на встрече, показывая приложения) стоит отправлять на ту прекрасную доску, которая позволяет тратить резервное время в конце спринта (или набора фич, если у вас другой стиль работы). поэтому важно думать прагматично, если вы стартап и у вас падает у 05% юзеров (но у вас всего 400 dau), не стоит заставлять разработчиков бежать и править все в 4 ночи 2 падения за ночь не стоят того, что разработчик задумается искать новое место работы или выработает иммунитет. одно можно точно сказать, баги будут всегда, даже если вы badoo или facebook и у вас небольшая фича может пару месяцев разрабатыватьсябаги можно минимизировать, вводя разные виды обеспечения качества (тесты, наем qa, прописанный релизный цикл), но ценник растет экспоненциально. второй проблемой являются баги оно и понятно, баги на клиенте, баги в аналитике, баги на бекенде и тп – это баги разного рода, разной частоты, да и понятие бага растяжимое, поэтому бизнес может супер по-разному реагировать на появляющиеся баги. лучшим решением данной проблемы будет:резервирование дополнительного времени в спринте на тех долг и некритические баги если разработчики уложатся в срок, то они смогут этим заняться, а если нет, то у вас будет резервное время и никто не будет лишний раз нервничать. и тдможно, конечно, просить везде приписывать x15 (и опытные разработчики, переодически, так делают), но тогда часто будет оверестимейты, а разработчики будут смотреть видосы с котиками из-за низкой нагрузки. но со стороны разработки тут сразу 3 проблемы:1 разработчики оценивают задачи без учета, следующий факторов:- нужен срочный созвон- тут что-то сломалось, посмотри- а посмотри, как у нас в коде как это трекается- а это обычный дейли- а сегодня разработчик идет к зубному. бизнесу кажется, что разработчики должны уведомлять заранее, если сроки сдвигаются если фичу нужно доработать, то разработчик тоже запросит срок заранее а prd ( читается очень внимательно. 2 бизнес получает не то, что ожидает например, часть фичи реализована не так, как ожидалось или сроки сдвинулись, или какой-то критический баг нашелся и большая часть пользователей страдает от него. но я бы выделил основной спектр проблем:1 разработчики чувствуют давление со стороны бизнеса (давят по срокам, возникают неожиданные созвоны, жалобы на мелкие баги, рабочие сообщения по вечерам). и такое происходит со всеми из нас, если что-то работает не так как мы хотим: бизнес не выделяет ресурсы на улучшение кода, хотя разработчики просили или разработчики не укладываются в срок (или делают не так, как было написано в prd). но в книге так же утверждалось, что когда другим студентам рассказали про то, что кто-то помог, а кто-то не помог страдающему человеку, то большинство студентов сразу оценило характер людей из эксперимента, как добрый/открытый и злой/эгоист. раз остается 5 минут, то поделюсь правильным ответом: 10% и 60% соответственноисследование: (страница 105)а кейс взял отсюда: richard nisbett mindware. было исследование, в которым людям надо было сходить прочитать лекцию одной части говорили, что они опаздывают, а другой, что у них еще есть времяпо дороге был человек, которому явно нужна была помощькак вы думаете, сколько % в каждой группе остановились помочь?. ну если забегать вперед, то корень всего некая фундаментальная ошибка атрибуции: если люди ведут себя не так, как мы ожидаем (или вели бы себя сами), то мы считаем, что это проблема с характером людей (а в жизни почти всегда это внешние факторы). сегодня мы обсудим взаимодействие бизнес и тех команд в стартапах (в крупных компаниях, обычно, все уже выстроено)для меня последние полгода это самая большая боль, но у меня есть плюс: я побывал с двух сторон баррикад и понимаю каждую. а дальше продакт пытается придумать какие хаки и фичи сделать, чтобы достигнуть эту цель (увеличить метрику)те может у продакта в голове и 100-и идей, но делать ему надо то, что сейчас важно для бизнеса, каким бы скучным или неправильным это не было бы. ну вот как показал мой опыт, многие продукты не отвечают за глобальную идею у них есть kpi на полгода (например, если доставка еды, увеличить средний чек, увеличить шанс, что зашедший человек закажет или клики на уведомления). тут есть ответ. разнообразие только в продукт - скучно, только в growth hacking - через некоторое время перестаю понимать что делаю интересно комплексно всем заниматься бизнесом, строить бизнес-систему, но чтобы делать это полноценно, видимо надо стать cpo или своё запилить. решение проблем (он же траблшутинг) - нет ничего лучше чувства, когда что-то приносившее боль теперь приносит удовольствие, и это удовольствие видно на лицах пользователей к тому же это достаточно общая категория, потому что разные проблемы требуют разных подходов. интерес к людям, которые всем этим пользуются и погружение в их жизнь/причины поведения и вот это все. а вы понимаете себя?что вас больше драйвит?если варианты не очень, пишите свои предпочтения в работе над продуктом, вдруг это радикально изменит чью-то карьеру? ;). 4 попробовать сделать пет проект (или полноценный стартап), понять каким задачам уделяешь больше всего времени, а что раздражает5 спросить коллег как они видят вас, что их восхищает в вас6 подумать чем вам нравилось заниматься много лет назад и какие у вас сейчас хобби. мне, например, очень близки ценности нетфликса очень хорошо понимаю, почему они избегают отображения рейтингов для фильмов)3 менять работу раз в несколько лет, не бояться терять в зарплате, особенно если еще обязанностей нет. но как же определиться? тут нет однозначного ответа, но я бы советовал:1 записывать какие задачи на работе делать комфортно, а какие нет, попробовать найти зависимость2 сформировать принципы и ценности (тут нельзя нет посоветовать рея далио), выбирать сферу по ним. в итоге спустя время этот парень ушел в один лондонский стартап от топов из airbnb и сразу жизнь заиграла новыми красками, рассказывал как там крутоя еще тогда сделал вывод, что очень важно искать то, что тебе по стилю работы ближе. но важно понимать, что оба направления важны для развития индустрии, главное понять что ближея знал парня, который работал продуктовым менеджером в крупной компании, неплохо справлялся со своими обязанностями, но каждую пятницу рассказывал нам, что рынок катится куда-то.  а вообще горячо рекомендую ознакомиться с темой, тк она полезна в целом (не только в работе) у господина ханина есть хороший курс видео:. я в нем вижу идею того, что вектор компании могут задавать 2 лагеря:1 те, кто оптимизируют все – они гарантируют стабильный пошаговый рост, но это люди с маиндсетом продажников и маркетологов2 те, кто выпускают что-то новое, но они не нужны монополиям, не дают стабильный рост. это иронично, что слово ctr от продуктовых менеджеров последнее время можно услышать очень часто, а вот википедия пишет, что это метрика в интернет-маркетинге. ну тут можно бесконечно гадать) как вариант: маркетолог позволит компании дожить до нового радикального инноватора или, хотя бы, не даст людям, которые выстроили компанию, потерять свои места. придумать механику, чтобы нарастить ретеншен (например геймификация), придумать какой пуш увеличит ваши метрики и получил лучшие ctr и тпвы отчитываетесь перед руководством за рост, а не за инновации. если вы работаете в крупной компании, скорей всего у вас ближе ко второмувас не заботит, можно ли перестроить сервис (да вам этого и не дадут сделать), вам надо будет запустить a/b тест на лучший экран акции, подумать как внедрить платежку партнера. поэтому доходность платных игр на мобилках даже лучше, чем это было лет 6 назадхотя логично, что если лезть во фри ту плей, то сможешь купить себе яхту). ну это же как с free to play играми: массе легче качать бесплатные игры, даже если потом из них много денег вытянутно адекватные игроки (и игроки старой школы) почти никогда не качают бесплатные игры со встроенными покупками. да, я как раз обсуждаю этот феномен тут:. сегодня будем обсуждать майндсет: продуктовый vs маркетинговыйвброшу такой видос из интервью с джобсом. тоже работают только на*. ну bear и ulysses из моего примера тоже работают на эпловой инфраструктуре)кто-то вообще сейчас делает продвинутый кроссплатформенный инструмент заметок?. причем цены у парикмахера или в магазинах изменились (два примера) не сильнотогда вопрос, а что же случилось с экономикой приложений? и является ли эта трансформация здоровой?. но 6 лет назад такое приложение взяло бы 5-10$ и все, и им бы хватило на развитие и зарплаты а сейчас таким приложениям нужно по 3-5$ в месяц (а не раз в 3-4 года, как раньше выпускали новую мажорную версию, а старую не отнимали). ну вот things пока еще успешно избегали подписочную модельно тонкость в том, что возьми какой-нибудь bear/ulysses, еще лет 6 назад приложения умели не сильно меньше, а 1-е для синхронизации, кажется вообще icloud используют. так же у нас есть небольшой штат своих инфлюенсеров, которые работают на платформе их задача создавать качественный контент, который мы показываем в приоритете. каждый день можно получить товары партнеров за эти монеты (но надо быть достаточно активным)в целом монеты даются за много разных активностей, включая взаимодействие с чужими роликамиэто создает просто бомбический ретеншен и энгеджмент от создателей контента. мы запартнерились с брендами, которым интересно раздавать свои товары (в beauty это нормально, тк если тебе понравится, ты будешь покупать один и тот же товар n раз в год)ввели механику монет на платформе, что позволяет авторам контента зарабатывать их. возвращаясь к вопросам: мы сейчас тестируемся на рынке uk в сфере beauty, но планируем приоритетно захватывать европу (в сша уже есть похожие игроки, но они только растут)для привлечения и удержания авторов есть другая механика, о ней сейчас расскажусс. в китае уже на лайвстримах умудряются продавать товаров на сотни тысяч зеленых, а вот в сша и европу тренд только идетчто такое e-commerce: роста red в китае:. это дает 2 основных преимущества:1 контнет драйвит покупки (больше привлекательности, больше информации, люди получают комиссию)2 в социальных сервисах ретеншен всегда очень хороший, а значит это стимулирует частые покупки. для тех, кто вне контекста:social e-comm – это направление, когда у вас ядро магазин (с категориями, брендами и тп), но поверх его много социальных механик, таких как ugc (контент, который создают юзеры), лайки, комментарии. 4 морализация контент провайдеровредизайн app store в ios 11 открыл новые возможности, теперь редакторы apple составляют рекомендации того, что юзерам качатьвот только среди этих рекомендаций очень часто оказывается прибыльный мусорхотя качественного контента там тоже много. 3 работа с возобновляемыми подпискаминапример, если пользователь не посещает сервис, то зачем его чарджить?тут сложности в том, что если у сервиса есть сайт, то юзер может просто не использовать мобильно приложение но это техническая сложность. я это вел к тому, что можно сколько угодно говорить, что люди сами дурачки, но если общество не будут направлять люди с чувством соц долга, то это общество очень быстро загнется)в рамкам цифровой экономики это тоже работает). нет, в германии не живут очень плохие люди, как можно было подумать просто в германии, нужно подписаться, чтобы донатитьа в бельгии отписаться, чтобы не донатить. мой любимый кейс к этой теме: донорство органов. 2 улучшение опыта trialнапример, что после 3/7 дней триала у тебя не списывают деньги без дополнительного подтвержденияэто сильно снизит доход шлаковых приложений, тем самым улучшит баланс на рынке рекламы/кадров/фичеринга/топов. 1 единое крыло распределения контента (хороший пример sony и ее эксклюзивы те прекрасные игры с one time payment уживаются с pay to win шлаком)на macos хороший пример для меня setapp. подписки вряд ли от нас уже уйдут, но если бы я выстраивал идеальный мир, то работал бы над следующими направлениями:. ну caml уже в лярд не оценивают) а по привлеченным деньгам headspace calm. ну и гуглу, и эпл выгоднее их показывать на главной странице, потому что 30% на дороге не валяется). вероятно вы бы делали свое приложение и продавали за 20$, вам хватало на маркетинг, на зарплаты, вас фичерят в app store и google playно когда у вас на рынке гороскопы, которые гребут по 2 мульта в месяц, они могут позволить повышать рынок зарплат, перебивать маркетинг ауки. в итоге через какое-то время он останется один на рынке, может даже цены поднимет)в целом так часто действовали монополии, привет at&amp;t, мягкие и 2020но подписки для меня ровно так же ломают экономику некогда здорового рынка. но тут у конкурента заканчивается территория, ему перестает хватать клиентов, но тк его продукция дешевле и он явно не очень моральный товарищ, то он начинает скупать всю вашу землю, заказывает на вас негативную рекламу и тп. тут ваш конкурент открывает стероиды, гормоны роста и прочие приколы, начинает пихать им, получаете куда больше некачественного мяса и продает за 30$в целом пока все еще окей, кто надо покупает качественное мясо, кто не надо, некачественное. попробую объяснить его на пальцах:у вас есть луг, у вас хорошие коровы, вы добываете молоко и мясо, продаете за 50$ в целом это хорошее молоко и все окей. тут образовался довольно интересный тредв целом кажется все логично, надо финансировать разработку, считать юнит экономику и вообще хорошие ребята не положат себе лишние деньги в карманно как всегда есть свои нюансы. так я же в треде показал приложение из палок с доходом 2 мульта в месяц, не хотелось бы жить в мире, где все сферы захвачены такими приложениями и они перебивают аукционы, выкупают патенты, агрессивно захватывают рынокps а с чего ты взял в 5 раз?. да можно что-угодно, хоть рабами торговать, хоть ставки развивать)но надо думать как это будет в долгосрочную на индустрию влиять америка последние 200 лет не просто так по очереди вводит регулирование во все сферы. эх, если бы был простой ответно было бы интересно послушать мнение аудитории, а я свое под вечер выскажу :). ну вот можно скачать calm и headspace и сравнить, кто нацелен на продукт, а кто только на деньги)так что оправдание в стиле: ну люди такие, а не мы, так себе). да, так всегда, для этого есть отдельные джедайские техники – делать то что нравится, а не то что кажется полезным) но все же есть инструменты для поиска этого нравится. а вот видос, очень доооолгий. если кто-то вне контекста, как примерно это работает, то вот вам пример приложения, что зарабатывало 2 ляма год назад (судя по сенсор тауер). но это не сильно работаетзапросил у знакомого скрин по месячным подпискамговорит на 3-ий месяц дай бог 10% чарджихся использует (это 15%), а вот платят 15%это рынок сшаеще прикольно, что 75% заряджаных приносят ему в год 20$ * 12 = 240$ без использования приложения. правда в ios 13 эппл немного напряглись и усложнили процедуру:. не ругайте за скрин, если бы я сюда из a повесил, у меня бы были сложности). это приложение, у которого на момент статьи был ретеншен 2-3% 30-го дня, судя по выгрузки из интересных сервисов) 7-го дня не сильно выше был (в лучшие месяцы 4%), кстати. ну не буду долго таить, это calm, когда-то его оценили в 1 миллиард долларов. тоже правильный ответ). примеры отзывов картинкой. я пришел из мобилки и в какой-то момент эту сферу захватили подписки, на мой взгляд это даже своего рода легальный обманвот вам головоломка: если сильно не вчитываться в комментарии, то какое приложение на видео?. в нем анализируется что же может влиять на человека:1 вспомнить заповеди – уменьшит читерство2 давать виртуальные монеты, как промужуточную награду, которую уже потом можно менять на реальные деньги – увеличит читерство. а вообще к теме использования разных хаков для личного преимущества есть отличный документальный фильм:. на днях увидел такой прекрасный постер, который был в журнале life 1970 к тому времени уже было достаточно понимания насчет влияния сахарастатья:. вообще практика применять какие-то трюки пронизывает почти любую сферу со временем, как только в ней появляются игроки, которые используют допинг другой вопрос, будет ли это направлено на вас лично (как допинг в спорте) или на потребителя (как лозунги в рекламе). давайте начнем с опроса, как много инструментов в вашем продукте, которые вы считаете не совсем правильными по отношению к юзеру, но важными для роста продукта?. топ, прям в тему 1-го дня). сегодня день моралиста, а значит мы обсудим: подписки, рекламу, манипуляцию метриками, создание крючков, провокационный контент (желтые заголовки, вызывающие картинки и тп), демпинг услуг и прочее, про что большинство продуктов прекрасно знает). да, это тоже попытка гугла войти в социальный e-comесли есть доступ к статьям на bloomberg, можно начать с этой стать:. ну и, конечно же, буду рассказывать про социальный e-com в китае он уже улетел в космос, а вот в европе и сша его только хотят привести на рынок успешных купит амазон/fb/google за много денех, ну или они сами станут будущем амазоном). пт: технологический бекграундсб: что если мир развалится? а где, собственно, инновации?вс: отдых или общение. чтобы внести разнообразие в контент, решил построить провокационный план недели:пн: моральная сторона продуктового менеджментавт: продуктологи vs маркетологи (в процессах принятия решений)ср: взаимодействие бизнес и тех команд в стартапахчт: наши продуктовые процессы. 3 года назад решил запустить свой нетфликс для текстовых игр, вышло интересно и принесло 300к установок, но не росло, поэтому я пошел работать в стартап к бывшим фаундерам lazada и теперь работаю продуктовым менеджером в нем адаптируем социальный e-com:. всем привет, на этой неделе с вами александр зиминя в прошлом мобильный разработчик, провел в карьере разработчика 7 лет работал от контрактов и стартапов, до крупных компаний, таких как badoo, но почти всегда интересовался продуктовыми вещами.  : через две недели веду хочу рассказать про kotlin как продукт, developer experience, подтягивание технических знаний для продактов, разработку внутренних продуктов и всякие похожие штукио чем еще рассказать? что конкретно про работу над kotlin интересно?. в целом путь от маркетолога к продакту появился благодаря желанию понять цели бизнеса и научится управлять проектами и создавать свои продуктыпродолжу вечером жду ваши вопросы и уточнения. следующие два года я провел в маркетинге, активно используя свои навыки в управлении проектами и учился вести бизнес. по сути в яндексе я во много исполнял роль продакта и проджектаследующим этапом мы с товарищем пилили свой стартап в голосовых технологияхно по личным причинам и вопросам здоровья, я покинул проект. - каким бы крутым не был эксперт, проси защиту его мнения - ошибаются все, платят за это исполнители и клиенты - люди хотят не то, что им нужно. - если есть чувствуешь, что оценка плавает - декомпозируй до упора - не можешь написать рыбу пресс-релиза нового фичи/продукта маркетингу - вернись назад и снова продумай фичу/продукт - желая перегнать, не забудь о том, что надо догонять. - всегда задавай вопрос а зачем?, в первую очередь себе - не говори нет, спрашивай а зачем? что нам это даст? - когда бежишь за баблом, все равно останавливайся для добра. в яндексе я научился нескольким важным вещам:- ставить задачи исходя из требований бизнеса, а не своих ожиданий возможностей команды - тестируй, тестируй, тестируй! - исследования слишком часто врут, поэтому тестируй - пугают точные цифры, смотри на относительные. в 11 году осенью, я понял, что устал от клиентского бизнеса и решил попробовать себя в другой сфере и пошел попробовать себя в яндекс и мейлк своему удивлению, я быстро попал в яндекс и оставался там чуть больше двух лет. с 10 по 11 год побыл директором департамента по сео, маркетингу, побыл продуктовым аналитиком в онлайн кинотеатре и вернуться в seoмежду делом научился нормальному управлению проектами, продажам и еще трем каналам маркетинга. далее в 2009, я стал чистым сеошником в - тогда это была крутейшая контора в какой-то момент я также стал медиа-планером, ввел всю статистику по проектам и научился хорошо понимать, что хотят клиенты на входе и реально хотят в процессе работы. в 2008 я переехал из питера в мск и решил попробовать себя главным по сайтам в одной торговой компании опыт был хреновым и компанию убил своей жалобой в трудовую но тогда у меня появилась привычка все переводить в деньги и считать эффективность в них. в сферу я попал в 2007 году - пришел на должность копирайтера в ра медиасфера (символично)за год я успел стать младшим сеошником, техническим дизайнером, верстальщиком и в какой-то момент вел проект. всем добрый день! выдался свободный момент и решил запулить небольшой тред о том, как я вообще пришел в продуктыкаждый твит - короткий период времени ты ждал). практика показала, что лучше приходить к команде с историей, а не отдельным задачамиа как поступаете вы и почему?. каждое утро я уделял минут 15 на проверку ситуации с задачами обычно такие бросаются в глазаперед weekly внимательно все изучал, чтобы разговор был конструктивный но это больше история про проджектов, а не продактов но часто роли совмещаются. проставляешь лейбл, зависящий от входящего статуса как называть их - это уже решение команды у нас в одной команде реопены из закрытых называли воскресший, хотя говорили про них зомбаки. самоорганизующиеся команды - это один из успешных принципов работы цеховыхмой посыл был в том, что в чистом скраме, ты бьешь себя по рукам иногда, чтобы не лезть не в свою работу когда в большинстве других вариантов ты оркестр